var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = {exports: {}}).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// node_modules/js-cookie/src/js.cookie.js
var require_js_cookie = __commonJS({
  "node_modules/js-cookie/src/js.cookie.js"(exports2, module2) {
    (function(factory) {
      var registeredInModuleLoader;
      if (typeof define === "function" && define.amd) {
        define(factory);
        registeredInModuleLoader = true;
      }
      if (typeof exports2 === "object") {
        module2.exports = factory();
        registeredInModuleLoader = true;
      }
      if (!registeredInModuleLoader) {
        var OldCookies = window.Cookies;
        var api = window.Cookies = factory();
        api.noConflict = function() {
          window.Cookies = OldCookies;
          return api;
        };
      }
    })(function() {
      function extend() {
        var i = 0;
        var result = {};
        for (; i < arguments.length; i++) {
          var attributes = arguments[i];
          for (var key in attributes) {
            result[key] = attributes[key];
          }
        }
        return result;
      }
      function decode(s2) {
        return s2.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
      }
      function init2(converter) {
        function api() {
        }
        function set(key, value, attributes) {
          if (typeof document === "undefined") {
            return;
          }
          attributes = extend({
            path: "/"
          }, api.defaults, attributes);
          if (typeof attributes.expires === "number") {
            attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e5);
          }
          attributes.expires = attributes.expires ? attributes.expires.toUTCString() : "";
          try {
            var result = JSON.stringify(value);
            if (/^[\{\[]/.test(result)) {
              value = result;
            }
          } catch (e) {
          }
          value = converter.write ? converter.write(value, key) : encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
          key = encodeURIComponent(String(key)).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent).replace(/[\(\)]/g, escape);
          var stringifiedAttributes = "";
          for (var attributeName in attributes) {
            if (!attributes[attributeName]) {
              continue;
            }
            stringifiedAttributes += "; " + attributeName;
            if (attributes[attributeName] === true) {
              continue;
            }
            stringifiedAttributes += "=" + attributes[attributeName].split(";")[0];
          }
          return document.cookie = key + "=" + value + stringifiedAttributes;
        }
        function get(key, json) {
          if (typeof document === "undefined") {
            return;
          }
          var jar = {};
          var cookies = document.cookie ? document.cookie.split("; ") : [];
          var i = 0;
          for (; i < cookies.length; i++) {
            var parts = cookies[i].split("=");
            var cookie = parts.slice(1).join("=");
            if (!json && cookie.charAt(0) === '"') {
              cookie = cookie.slice(1, -1);
            }
            try {
              var name = decode(parts[0]);
              cookie = (converter.read || converter)(cookie, name) || decode(cookie);
              if (json) {
                try {
                  cookie = JSON.parse(cookie);
                } catch (e) {
                }
              }
              jar[name] = cookie;
              if (key === name) {
                break;
              }
            } catch (e) {
            }
          }
          return key ? jar[key] : jar;
        }
        api.set = set;
        api.get = function(key) {
          return get(key, false);
        };
        api.getJSON = function(key) {
          return get(key, true);
        };
        api.remove = function(key, attributes) {
          set(key, "", extend(attributes, {
            expires: -1
          }));
        };
        api.defaults = {};
        api.withConverter = init2;
        return api;
      }
      return init2(function() {
      });
    });
  }
});

// node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "node_modules/tslib/tslib.js"(exports2, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports3) {
          factory(createExporter(root, createExporter(exports3)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports3, previous) {
        if (exports3 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports3, "__esModule", {value: true});
          } else {
            exports3.__esModule = true;
          }
        }
        return function(id, v) {
          return exports3[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s2, i = 1, n = arguments.length; i < n; i++) {
          s2 = arguments[i];
          for (var p in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p))
              t[p] = s2[p];
        }
        return t;
      };
      __rest = function(s2, e) {
        var t = {};
        for (var p in s2)
          if (Object.prototype.hasOwnProperty.call(s2, p) && e.indexOf(p) < 0)
            t[p] = s2[p];
        if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
              t[p[i]] = s2[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          });
        }
        return new (P || (P = Promise))(function(resolve2, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = {label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: []}, f, y, t, g;
        return g = {next: verb(0), "throw": verb(1), "return": verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return {value: op[1], done: false};
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return {value: op[0] ? op[1] : void 0, done: true};
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, {enumerable: true, get: function() {
          return m[k];
        }});
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s2 = typeof Symbol === "function" && Symbol.iterator, m = s2 && o[s2], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return {value: o && o[i++], done: !o};
            }
          };
        throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error3) {
          e = {error: error3};
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
          s2 += arguments[i].length;
        for (var r = Array(s2), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
          to[j] = from[i];
        return to;
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve2, reject) {
              v = o[n](v), settle(resolve2, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve2, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve2({value: v2, done: d});
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", {value: raw});
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", {enumerable: true, value: v});
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : {"default": mod};
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    });
  }
});

// node_modules/@firebase/util/dist/index.node.cjs.js
var require_index_node_cjs = __commonJS({
  "node_modules/@firebase/util/dist/index.node.cjs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    var tslib = require_tslib();
    var CONSTANTS = {
      NODE_CLIENT: false,
      NODE_ADMIN: false,
      SDK_VERSION: "${JSCORE_VERSION}"
    };
    var assert = function(assertion, message) {
      if (!assertion) {
        throw assertionError(message);
      }
    };
    var assertionError = function(message) {
      return new Error("Firebase Database (" + CONSTANTS.SDK_VERSION + ") INTERNAL ASSERT FAILED: " + message);
    };
    var stringToByteArray = function(str) {
      var out = [];
      var p = 0;
      for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        if (c < 128) {
          out[p++] = c;
        } else if (c < 2048) {
          out[p++] = c >> 6 | 192;
          out[p++] = c & 63 | 128;
        } else if ((c & 64512) === 55296 && i + 1 < str.length && (str.charCodeAt(i + 1) & 64512) === 56320) {
          c = 65536 + ((c & 1023) << 10) + (str.charCodeAt(++i) & 1023);
          out[p++] = c >> 18 | 240;
          out[p++] = c >> 12 & 63 | 128;
          out[p++] = c >> 6 & 63 | 128;
          out[p++] = c & 63 | 128;
        } else {
          out[p++] = c >> 12 | 224;
          out[p++] = c >> 6 & 63 | 128;
          out[p++] = c & 63 | 128;
        }
      }
      return out;
    };
    var byteArrayToString = function(bytes) {
      var out = [];
      var pos = 0, c = 0;
      while (pos < bytes.length) {
        var c1 = bytes[pos++];
        if (c1 < 128) {
          out[c++] = String.fromCharCode(c1);
        } else if (c1 > 191 && c1 < 224) {
          var c2 = bytes[pos++];
          out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
        } else if (c1 > 239 && c1 < 365) {
          var c2 = bytes[pos++];
          var c3 = bytes[pos++];
          var c4 = bytes[pos++];
          var u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 65536;
          out[c++] = String.fromCharCode(55296 + (u >> 10));
          out[c++] = String.fromCharCode(56320 + (u & 1023));
        } else {
          var c2 = bytes[pos++];
          var c3 = bytes[pos++];
          out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
        }
      }
      return out.join("");
    };
    var base64 = {
      byteToCharMap_: null,
      charToByteMap_: null,
      byteToCharMapWebSafe_: null,
      charToByteMapWebSafe_: null,
      ENCODED_VALS_BASE: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
      get ENCODED_VALS() {
        return this.ENCODED_VALS_BASE + "+/=";
      },
      get ENCODED_VALS_WEBSAFE() {
        return this.ENCODED_VALS_BASE + "-_.";
      },
      HAS_NATIVE_SUPPORT: typeof atob === "function",
      encodeByteArray: function(input, webSafe) {
        if (!Array.isArray(input)) {
          throw Error("encodeByteArray takes an array as a parameter");
        }
        this.init_();
        var byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
        var output = [];
        for (var i = 0; i < input.length; i += 3) {
          var byte1 = input[i];
          var haveByte2 = i + 1 < input.length;
          var byte2 = haveByte2 ? input[i + 1] : 0;
          var haveByte3 = i + 2 < input.length;
          var byte3 = haveByte3 ? input[i + 2] : 0;
          var outByte1 = byte1 >> 2;
          var outByte2 = (byte1 & 3) << 4 | byte2 >> 4;
          var outByte3 = (byte2 & 15) << 2 | byte3 >> 6;
          var outByte4 = byte3 & 63;
          if (!haveByte3) {
            outByte4 = 64;
            if (!haveByte2) {
              outByte3 = 64;
            }
          }
          output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
        }
        return output.join("");
      },
      encodeString: function(input, webSafe) {
        if (this.HAS_NATIVE_SUPPORT && !webSafe) {
          return btoa(input);
        }
        return this.encodeByteArray(stringToByteArray(input), webSafe);
      },
      decodeString: function(input, webSafe) {
        if (this.HAS_NATIVE_SUPPORT && !webSafe) {
          return atob(input);
        }
        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
      },
      decodeStringToByteArray: function(input, webSafe) {
        this.init_();
        var charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
        var output = [];
        for (var i = 0; i < input.length; ) {
          var byte1 = charToByteMap[input.charAt(i++)];
          var haveByte2 = i < input.length;
          var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
          ++i;
          var haveByte3 = i < input.length;
          var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
          ++i;
          var haveByte4 = i < input.length;
          var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
          ++i;
          if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
            throw Error();
          }
          var outByte1 = byte1 << 2 | byte2 >> 4;
          output.push(outByte1);
          if (byte3 !== 64) {
            var outByte2 = byte2 << 4 & 240 | byte3 >> 2;
            output.push(outByte2);
            if (byte4 !== 64) {
              var outByte3 = byte3 << 6 & 192 | byte4;
              output.push(outByte3);
            }
          }
        }
        return output;
      },
      init_: function() {
        if (!this.byteToCharMap_) {
          this.byteToCharMap_ = {};
          this.charToByteMap_ = {};
          this.byteToCharMapWebSafe_ = {};
          this.charToByteMapWebSafe_ = {};
          for (var i = 0; i < this.ENCODED_VALS.length; i++) {
            this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
            this.charToByteMap_[this.byteToCharMap_[i]] = i;
            this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
            this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
            if (i >= this.ENCODED_VALS_BASE.length) {
              this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
              this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
            }
          }
        }
      }
    };
    var base64Encode = function(str) {
      var utf8Bytes = stringToByteArray(str);
      return base64.encodeByteArray(utf8Bytes, true);
    };
    var base64Decode = function(str) {
      try {
        return base64.decodeString(str, true);
      } catch (e) {
        console.error("base64Decode failed: ", e);
      }
      return null;
    };
    function deepCopy(value) {
      return deepExtend(void 0, value);
    }
    function deepExtend(target, source) {
      if (!(source instanceof Object)) {
        return source;
      }
      switch (source.constructor) {
        case Date:
          var dateValue = source;
          return new Date(dateValue.getTime());
        case Object:
          if (target === void 0) {
            target = {};
          }
          break;
        case Array:
          target = [];
          break;
        default:
          return source;
      }
      for (var prop in source) {
        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {
          continue;
        }
        target[prop] = deepExtend(target[prop], source[prop]);
      }
      return target;
    }
    function isValidKey(key) {
      return key !== "__proto__";
    }
    var Deferred = function() {
      function Deferred2() {
        var _this = this;
        this.reject = function() {
        };
        this.resolve = function() {
        };
        this.promise = new Promise(function(resolve2, reject) {
          _this.resolve = resolve2;
          _this.reject = reject;
        });
      }
      Deferred2.prototype.wrapCallback = function(callback) {
        var _this = this;
        return function(error3, value) {
          if (error3) {
            _this.reject(error3);
          } else {
            _this.resolve(value);
          }
          if (typeof callback === "function") {
            _this.promise.catch(function() {
            });
            if (callback.length === 1) {
              callback(error3);
            } else {
              callback(error3, value);
            }
          }
        };
      };
      return Deferred2;
    }();
    function getUA() {
      if (typeof navigator !== "undefined" && typeof navigator["userAgent"] === "string") {
        return navigator["userAgent"];
      } else {
        return "";
      }
    }
    function isMobileCordova() {
      return typeof window !== "undefined" && !!(window["cordova"] || window["phonegap"] || window["PhoneGap"]) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA());
    }
    function isNode() {
      try {
        return Object.prototype.toString.call(global.process) === "[object process]";
      } catch (e) {
        return false;
      }
    }
    function isBrowser() {
      return typeof self === "object" && self.self === self;
    }
    function isBrowserExtension() {
      var runtime = typeof chrome === "object" ? chrome.runtime : typeof browser === "object" ? browser.runtime : void 0;
      return typeof runtime === "object" && runtime.id !== void 0;
    }
    function isReactNative() {
      return typeof navigator === "object" && navigator["product"] === "ReactNative";
    }
    function isElectron() {
      return getUA().indexOf("Electron/") >= 0;
    }
    function isIE() {
      var ua = getUA();
      return ua.indexOf("MSIE ") >= 0 || ua.indexOf("Trident/") >= 0;
    }
    function isUWP() {
      return getUA().indexOf("MSAppHost/") >= 0;
    }
    function isNodeSdk() {
      return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
    }
    function isSafari() {
      return !isNode() && navigator.userAgent.includes("Safari") && !navigator.userAgent.includes("Chrome");
    }
    function isIndexedDBAvailable() {
      return "indexedDB" in self && indexedDB != null;
    }
    function validateIndexedDBOpenable() {
      return new Promise(function(resolve2, reject) {
        try {
          var preExist_1 = true;
          var DB_CHECK_NAME_1 = "validate-browser-context-for-indexeddb-analytics-module";
          var request_1 = self.indexedDB.open(DB_CHECK_NAME_1);
          request_1.onsuccess = function() {
            request_1.result.close();
            if (!preExist_1) {
              self.indexedDB.deleteDatabase(DB_CHECK_NAME_1);
            }
            resolve2(true);
          };
          request_1.onupgradeneeded = function() {
            preExist_1 = false;
          };
          request_1.onerror = function() {
            var _a;
            reject(((_a = request_1.error) === null || _a === void 0 ? void 0 : _a.message) || "");
          };
        } catch (error3) {
          reject(error3);
        }
      });
    }
    function areCookiesEnabled() {
      if (!navigator || !navigator.cookieEnabled) {
        return false;
      }
      return true;
    }
    var ERROR_NAME = "FirebaseError";
    var FirebaseError = function(_super) {
      tslib.__extends(FirebaseError2, _super);
      function FirebaseError2(code, message, customData) {
        var _this = _super.call(this, message) || this;
        _this.code = code;
        _this.customData = customData;
        _this.name = ERROR_NAME;
        Object.setPrototypeOf(_this, FirebaseError2.prototype);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(_this, ErrorFactory.prototype.create);
        }
        return _this;
      }
      return FirebaseError2;
    }(Error);
    var ErrorFactory = function() {
      function ErrorFactory2(service, serviceName, errors) {
        this.service = service;
        this.serviceName = serviceName;
        this.errors = errors;
      }
      ErrorFactory2.prototype.create = function(code) {
        var data = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          data[_i - 1] = arguments[_i];
        }
        var customData = data[0] || {};
        var fullCode = this.service + "/" + code;
        var template2 = this.errors[code];
        var message = template2 ? replaceTemplate(template2, customData) : "Error";
        var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
        var error3 = new FirebaseError(fullCode, fullMessage, customData);
        return error3;
      };
      return ErrorFactory2;
    }();
    function replaceTemplate(template2, data) {
      return template2.replace(PATTERN, function(_, key) {
        var value = data[key];
        return value != null ? String(value) : "<" + key + "?>";
      });
    }
    var PATTERN = /\{\$([^}]+)}/g;
    function jsonEval(str) {
      return JSON.parse(str);
    }
    function stringify(data) {
      return JSON.stringify(data);
    }
    var decode = function(token) {
      var header = {}, claims = {}, data = {}, signature = "";
      try {
        var parts = token.split(".");
        header = jsonEval(base64Decode(parts[0]) || "");
        claims = jsonEval(base64Decode(parts[1]) || "");
        signature = parts[2];
        data = claims["d"] || {};
        delete claims["d"];
      } catch (e) {
      }
      return {
        header,
        claims,
        data,
        signature
      };
    };
    var isValidTimestamp = function(token) {
      var claims = decode(token).claims;
      var now = Math.floor(new Date().getTime() / 1e3);
      var validSince = 0, validUntil = 0;
      if (typeof claims === "object") {
        if (claims.hasOwnProperty("nbf")) {
          validSince = claims["nbf"];
        } else if (claims.hasOwnProperty("iat")) {
          validSince = claims["iat"];
        }
        if (claims.hasOwnProperty("exp")) {
          validUntil = claims["exp"];
        } else {
          validUntil = validSince + 86400;
        }
      }
      return !!now && !!validSince && !!validUntil && now >= validSince && now <= validUntil;
    };
    var issuedAtTime = function(token) {
      var claims = decode(token).claims;
      if (typeof claims === "object" && claims.hasOwnProperty("iat")) {
        return claims["iat"];
      }
      return null;
    };
    var isValidFormat = function(token) {
      var decoded = decode(token), claims = decoded.claims;
      return !!claims && typeof claims === "object" && claims.hasOwnProperty("iat");
    };
    var isAdmin = function(token) {
      var claims = decode(token).claims;
      return typeof claims === "object" && claims["admin"] === true;
    };
    function contains(obj, key) {
      return Object.prototype.hasOwnProperty.call(obj, key);
    }
    function safeGet(obj, key) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        return obj[key];
      } else {
        return void 0;
      }
    }
    function isEmpty(obj) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          return false;
        }
      }
      return true;
    }
    function map(obj, fn, contextObj) {
      var res = {};
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          res[key] = fn.call(contextObj, obj[key], key, obj);
        }
      }
      return res;
    }
    function querystring(querystringParams) {
      var params = [];
      var _loop_1 = function(key2, value2) {
        if (Array.isArray(value2)) {
          value2.forEach(function(arrayVal) {
            params.push(encodeURIComponent(key2) + "=" + encodeURIComponent(arrayVal));
          });
        } else {
          params.push(encodeURIComponent(key2) + "=" + encodeURIComponent(value2));
        }
      };
      for (var _i = 0, _a = Object.entries(querystringParams); _i < _a.length; _i++) {
        var _b = _a[_i], key = _b[0], value = _b[1];
        _loop_1(key, value);
      }
      return params.length ? "&" + params.join("&") : "";
    }
    function querystringDecode(querystring2) {
      var obj = {};
      var tokens = querystring2.replace(/^\?/, "").split("&");
      tokens.forEach(function(token) {
        if (token) {
          var _a = token.split("="), key = _a[0], value = _a[1];
          obj[decodeURIComponent(key)] = decodeURIComponent(value);
        }
      });
      return obj;
    }
    function extractQuerystring(url) {
      var queryStart = url.indexOf("?");
      if (!queryStart) {
        return "";
      }
      var fragmentStart = url.indexOf("#", queryStart);
      return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : void 0);
    }
    var Sha1 = function() {
      function Sha12() {
        this.chain_ = [];
        this.buf_ = [];
        this.W_ = [];
        this.pad_ = [];
        this.inbuf_ = 0;
        this.total_ = 0;
        this.blockSize = 512 / 8;
        this.pad_[0] = 128;
        for (var i = 1; i < this.blockSize; ++i) {
          this.pad_[i] = 0;
        }
        this.reset();
      }
      Sha12.prototype.reset = function() {
        this.chain_[0] = 1732584193;
        this.chain_[1] = 4023233417;
        this.chain_[2] = 2562383102;
        this.chain_[3] = 271733878;
        this.chain_[4] = 3285377520;
        this.inbuf_ = 0;
        this.total_ = 0;
      };
      Sha12.prototype.compress_ = function(buf, offset) {
        if (!offset) {
          offset = 0;
        }
        var W = this.W_;
        if (typeof buf === "string") {
          for (var i = 0; i < 16; i++) {
            W[i] = buf.charCodeAt(offset) << 24 | buf.charCodeAt(offset + 1) << 16 | buf.charCodeAt(offset + 2) << 8 | buf.charCodeAt(offset + 3);
            offset += 4;
          }
        } else {
          for (var i = 0; i < 16; i++) {
            W[i] = buf[offset] << 24 | buf[offset + 1] << 16 | buf[offset + 2] << 8 | buf[offset + 3];
            offset += 4;
          }
        }
        for (var i = 16; i < 80; i++) {
          var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
          W[i] = (t << 1 | t >>> 31) & 4294967295;
        }
        var a = this.chain_[0];
        var b = this.chain_[1];
        var c = this.chain_[2];
        var d = this.chain_[3];
        var e = this.chain_[4];
        var f, k;
        for (var i = 0; i < 80; i++) {
          if (i < 40) {
            if (i < 20) {
              f = d ^ b & (c ^ d);
              k = 1518500249;
            } else {
              f = b ^ c ^ d;
              k = 1859775393;
            }
          } else {
            if (i < 60) {
              f = b & c | d & (b | c);
              k = 2400959708;
            } else {
              f = b ^ c ^ d;
              k = 3395469782;
            }
          }
          var t = (a << 5 | a >>> 27) + f + e + k + W[i] & 4294967295;
          e = d;
          d = c;
          c = (b << 30 | b >>> 2) & 4294967295;
          b = a;
          a = t;
        }
        this.chain_[0] = this.chain_[0] + a & 4294967295;
        this.chain_[1] = this.chain_[1] + b & 4294967295;
        this.chain_[2] = this.chain_[2] + c & 4294967295;
        this.chain_[3] = this.chain_[3] + d & 4294967295;
        this.chain_[4] = this.chain_[4] + e & 4294967295;
      };
      Sha12.prototype.update = function(bytes, length) {
        if (bytes == null) {
          return;
        }
        if (length === void 0) {
          length = bytes.length;
        }
        var lengthMinusBlock = length - this.blockSize;
        var n = 0;
        var buf = this.buf_;
        var inbuf = this.inbuf_;
        while (n < length) {
          if (inbuf === 0) {
            while (n <= lengthMinusBlock) {
              this.compress_(bytes, n);
              n += this.blockSize;
            }
          }
          if (typeof bytes === "string") {
            while (n < length) {
              buf[inbuf] = bytes.charCodeAt(n);
              ++inbuf;
              ++n;
              if (inbuf === this.blockSize) {
                this.compress_(buf);
                inbuf = 0;
                break;
              }
            }
          } else {
            while (n < length) {
              buf[inbuf] = bytes[n];
              ++inbuf;
              ++n;
              if (inbuf === this.blockSize) {
                this.compress_(buf);
                inbuf = 0;
                break;
              }
            }
          }
        }
        this.inbuf_ = inbuf;
        this.total_ += length;
      };
      Sha12.prototype.digest = function() {
        var digest = [];
        var totalBits = this.total_ * 8;
        if (this.inbuf_ < 56) {
          this.update(this.pad_, 56 - this.inbuf_);
        } else {
          this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
        }
        for (var i = this.blockSize - 1; i >= 56; i--) {
          this.buf_[i] = totalBits & 255;
          totalBits /= 256;
        }
        this.compress_(this.buf_);
        var n = 0;
        for (var i = 0; i < 5; i++) {
          for (var j = 24; j >= 0; j -= 8) {
            digest[n] = this.chain_[i] >> j & 255;
            ++n;
          }
        }
        return digest;
      };
      return Sha12;
    }();
    function createSubscribe(executor, onNoObservers) {
      var proxy = new ObserverProxy(executor, onNoObservers);
      return proxy.subscribe.bind(proxy);
    }
    var ObserverProxy = function() {
      function ObserverProxy2(executor, onNoObservers) {
        var _this = this;
        this.observers = [];
        this.unsubscribes = [];
        this.observerCount = 0;
        this.task = Promise.resolve();
        this.finalized = false;
        this.onNoObservers = onNoObservers;
        this.task.then(function() {
          executor(_this);
        }).catch(function(e) {
          _this.error(e);
        });
      }
      ObserverProxy2.prototype.next = function(value) {
        this.forEachObserver(function(observer) {
          observer.next(value);
        });
      };
      ObserverProxy2.prototype.error = function(error3) {
        this.forEachObserver(function(observer) {
          observer.error(error3);
        });
        this.close(error3);
      };
      ObserverProxy2.prototype.complete = function() {
        this.forEachObserver(function(observer) {
          observer.complete();
        });
        this.close();
      };
      ObserverProxy2.prototype.subscribe = function(nextOrObserver, error3, complete) {
        var _this = this;
        var observer;
        if (nextOrObserver === void 0 && error3 === void 0 && complete === void 0) {
          throw new Error("Missing Observer.");
        }
        if (implementsAnyMethods(nextOrObserver, [
          "next",
          "error",
          "complete"
        ])) {
          observer = nextOrObserver;
        } else {
          observer = {
            next: nextOrObserver,
            error: error3,
            complete
          };
        }
        if (observer.next === void 0) {
          observer.next = noop3;
        }
        if (observer.error === void 0) {
          observer.error = noop3;
        }
        if (observer.complete === void 0) {
          observer.complete = noop3;
        }
        var unsub = this.unsubscribeOne.bind(this, this.observers.length);
        if (this.finalized) {
          this.task.then(function() {
            try {
              if (_this.finalError) {
                observer.error(_this.finalError);
              } else {
                observer.complete();
              }
            } catch (e) {
            }
            return;
          });
        }
        this.observers.push(observer);
        return unsub;
      };
      ObserverProxy2.prototype.unsubscribeOne = function(i) {
        if (this.observers === void 0 || this.observers[i] === void 0) {
          return;
        }
        delete this.observers[i];
        this.observerCount -= 1;
        if (this.observerCount === 0 && this.onNoObservers !== void 0) {
          this.onNoObservers(this);
        }
      };
      ObserverProxy2.prototype.forEachObserver = function(fn) {
        if (this.finalized) {
          return;
        }
        for (var i = 0; i < this.observers.length; i++) {
          this.sendOne(i, fn);
        }
      };
      ObserverProxy2.prototype.sendOne = function(i, fn) {
        var _this = this;
        this.task.then(function() {
          if (_this.observers !== void 0 && _this.observers[i] !== void 0) {
            try {
              fn(_this.observers[i]);
            } catch (e) {
              if (typeof console !== "undefined" && console.error) {
                console.error(e);
              }
            }
          }
        });
      };
      ObserverProxy2.prototype.close = function(err) {
        var _this = this;
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        if (err !== void 0) {
          this.finalError = err;
        }
        this.task.then(function() {
          _this.observers = void 0;
          _this.onNoObservers = void 0;
        });
      };
      return ObserverProxy2;
    }();
    function async(fn, onError) {
      return function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        Promise.resolve(true).then(function() {
          fn.apply(void 0, args);
        }).catch(function(error3) {
          if (onError) {
            onError(error3);
          }
        });
      };
    }
    function implementsAnyMethods(obj, methods) {
      if (typeof obj !== "object" || obj === null) {
        return false;
      }
      for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
        var method = methods_1[_i];
        if (method in obj && typeof obj[method] === "function") {
          return true;
        }
      }
      return false;
    }
    function noop3() {
    }
    var validateArgCount = function(fnName, minCount, maxCount, argCount) {
      var argError;
      if (argCount < minCount) {
        argError = "at least " + minCount;
      } else if (argCount > maxCount) {
        argError = maxCount === 0 ? "none" : "no more than " + maxCount;
      }
      if (argError) {
        var error3 = fnName + " failed: Was called with " + argCount + (argCount === 1 ? " argument." : " arguments.") + " Expects " + argError + ".";
        throw new Error(error3);
      }
    };
    function errorPrefix(fnName, argName) {
      return fnName + " failed: " + argName + " argument ";
    }
    function validateNamespace(fnName, namespace, optional) {
      if (optional && !namespace) {
        return;
      }
      if (typeof namespace !== "string") {
        throw new Error(errorPrefix(fnName, "namespace") + "must be a valid firebase namespace.");
      }
    }
    function validateCallback(fnName, argumentName, callback, optional) {
      if (optional && !callback) {
        return;
      }
      if (typeof callback !== "function") {
        throw new Error(errorPrefix(fnName, argumentName) + "must be a valid function.");
      }
    }
    function validateContextObject(fnName, argumentName, context, optional) {
      if (optional && !context) {
        return;
      }
      if (typeof context !== "object" || context === null) {
        throw new Error(errorPrefix(fnName, argumentName) + "must be a valid context object.");
      }
    }
    var stringToByteArray$1 = function(str) {
      var out = [];
      var p = 0;
      for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        if (c >= 55296 && c <= 56319) {
          var high = c - 55296;
          i++;
          assert(i < str.length, "Surrogate pair missing trail surrogate.");
          var low = str.charCodeAt(i) - 56320;
          c = 65536 + (high << 10) + low;
        }
        if (c < 128) {
          out[p++] = c;
        } else if (c < 2048) {
          out[p++] = c >> 6 | 192;
          out[p++] = c & 63 | 128;
        } else if (c < 65536) {
          out[p++] = c >> 12 | 224;
          out[p++] = c >> 6 & 63 | 128;
          out[p++] = c & 63 | 128;
        } else {
          out[p++] = c >> 18 | 240;
          out[p++] = c >> 12 & 63 | 128;
          out[p++] = c >> 6 & 63 | 128;
          out[p++] = c & 63 | 128;
        }
      }
      return out;
    };
    var stringLength = function(str) {
      var p = 0;
      for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        if (c < 128) {
          p++;
        } else if (c < 2048) {
          p += 2;
        } else if (c >= 55296 && c <= 56319) {
          p += 4;
          i++;
        } else {
          p += 3;
        }
      }
      return p;
    };
    var DEFAULT_INTERVAL_MILLIS = 1e3;
    var DEFAULT_BACKOFF_FACTOR = 2;
    var MAX_VALUE_MILLIS = 4 * 60 * 60 * 1e3;
    var RANDOM_FACTOR = 0.5;
    function calculateBackoffMillis(backoffCount, intervalMillis, backoffFactor) {
      if (intervalMillis === void 0) {
        intervalMillis = DEFAULT_INTERVAL_MILLIS;
      }
      if (backoffFactor === void 0) {
        backoffFactor = DEFAULT_BACKOFF_FACTOR;
      }
      var currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);
      var randomWait = Math.round(RANDOM_FACTOR * currBaseValue * (Math.random() - 0.5) * 2);
      return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);
    }
    function ordinal(i) {
      if (!Number.isFinite(i)) {
        return "" + i;
      }
      return i + indicator(i);
    }
    function indicator(i) {
      i = Math.abs(i);
      var cent = i % 100;
      if (cent >= 10 && cent <= 20) {
        return "th";
      }
      var dec = i % 10;
      if (dec === 1) {
        return "st";
      }
      if (dec === 2) {
        return "nd";
      }
      if (dec === 3) {
        return "rd";
      }
      return "th";
    }
    function getModularInstance(service) {
      if (service && service._delegate) {
        return service._delegate;
      } else {
        return service;
      }
    }
    CONSTANTS.NODE_CLIENT = true;
    exports2.CONSTANTS = CONSTANTS;
    exports2.Deferred = Deferred;
    exports2.ErrorFactory = ErrorFactory;
    exports2.FirebaseError = FirebaseError;
    exports2.MAX_VALUE_MILLIS = MAX_VALUE_MILLIS;
    exports2.RANDOM_FACTOR = RANDOM_FACTOR;
    exports2.Sha1 = Sha1;
    exports2.areCookiesEnabled = areCookiesEnabled;
    exports2.assert = assert;
    exports2.assertionError = assertionError;
    exports2.async = async;
    exports2.base64 = base64;
    exports2.base64Decode = base64Decode;
    exports2.base64Encode = base64Encode;
    exports2.calculateBackoffMillis = calculateBackoffMillis;
    exports2.contains = contains;
    exports2.createSubscribe = createSubscribe;
    exports2.decode = decode;
    exports2.deepCopy = deepCopy;
    exports2.deepExtend = deepExtend;
    exports2.errorPrefix = errorPrefix;
    exports2.extractQuerystring = extractQuerystring;
    exports2.getModularInstance = getModularInstance;
    exports2.getUA = getUA;
    exports2.isAdmin = isAdmin;
    exports2.isBrowser = isBrowser;
    exports2.isBrowserExtension = isBrowserExtension;
    exports2.isElectron = isElectron;
    exports2.isEmpty = isEmpty;
    exports2.isIE = isIE;
    exports2.isIndexedDBAvailable = isIndexedDBAvailable;
    exports2.isMobileCordova = isMobileCordova;
    exports2.isNode = isNode;
    exports2.isNodeSdk = isNodeSdk;
    exports2.isReactNative = isReactNative;
    exports2.isSafari = isSafari;
    exports2.isUWP = isUWP;
    exports2.isValidFormat = isValidFormat;
    exports2.isValidTimestamp = isValidTimestamp;
    exports2.issuedAtTime = issuedAtTime;
    exports2.jsonEval = jsonEval;
    exports2.map = map;
    exports2.ordinal = ordinal;
    exports2.querystring = querystring;
    exports2.querystringDecode = querystringDecode;
    exports2.safeGet = safeGet;
    exports2.stringLength = stringLength;
    exports2.stringToByteArray = stringToByteArray$1;
    exports2.stringify = stringify;
    exports2.validateArgCount = validateArgCount;
    exports2.validateCallback = validateCallback;
    exports2.validateContextObject = validateContextObject;
    exports2.validateIndexedDBOpenable = validateIndexedDBOpenable;
    exports2.validateNamespace = validateNamespace;
  }
});

// node_modules/@firebase/component/dist/index.cjs.js
var require_index_cjs = __commonJS({
  "node_modules/@firebase/component/dist/index.cjs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    var tslib = require_tslib();
    var util = require_index_node_cjs();
    var Component = function() {
      function Component2(name, instanceFactory, type) {
        this.name = name;
        this.instanceFactory = instanceFactory;
        this.type = type;
        this.multipleInstances = false;
        this.serviceProps = {};
        this.instantiationMode = "LAZY";
        this.onInstanceCreated = null;
      }
      Component2.prototype.setInstantiationMode = function(mode) {
        this.instantiationMode = mode;
        return this;
      };
      Component2.prototype.setMultipleInstances = function(multipleInstances) {
        this.multipleInstances = multipleInstances;
        return this;
      };
      Component2.prototype.setServiceProps = function(props) {
        this.serviceProps = props;
        return this;
      };
      Component2.prototype.setInstanceCreatedCallback = function(callback) {
        this.onInstanceCreated = callback;
        return this;
      };
      return Component2;
    }();
    var DEFAULT_ENTRY_NAME = "[DEFAULT]";
    var Provider = function() {
      function Provider2(name, container) {
        this.name = name;
        this.container = container;
        this.component = null;
        this.instances = new Map();
        this.instancesDeferred = new Map();
      }
      Provider2.prototype.get = function(identifier) {
        if (identifier === void 0) {
          identifier = DEFAULT_ENTRY_NAME;
        }
        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        if (!this.instancesDeferred.has(normalizedIdentifier)) {
          var deferred = new util.Deferred();
          this.instancesDeferred.set(normalizedIdentifier, deferred);
          if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {
            try {
              var instance = this.getOrInitializeService({
                instanceIdentifier: normalizedIdentifier
              });
              if (instance) {
                deferred.resolve(instance);
              }
            } catch (e) {
            }
          }
        }
        return this.instancesDeferred.get(normalizedIdentifier).promise;
      };
      Provider2.prototype.getImmediate = function(options2) {
        var _a = tslib.__assign({identifier: DEFAULT_ENTRY_NAME, optional: false}, options2), identifier = _a.identifier, optional = _a.optional;
        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {
          try {
            return this.getOrInitializeService({
              instanceIdentifier: normalizedIdentifier
            });
          } catch (e) {
            if (optional) {
              return null;
            } else {
              throw e;
            }
          }
        } else {
          if (optional) {
            return null;
          } else {
            throw Error("Service " + this.name + " is not available");
          }
        }
      };
      Provider2.prototype.getComponent = function() {
        return this.component;
      };
      Provider2.prototype.setComponent = function(component) {
        var e_1, _a;
        if (component.name !== this.name) {
          throw Error("Mismatching Component " + component.name + " for Provider " + this.name + ".");
        }
        if (this.component) {
          throw Error("Component for " + this.name + " has already been provided");
        }
        this.component = component;
        if (!this.shouldAutoInitialize()) {
          return;
        }
        if (isComponentEager(component)) {
          try {
            this.getOrInitializeService({instanceIdentifier: DEFAULT_ENTRY_NAME});
          } catch (e) {
          }
        }
        try {
          for (var _b = tslib.__values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = tslib.__read(_c.value, 2), instanceIdentifier = _d[0], instanceDeferred = _d[1];
            var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
            try {
              var instance = this.getOrInitializeService({
                instanceIdentifier: normalizedIdentifier
              });
              instanceDeferred.resolve(instance);
            } catch (e) {
            }
          }
        } catch (e_1_1) {
          e_1 = {error: e_1_1};
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      };
      Provider2.prototype.clearInstance = function(identifier) {
        if (identifier === void 0) {
          identifier = DEFAULT_ENTRY_NAME;
        }
        this.instancesDeferred.delete(identifier);
        this.instances.delete(identifier);
      };
      Provider2.prototype.delete = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var services;
          return tslib.__generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                services = Array.from(this.instances.values());
                return [4, Promise.all(tslib.__spreadArray(tslib.__spreadArray([], tslib.__read(services.filter(function(service) {
                  return "INTERNAL" in service;
                }).map(function(service) {
                  return service.INTERNAL.delete();
                }))), tslib.__read(services.filter(function(service) {
                  return "_delete" in service;
                }).map(function(service) {
                  return service._delete();
                }))))];
              case 1:
                _a.sent();
                return [2];
            }
          });
        });
      };
      Provider2.prototype.isComponentSet = function() {
        return this.component != null;
      };
      Provider2.prototype.isInitialized = function(identifier) {
        if (identifier === void 0) {
          identifier = DEFAULT_ENTRY_NAME;
        }
        return this.instances.has(identifier);
      };
      Provider2.prototype.initialize = function(opts) {
        var e_2, _a;
        if (opts === void 0) {
          opts = {};
        }
        var _b = opts.instanceIdentifier, instanceIdentifier = _b === void 0 ? DEFAULT_ENTRY_NAME : _b, _c = opts.options, options2 = _c === void 0 ? {} : _c;
        var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
        if (this.isInitialized(normalizedIdentifier)) {
          throw Error(this.name + "(" + normalizedIdentifier + ") has already been initialized");
        }
        if (!this.isComponentSet()) {
          throw Error("Component " + this.name + " has not been registered yet");
        }
        var instance = this.getOrInitializeService({
          instanceIdentifier: normalizedIdentifier,
          options: options2
        });
        try {
          for (var _d = tslib.__values(this.instancesDeferred.entries()), _e = _d.next(); !_e.done; _e = _d.next()) {
            var _f = tslib.__read(_e.value, 2), instanceIdentifier_1 = _f[0], instanceDeferred = _f[1];
            var normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier_1);
            if (normalizedIdentifier === normalizedDeferredIdentifier) {
              instanceDeferred.resolve(instance);
            }
          }
        } catch (e_2_1) {
          e_2 = {error: e_2_1};
        } finally {
          try {
            if (_e && !_e.done && (_a = _d.return))
              _a.call(_d);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
        return instance;
      };
      Provider2.prototype.getOrInitializeService = function(_a) {
        var instanceIdentifier = _a.instanceIdentifier, _b = _a.options, options2 = _b === void 0 ? {} : _b;
        var instance = this.instances.get(instanceIdentifier);
        if (!instance && this.component) {
          instance = this.component.instanceFactory(this.container, {
            instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),
            options: options2
          });
          this.instances.set(instanceIdentifier, instance);
          if (this.component.onInstanceCreated) {
            try {
              this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
            } catch (_c) {
            }
          }
        }
        return instance || null;
      };
      Provider2.prototype.normalizeInstanceIdentifier = function(identifier) {
        if (this.component) {
          return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
        } else {
          return identifier;
        }
      };
      Provider2.prototype.shouldAutoInitialize = function() {
        return !!this.component && this.component.instantiationMode !== "EXPLICIT";
      };
      return Provider2;
    }();
    function normalizeIdentifierForFactory(identifier) {
      return identifier === DEFAULT_ENTRY_NAME ? void 0 : identifier;
    }
    function isComponentEager(component) {
      return component.instantiationMode === "EAGER";
    }
    var ComponentContainer = function() {
      function ComponentContainer2(name) {
        this.name = name;
        this.providers = new Map();
      }
      ComponentContainer2.prototype.addComponent = function(component) {
        var provider = this.getProvider(component.name);
        if (provider.isComponentSet()) {
          throw new Error("Component " + component.name + " has already been registered with " + this.name);
        }
        provider.setComponent(component);
      };
      ComponentContainer2.prototype.addOrOverwriteComponent = function(component) {
        var provider = this.getProvider(component.name);
        if (provider.isComponentSet()) {
          this.providers.delete(component.name);
        }
        this.addComponent(component);
      };
      ComponentContainer2.prototype.getProvider = function(name) {
        if (this.providers.has(name)) {
          return this.providers.get(name);
        }
        var provider = new Provider(name, this);
        this.providers.set(name, provider);
        return provider;
      };
      ComponentContainer2.prototype.getProviders = function() {
        return Array.from(this.providers.values());
      };
      return ComponentContainer2;
    }();
    exports2.Component = Component;
    exports2.ComponentContainer = ComponentContainer;
    exports2.Provider = Provider;
  }
});

// node_modules/@firebase/logger/dist/index.cjs.js
var require_index_cjs2 = __commonJS({
  "node_modules/@firebase/logger/dist/index.cjs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    function __spreadArrays() {
      for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
        s2 += arguments[i].length;
      for (var r = Array(s2), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    }
    var _a;
    var instances = [];
    (function(LogLevel) {
      LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
      LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
      LogLevel[LogLevel["INFO"] = 2] = "INFO";
      LogLevel[LogLevel["WARN"] = 3] = "WARN";
      LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
      LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(exports2.LogLevel || (exports2.LogLevel = {}));
    var levelStringToEnum = {
      "debug": exports2.LogLevel.DEBUG,
      "verbose": exports2.LogLevel.VERBOSE,
      "info": exports2.LogLevel.INFO,
      "warn": exports2.LogLevel.WARN,
      "error": exports2.LogLevel.ERROR,
      "silent": exports2.LogLevel.SILENT
    };
    var defaultLogLevel = exports2.LogLevel.INFO;
    var ConsoleMethod = (_a = {}, _a[exports2.LogLevel.DEBUG] = "log", _a[exports2.LogLevel.VERBOSE] = "log", _a[exports2.LogLevel.INFO] = "info", _a[exports2.LogLevel.WARN] = "warn", _a[exports2.LogLevel.ERROR] = "error", _a);
    var defaultLogHandler = function(instance, logType) {
      var args = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
      }
      if (logType < instance.logLevel) {
        return;
      }
      var now = new Date().toISOString();
      var method = ConsoleMethod[logType];
      if (method) {
        console[method].apply(console, __spreadArrays(["[" + now + "]  " + instance.name + ":"], args));
      } else {
        throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
      }
    };
    var Logger = function() {
      function Logger2(name) {
        this.name = name;
        this._logLevel = defaultLogLevel;
        this._logHandler = defaultLogHandler;
        this._userLogHandler = null;
        instances.push(this);
      }
      Object.defineProperty(Logger2.prototype, "logLevel", {
        get: function() {
          return this._logLevel;
        },
        set: function(val) {
          if (!(val in exports2.LogLevel)) {
            throw new TypeError('Invalid value "' + val + '" assigned to `logLevel`');
          }
          this._logLevel = val;
        },
        enumerable: false,
        configurable: true
      });
      Logger2.prototype.setLogLevel = function(val) {
        this._logLevel = typeof val === "string" ? levelStringToEnum[val] : val;
      };
      Object.defineProperty(Logger2.prototype, "logHandler", {
        get: function() {
          return this._logHandler;
        },
        set: function(val) {
          if (typeof val !== "function") {
            throw new TypeError("Value assigned to `logHandler` must be a function");
          }
          this._logHandler = val;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Logger2.prototype, "userLogHandler", {
        get: function() {
          return this._userLogHandler;
        },
        set: function(val) {
          this._userLogHandler = val;
        },
        enumerable: false,
        configurable: true
      });
      Logger2.prototype.debug = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports2.LogLevel.DEBUG], args));
        this._logHandler.apply(this, __spreadArrays([this, exports2.LogLevel.DEBUG], args));
      };
      Logger2.prototype.log = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports2.LogLevel.VERBOSE], args));
        this._logHandler.apply(this, __spreadArrays([this, exports2.LogLevel.VERBOSE], args));
      };
      Logger2.prototype.info = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports2.LogLevel.INFO], args));
        this._logHandler.apply(this, __spreadArrays([this, exports2.LogLevel.INFO], args));
      };
      Logger2.prototype.warn = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports2.LogLevel.WARN], args));
        this._logHandler.apply(this, __spreadArrays([this, exports2.LogLevel.WARN], args));
      };
      Logger2.prototype.error = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports2.LogLevel.ERROR], args));
        this._logHandler.apply(this, __spreadArrays([this, exports2.LogLevel.ERROR], args));
      };
      return Logger2;
    }();
    function setLogLevel(level) {
      instances.forEach(function(inst) {
        inst.setLogLevel(level);
      });
    }
    function setUserLogHandler(logCallback, options2) {
      var _loop_1 = function(instance2) {
        var customLogLevel = null;
        if (options2 && options2.level) {
          customLogLevel = levelStringToEnum[options2.level];
        }
        if (logCallback === null) {
          instance2.userLogHandler = null;
        } else {
          instance2.userLogHandler = function(instance3, level) {
            var args = [];
            for (var _i2 = 2; _i2 < arguments.length; _i2++) {
              args[_i2 - 2] = arguments[_i2];
            }
            var message = args.map(function(arg) {
              if (arg == null) {
                return null;
              } else if (typeof arg === "string") {
                return arg;
              } else if (typeof arg === "number" || typeof arg === "boolean") {
                return arg.toString();
              } else if (arg instanceof Error) {
                return arg.message;
              } else {
                try {
                  return JSON.stringify(arg);
                } catch (ignored) {
                  return null;
                }
              }
            }).filter(function(arg) {
              return arg;
            }).join(" ");
            if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance3.logLevel)) {
              logCallback({
                level: exports2.LogLevel[level].toLowerCase(),
                message,
                args,
                type: instance3.name
              });
            }
          };
        }
      };
      for (var _i = 0, instances_1 = instances; _i < instances_1.length; _i++) {
        var instance = instances_1[_i];
        _loop_1(instance);
      }
    }
    exports2.Logger = Logger;
    exports2.setLogLevel = setLogLevel;
    exports2.setUserLogHandler = setUserLogHandler;
  }
});

// node_modules/@firebase/app/dist/index.cjs.js
var require_index_cjs3 = __commonJS({
  "node_modules/@firebase/app/dist/index.cjs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    var component = require_index_cjs();
    var tslib = require_tslib();
    var logger$1 = require_index_cjs2();
    var util = require_index_node_cjs();
    var PlatformLoggerServiceImpl = function() {
      function PlatformLoggerServiceImpl2(container) {
        this.container = container;
      }
      PlatformLoggerServiceImpl2.prototype.getPlatformInfoString = function() {
        var providers = this.container.getProviders();
        return providers.map(function(provider) {
          if (isVersionServiceProvider(provider)) {
            var service = provider.getImmediate();
            return service.library + "/" + service.version;
          } else {
            return null;
          }
        }).filter(function(logString) {
          return logString;
        }).join(" ");
      };
      return PlatformLoggerServiceImpl2;
    }();
    function isVersionServiceProvider(provider) {
      var component2 = provider.getComponent();
      return (component2 === null || component2 === void 0 ? void 0 : component2.type) === "VERSION";
    }
    var name = "@firebase/app-exp";
    var version = "0.0.900-exp.894b5da5a";
    var logger = new logger$1.Logger("@firebase/app");
    var name$1 = "@firebase/app-compat";
    var name$2 = "@firebase/analytics-compat";
    var name$3 = "@firebase/analytics-exp";
    var name$4 = "@firebase/auth-exp";
    var name$5 = "@firebase/auth-compat";
    var name$6 = "@firebase/database";
    var name$7 = "@firebase/database-compat";
    var name$8 = "@firebase/functions-exp";
    var name$9 = "@firebase/functions-compat";
    var name$a = "@firebase/installations-exp";
    var name$b = "@firebase/installations-compat";
    var name$c = "@firebase/messaging-exp";
    var name$d = "@firebase/messaging-compat";
    var name$e = "@firebase/performance-exp";
    var name$f = "@firebase/performance-compat";
    var name$g = "@firebase/remote-config-exp";
    var name$h = "@firebase/remote-config-compat";
    var name$i = "@firebase/storage";
    var name$j = "@firebase/storage-compat";
    var name$k = "@firebase/firestore";
    var name$l = "@firebase/firestore-compat";
    var name$m = "firebase-exp";
    var version$1 = "9.0.0-beta.1";
    var _a;
    var DEFAULT_ENTRY_NAME = "[DEFAULT]";
    var PLATFORM_LOG_STRING = (_a = {}, _a[name] = "fire-core", _a[name$1] = "fire-core-compat", _a[name$3] = "fire-analytics", _a[name$2] = "fire-analytics-compat", _a[name$4] = "fire-auth", _a[name$5] = "fire-auth-compat", _a[name$6] = "fire-rtdb", _a[name$7] = "fire-rtdb-compat", _a[name$8] = "fire-fn", _a[name$9] = "fire-fn-compat", _a[name$a] = "fire-iid", _a[name$b] = "fire-iid-compat", _a[name$c] = "fire-fcm", _a[name$d] = "fire-fcm-compat", _a[name$e] = "fire-perf", _a[name$f] = "fire-perf-compat", _a[name$g] = "fire-rc", _a[name$h] = "fire-rc-compat", _a[name$i] = "fire-gcs", _a[name$j] = "fire-gcs-compat", _a[name$k] = "fire-fst", _a[name$l] = "fire-fst-compat", _a["fire-js"] = "fire-js", _a[name$m] = "fire-js-all", _a);
    var _apps = new Map();
    var _components = new Map();
    function _addComponent(app, component2) {
      try {
        app.container.addComponent(component2);
      } catch (e) {
        logger.debug("Component " + component2.name + " failed to register with FirebaseApp " + app.name, e);
      }
    }
    function _addOrOverwriteComponent(app, component2) {
      app.container.addOrOverwriteComponent(component2);
    }
    function _registerComponent(component2) {
      var e_1, _a2;
      var componentName = component2.name;
      if (_components.has(componentName)) {
        logger.debug("There were multiple attempts to register component " + componentName + ".");
        return false;
      }
      _components.set(componentName, component2);
      try {
        for (var _b = tslib.__values(_apps.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var app = _c.value;
          _addComponent(app, component2);
        }
      } catch (e_1_1) {
        e_1 = {error: e_1_1};
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return))
            _a2.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return true;
    }
    function _getProvider(app, name2) {
      return app.container.getProvider(name2);
    }
    function _removeServiceInstance(app, name2, instanceIdentifier) {
      if (instanceIdentifier === void 0) {
        instanceIdentifier = DEFAULT_ENTRY_NAME;
      }
      _getProvider(app, name2).clearInstance(instanceIdentifier);
    }
    function _clearComponents() {
      _components.clear();
    }
    var _a$1;
    var ERRORS = (_a$1 = {}, _a$1["no-app"] = "No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()", _a$1["bad-app-name"] = "Illegal App name: '{$appName}", _a$1["duplicate-app"] = "Firebase App named '{$appName}' already exists", _a$1["app-deleted"] = "Firebase App named '{$appName}' already deleted", _a$1["invalid-app-argument"] = "firebase.{$appName}() takes either no argument or a Firebase App instance.", _a$1["invalid-log-argument"] = "First argument to `onLog` must be null or a function.", _a$1);
    var ERROR_FACTORY = new util.ErrorFactory("app", "Firebase", ERRORS);
    var FirebaseAppImpl = function() {
      function FirebaseAppImpl2(options2, config, container) {
        var _this = this;
        this._isDeleted = false;
        this._options = tslib.__assign({}, options2);
        this._name = config.name;
        this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;
        this._container = container;
        this.container.addComponent(new component.Component("app-exp", function() {
          return _this;
        }, "PUBLIC"));
      }
      Object.defineProperty(FirebaseAppImpl2.prototype, "automaticDataCollectionEnabled", {
        get: function() {
          this.checkDestroyed();
          return this._automaticDataCollectionEnabled;
        },
        set: function(val) {
          this.checkDestroyed();
          this._automaticDataCollectionEnabled = val;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(FirebaseAppImpl2.prototype, "name", {
        get: function() {
          this.checkDestroyed();
          return this._name;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(FirebaseAppImpl2.prototype, "options", {
        get: function() {
          this.checkDestroyed();
          return this._options;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(FirebaseAppImpl2.prototype, "container", {
        get: function() {
          return this._container;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(FirebaseAppImpl2.prototype, "isDeleted", {
        get: function() {
          return this._isDeleted;
        },
        set: function(val) {
          this._isDeleted = val;
        },
        enumerable: false,
        configurable: true
      });
      FirebaseAppImpl2.prototype.checkDestroyed = function() {
        if (this.isDeleted) {
          throw ERROR_FACTORY.create("app-deleted", {appName: this._name});
        }
      };
      return FirebaseAppImpl2;
    }();
    var SDK_VERSION = version$1;
    function initializeApp2(options2, rawConfig) {
      var e_1, _a2;
      if (rawConfig === void 0) {
        rawConfig = {};
      }
      if (typeof rawConfig !== "object") {
        var name_1 = rawConfig;
        rawConfig = {name: name_1};
      }
      var config = tslib.__assign({name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false}, rawConfig);
      var name2 = config.name;
      if (typeof name2 !== "string" || !name2) {
        throw ERROR_FACTORY.create("bad-app-name", {
          appName: String(name2)
        });
      }
      if (_apps.has(name2)) {
        throw ERROR_FACTORY.create("duplicate-app", {appName: name2});
      }
      var container = new component.ComponentContainer(name2);
      try {
        for (var _b = tslib.__values(_components.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var component$1 = _c.value;
          container.addComponent(component$1);
        }
      } catch (e_1_1) {
        e_1 = {error: e_1_1};
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return))
            _a2.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      var newApp = new FirebaseAppImpl(options2, config, container);
      _apps.set(name2, newApp);
      return newApp;
    }
    function getApp(name2) {
      if (name2 === void 0) {
        name2 = DEFAULT_ENTRY_NAME;
      }
      var app = _apps.get(name2);
      if (!app) {
        throw ERROR_FACTORY.create("no-app", {appName: name2});
      }
      return app;
    }
    function getApps2() {
      return Array.from(_apps.values());
    }
    function deleteApp(app) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var name2;
        return tslib.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              name2 = app.name;
              if (!_apps.has(name2))
                return [3, 2];
              _apps.delete(name2);
              return [4, Promise.all(app.container.getProviders().map(function(provider) {
                return provider.delete();
              }))];
            case 1:
              _a2.sent();
              app.isDeleted = true;
              _a2.label = 2;
            case 2:
              return [2];
          }
        });
      });
    }
    function registerVersion(libraryKeyOrName, version2, variant) {
      var _a2;
      var library = (_a2 = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a2 !== void 0 ? _a2 : libraryKeyOrName;
      if (variant) {
        library += "-" + variant;
      }
      var libraryMismatch = library.match(/\s|\//);
      var versionMismatch = version2.match(/\s|\//);
      if (libraryMismatch || versionMismatch) {
        var warning = [
          'Unable to register library "' + library + '" with version "' + version2 + '":'
        ];
        if (libraryMismatch) {
          warning.push('library name "' + library + '" contains illegal characters (whitespace or "/")');
        }
        if (libraryMismatch && versionMismatch) {
          warning.push("and");
        }
        if (versionMismatch) {
          warning.push('version name "' + version2 + '" contains illegal characters (whitespace or "/")');
        }
        logger.warn(warning.join(" "));
        return;
      }
      _registerComponent(new component.Component(library + "-version", function() {
        return {library, version: version2};
      }, "VERSION"));
    }
    function onLog(logCallback, options2) {
      if (logCallback !== null && typeof logCallback !== "function") {
        throw ERROR_FACTORY.create("invalid-log-argument");
      }
      logger$1.setUserLogHandler(logCallback, options2);
    }
    function setLogLevel(logLevel) {
      logger$1.setLogLevel(logLevel);
    }
    function registerCoreComponents(variant) {
      _registerComponent(new component.Component("platform-logger", function(container) {
        return new PlatformLoggerServiceImpl(container);
      }, "PRIVATE"));
      registerVersion(name, version, variant);
      registerVersion("fire-js", "");
    }
    registerCoreComponents();
    exports2.SDK_VERSION = SDK_VERSION;
    exports2._DEFAULT_ENTRY_NAME = DEFAULT_ENTRY_NAME;
    exports2._addComponent = _addComponent;
    exports2._addOrOverwriteComponent = _addOrOverwriteComponent;
    exports2._apps = _apps;
    exports2._clearComponents = _clearComponents;
    exports2._components = _components;
    exports2._getProvider = _getProvider;
    exports2._registerComponent = _registerComponent;
    exports2._removeServiceInstance = _removeServiceInstance;
    exports2.deleteApp = deleteApp;
    exports2.getApp = getApp;
    exports2.getApps = getApps2;
    exports2.initializeApp = initializeApp2;
    exports2.onLog = onLog;
    exports2.registerVersion = registerVersion;
    exports2.setLogLevel = setLogLevel;
  }
});

// node_modules/firebase/app/dist/index.cjs.js
var require_index_cjs4 = __commonJS({
  "node_modules/firebase/app/dist/index.cjs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    var app = require_index_cjs3();
    var name = "firebase-exp";
    var version = "9.0.0-beta.1";
    app.registerVersion(name, version, "app");
    Object.keys(app).forEach(function(k) {
      if (k !== "default")
        Object.defineProperty(exports2, k, {
          enumerable: true,
          get: function() {
            return app[k];
          }
        });
    });
  }
});

// node_modules/node-fetch/lib/index.js
var require_lib = __commonJS({
  "node_modules/node-fetch/lib/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var Stream2 = _interopDefault(require("stream"));
    var http2 = _interopDefault(require("http"));
    var Url = _interopDefault(require("url"));
    var https2 = _interopDefault(require("https"));
    var zlib2 = _interopDefault(require("zlib"));
    var Readable2 = Stream2.Readable;
    var BUFFER = Symbol("buffer");
    var TYPE = Symbol("type");
    var Blob2 = class {
      constructor() {
        this[TYPE] = "";
        const blobParts = arguments[0];
        const options2 = arguments[1];
        const buffers = [];
        let size = 0;
        if (blobParts) {
          const a = blobParts;
          const length = Number(a.length);
          for (let i = 0; i < length; i++) {
            const element = a[i];
            let buffer;
            if (element instanceof Buffer) {
              buffer = element;
            } else if (ArrayBuffer.isView(element)) {
              buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
            } else if (element instanceof ArrayBuffer) {
              buffer = Buffer.from(element);
            } else if (element instanceof Blob2) {
              buffer = element[BUFFER];
            } else {
              buffer = Buffer.from(typeof element === "string" ? element : String(element));
            }
            size += buffer.length;
            buffers.push(buffer);
          }
        }
        this[BUFFER] = Buffer.concat(buffers);
        let type = options2 && options2.type !== void 0 && String(options2.type).toLowerCase();
        if (type && !/[^\u0020-\u007E]/.test(type)) {
          this[TYPE] = type;
        }
      }
      get size() {
        return this[BUFFER].length;
      }
      get type() {
        return this[TYPE];
      }
      text() {
        return Promise.resolve(this[BUFFER].toString());
      }
      arrayBuffer() {
        const buf = this[BUFFER];
        const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        return Promise.resolve(ab);
      }
      stream() {
        const readable = new Readable2();
        readable._read = function() {
        };
        readable.push(this[BUFFER]);
        readable.push(null);
        return readable;
      }
      toString() {
        return "[object Blob]";
      }
      slice() {
        const size = this.size;
        const start = arguments[0];
        const end = arguments[1];
        let relativeStart, relativeEnd;
        if (start === void 0) {
          relativeStart = 0;
        } else if (start < 0) {
          relativeStart = Math.max(size + start, 0);
        } else {
          relativeStart = Math.min(start, size);
        }
        if (end === void 0) {
          relativeEnd = size;
        } else if (end < 0) {
          relativeEnd = Math.max(size + end, 0);
        } else {
          relativeEnd = Math.min(end, size);
        }
        const span = Math.max(relativeEnd - relativeStart, 0);
        const buffer = this[BUFFER];
        const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
        const blob = new Blob2([], {type: arguments[2]});
        blob[BUFFER] = slicedBuffer;
        return blob;
      }
    };
    Object.defineProperties(Blob2.prototype, {
      size: {enumerable: true},
      type: {enumerable: true},
      slice: {enumerable: true}
    });
    Object.defineProperty(Blob2.prototype, Symbol.toStringTag, {
      value: "Blob",
      writable: false,
      enumerable: false,
      configurable: true
    });
    function FetchError2(message, type, systemError) {
      Error.call(this, message);
      this.message = message;
      this.type = type;
      if (systemError) {
        this.code = this.errno = systemError.code;
      }
      Error.captureStackTrace(this, this.constructor);
    }
    FetchError2.prototype = Object.create(Error.prototype);
    FetchError2.prototype.constructor = FetchError2;
    FetchError2.prototype.name = "FetchError";
    var convert;
    try {
      convert = require("encoding").convert;
    } catch (e) {
    }
    var INTERNALS2 = Symbol("Body internals");
    var PassThrough2 = Stream2.PassThrough;
    function Body2(body) {
      var _this = this;
      var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$size = _ref.size;
      let size = _ref$size === void 0 ? 0 : _ref$size;
      var _ref$timeout = _ref.timeout;
      let timeout = _ref$timeout === void 0 ? 0 : _ref$timeout;
      if (body == null) {
        body = null;
      } else if (isURLSearchParams(body)) {
        body = Buffer.from(body.toString());
      } else if (isBlob2(body))
        ;
      else if (Buffer.isBuffer(body))
        ;
      else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
        body = Buffer.from(body);
      } else if (ArrayBuffer.isView(body)) {
        body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
      } else if (body instanceof Stream2)
        ;
      else {
        body = Buffer.from(String(body));
      }
      this[INTERNALS2] = {
        body,
        disturbed: false,
        error: null
      };
      this.size = size;
      this.timeout = timeout;
      if (body instanceof Stream2) {
        body.on("error", function(err) {
          const error3 = err.name === "AbortError" ? err : new FetchError2(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, "system", err);
          _this[INTERNALS2].error = error3;
        });
      }
    }
    Body2.prototype = {
      get body() {
        return this[INTERNALS2].body;
      },
      get bodyUsed() {
        return this[INTERNALS2].disturbed;
      },
      arrayBuffer() {
        return consumeBody2.call(this).then(function(buf) {
          return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        });
      },
      blob() {
        let ct = this.headers && this.headers.get("content-type") || "";
        return consumeBody2.call(this).then(function(buf) {
          return Object.assign(new Blob2([], {
            type: ct.toLowerCase()
          }), {
            [BUFFER]: buf
          });
        });
      },
      json() {
        var _this2 = this;
        return consumeBody2.call(this).then(function(buffer) {
          try {
            return JSON.parse(buffer.toString());
          } catch (err) {
            return Body2.Promise.reject(new FetchError2(`invalid json response body at ${_this2.url} reason: ${err.message}`, "invalid-json"));
          }
        });
      },
      text() {
        return consumeBody2.call(this).then(function(buffer) {
          return buffer.toString();
        });
      },
      buffer() {
        return consumeBody2.call(this);
      },
      textConverted() {
        var _this3 = this;
        return consumeBody2.call(this).then(function(buffer) {
          return convertBody(buffer, _this3.headers);
        });
      }
    };
    Object.defineProperties(Body2.prototype, {
      body: {enumerable: true},
      bodyUsed: {enumerable: true},
      arrayBuffer: {enumerable: true},
      blob: {enumerable: true},
      json: {enumerable: true},
      text: {enumerable: true}
    });
    Body2.mixIn = function(proto) {
      for (const name of Object.getOwnPropertyNames(Body2.prototype)) {
        if (!(name in proto)) {
          const desc = Object.getOwnPropertyDescriptor(Body2.prototype, name);
          Object.defineProperty(proto, name, desc);
        }
      }
    };
    function consumeBody2() {
      var _this4 = this;
      if (this[INTERNALS2].disturbed) {
        return Body2.Promise.reject(new TypeError(`body used already for: ${this.url}`));
      }
      this[INTERNALS2].disturbed = true;
      if (this[INTERNALS2].error) {
        return Body2.Promise.reject(this[INTERNALS2].error);
      }
      let body = this.body;
      if (body === null) {
        return Body2.Promise.resolve(Buffer.alloc(0));
      }
      if (isBlob2(body)) {
        body = body.stream();
      }
      if (Buffer.isBuffer(body)) {
        return Body2.Promise.resolve(body);
      }
      if (!(body instanceof Stream2)) {
        return Body2.Promise.resolve(Buffer.alloc(0));
      }
      let accum = [];
      let accumBytes = 0;
      let abort = false;
      return new Body2.Promise(function(resolve2, reject) {
        let resTimeout;
        if (_this4.timeout) {
          resTimeout = setTimeout(function() {
            abort = true;
            reject(new FetchError2(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, "body-timeout"));
          }, _this4.timeout);
        }
        body.on("error", function(err) {
          if (err.name === "AbortError") {
            abort = true;
            reject(err);
          } else {
            reject(new FetchError2(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, "system", err));
          }
        });
        body.on("data", function(chunk) {
          if (abort || chunk === null) {
            return;
          }
          if (_this4.size && accumBytes + chunk.length > _this4.size) {
            abort = true;
            reject(new FetchError2(`content size at ${_this4.url} over limit: ${_this4.size}`, "max-size"));
            return;
          }
          accumBytes += chunk.length;
          accum.push(chunk);
        });
        body.on("end", function() {
          if (abort) {
            return;
          }
          clearTimeout(resTimeout);
          try {
            resolve2(Buffer.concat(accum, accumBytes));
          } catch (err) {
            reject(new FetchError2(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, "system", err));
          }
        });
      });
    }
    function convertBody(buffer, headers) {
      if (typeof convert !== "function") {
        throw new Error("The package `encoding` must be installed to use the textConverted() function");
      }
      const ct = headers.get("content-type");
      let charset = "utf-8";
      let res, str;
      if (ct) {
        res = /charset=([^;]*)/i.exec(ct);
      }
      str = buffer.slice(0, 1024).toString();
      if (!res && str) {
        res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
      }
      if (!res && str) {
        res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
        if (!res) {
          res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
          if (res) {
            res.pop();
          }
        }
        if (res) {
          res = /charset=(.*)/i.exec(res.pop());
        }
      }
      if (!res && str) {
        res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
      }
      if (res) {
        charset = res.pop();
        if (charset === "gb2312" || charset === "gbk") {
          charset = "gb18030";
        }
      }
      return convert(buffer, "UTF-8", charset).toString();
    }
    function isURLSearchParams(obj) {
      if (typeof obj !== "object" || typeof obj.append !== "function" || typeof obj.delete !== "function" || typeof obj.get !== "function" || typeof obj.getAll !== "function" || typeof obj.has !== "function" || typeof obj.set !== "function") {
        return false;
      }
      return obj.constructor.name === "URLSearchParams" || Object.prototype.toString.call(obj) === "[object URLSearchParams]" || typeof obj.sort === "function";
    }
    function isBlob2(obj) {
      return typeof obj === "object" && typeof obj.arrayBuffer === "function" && typeof obj.type === "string" && typeof obj.stream === "function" && typeof obj.constructor === "function" && typeof obj.constructor.name === "string" && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
    }
    function clone2(instance) {
      let p1, p2;
      let body = instance.body;
      if (instance.bodyUsed) {
        throw new Error("cannot clone body after it is used");
      }
      if (body instanceof Stream2 && typeof body.getBoundary !== "function") {
        p1 = new PassThrough2();
        p2 = new PassThrough2();
        body.pipe(p1);
        body.pipe(p2);
        instance[INTERNALS2].body = p1;
        body = p2;
      }
      return body;
    }
    function extractContentType2(body) {
      if (body === null) {
        return null;
      } else if (typeof body === "string") {
        return "text/plain;charset=UTF-8";
      } else if (isURLSearchParams(body)) {
        return "application/x-www-form-urlencoded;charset=UTF-8";
      } else if (isBlob2(body)) {
        return body.type || null;
      } else if (Buffer.isBuffer(body)) {
        return null;
      } else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
        return null;
      } else if (ArrayBuffer.isView(body)) {
        return null;
      } else if (typeof body.getBoundary === "function") {
        return `multipart/form-data;boundary=${body.getBoundary()}`;
      } else if (body instanceof Stream2) {
        return null;
      } else {
        return "text/plain;charset=UTF-8";
      }
    }
    function getTotalBytes2(instance) {
      const body = instance.body;
      if (body === null) {
        return 0;
      } else if (isBlob2(body)) {
        return body.size;
      } else if (Buffer.isBuffer(body)) {
        return body.length;
      } else if (body && typeof body.getLengthSync === "function") {
        if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || body.hasKnownLength && body.hasKnownLength()) {
          return body.getLengthSync();
        }
        return null;
      } else {
        return null;
      }
    }
    function writeToStream2(dest, instance) {
      const body = instance.body;
      if (body === null) {
        dest.end();
      } else if (isBlob2(body)) {
        body.stream().pipe(dest);
      } else if (Buffer.isBuffer(body)) {
        dest.write(body);
        dest.end();
      } else {
        body.pipe(dest);
      }
    }
    Body2.Promise = global.Promise;
    var invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
    var invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
    function validateName(name) {
      name = `${name}`;
      if (invalidTokenRegex.test(name) || name === "") {
        throw new TypeError(`${name} is not a legal HTTP header name`);
      }
    }
    function validateValue(value) {
      value = `${value}`;
      if (invalidHeaderCharRegex.test(value)) {
        throw new TypeError(`${value} is not a legal HTTP header value`);
      }
    }
    function find(map, name) {
      name = name.toLowerCase();
      for (const key in map) {
        if (key.toLowerCase() === name) {
          return key;
        }
      }
      return void 0;
    }
    var MAP = Symbol("map");
    var Headers2 = class {
      constructor() {
        let init2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0;
        this[MAP] = Object.create(null);
        if (init2 instanceof Headers2) {
          const rawHeaders = init2.raw();
          const headerNames = Object.keys(rawHeaders);
          for (const headerName of headerNames) {
            for (const value of rawHeaders[headerName]) {
              this.append(headerName, value);
            }
          }
          return;
        }
        if (init2 == null)
          ;
        else if (typeof init2 === "object") {
          const method = init2[Symbol.iterator];
          if (method != null) {
            if (typeof method !== "function") {
              throw new TypeError("Header pairs must be iterable");
            }
            const pairs = [];
            for (const pair of init2) {
              if (typeof pair !== "object" || typeof pair[Symbol.iterator] !== "function") {
                throw new TypeError("Each header pair must be iterable");
              }
              pairs.push(Array.from(pair));
            }
            for (const pair of pairs) {
              if (pair.length !== 2) {
                throw new TypeError("Each header pair must be a name/value tuple");
              }
              this.append(pair[0], pair[1]);
            }
          } else {
            for (const key of Object.keys(init2)) {
              const value = init2[key];
              this.append(key, value);
            }
          }
        } else {
          throw new TypeError("Provided initializer must be an object");
        }
      }
      get(name) {
        name = `${name}`;
        validateName(name);
        const key = find(this[MAP], name);
        if (key === void 0) {
          return null;
        }
        return this[MAP][key].join(", ");
      }
      forEach(callback) {
        let thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
        let pairs = getHeaders(this);
        let i = 0;
        while (i < pairs.length) {
          var _pairs$i = pairs[i];
          const name = _pairs$i[0], value = _pairs$i[1];
          callback.call(thisArg, value, name, this);
          pairs = getHeaders(this);
          i++;
        }
      }
      set(name, value) {
        name = `${name}`;
        value = `${value}`;
        validateName(name);
        validateValue(value);
        const key = find(this[MAP], name);
        this[MAP][key !== void 0 ? key : name] = [value];
      }
      append(name, value) {
        name = `${name}`;
        value = `${value}`;
        validateName(name);
        validateValue(value);
        const key = find(this[MAP], name);
        if (key !== void 0) {
          this[MAP][key].push(value);
        } else {
          this[MAP][name] = [value];
        }
      }
      has(name) {
        name = `${name}`;
        validateName(name);
        return find(this[MAP], name) !== void 0;
      }
      delete(name) {
        name = `${name}`;
        validateName(name);
        const key = find(this[MAP], name);
        if (key !== void 0) {
          delete this[MAP][key];
        }
      }
      raw() {
        return this[MAP];
      }
      keys() {
        return createHeadersIterator(this, "key");
      }
      values() {
        return createHeadersIterator(this, "value");
      }
      [Symbol.iterator]() {
        return createHeadersIterator(this, "key+value");
      }
    };
    Headers2.prototype.entries = Headers2.prototype[Symbol.iterator];
    Object.defineProperty(Headers2.prototype, Symbol.toStringTag, {
      value: "Headers",
      writable: false,
      enumerable: false,
      configurable: true
    });
    Object.defineProperties(Headers2.prototype, {
      get: {enumerable: true},
      forEach: {enumerable: true},
      set: {enumerable: true},
      append: {enumerable: true},
      has: {enumerable: true},
      delete: {enumerable: true},
      keys: {enumerable: true},
      values: {enumerable: true},
      entries: {enumerable: true}
    });
    function getHeaders(headers) {
      let kind = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "key+value";
      const keys = Object.keys(headers[MAP]).sort();
      return keys.map(kind === "key" ? function(k) {
        return k.toLowerCase();
      } : kind === "value" ? function(k) {
        return headers[MAP][k].join(", ");
      } : function(k) {
        return [k.toLowerCase(), headers[MAP][k].join(", ")];
      });
    }
    var INTERNAL = Symbol("internal");
    function createHeadersIterator(target, kind) {
      const iterator = Object.create(HeadersIteratorPrototype);
      iterator[INTERNAL] = {
        target,
        kind,
        index: 0
      };
      return iterator;
    }
    var HeadersIteratorPrototype = Object.setPrototypeOf({
      next() {
        if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
          throw new TypeError("Value of `this` is not a HeadersIterator");
        }
        var _INTERNAL = this[INTERNAL];
        const target = _INTERNAL.target, kind = _INTERNAL.kind, index2 = _INTERNAL.index;
        const values = getHeaders(target, kind);
        const len = values.length;
        if (index2 >= len) {
          return {
            value: void 0,
            done: true
          };
        }
        this[INTERNAL].index = index2 + 1;
        return {
          value: values[index2],
          done: false
        };
      }
    }, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
    Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
      value: "HeadersIterator",
      writable: false,
      enumerable: false,
      configurable: true
    });
    function exportNodeCompatibleHeaders(headers) {
      const obj = Object.assign({__proto__: null}, headers[MAP]);
      const hostHeaderKey = find(headers[MAP], "Host");
      if (hostHeaderKey !== void 0) {
        obj[hostHeaderKey] = obj[hostHeaderKey][0];
      }
      return obj;
    }
    function createHeadersLenient(obj) {
      const headers = new Headers2();
      for (const name of Object.keys(obj)) {
        if (invalidTokenRegex.test(name)) {
          continue;
        }
        if (Array.isArray(obj[name])) {
          for (const val of obj[name]) {
            if (invalidHeaderCharRegex.test(val)) {
              continue;
            }
            if (headers[MAP][name] === void 0) {
              headers[MAP][name] = [val];
            } else {
              headers[MAP][name].push(val);
            }
          }
        } else if (!invalidHeaderCharRegex.test(obj[name])) {
          headers[MAP][name] = [obj[name]];
        }
      }
      return headers;
    }
    var INTERNALS$12 = Symbol("Response internals");
    var STATUS_CODES = http2.STATUS_CODES;
    var Response3 = class {
      constructor() {
        let body = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
        let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        Body2.call(this, body, opts);
        const status = opts.status || 200;
        const headers = new Headers2(opts.headers);
        if (body != null && !headers.has("Content-Type")) {
          const contentType = extractContentType2(body);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        this[INTERNALS$12] = {
          url: opts.url,
          status,
          statusText: opts.statusText || STATUS_CODES[status],
          headers,
          counter: opts.counter
        };
      }
      get url() {
        return this[INTERNALS$12].url || "";
      }
      get status() {
        return this[INTERNALS$12].status;
      }
      get ok() {
        return this[INTERNALS$12].status >= 200 && this[INTERNALS$12].status < 300;
      }
      get redirected() {
        return this[INTERNALS$12].counter > 0;
      }
      get statusText() {
        return this[INTERNALS$12].statusText;
      }
      get headers() {
        return this[INTERNALS$12].headers;
      }
      clone() {
        return new Response3(clone2(this), {
          url: this.url,
          status: this.status,
          statusText: this.statusText,
          headers: this.headers,
          ok: this.ok,
          redirected: this.redirected
        });
      }
    };
    Body2.mixIn(Response3.prototype);
    Object.defineProperties(Response3.prototype, {
      url: {enumerable: true},
      status: {enumerable: true},
      ok: {enumerable: true},
      redirected: {enumerable: true},
      statusText: {enumerable: true},
      headers: {enumerable: true},
      clone: {enumerable: true}
    });
    Object.defineProperty(Response3.prototype, Symbol.toStringTag, {
      value: "Response",
      writable: false,
      enumerable: false,
      configurable: true
    });
    var INTERNALS$22 = Symbol("Request internals");
    var parse_url = Url.parse;
    var format_url = Url.format;
    var streamDestructionSupported = "destroy" in Stream2.Readable.prototype;
    function isRequest2(input) {
      return typeof input === "object" && typeof input[INTERNALS$22] === "object";
    }
    function isAbortSignal2(signal) {
      const proto = signal && typeof signal === "object" && Object.getPrototypeOf(signal);
      return !!(proto && proto.constructor.name === "AbortSignal");
    }
    var Request2 = class {
      constructor(input) {
        let init2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        let parsedURL;
        if (!isRequest2(input)) {
          if (input && input.href) {
            parsedURL = parse_url(input.href);
          } else {
            parsedURL = parse_url(`${input}`);
          }
          input = {};
        } else {
          parsedURL = parse_url(input.url);
        }
        let method = init2.method || input.method || "GET";
        method = method.toUpperCase();
        if ((init2.body != null || isRequest2(input) && input.body !== null) && (method === "GET" || method === "HEAD")) {
          throw new TypeError("Request with GET/HEAD method cannot have body");
        }
        let inputBody = init2.body != null ? init2.body : isRequest2(input) && input.body !== null ? clone2(input) : null;
        Body2.call(this, inputBody, {
          timeout: init2.timeout || input.timeout || 0,
          size: init2.size || input.size || 0
        });
        const headers = new Headers2(init2.headers || input.headers || {});
        if (inputBody != null && !headers.has("Content-Type")) {
          const contentType = extractContentType2(inputBody);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        let signal = isRequest2(input) ? input.signal : null;
        if ("signal" in init2)
          signal = init2.signal;
        if (signal != null && !isAbortSignal2(signal)) {
          throw new TypeError("Expected signal to be an instanceof AbortSignal");
        }
        this[INTERNALS$22] = {
          method,
          redirect: init2.redirect || input.redirect || "follow",
          headers,
          parsedURL,
          signal
        };
        this.follow = init2.follow !== void 0 ? init2.follow : input.follow !== void 0 ? input.follow : 20;
        this.compress = init2.compress !== void 0 ? init2.compress : input.compress !== void 0 ? input.compress : true;
        this.counter = init2.counter || input.counter || 0;
        this.agent = init2.agent || input.agent;
      }
      get method() {
        return this[INTERNALS$22].method;
      }
      get url() {
        return format_url(this[INTERNALS$22].parsedURL);
      }
      get headers() {
        return this[INTERNALS$22].headers;
      }
      get redirect() {
        return this[INTERNALS$22].redirect;
      }
      get signal() {
        return this[INTERNALS$22].signal;
      }
      clone() {
        return new Request2(this);
      }
    };
    Body2.mixIn(Request2.prototype);
    Object.defineProperty(Request2.prototype, Symbol.toStringTag, {
      value: "Request",
      writable: false,
      enumerable: false,
      configurable: true
    });
    Object.defineProperties(Request2.prototype, {
      method: {enumerable: true},
      url: {enumerable: true},
      headers: {enumerable: true},
      redirect: {enumerable: true},
      clone: {enumerable: true},
      signal: {enumerable: true}
    });
    function getNodeRequestOptions2(request) {
      const parsedURL = request[INTERNALS$22].parsedURL;
      const headers = new Headers2(request[INTERNALS$22].headers);
      if (!headers.has("Accept")) {
        headers.set("Accept", "*/*");
      }
      if (!parsedURL.protocol || !parsedURL.hostname) {
        throw new TypeError("Only absolute URLs are supported");
      }
      if (!/^https?:$/.test(parsedURL.protocol)) {
        throw new TypeError("Only HTTP(S) protocols are supported");
      }
      if (request.signal && request.body instanceof Stream2.Readable && !streamDestructionSupported) {
        throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
      }
      let contentLengthValue = null;
      if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
        contentLengthValue = "0";
      }
      if (request.body != null) {
        const totalBytes = getTotalBytes2(request);
        if (typeof totalBytes === "number") {
          contentLengthValue = String(totalBytes);
        }
      }
      if (contentLengthValue) {
        headers.set("Content-Length", contentLengthValue);
      }
      if (!headers.has("User-Agent")) {
        headers.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)");
      }
      if (request.compress && !headers.has("Accept-Encoding")) {
        headers.set("Accept-Encoding", "gzip,deflate");
      }
      let agent = request.agent;
      if (typeof agent === "function") {
        agent = agent(parsedURL);
      }
      if (!headers.has("Connection") && !agent) {
        headers.set("Connection", "close");
      }
      return Object.assign({}, parsedURL, {
        method: request.method,
        headers: exportNodeCompatibleHeaders(headers),
        agent
      });
    }
    function AbortError2(message) {
      Error.call(this, message);
      this.type = "aborted";
      this.message = message;
      Error.captureStackTrace(this, this.constructor);
    }
    AbortError2.prototype = Object.create(Error.prototype);
    AbortError2.prototype.constructor = AbortError2;
    AbortError2.prototype.name = "AbortError";
    var PassThrough$1 = Stream2.PassThrough;
    var resolve_url = Url.resolve;
    function fetch3(url, opts) {
      if (!fetch3.Promise) {
        throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
      }
      Body2.Promise = fetch3.Promise;
      return new fetch3.Promise(function(resolve2, reject) {
        const request = new Request2(url, opts);
        const options2 = getNodeRequestOptions2(request);
        const send = (options2.protocol === "https:" ? https2 : http2).request;
        const signal = request.signal;
        let response = null;
        const abort = function abort2() {
          let error3 = new AbortError2("The user aborted a request.");
          reject(error3);
          if (request.body && request.body instanceof Stream2.Readable) {
            request.body.destroy(error3);
          }
          if (!response || !response.body)
            return;
          response.body.emit("error", error3);
        };
        if (signal && signal.aborted) {
          abort();
          return;
        }
        const abortAndFinalize = function abortAndFinalize2() {
          abort();
          finalize();
        };
        const req = send(options2);
        let reqTimeout;
        if (signal) {
          signal.addEventListener("abort", abortAndFinalize);
        }
        function finalize() {
          req.abort();
          if (signal)
            signal.removeEventListener("abort", abortAndFinalize);
          clearTimeout(reqTimeout);
        }
        if (request.timeout) {
          req.once("socket", function(socket) {
            reqTimeout = setTimeout(function() {
              reject(new FetchError2(`network timeout at: ${request.url}`, "request-timeout"));
              finalize();
            }, request.timeout);
          });
        }
        req.on("error", function(err) {
          reject(new FetchError2(`request to ${request.url} failed, reason: ${err.message}`, "system", err));
          finalize();
        });
        req.on("response", function(res) {
          clearTimeout(reqTimeout);
          const headers = createHeadersLenient(res.headers);
          if (fetch3.isRedirect(res.statusCode)) {
            const location = headers.get("Location");
            const locationURL = location === null ? null : resolve_url(request.url, location);
            switch (request.redirect) {
              case "error":
                reject(new FetchError2(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect"));
                finalize();
                return;
              case "manual":
                if (locationURL !== null) {
                  try {
                    headers.set("Location", locationURL);
                  } catch (err) {
                    reject(err);
                  }
                }
                break;
              case "follow":
                if (locationURL === null) {
                  break;
                }
                if (request.counter >= request.follow) {
                  reject(new FetchError2(`maximum redirect reached at: ${request.url}`, "max-redirect"));
                  finalize();
                  return;
                }
                const requestOpts = {
                  headers: new Headers2(request.headers),
                  follow: request.follow,
                  counter: request.counter + 1,
                  agent: request.agent,
                  compress: request.compress,
                  method: request.method,
                  body: request.body,
                  signal: request.signal,
                  timeout: request.timeout,
                  size: request.size
                };
                if (res.statusCode !== 303 && request.body && getTotalBytes2(request) === null) {
                  reject(new FetchError2("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
                  finalize();
                  return;
                }
                if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === "POST") {
                  requestOpts.method = "GET";
                  requestOpts.body = void 0;
                  requestOpts.headers.delete("content-length");
                }
                resolve2(fetch3(new Request2(locationURL, requestOpts)));
                finalize();
                return;
            }
          }
          res.once("end", function() {
            if (signal)
              signal.removeEventListener("abort", abortAndFinalize);
          });
          let body = res.pipe(new PassThrough$1());
          const response_options = {
            url: request.url,
            status: res.statusCode,
            statusText: res.statusMessage,
            headers,
            size: request.size,
            timeout: request.timeout,
            counter: request.counter
          };
          const codings = headers.get("Content-Encoding");
          if (!request.compress || request.method === "HEAD" || codings === null || res.statusCode === 204 || res.statusCode === 304) {
            response = new Response3(body, response_options);
            resolve2(response);
            return;
          }
          const zlibOptions = {
            flush: zlib2.Z_SYNC_FLUSH,
            finishFlush: zlib2.Z_SYNC_FLUSH
          };
          if (codings == "gzip" || codings == "x-gzip") {
            body = body.pipe(zlib2.createGunzip(zlibOptions));
            response = new Response3(body, response_options);
            resolve2(response);
            return;
          }
          if (codings == "deflate" || codings == "x-deflate") {
            const raw = res.pipe(new PassThrough$1());
            raw.once("data", function(chunk) {
              if ((chunk[0] & 15) === 8) {
                body = body.pipe(zlib2.createInflate());
              } else {
                body = body.pipe(zlib2.createInflateRaw());
              }
              response = new Response3(body, response_options);
              resolve2(response);
            });
            return;
          }
          if (codings == "br" && typeof zlib2.createBrotliDecompress === "function") {
            body = body.pipe(zlib2.createBrotliDecompress());
            response = new Response3(body, response_options);
            resolve2(response);
            return;
          }
          response = new Response3(body, response_options);
          resolve2(response);
        });
        writeToStream2(req, request);
      });
    }
    fetch3.isRedirect = function(code) {
      return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
    };
    fetch3.Promise = global.Promise;
    module2.exports = exports2 = fetch3;
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.default = exports2;
    exports2.Headers = Headers2;
    exports2.Request = Request2;
    exports2.Response = Response3;
    exports2.FetchError = FetchError2;
  }
});

// node_modules/@firebase/auth/dist/node/register-784c267e.js
var require_register_784c267e = __commonJS({
  "node_modules/@firebase/auth/dist/node/register-784c267e.js"(exports2) {
    "use strict";
    var app = require_index_cjs3();
    var tslib = require_tslib();
    var util = require_index_node_cjs();
    var logger = require_index_cjs2();
    var component = require_index_cjs();
    function _debugErrorMap() {
      var _a2;
      return _a2 = {}, _a2["admin-restricted-operation"] = "This operation is restricted to administrators only.", _a2["argument-error"] = "", _a2["app-not-authorized"] = "This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.", _a2["app-not-installed"] = "The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.", _a2["captcha-check-failed"] = "The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.", _a2["code-expired"] = "The SMS code has expired. Please re-send the verification code to try again.", _a2["cordova-not-ready"] = "Cordova framework is not ready.", _a2["cors-unsupported"] = "This browser is not supported.", _a2["credential-already-in-use"] = "This credential is already associated with a different user account.", _a2["custom-token-mismatch"] = "The custom token corresponds to a different audience.", _a2["requires-recent-login"] = "This operation is sensitive and requires recent authentication. Log in again before retrying this request.", _a2["dependent-sdk-initialized-before-auth"] = "Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK.", _a2["dynamic-link-not-activated"] = "Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.", _a2["email-change-needs-verification"] = "Multi-factor users must always have a verified email.", _a2["email-already-in-use"] = "The email address is already in use by another account.", _a2["emulator-config-failed"] = 'Auth instance has already been used to make a network call. Auth can no longer be configured to use the emulator. Try calling "useAuthEmulator()" sooner.', _a2["expired-action-code"] = "The action code has expired.", _a2["cancelled-popup-request"] = "This operation has been cancelled due to another conflicting popup being opened.", _a2["internal-error"] = "An internal AuthError has occurred.", _a2["invalid-app-credential"] = "The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.", _a2["invalid-app-id"] = "The mobile app identifier is not registed for the current project.", _a2["invalid-user-token"] = "This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.", _a2["invalid-auth-event"] = "An internal AuthError has occurred.", _a2["invalid-verification-code"] = "The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.", _a2["invalid-continue-uri"] = "The continue URL provided in the request is invalid.", _a2["invalid-cordova-configuration"] = "The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.", _a2["invalid-custom-token"] = "The custom token format is incorrect. Please check the documentation.", _a2["invalid-dynamic-link-domain"] = "The provided dynamic link domain is not configured or authorized for the current project.", _a2["invalid-email"] = "The email address is badly formatted.", _a2["invalid-emulator-scheme"] = "Emulator URL must start with a valid scheme (http:// or https://).", _a2["invalid-api-key"] = "Your API key is invalid, please check you have copied it correctly.", _a2["invalid-cert-hash"] = "The SHA-1 certificate hash provided is invalid.", _a2["invalid-credential"] = "The supplied auth credential is malformed or has expired.", _a2["invalid-message-payload"] = "The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.", _a2["invalid-multi-factor-session"] = "The request does not contain a valid proof of first factor successful sign-in.", _a2["invalid-oauth-provider"] = "EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.", _a2["invalid-oauth-client-id"] = "The OAuth client ID provided is either invalid or does not match the specified API key.", _a2["unauthorized-domain"] = "This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.", _a2["invalid-action-code"] = "The action code is invalid. This can happen if the code is malformed, expired, or has already been used.", _a2["wrong-password"] = "The password is invalid or the user does not have a password.", _a2["invalid-persistence-type"] = "The specified persistence type is invalid. It can only be local, session or none.", _a2["invalid-phone-number"] = "The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].", _a2["invalid-provider-id"] = "The specified provider ID is invalid.", _a2["invalid-recipient-email"] = "The email corresponding to this action failed to send as the provided recipient email address is invalid.", _a2["invalid-sender"] = "The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.", _a2["invalid-verification-id"] = "The verification ID used to create the phone auth credential is invalid.", _a2["invalid-tenant-id"] = "The Auth instance's tenant ID is invalid.", _a2["missing-android-pkg-name"] = "An Android Package Name must be provided if the Android App is required to be installed.", _a2["auth-domain-config-required"] = "Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.", _a2["missing-app-credential"] = "The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.", _a2["missing-verification-code"] = "The phone auth credential was created with an empty SMS verification code.", _a2["missing-continue-uri"] = "A continue URL must be provided in the request.", _a2["missing-iframe-start"] = "An internal AuthError has occurred.", _a2["missing-ios-bundle-id"] = "An iOS Bundle ID must be provided if an App Store ID is provided.", _a2["missing-or-invalid-nonce"] = "The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.", _a2["missing-multi-factor-info"] = "No second factor identifier is provided.", _a2["missing-multi-factor-session"] = "The request is missing proof of first factor successful sign-in.", _a2["missing-phone-number"] = "To send verification codes, provide a phone number for the recipient.", _a2["missing-verification-id"] = "The phone auth credential was created with an empty verification ID.", _a2["app-deleted"] = "This instance of FirebaseApp has been deleted.", _a2["multi-factor-info-not-found"] = "The user does not have a second factor matching the identifier provided.", _a2["multi-factor-auth-required"] = "Proof of ownership of a second factor is required to complete sign-in.", _a2["account-exists-with-different-credential"] = "An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.", _a2["network-request-failed"] = "A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.", _a2["no-auth-event"] = "An internal AuthError has occurred.", _a2["no-such-provider"] = "User was not linked to an account with the given provider.", _a2["null-user"] = "A null user object was provided as the argument for an operation which requires a non-null user object.", _a2["operation-not-allowed"] = "The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.", _a2["operation-not-supported-in-this-environment"] = 'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.', _a2["popup-blocked"] = "Unable to establish a connection with the popup. It may have been blocked by the browser.", _a2["popup-closed-by-user"] = "The popup has been closed by the user before finalizing the operation.", _a2["provider-already-linked"] = "User can only be linked to one identity for the given provider.", _a2["quota-exceeded"] = "The project's quota for this operation has been exceeded.", _a2["redirect-cancelled-by-user"] = "The redirect operation has been cancelled by the user before finalizing.", _a2["redirect-operation-pending"] = "A redirect sign-in operation is already pending.", _a2["rejected-credential"] = "The request contains malformed or mismatching credentials.", _a2["second-factor-already-in-use"] = "The second factor is already enrolled on this account.", _a2["maximum-second-factor-count-exceeded"] = "The maximum allowed number of second factors on a user has been exceeded.", _a2["tenant-id-mismatch"] = "The provided tenant ID does not match the Auth instance's tenant ID", _a2["timeout"] = "The operation has timed out.", _a2["user-token-expired"] = "The user's credential is no longer valid. The user must sign in again.", _a2["too-many-requests"] = "We have blocked all requests from this device due to unusual activity. Try again later.", _a2["unauthorized-continue-uri"] = "The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.", _a2["unsupported-first-factor"] = "Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.", _a2["unsupported-persistence-type"] = "The current environment does not support the specified persistence type.", _a2["unsupported-tenant-operation"] = "This operation is not supported in a multi-tenant context.", _a2["unverified-email"] = "The operation requires a verified email.", _a2["user-cancelled"] = "The user did not grant your application the permissions it requested.", _a2["user-not-found"] = "There is no user record corresponding to this identifier. The user may have been deleted.", _a2["user-disabled"] = "The user account has been disabled by an administrator.", _a2["user-mismatch"] = "The supplied credentials do not correspond to the previously signed in user.", _a2["user-signed-out"] = "", _a2["weak-password"] = "The password must be 6 characters long or more.", _a2["web-storage-unsupported"] = "This browser is not supported or 3rd party cookies and data may be disabled.", _a2["already-initialized"] = "Auth can only be initialized once per app.", _a2;
    }
    function _prodErrorMap() {
      var _a2;
      return _a2 = {}, _a2["dependent-sdk-initialized-before-auth"] = "Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK.", _a2;
    }
    var debugErrorMap = _debugErrorMap;
    var prodErrorMap = _prodErrorMap;
    var _DEFAULT_AUTH_ERROR_FACTORY = new util.ErrorFactory("auth", "Firebase", _prodErrorMap());
    var logClient = new logger.Logger("@firebase/auth-exp");
    function _logError(msg) {
      var args = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
      }
      if (logClient.logLevel <= logger.LogLevel.ERROR) {
        logClient.error.apply(logClient, tslib.__spreadArray(["Auth (" + app.SDK_VERSION + "): " + msg], args));
      }
    }
    function _fail(authOrCode) {
      var rest = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        rest[_i - 1] = arguments[_i];
      }
      throw createErrorInternal.apply(void 0, tslib.__spreadArray([authOrCode], rest));
    }
    function _createError(authOrCode) {
      var rest = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        rest[_i - 1] = arguments[_i];
      }
      return createErrorInternal.apply(void 0, tslib.__spreadArray([authOrCode], rest));
    }
    function createErrorInternal(authOrCode) {
      var _a2;
      var rest = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        rest[_i - 1] = arguments[_i];
      }
      if (typeof authOrCode !== "string") {
        var code = rest[0];
        var fullParams = tslib.__spreadArray([], rest.slice(1));
        if (fullParams[0]) {
          fullParams[0].appName = authOrCode.name;
        }
        return (_a2 = authOrCode._errorFactory).create.apply(_a2, tslib.__spreadArray([code], fullParams));
      }
      return _DEFAULT_AUTH_ERROR_FACTORY.create.apply(_DEFAULT_AUTH_ERROR_FACTORY, tslib.__spreadArray([authOrCode], rest));
    }
    function _assert(assertion, authOrCode) {
      var rest = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        rest[_i - 2] = arguments[_i];
      }
      if (!assertion) {
        throw createErrorInternal.apply(void 0, tslib.__spreadArray([authOrCode], rest));
      }
    }
    function debugFail(failure) {
      var message = "INTERNAL ASSERTION FAILED: " + failure;
      _logError(message);
      throw new Error(message);
    }
    function debugAssert(assertion, message) {
      if (!assertion) {
        debugFail(message);
      }
    }
    var instanceCache = new Map();
    function _getInstance(cls) {
      debugAssert(cls instanceof Function, "Expected a class definition");
      var instance = instanceCache.get(cls);
      if (instance) {
        debugAssert(instance instanceof cls, "Instance stored in cache mismatched with class");
        return instance;
      }
      instance = new cls();
      instanceCache.set(cls, instance);
      return instance;
    }
    function initializeAuth(app$1, deps) {
      var provider = app._getProvider(app$1, "auth-exp");
      if (provider.isInitialized()) {
        var auth_1 = provider.getImmediate();
        _fail(auth_1, "already-initialized");
      }
      var auth = provider.initialize({options: deps});
      return auth;
    }
    function _initializeAuthInstance(auth, deps) {
      var persistence = (deps === null || deps === void 0 ? void 0 : deps.persistence) || [];
      var hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);
      if (deps === null || deps === void 0 ? void 0 : deps.errorMap) {
        auth._updateErrorMap(deps.errorMap);
      }
      auth._initializeWithPersistence(hierarchy, deps === null || deps === void 0 ? void 0 : deps.popupRedirectResolver);
    }
    function _getCurrentUrl() {
      var _a2;
      return typeof self !== "undefined" && ((_a2 = self.location) === null || _a2 === void 0 ? void 0 : _a2.href) || "";
    }
    function _isHttpOrHttps() {
      return _getCurrentScheme() === "http:" || _getCurrentScheme() === "https:";
    }
    function _getCurrentScheme() {
      var _a2;
      return typeof self !== "undefined" && ((_a2 = self.location) === null || _a2 === void 0 ? void 0 : _a2.protocol) || null;
    }
    function _isOnline() {
      if (typeof navigator !== "undefined" && navigator && "onLine" in navigator && typeof navigator.onLine === "boolean" && (_isHttpOrHttps() || util.isBrowserExtension() || "connection" in navigator)) {
        return navigator.onLine;
      }
      return true;
    }
    function _getUserLanguage() {
      if (typeof navigator === "undefined") {
        return null;
      }
      var navigatorLanguage = navigator;
      return navigatorLanguage.languages && navigatorLanguage.languages[0] || navigatorLanguage.language || null;
    }
    var Delay = function() {
      function Delay2(shortDelay, longDelay) {
        this.shortDelay = shortDelay;
        this.longDelay = longDelay;
        debugAssert(longDelay > shortDelay, "Short delay should be less than long delay!");
        this.isMobile = util.isMobileCordova() || util.isReactNative();
      }
      Delay2.prototype.get = function() {
        if (!_isOnline()) {
          return Math.min(5e3, this.shortDelay);
        }
        return this.isMobile ? this.longDelay : this.shortDelay;
      };
      return Delay2;
    }();
    function _emulatorUrl(config, path) {
      debugAssert(config.emulator, "Emulator should always be set here");
      var url = config.emulator.url;
      if (!path) {
        return url;
      }
      return "" + url + (path.startsWith("/") ? path.slice(1) : path);
    }
    var FetchProvider = function() {
      function FetchProvider2() {
      }
      FetchProvider2.initialize = function(fetchImpl, headersImpl, responseImpl) {
        this.fetchImpl = fetchImpl;
        if (headersImpl) {
          this.headersImpl = headersImpl;
        }
        if (responseImpl) {
          this.responseImpl = responseImpl;
        }
      };
      FetchProvider2.fetch = function() {
        if (this.fetchImpl) {
          return this.fetchImpl;
        }
        if (typeof self !== "undefined" && "fetch" in self) {
          return self.fetch;
        }
        debugFail("Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
      };
      FetchProvider2.headers = function() {
        if (this.headersImpl) {
          return this.headersImpl;
        }
        if (typeof self !== "undefined" && "Headers" in self) {
          return self.Headers;
        }
        debugFail("Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
      };
      FetchProvider2.response = function() {
        if (this.responseImpl) {
          return this.responseImpl;
        }
        if (typeof self !== "undefined" && "Response" in self) {
          return self.Response;
        }
        debugFail("Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
      };
      return FetchProvider2;
    }();
    var _a;
    var SERVER_ERROR_MAP = (_a = {}, _a["CREDENTIAL_MISMATCH"] = "custom-token-mismatch", _a["MISSING_CUSTOM_TOKEN"] = "internal-error", _a["INVALID_IDENTIFIER"] = "invalid-email", _a["MISSING_CONTINUE_URI"] = "internal-error", _a["INVALID_PASSWORD"] = "wrong-password", _a["MISSING_PASSWORD"] = "internal-error", _a["EMAIL_EXISTS"] = "email-already-in-use", _a["PASSWORD_LOGIN_DISABLED"] = "operation-not-allowed", _a["INVALID_IDP_RESPONSE"] = "invalid-credential", _a["INVALID_PENDING_TOKEN"] = "invalid-credential", _a["FEDERATED_USER_ID_ALREADY_LINKED"] = "credential-already-in-use", _a["MISSING_REQ_TYPE"] = "internal-error", _a["EMAIL_NOT_FOUND"] = "user-not-found", _a["RESET_PASSWORD_EXCEED_LIMIT"] = "too-many-requests", _a["EXPIRED_OOB_CODE"] = "expired-action-code", _a["INVALID_OOB_CODE"] = "invalid-action-code", _a["MISSING_OOB_CODE"] = "internal-error", _a["CREDENTIAL_TOO_OLD_LOGIN_AGAIN"] = "requires-recent-login", _a["INVALID_ID_TOKEN"] = "invalid-user-token", _a["TOKEN_EXPIRED"] = "user-token-expired", _a["USER_NOT_FOUND"] = "user-token-expired", _a["TOO_MANY_ATTEMPTS_TRY_LATER"] = "too-many-requests", _a["INVALID_CODE"] = "invalid-verification-code", _a["INVALID_SESSION_INFO"] = "invalid-verification-id", _a["INVALID_TEMPORARY_PROOF"] = "invalid-credential", _a["MISSING_SESSION_INFO"] = "missing-verification-id", _a["SESSION_EXPIRED"] = "code-expired", _a["MISSING_ANDROID_PACKAGE_NAME"] = "missing-android-pkg-name", _a["UNAUTHORIZED_DOMAIN"] = "unauthorized-continue-uri", _a["INVALID_OAUTH_CLIENT_ID"] = "invalid-oauth-client-id", _a["ADMIN_ONLY_OPERATION"] = "admin-restricted-operation", _a["INVALID_MFA_PENDING_CREDENTIAL"] = "invalid-multi-factor-session", _a["MFA_ENROLLMENT_NOT_FOUND"] = "multi-factor-info-not-found", _a["MISSING_MFA_ENROLLMENT_ID"] = "missing-multi-factor-info", _a["MISSING_MFA_PENDING_CREDENTIAL"] = "missing-multi-factor-session", _a["SECOND_FACTOR_EXISTS"] = "second-factor-already-in-use", _a["SECOND_FACTOR_LIMIT_EXCEEDED"] = "maximum-second-factor-count-exceeded", _a);
    var DEFAULT_API_TIMEOUT_MS = new Delay(3e4, 6e4);
    function _addTidIfNecessary(auth, request) {
      if (auth.tenantId && !request.tenantId) {
        return tslib.__assign(tslib.__assign({}, request), {tenantId: auth.tenantId});
      }
      return request;
    }
    function _performApiRequest(auth, method, path, request, customErrorMap) {
      if (customErrorMap === void 0) {
        customErrorMap = {};
      }
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_a2) {
          return [2, _performFetchWithErrorHandling(auth, customErrorMap, function() {
            var body = {};
            var params = {};
            if (request) {
              if (method === "GET") {
                params = request;
              } else {
                body = {
                  body: JSON.stringify(request)
                };
              }
            }
            var query2 = util.querystring(tslib.__assign({key: auth.config.apiKey}, params)).slice(1);
            var headers = new (FetchProvider.headers())();
            headers.set("Content-Type", "application/json");
            headers.set("X-Client-Version", auth._getSdkClientVersion());
            if (auth.languageCode) {
              headers.set("X-Firebase-Locale", auth.languageCode);
            }
            return FetchProvider.fetch()(_getFinalTarget(auth, auth.config.apiHost, path, query2), tslib.__assign({
              method,
              headers,
              referrerPolicy: "no-referrer"
            }, body));
          })];
        });
      });
    }
    function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var errorMap, networkTimeout, response, json, errorMessage, serverErrorCode, authError, e_1;
        return tslib.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              auth._canInitEmulator = false;
              errorMap = tslib.__assign(tslib.__assign({}, SERVER_ERROR_MAP), customErrorMap);
              _a2.label = 1;
            case 1:
              _a2.trys.push([1, 4, , 5]);
              networkTimeout = new NetworkTimeout(auth);
              return [4, Promise.race([
                fetchFn(),
                networkTimeout.promise
              ])];
            case 2:
              response = _a2.sent();
              networkTimeout.clearNetworkTimeout();
              return [4, response.json()];
            case 3:
              json = _a2.sent();
              if ("needConfirmation" in json) {
                throw _makeTaggedError(auth, "account-exists-with-different-credential", json);
              }
              if (response.ok && !("errorMessage" in json)) {
                return [2, json];
              } else {
                errorMessage = response.ok ? json.errorMessage : json.error.message;
                serverErrorCode = errorMessage.split(" : ")[0];
                if (serverErrorCode === "FEDERATED_USER_ID_ALREADY_LINKED") {
                  throw _makeTaggedError(auth, "credential-already-in-use", json);
                } else if (serverErrorCode === "EMAIL_EXISTS") {
                  throw _makeTaggedError(auth, "email-already-in-use", json);
                }
                authError = errorMap[serverErrorCode] || serverErrorCode.toLowerCase().replace(/[_\s]+/g, "-");
                _fail(auth, authError);
              }
              return [3, 5];
            case 4:
              e_1 = _a2.sent();
              if (e_1 instanceof util.FirebaseError) {
                throw e_1;
              }
              _fail(auth, "network-request-failed");
              return [3, 5];
            case 5:
              return [2];
          }
        });
      });
    }
    function _performSignInRequest(auth, method, path, request, customErrorMap) {
      if (customErrorMap === void 0) {
        customErrorMap = {};
      }
      return tslib.__awaiter(this, void 0, void 0, function() {
        var serverResponse;
        return tslib.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, _performApiRequest(auth, method, path, request, customErrorMap)];
            case 1:
              serverResponse = _a2.sent();
              if ("mfaPendingCredential" in serverResponse) {
                _fail(auth, "multi-factor-auth-required", {
                  serverResponse
                });
              }
              return [2, serverResponse];
          }
        });
      });
    }
    function _getFinalTarget(auth, host, path, query2) {
      var base = "" + host + path + "?" + query2;
      if (!auth.config.emulator) {
        return auth.config.apiScheme + "://" + base;
      }
      return _emulatorUrl(auth.config, base);
    }
    var NetworkTimeout = function() {
      function NetworkTimeout2(auth) {
        var _this = this;
        this.auth = auth;
        this.timer = null;
        this.promise = new Promise(function(_, reject) {
          _this.timer = setTimeout(function() {
            return reject(_createError(_this.auth, "timeout"));
          }, DEFAULT_API_TIMEOUT_MS.get());
        });
      }
      NetworkTimeout2.prototype.clearNetworkTimeout = function() {
        clearTimeout(this.timer);
      };
      return NetworkTimeout2;
    }();
    function _makeTaggedError(auth, code, response) {
      var errorParams = {
        appName: auth.name
      };
      if (response.email) {
        errorParams.email = response.email;
      }
      if (response.phoneNumber) {
        errorParams.phoneNumber = response.phoneNumber;
      }
      var error3 = _createError(auth, code, errorParams);
      error3.customData._tokenResponse = response;
      return error3;
    }
    function deleteAccount(auth, request) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_a2) {
          return [2, _performApiRequest(auth, "POST", "/v1/accounts:delete", request)];
        });
      });
    }
    function deleteLinkedAccounts(auth, request) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_a2) {
          return [2, _performApiRequest(auth, "POST", "/v1/accounts:update", request)];
        });
      });
    }
    function getAccountInfo(auth, request) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_a2) {
          return [2, _performApiRequest(auth, "POST", "/v1/accounts:lookup", request)];
        });
      });
    }
    function utcTimestampToDateString(utcTimestamp) {
      if (!utcTimestamp) {
        return void 0;
      }
      try {
        var date = new Date(Number(utcTimestamp));
        if (!isNaN(date.getTime())) {
          return date.toUTCString();
        }
      } catch (e) {
      }
      return void 0;
    }
    function getIdToken(user, forceRefresh) {
      if (forceRefresh === void 0) {
        forceRefresh = false;
      }
      return util.getModularInstance(user).getIdToken(forceRefresh);
    }
    function getIdTokenResult(user, forceRefresh) {
      if (forceRefresh === void 0) {
        forceRefresh = false;
      }
      return tslib.__awaiter(this, void 0, void 0, function() {
        var userInternal, token, claims, firebase, signInProvider;
        return tslib.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              userInternal = util.getModularInstance(user);
              return [4, userInternal.getIdToken(forceRefresh)];
            case 1:
              token = _a2.sent();
              claims = _parseToken(token);
              _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, "internal-error");
              firebase = typeof claims.firebase === "object" ? claims.firebase : void 0;
              signInProvider = firebase === null || firebase === void 0 ? void 0 : firebase["sign_in_provider"];
              return [2, {
                claims,
                token,
                authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),
                issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),
                expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),
                signInProvider: signInProvider || null,
                signInSecondFactor: (firebase === null || firebase === void 0 ? void 0 : firebase["sign_in_second_factor"]) || null
              }];
          }
        });
      });
    }
    function secondsStringToMilliseconds(seconds) {
      return Number(seconds) * 1e3;
    }
    function _parseToken(token) {
      var _a2 = token.split("."), algorithm = _a2[0], payload = _a2[1], signature = _a2[2];
      if (algorithm === void 0 || payload === void 0 || signature === void 0) {
        _logError("JWT malformed, contained fewer than 3 sections");
        return null;
      }
      try {
        var decoded = util.base64Decode(payload);
        if (!decoded) {
          _logError("Failed to decode base64 JWT payload");
          return null;
        }
        return JSON.parse(decoded);
      } catch (e) {
        _logError("Caught error parsing JWT payload as JSON", e);
        return null;
      }
    }
    function _tokenExpiresIn(token) {
      var parsedToken = _parseToken(token);
      _assert(parsedToken, "internal-error");
      _assert(typeof parsedToken.exp !== "undefined", "internal-error");
      _assert(typeof parsedToken.iat !== "undefined", "internal-error");
      return Number(parsedToken.exp) - Number(parsedToken.iat);
    }
    function _logoutIfInvalidated(user, promise, bypassAuthState) {
      if (bypassAuthState === void 0) {
        bypassAuthState = false;
      }
      return tslib.__awaiter(this, void 0, void 0, function() {
        var e_1;
        return tslib.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (bypassAuthState) {
                return [2, promise];
              }
              _a2.label = 1;
            case 1:
              _a2.trys.push([1, 3, , 6]);
              return [4, promise];
            case 2:
              return [2, _a2.sent()];
            case 3:
              e_1 = _a2.sent();
              if (!(e_1 instanceof util.FirebaseError && isUserInvalidated(e_1)))
                return [3, 5];
              if (!(user.auth.currentUser === user))
                return [3, 5];
              return [4, user.auth.signOut()];
            case 4:
              _a2.sent();
              _a2.label = 5;
            case 5:
              throw e_1;
            case 6:
              return [2];
          }
        });
      });
    }
    function isUserInvalidated(_a2) {
      var code = _a2.code;
      return code === "auth/user-disabled" || code === "auth/user-token-expired";
    }
    var ProactiveRefresh = function() {
      function ProactiveRefresh2(user) {
        this.user = user;
        this.isRunning = false;
        this.timerId = null;
        this.errorBackoff = 3e4;
      }
      ProactiveRefresh2.prototype._start = function() {
        if (this.isRunning) {
          return;
        }
        this.isRunning = true;
        this.schedule();
      };
      ProactiveRefresh2.prototype._stop = function() {
        if (!this.isRunning) {
          return;
        }
        this.isRunning = false;
        if (this.timerId !== null) {
          clearTimeout(this.timerId);
        }
      };
      ProactiveRefresh2.prototype.getInterval = function(wasError) {
        var _a2;
        if (wasError) {
          var interval = this.errorBackoff;
          this.errorBackoff = Math.min(this.errorBackoff * 2, 96e4);
          return interval;
        } else {
          this.errorBackoff = 3e4;
          var expTime = (_a2 = this.user.stsTokenManager.expirationTime) !== null && _a2 !== void 0 ? _a2 : 0;
          var interval = expTime - Date.now() - 3e5;
          return Math.max(0, interval);
        }
      };
      ProactiveRefresh2.prototype.schedule = function(wasError) {
        var _this = this;
        if (wasError === void 0) {
          wasError = false;
        }
        if (!this.isRunning) {
          return;
        }
        var interval = this.getInterval(wasError);
        this.timerId = setTimeout(function() {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            return tslib.__generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  return [4, this.iteration()];
                case 1:
                  _a2.sent();
                  return [2];
              }
            });
          });
        }, interval);
      };
      ProactiveRefresh2.prototype.iteration = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var e_1;
          return tslib.__generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                _a2.trys.push([0, 2, , 3]);
                return [4, this.user.getIdToken(true)];
              case 1:
                _a2.sent();
                return [3, 3];
              case 2:
                e_1 = _a2.sent();
                if (e_1.code === "auth/network-request-failed") {
                  this.schedule(true);
                }
                return [2];
              case 3:
                this.schedule();
                return [2];
            }
          });
        });
      };
      return ProactiveRefresh2;
    }();
    var UserMetadata = function() {
      function UserMetadata2(createdAt, lastLoginAt) {
        this.createdAt = createdAt;
        this.lastLoginAt = lastLoginAt;
        this._initializeTime();
      }
      UserMetadata2.prototype._initializeTime = function() {
        this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);
        this.creationTime = utcTimestampToDateString(this.createdAt);
      };
      UserMetadata2.prototype._copy = function(metadata) {
        this.createdAt = metadata.createdAt;
        this.lastLoginAt = metadata.lastLoginAt;
        this._initializeTime();
      };
      UserMetadata2.prototype.toJSON = function() {
        return {
          createdAt: this.createdAt,
          lastLoginAt: this.lastLoginAt
        };
      };
      return UserMetadata2;
    }();
    function _reloadWithoutSaving(user) {
      var _a2;
      return tslib.__awaiter(this, void 0, void 0, function() {
        var auth, idToken, response, coreAccount, newProviderData, providerData, oldIsAnonymous, newIsAnonymous, isAnonymous, updates;
        return tslib.__generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              auth = user.auth;
              return [4, user.getIdToken()];
            case 1:
              idToken = _b.sent();
              return [4, _logoutIfInvalidated(user, getAccountInfo(auth, {idToken}))];
            case 2:
              response = _b.sent();
              _assert(response === null || response === void 0 ? void 0 : response.users.length, auth, "internal-error");
              coreAccount = response.users[0];
              user._notifyReloadListener(coreAccount);
              newProviderData = ((_a2 = coreAccount.providerUserInfo) === null || _a2 === void 0 ? void 0 : _a2.length) ? extractProviderData(coreAccount.providerUserInfo) : [];
              providerData = mergeProviderData(user.providerData, newProviderData);
              oldIsAnonymous = user.isAnonymous;
              newIsAnonymous = !(user.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);
              isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;
              updates = {
                uid: coreAccount.localId,
                displayName: coreAccount.displayName || null,
                photoURL: coreAccount.photoUrl || null,
                email: coreAccount.email || null,
                emailVerified: coreAccount.emailVerified || false,
                phoneNumber: coreAccount.phoneNumber || null,
                tenantId: coreAccount.tenantId || null,
                providerData,
                metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),
                isAnonymous
              };
              Object.assign(user, updates);
              return [2];
          }
        });
      });
    }
    function reload(user) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var userInternal;
        return tslib.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              userInternal = util.getModularInstance(user);
              return [4, _reloadWithoutSaving(userInternal)];
            case 1:
              _a2.sent();
              return [4, userInternal.auth._persistUserIfCurrent(userInternal)];
            case 2:
              _a2.sent();
              userInternal.auth._notifyListenersIfCurrent(userInternal);
              return [2];
          }
        });
      });
    }
    function mergeProviderData(original, newData) {
      var deduped = original.filter(function(o) {
        return !newData.some(function(n) {
          return n.providerId === o.providerId;
        });
      });
      return tslib.__spreadArray(tslib.__spreadArray([], deduped), newData);
    }
    function extractProviderData(providers) {
      return providers.map(function(_a2) {
        var providerId = _a2.providerId, provider = tslib.__rest(_a2, ["providerId"]);
        return {
          providerId,
          uid: provider.rawId || "",
          displayName: provider.displayName || null,
          email: provider.email || null,
          phoneNumber: provider.phoneNumber || null,
          photoURL: provider.photoUrl || null
        };
      });
    }
    function requestStsToken(auth, refreshToken) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var response;
        return tslib.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, _performFetchWithErrorHandling(auth, {}, function() {
                var body = util.querystring({
                  "grant_type": "refresh_token",
                  "refresh_token": refreshToken
                }).slice(1);
                var _a3 = auth.config, tokenApiHost = _a3.tokenApiHost, apiKey = _a3.apiKey;
                var url = _getFinalTarget(auth, tokenApiHost, "/v1/token", "key=" + apiKey);
                return FetchProvider.fetch()(url, {
                  method: "POST",
                  headers: {
                    "X-Client-Version": auth._getSdkClientVersion(),
                    "Content-Type": "application/x-www-form-urlencoded"
                  },
                  body
                });
              })];
            case 1:
              response = _a2.sent();
              return [2, {
                accessToken: response.access_token,
                expiresIn: response.expires_in,
                refreshToken: response.refresh_token
              }];
          }
        });
      });
    }
    var StsTokenManager = function() {
      function StsTokenManager2() {
        this.refreshToken = null;
        this.accessToken = null;
        this.expirationTime = null;
      }
      Object.defineProperty(StsTokenManager2.prototype, "isExpired", {
        get: function() {
          return !this.expirationTime || Date.now() > this.expirationTime - 3e4;
        },
        enumerable: false,
        configurable: true
      });
      StsTokenManager2.prototype.updateFromServerResponse = function(response) {
        _assert(response.idToken, "internal-error");
        _assert(typeof response.idToken !== "undefined", "internal-error");
        _assert(typeof response.refreshToken !== "undefined", "internal-error");
        var expiresIn = "expiresIn" in response && typeof response.expiresIn !== "undefined" ? Number(response.expiresIn) : _tokenExpiresIn(response.idToken);
        this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);
      };
      StsTokenManager2.prototype.getToken = function(auth, forceRefresh) {
        if (forceRefresh === void 0) {
          forceRefresh = false;
        }
        return tslib.__awaiter(this, void 0, void 0, function() {
          return tslib.__generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                _assert(!this.accessToken || this.refreshToken, auth, "user-token-expired");
                if (!forceRefresh && this.accessToken && !this.isExpired) {
                  return [2, this.accessToken];
                }
                if (!this.refreshToken)
                  return [3, 2];
                return [4, this.refresh(auth, this.refreshToken)];
              case 1:
                _a2.sent();
                return [2, this.accessToken];
              case 2:
                return [2, null];
            }
          });
        });
      };
      StsTokenManager2.prototype.clearRefreshToken = function() {
        this.refreshToken = null;
      };
      StsTokenManager2.prototype.refresh = function(auth, oldToken) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var _a2, accessToken, refreshToken, expiresIn;
          return tslib.__generator(this, function(_b) {
            switch (_b.label) {
              case 0:
                return [4, requestStsToken(auth, oldToken)];
              case 1:
                _a2 = _b.sent(), accessToken = _a2.accessToken, refreshToken = _a2.refreshToken, expiresIn = _a2.expiresIn;
                this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));
                return [2];
            }
          });
        });
      };
      StsTokenManager2.prototype.updateTokensAndExpiration = function(accessToken, refreshToken, expiresInSec) {
        this.refreshToken = refreshToken || null;
        this.accessToken = accessToken || null;
        this.expirationTime = Date.now() + expiresInSec * 1e3;
      };
      StsTokenManager2.fromJSON = function(appName, object) {
        var refreshToken = object.refreshToken, accessToken = object.accessToken, expirationTime = object.expirationTime;
        var manager = new StsTokenManager2();
        if (refreshToken) {
          _assert(typeof refreshToken === "string", "internal-error", {
            appName
          });
          manager.refreshToken = refreshToken;
        }
        if (accessToken) {
          _assert(typeof accessToken === "string", "internal-error", {
            appName
          });
          manager.accessToken = accessToken;
        }
        if (expirationTime) {
          _assert(typeof expirationTime === "number", "internal-error", {
            appName
          });
          manager.expirationTime = expirationTime;
        }
        return manager;
      };
      StsTokenManager2.prototype.toJSON = function() {
        return {
          refreshToken: this.refreshToken,
          accessToken: this.accessToken,
          expirationTime: this.expirationTime
        };
      };
      StsTokenManager2.prototype._assign = function(stsTokenManager) {
        this.accessToken = stsTokenManager.accessToken;
        this.refreshToken = stsTokenManager.refreshToken;
        this.expirationTime = stsTokenManager.expirationTime;
      };
      StsTokenManager2.prototype._clone = function() {
        return Object.assign(new StsTokenManager2(), this.toJSON());
      };
      StsTokenManager2.prototype._performRefresh = function() {
        return debugFail("not implemented");
      };
      return StsTokenManager2;
    }();
    function assertStringOrUndefined(assertion, appName) {
      _assert(typeof assertion === "string" || typeof assertion === "undefined", "internal-error", {appName});
    }
    var UserImpl = function() {
      function UserImpl2(_a2) {
        var uid = _a2.uid, auth = _a2.auth, stsTokenManager = _a2.stsTokenManager, opt = tslib.__rest(_a2, ["uid", "auth", "stsTokenManager"]);
        this.providerId = "firebase";
        this.emailVerified = false;
        this.isAnonymous = false;
        this.tenantId = null;
        this.providerData = [];
        this.proactiveRefresh = new ProactiveRefresh(this);
        this.reloadUserInfo = null;
        this.reloadListener = null;
        this.uid = uid;
        this.auth = auth;
        this.stsTokenManager = stsTokenManager;
        this.accessToken = stsTokenManager.accessToken;
        this.displayName = opt.displayName || null;
        this.email = opt.email || null;
        this.phoneNumber = opt.phoneNumber || null;
        this.photoURL = opt.photoURL || null;
        this.isAnonymous = opt.isAnonymous || false;
        this.metadata = new UserMetadata(opt.createdAt || void 0, opt.lastLoginAt || void 0);
      }
      UserImpl2.prototype.getIdToken = function(forceRefresh) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var accessToken;
          return tslib.__generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                return [4, _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh))];
              case 1:
                accessToken = _a2.sent();
                _assert(accessToken, this.auth, "internal-error");
                if (!(this.accessToken !== accessToken))
                  return [3, 3];
                this.accessToken = accessToken;
                return [4, this.auth._persistUserIfCurrent(this)];
              case 2:
                _a2.sent();
                this.auth._notifyListenersIfCurrent(this);
                _a2.label = 3;
              case 3:
                return [2, accessToken];
            }
          });
        });
      };
      UserImpl2.prototype.getIdTokenResult = function(forceRefresh) {
        return getIdTokenResult(this, forceRefresh);
      };
      UserImpl2.prototype.reload = function() {
        return reload(this);
      };
      UserImpl2.prototype._assign = function(user) {
        if (this === user) {
          return;
        }
        _assert(this.uid === user.uid, this.auth, "internal-error");
        this.displayName = user.displayName;
        this.photoURL = user.photoURL;
        this.email = user.email;
        this.emailVerified = user.emailVerified;
        this.phoneNumber = user.phoneNumber;
        this.isAnonymous = user.isAnonymous;
        this.tenantId = user.tenantId;
        this.providerData = user.providerData.map(function(userInfo) {
          return tslib.__assign({}, userInfo);
        });
        this.metadata._copy(user.metadata);
        this.stsTokenManager._assign(user.stsTokenManager);
      };
      UserImpl2.prototype._clone = function(auth) {
        return new UserImpl2(tslib.__assign(tslib.__assign({}, this), {auth, stsTokenManager: this.stsTokenManager._clone()}));
      };
      UserImpl2.prototype._onReload = function(callback) {
        _assert(!this.reloadListener, this.auth, "internal-error");
        this.reloadListener = callback;
        if (this.reloadUserInfo) {
          this._notifyReloadListener(this.reloadUserInfo);
          this.reloadUserInfo = null;
        }
      };
      UserImpl2.prototype._notifyReloadListener = function(userInfo) {
        if (this.reloadListener) {
          this.reloadListener(userInfo);
        } else {
          this.reloadUserInfo = userInfo;
        }
      };
      UserImpl2.prototype._startProactiveRefresh = function() {
        this.proactiveRefresh._start();
      };
      UserImpl2.prototype._stopProactiveRefresh = function() {
        this.proactiveRefresh._stop();
      };
      UserImpl2.prototype._updateTokensIfNecessary = function(response, reload2) {
        if (reload2 === void 0) {
          reload2 = false;
        }
        return tslib.__awaiter(this, void 0, void 0, function() {
          var tokensRefreshed;
          return tslib.__generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                tokensRefreshed = false;
                if (response.idToken && response.idToken !== this.stsTokenManager.accessToken) {
                  this.stsTokenManager.updateFromServerResponse(response);
                  tokensRefreshed = true;
                }
                if (!reload2)
                  return [3, 2];
                return [4, _reloadWithoutSaving(this)];
              case 1:
                _a2.sent();
                _a2.label = 2;
              case 2:
                return [4, this.auth._persistUserIfCurrent(this)];
              case 3:
                _a2.sent();
                if (tokensRefreshed) {
                  this.auth._notifyListenersIfCurrent(this);
                }
                return [2];
            }
          });
        });
      };
      UserImpl2.prototype.delete = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var idToken;
          return tslib.__generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                return [4, this.getIdToken()];
              case 1:
                idToken = _a2.sent();
                return [4, _logoutIfInvalidated(this, deleteAccount(this.auth, {idToken}))];
              case 2:
                _a2.sent();
                this.stsTokenManager.clearRefreshToken();
                return [2, this.auth.signOut()];
            }
          });
        });
      };
      UserImpl2.prototype.toJSON = function() {
        return tslib.__assign(tslib.__assign({
          uid: this.uid,
          email: this.email || void 0,
          emailVerified: this.emailVerified,
          displayName: this.displayName || void 0,
          isAnonymous: this.isAnonymous,
          photoURL: this.photoURL || void 0,
          phoneNumber: this.phoneNumber || void 0,
          tenantId: this.tenantId || void 0,
          providerData: this.providerData.map(function(userInfo) {
            return tslib.__assign({}, userInfo);
          }),
          stsTokenManager: this.stsTokenManager.toJSON(),
          _redirectEventId: this._redirectEventId
        }, this.metadata.toJSON()), {
          apiKey: this.auth.config.apiKey,
          appName: this.auth.name
        });
      };
      Object.defineProperty(UserImpl2.prototype, "refreshToken", {
        get: function() {
          return this.stsTokenManager.refreshToken || "";
        },
        enumerable: false,
        configurable: true
      });
      UserImpl2._fromJSON = function(auth, object) {
        var _a2, _b, _c, _d, _e, _f, _g, _h;
        var displayName = (_a2 = object.displayName) !== null && _a2 !== void 0 ? _a2 : void 0;
        var email = (_b = object.email) !== null && _b !== void 0 ? _b : void 0;
        var phoneNumber = (_c = object.phoneNumber) !== null && _c !== void 0 ? _c : void 0;
        var photoURL = (_d = object.photoURL) !== null && _d !== void 0 ? _d : void 0;
        var tenantId = (_e = object.tenantId) !== null && _e !== void 0 ? _e : void 0;
        var _redirectEventId = (_f = object._redirectEventId) !== null && _f !== void 0 ? _f : void 0;
        var createdAt = (_g = object.createdAt) !== null && _g !== void 0 ? _g : void 0;
        var lastLoginAt = (_h = object.lastLoginAt) !== null && _h !== void 0 ? _h : void 0;
        var uid = object.uid, emailVerified = object.emailVerified, isAnonymous = object.isAnonymous, providerData = object.providerData, plainObjectTokenManager = object.stsTokenManager;
        _assert(uid && plainObjectTokenManager, auth, "internal-error");
        var stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);
        _assert(typeof uid === "string", auth, "internal-error");
        assertStringOrUndefined(displayName, auth.name);
        assertStringOrUndefined(email, auth.name);
        _assert(typeof emailVerified === "boolean", auth, "internal-error");
        _assert(typeof isAnonymous === "boolean", auth, "internal-error");
        assertStringOrUndefined(phoneNumber, auth.name);
        assertStringOrUndefined(photoURL, auth.name);
        assertStringOrUndefined(tenantId, auth.name);
        assertStringOrUndefined(_redirectEventId, auth.name);
        assertStringOrUndefined(createdAt, auth.name);
        assertStringOrUndefined(lastLoginAt, auth.name);
        var user = new UserImpl2({
          uid,
          auth,
          email,
          emailVerified,
          displayName,
          isAnonymous,
          photoURL,
          phoneNumber,
          tenantId,
          stsTokenManager,
          createdAt,
          lastLoginAt
        });
        if (providerData && Array.isArray(providerData)) {
          user.providerData = providerData.map(function(userInfo) {
            return tslib.__assign({}, userInfo);
          });
        }
        if (_redirectEventId) {
          user._redirectEventId = _redirectEventId;
        }
        return user;
      };
      UserImpl2._fromIdTokenResponse = function(auth, idTokenResponse, isAnonymous) {
        if (isAnonymous === void 0) {
          isAnonymous = false;
        }
        return tslib.__awaiter(this, void 0, void 0, function() {
          var stsTokenManager, user;
          return tslib.__generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                stsTokenManager = new StsTokenManager();
                stsTokenManager.updateFromServerResponse(idTokenResponse);
                user = new UserImpl2({
                  uid: idTokenResponse.localId,
                  auth,
                  stsTokenManager,
                  isAnonymous
                });
                return [4, _reloadWithoutSaving(user)];
              case 1:
                _a2.sent();
                return [2, user];
            }
          });
        });
      };
      return UserImpl2;
    }();
    var InMemoryPersistence = function() {
      function InMemoryPersistence2() {
        this.type = "NONE";
        this.storage = {};
      }
      InMemoryPersistence2.prototype._isAvailable = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
          return tslib.__generator(this, function(_a2) {
            return [2, true];
          });
        });
      };
      InMemoryPersistence2.prototype._set = function(key, value) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          return tslib.__generator(this, function(_a2) {
            this.storage[key] = value;
            return [2];
          });
        });
      };
      InMemoryPersistence2.prototype._get = function(key) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var value;
          return tslib.__generator(this, function(_a2) {
            value = this.storage[key];
            return [2, value === void 0 ? null : value];
          });
        });
      };
      InMemoryPersistence2.prototype._remove = function(key) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          return tslib.__generator(this, function(_a2) {
            delete this.storage[key];
            return [2];
          });
        });
      };
      InMemoryPersistence2.prototype._addListener = function(_key, _listener) {
        return;
      };
      InMemoryPersistence2.prototype._removeListener = function(_key, _listener) {
        return;
      };
      InMemoryPersistence2.type = "NONE";
      return InMemoryPersistence2;
    }();
    var inMemoryPersistence = InMemoryPersistence;
    function _persistenceKeyName(key, apiKey, appName) {
      return "firebase:" + key + ":" + apiKey + ":" + appName;
    }
    var PersistenceUserManager = function() {
      function PersistenceUserManager2(persistence, auth, userKey) {
        this.persistence = persistence;
        this.auth = auth;
        this.userKey = userKey;
        var _a2 = this.auth, config = _a2.config, name2 = _a2.name;
        this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name2);
        this.fullPersistenceKey = _persistenceKeyName("persistence", config.apiKey, name2);
        this.boundEventHandler = auth._onStorageEvent.bind(auth);
        this.persistence._addListener(this.fullUserKey, this.boundEventHandler);
      }
      PersistenceUserManager2.prototype.setCurrentUser = function(user) {
        return this.persistence._set(this.fullUserKey, user.toJSON());
      };
      PersistenceUserManager2.prototype.getCurrentUser = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var blob;
          return tslib.__generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                return [4, this.persistence._get(this.fullUserKey)];
              case 1:
                blob = _a2.sent();
                return [2, blob ? UserImpl._fromJSON(this.auth, blob) : null];
            }
          });
        });
      };
      PersistenceUserManager2.prototype.removeCurrentUser = function() {
        return this.persistence._remove(this.fullUserKey);
      };
      PersistenceUserManager2.prototype.savePersistenceForRedirect = function() {
        return this.persistence._set(this.fullPersistenceKey, this.persistence.type);
      };
      PersistenceUserManager2.prototype.setPersistence = function(newPersistence) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var currentUser;
          return tslib.__generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                if (this.persistence === newPersistence) {
                  return [2];
                }
                return [4, this.getCurrentUser()];
              case 1:
                currentUser = _a2.sent();
                return [4, this.removeCurrentUser()];
              case 2:
                _a2.sent();
                this.persistence = newPersistence;
                if (currentUser) {
                  return [2, this.setCurrentUser(currentUser)];
                }
                return [2];
            }
          });
        });
      };
      PersistenceUserManager2.prototype.delete = function() {
        this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);
      };
      PersistenceUserManager2.create = function(auth, persistenceHierarchy, userKey) {
        if (userKey === void 0) {
          userKey = "authUser";
        }
        return tslib.__awaiter(this, void 0, void 0, function() {
          var chosenPersistence, _i, persistenceHierarchy_1, persistence, userToMigrate, key, _a2, persistenceHierarchy_2, persistence, blob, user, _b;
          var _this = this;
          return tslib.__generator(this, function(_c) {
            switch (_c.label) {
              case 0:
                if (!persistenceHierarchy.length) {
                  return [2, new PersistenceUserManager2(_getInstance(inMemoryPersistence), auth, userKey)];
                }
                chosenPersistence = _getInstance(inMemoryPersistence);
                _i = 0, persistenceHierarchy_1 = persistenceHierarchy;
                _c.label = 1;
              case 1:
                if (!(_i < persistenceHierarchy_1.length))
                  return [3, 4];
                persistence = persistenceHierarchy_1[_i];
                return [4, persistence._isAvailable()];
              case 2:
                if (_c.sent()) {
                  chosenPersistence = persistence;
                  return [3, 4];
                }
                _c.label = 3;
              case 3:
                _i++;
                return [3, 1];
              case 4:
                userToMigrate = null;
                key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);
                _a2 = 0, persistenceHierarchy_2 = persistenceHierarchy;
                _c.label = 5;
              case 5:
                if (!(_a2 < persistenceHierarchy_2.length))
                  return [3, 10];
                persistence = persistenceHierarchy_2[_a2];
                _c.label = 6;
              case 6:
                _c.trys.push([6, 8, , 9]);
                return [4, persistence._get(key)];
              case 7:
                blob = _c.sent();
                if (blob) {
                  user = UserImpl._fromJSON(auth, blob);
                  if (persistence !== chosenPersistence) {
                    userToMigrate = user;
                  }
                  return [3, 10];
                }
                return [3, 9];
              case 8:
                _b = _c.sent();
                return [3, 9];
              case 9:
                _a2++;
                return [3, 5];
              case 10:
                if (!userToMigrate)
                  return [3, 12];
                return [4, chosenPersistence._set(key, userToMigrate.toJSON())];
              case 11:
                _c.sent();
                _c.label = 12;
              case 12:
                return [4, Promise.all(persistenceHierarchy.map(function(persistence2) {
                  return tslib.__awaiter(_this, void 0, void 0, function() {
                    var _a3;
                    return tslib.__generator(this, function(_b2) {
                      switch (_b2.label) {
                        case 0:
                          if (!(persistence2 !== chosenPersistence))
                            return [3, 4];
                          _b2.label = 1;
                        case 1:
                          _b2.trys.push([1, 3, , 4]);
                          return [4, persistence2._remove(key)];
                        case 2:
                          _b2.sent();
                          return [3, 4];
                        case 3:
                          _a3 = _b2.sent();
                          return [3, 4];
                        case 4:
                          return [2];
                      }
                    });
                  });
                }))];
              case 13:
                _c.sent();
                return [2, new PersistenceUserManager2(chosenPersistence, auth, userKey)];
            }
          });
        });
      };
      return PersistenceUserManager2;
    }();
    function _getBrowserName(userAgent) {
      var ua = userAgent.toLowerCase();
      if (ua.includes("opera/") || ua.includes("opr/") || ua.includes("opios/")) {
        return "Opera";
      } else if (_isIEMobile(ua)) {
        return "IEMobile";
      } else if (ua.includes("msie") || ua.includes("trident/")) {
        return "IE";
      } else if (ua.includes("edge/")) {
        return "Edge";
      } else if (_isFirefox(ua)) {
        return "Firefox";
      } else if (ua.includes("silk/")) {
        return "Silk";
      } else if (_isBlackBerry(ua)) {
        return "Blackberry";
      } else if (_isWebOS(ua)) {
        return "Webos";
      } else if (_isSafari(ua)) {
        return "Safari";
      } else if ((ua.includes("chrome/") || _isChromeIOS(ua)) && !ua.includes("edge/")) {
        return "Chrome";
      } else if (_isAndroid(ua)) {
        return "Android";
      } else {
        var re = /([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/;
        var matches = userAgent.match(re);
        if ((matches === null || matches === void 0 ? void 0 : matches.length) === 2) {
          return matches[1];
        }
      }
      return "Other";
    }
    function _isFirefox(ua) {
      if (ua === void 0) {
        ua = util.getUA();
      }
      return /firefox\//i.test(ua);
    }
    function _isSafari(userAgent) {
      if (userAgent === void 0) {
        userAgent = util.getUA();
      }
      var ua = userAgent.toLowerCase();
      return ua.includes("safari/") && !ua.includes("chrome/") && !ua.includes("crios/") && !ua.includes("android");
    }
    function _isChromeIOS(ua) {
      if (ua === void 0) {
        ua = util.getUA();
      }
      return /crios\//i.test(ua);
    }
    function _isIEMobile(ua) {
      if (ua === void 0) {
        ua = util.getUA();
      }
      return /iemobile/i.test(ua);
    }
    function _isAndroid(ua) {
      if (ua === void 0) {
        ua = util.getUA();
      }
      return /android/i.test(ua);
    }
    function _isBlackBerry(ua) {
      if (ua === void 0) {
        ua = util.getUA();
      }
      return /blackberry/i.test(ua);
    }
    function _isWebOS(ua) {
      if (ua === void 0) {
        ua = util.getUA();
      }
      return /webos/i.test(ua);
    }
    function _isIOS(ua) {
      if (ua === void 0) {
        ua = util.getUA();
      }
      return /iphone|ipad|ipod/i.test(ua);
    }
    function _isIOS7Or8(ua) {
      if (ua === void 0) {
        ua = util.getUA();
      }
      return /(iPad|iPhone|iPod).*OS 7_\d/i.test(ua) || /(iPad|iPhone|iPod).*OS 8_\d/i.test(ua);
    }
    function _isIOSStandalone(ua) {
      var _a2;
      if (ua === void 0) {
        ua = util.getUA();
      }
      return _isIOS(ua) && !!((_a2 = window.navigator) === null || _a2 === void 0 ? void 0 : _a2.standalone);
    }
    function _isIE10() {
      return util.isIE() && document.documentMode === 10;
    }
    function _isMobileBrowser(ua) {
      if (ua === void 0) {
        ua = util.getUA();
      }
      return _isIOS(ua) || _isAndroid(ua) || _isWebOS(ua) || _isBlackBerry(ua) || /windows phone/i.test(ua) || _isIEMobile(ua);
    }
    function _isIframe() {
      try {
        return !!(window && window !== window.top);
      } catch (e) {
        return false;
      }
    }
    function _getClientVersion(clientPlatform, frameworks) {
      if (frameworks === void 0) {
        frameworks = [];
      }
      var reportedPlatform;
      switch (clientPlatform) {
        case "Browser":
          reportedPlatform = _getBrowserName(util.getUA());
          break;
        case "Worker":
          reportedPlatform = _getBrowserName(util.getUA()) + "-" + clientPlatform;
          break;
        default:
          reportedPlatform = clientPlatform;
      }
      var reportedFrameworks = frameworks.length ? frameworks.join(",") : "FirebaseCore-web";
      return reportedPlatform + "/JsCore/" + app.SDK_VERSION + "/" + reportedFrameworks;
    }
    var AuthImpl = function() {
      function AuthImpl2(app2, config) {
        this.app = app2;
        this.config = config;
        this.currentUser = null;
        this.emulatorConfig = null;
        this.operations = Promise.resolve();
        this.authStateSubscription = new Subscription(this);
        this.idTokenSubscription = new Subscription(this);
        this.redirectUser = null;
        this.isProactiveRefreshEnabled = false;
        this.redirectInitializerError = null;
        this._canInitEmulator = true;
        this._isInitialized = false;
        this._deleted = false;
        this._initializationPromise = null;
        this._popupRedirectResolver = null;
        this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;
        this.lastNotifiedUid = void 0;
        this.languageCode = null;
        this.tenantId = null;
        this.settings = {appVerificationDisabledForTesting: false};
        this.frameworks = [];
        this.name = app2.name;
        this.clientVersion = config.sdkClientVersion;
      }
      AuthImpl2.prototype._initializeWithPersistence = function(persistenceHierarchy, popupRedirectResolver) {
        var _this = this;
        if (popupRedirectResolver) {
          this._popupRedirectResolver = _getInstance(popupRedirectResolver);
        }
        this._initializationPromise = this.queue(function() {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            var _a2;
            var _b;
            return tslib.__generator(this, function(_c) {
              switch (_c.label) {
                case 0:
                  if (this._deleted) {
                    return [2];
                  }
                  _a2 = this;
                  return [4, PersistenceUserManager.create(this, persistenceHierarchy)];
                case 1:
                  _a2.persistenceManager = _c.sent();
                  if (this._deleted) {
                    return [2];
                  }
                  if (!((_b = this._popupRedirectResolver) === null || _b === void 0 ? void 0 : _b._shouldInitProactively))
                    return [3, 3];
                  return [4, this._popupRedirectResolver._initialize(this)];
                case 2:
                  _c.sent();
                  _c.label = 3;
                case 3:
                  return [4, this.initializeCurrentUser(popupRedirectResolver)];
                case 4:
                  _c.sent();
                  if (this._deleted) {
                    return [2];
                  }
                  this._isInitialized = true;
                  return [2];
              }
            });
          });
        });
        return this._initializationPromise.then(function() {
          if (_this.redirectInitializerError) {
            throw _this.redirectInitializerError;
          }
        });
      };
      AuthImpl2.prototype._onStorageEvent = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var user;
          return tslib.__generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                if (this._deleted) {
                  return [2];
                }
                return [4, this.assertedPersistence.getCurrentUser()];
              case 1:
                user = _a2.sent();
                if (!this.currentUser && !user) {
                  return [2];
                }
                if (!(this.currentUser && user && this.currentUser.uid === user.uid))
                  return [3, 3];
                this._currentUser._assign(user);
                return [4, this.currentUser.getIdToken()];
              case 2:
                _a2.sent();
                return [2];
              case 3:
                return [4, this._updateCurrentUser(user)];
              case 4:
                _a2.sent();
                return [2];
            }
          });
        });
      };
      AuthImpl2.prototype.initializeCurrentUser = function(popupRedirectResolver) {
        var _a2;
        return tslib.__awaiter(this, void 0, void 0, function() {
          var storedUser, redirectUserEventId, storedUserEventId, result;
          return tslib.__generator(this, function(_b) {
            switch (_b.label) {
              case 0:
                return [4, this.assertedPersistence.getCurrentUser()];
              case 1:
                storedUser = _b.sent();
                if (!(popupRedirectResolver && this.config.authDomain))
                  return [3, 4];
                return [4, this.getOrInitRedirectPersistenceManager()];
              case 2:
                _b.sent();
                redirectUserEventId = (_a2 = this.redirectUser) === null || _a2 === void 0 ? void 0 : _a2._redirectEventId;
                storedUserEventId = storedUser === null || storedUser === void 0 ? void 0 : storedUser._redirectEventId;
                return [4, this.tryRedirectSignIn(popupRedirectResolver)];
              case 3:
                result = _b.sent();
                if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && (result === null || result === void 0 ? void 0 : result.user)) {
                  storedUser = result.user;
                }
                _b.label = 4;
              case 4:
                if (!storedUser) {
                  return [2, this.directlySetCurrentUser(null)];
                }
                if (!storedUser._redirectEventId) {
                  return [2, this.reloadAndSetCurrentUserOrClear(storedUser)];
                }
                _assert(this._popupRedirectResolver, this, "argument-error");
                return [4, this.getOrInitRedirectPersistenceManager()];
              case 5:
                _b.sent();
                if (this.redirectUser && this.redirectUser._redirectEventId === storedUser._redirectEventId) {
                  return [2, this.directlySetCurrentUser(storedUser)];
                }
                return [2, this.reloadAndSetCurrentUserOrClear(storedUser)];
            }
          });
        });
      };
      AuthImpl2.prototype.tryRedirectSignIn = function(redirectResolver) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var result, e_1;
          return tslib.__generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                result = null;
                _a2.label = 1;
              case 1:
                _a2.trys.push([1, 3, , 5]);
                return [4, this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true)];
              case 2:
                result = _a2.sent();
                return [3, 5];
              case 3:
                e_1 = _a2.sent();
                this.redirectInitializerError = e_1;
                return [4, this._setRedirectUser(null)];
              case 4:
                _a2.sent();
                return [3, 5];
              case 5:
                return [2, result];
            }
          });
        });
      };
      AuthImpl2.prototype.reloadAndSetCurrentUserOrClear = function(user) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var e_2;
          return tslib.__generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                _a2.trys.push([0, 2, , 3]);
                return [4, _reloadWithoutSaving(user)];
              case 1:
                _a2.sent();
                return [3, 3];
              case 2:
                e_2 = _a2.sent();
                if (e_2.code !== "auth/network-request-failed") {
                  return [2, this.directlySetCurrentUser(null)];
                }
                return [3, 3];
              case 3:
                return [2, this.directlySetCurrentUser(user)];
            }
          });
        });
      };
      AuthImpl2.prototype.useDeviceLanguage = function() {
        this.languageCode = _getUserLanguage();
      };
      AuthImpl2.prototype._delete = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
          return tslib.__generator(this, function(_a2) {
            this._deleted = true;
            return [2];
          });
        });
      };
      AuthImpl2.prototype.updateCurrentUser = function(userExtern) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var user;
          return tslib.__generator(this, function(_a2) {
            user = userExtern ? util.getModularInstance(userExtern) : null;
            if (user) {
              _assert(user.auth.config.apiKey === this.config.apiKey, this, "invalid-user-token");
            }
            return [2, this._updateCurrentUser(user && user._clone(this))];
          });
        });
      };
      AuthImpl2.prototype._updateCurrentUser = function(user) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var _this = this;
          return tslib.__generator(this, function(_a2) {
            if (this._deleted) {
              return [2];
            }
            if (user) {
              _assert(this.tenantId === user.tenantId, this, "tenant-id-mismatch");
            }
            return [2, this.queue(function() {
              return tslib.__awaiter(_this, void 0, void 0, function() {
                return tslib.__generator(this, function(_a3) {
                  switch (_a3.label) {
                    case 0:
                      return [4, this.directlySetCurrentUser(user)];
                    case 1:
                      _a3.sent();
                      this.notifyAuthListeners();
                      return [2];
                  }
                });
              });
            })];
          });
        });
      };
      AuthImpl2.prototype.signOut = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
          return tslib.__generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                if (!(this.redirectPersistenceManager || this._popupRedirectResolver))
                  return [3, 2];
                return [4, this._setRedirectUser(null)];
              case 1:
                _a2.sent();
                _a2.label = 2;
              case 2:
                return [2, this._updateCurrentUser(null)];
            }
          });
        });
      };
      AuthImpl2.prototype.setPersistence = function(persistence) {
        var _this = this;
        return this.queue(function() {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            return tslib.__generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  return [4, this.assertedPersistence.setPersistence(_getInstance(persistence))];
                case 1:
                  _a2.sent();
                  return [2];
              }
            });
          });
        });
      };
      AuthImpl2.prototype._getPersistence = function() {
        return this.assertedPersistence.persistence.type;
      };
      AuthImpl2.prototype._updateErrorMap = function(errorMap) {
        this._errorFactory = new util.ErrorFactory("auth", "Firebase", errorMap());
      };
      AuthImpl2.prototype.onAuthStateChanged = function(nextOrObserver, error3, completed) {
        return this.registerStateListener(this.authStateSubscription, nextOrObserver, error3, completed);
      };
      AuthImpl2.prototype.onIdTokenChanged = function(nextOrObserver, error3, completed) {
        return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error3, completed);
      };
      AuthImpl2.prototype.toJSON = function() {
        var _a2;
        return {
          apiKey: this.config.apiKey,
          authDomain: this.config.authDomain,
          appName: this.name,
          currentUser: (_a2 = this._currentUser) === null || _a2 === void 0 ? void 0 : _a2.toJSON()
        };
      };
      AuthImpl2.prototype._setRedirectUser = function(user, popupRedirectResolver) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var redirectManager;
          return tslib.__generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                return [4, this.getOrInitRedirectPersistenceManager(popupRedirectResolver)];
              case 1:
                redirectManager = _a2.sent();
                return [2, user === null ? redirectManager.removeCurrentUser() : redirectManager.setCurrentUser(user)];
            }
          });
        });
      };
      AuthImpl2.prototype.getOrInitRedirectPersistenceManager = function(popupRedirectResolver) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var resolver, _a2, _b;
          return tslib.__generator(this, function(_c) {
            switch (_c.label) {
              case 0:
                if (!!this.redirectPersistenceManager)
                  return [3, 3];
                resolver = popupRedirectResolver && _getInstance(popupRedirectResolver) || this._popupRedirectResolver;
                _assert(resolver, this, "argument-error");
                _a2 = this;
                return [4, PersistenceUserManager.create(this, [_getInstance(resolver._redirectPersistence)], "redirectUser")];
              case 1:
                _a2.redirectPersistenceManager = _c.sent();
                _b = this;
                return [4, this.redirectPersistenceManager.getCurrentUser()];
              case 2:
                _b.redirectUser = _c.sent();
                _c.label = 3;
              case 3:
                return [2, this.redirectPersistenceManager];
            }
          });
        });
      };
      AuthImpl2.prototype._redirectUserForId = function(id) {
        var _a2, _b;
        return tslib.__awaiter(this, void 0, void 0, function() {
          var _this = this;
          return tslib.__generator(this, function(_c) {
            switch (_c.label) {
              case 0:
                if (!this._isInitialized)
                  return [3, 2];
                return [4, this.queue(function() {
                  return tslib.__awaiter(_this, void 0, void 0, function() {
                    return tslib.__generator(this, function(_a3) {
                      return [2];
                    });
                  });
                })];
              case 1:
                _c.sent();
                _c.label = 2;
              case 2:
                if (((_a2 = this._currentUser) === null || _a2 === void 0 ? void 0 : _a2._redirectEventId) === id) {
                  return [2, this._currentUser];
                }
                if (((_b = this.redirectUser) === null || _b === void 0 ? void 0 : _b._redirectEventId) === id) {
                  return [2, this.redirectUser];
                }
                return [2, null];
            }
          });
        });
      };
      AuthImpl2.prototype._persistUserIfCurrent = function(user) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var _this = this;
          return tslib.__generator(this, function(_a2) {
            if (user === this.currentUser) {
              return [2, this.queue(function() {
                return tslib.__awaiter(_this, void 0, void 0, function() {
                  return tslib.__generator(this, function(_a3) {
                    return [2, this.directlySetCurrentUser(user)];
                  });
                });
              })];
            }
            return [2];
          });
        });
      };
      AuthImpl2.prototype._notifyListenersIfCurrent = function(user) {
        if (user === this.currentUser) {
          this.notifyAuthListeners();
        }
      };
      AuthImpl2.prototype._key = function() {
        return this.config.authDomain + ":" + this.config.apiKey + ":" + this.name;
      };
      AuthImpl2.prototype._startProactiveRefresh = function() {
        this.isProactiveRefreshEnabled = true;
        if (this.currentUser) {
          this._currentUser._startProactiveRefresh();
        }
      };
      AuthImpl2.prototype._stopProactiveRefresh = function() {
        this.isProactiveRefreshEnabled = false;
        if (this.currentUser) {
          this._currentUser._stopProactiveRefresh();
        }
      };
      Object.defineProperty(AuthImpl2.prototype, "_currentUser", {
        get: function() {
          return this.currentUser;
        },
        enumerable: false,
        configurable: true
      });
      AuthImpl2.prototype.notifyAuthListeners = function() {
        var _a2, _b;
        if (!this._isInitialized) {
          return;
        }
        this.idTokenSubscription.next(this.currentUser);
        var currentUid = (_b = (_a2 = this.currentUser) === null || _a2 === void 0 ? void 0 : _a2.uid) !== null && _b !== void 0 ? _b : null;
        if (this.lastNotifiedUid !== currentUid) {
          this.lastNotifiedUid = currentUid;
          this.authStateSubscription.next(this.currentUser);
        }
      };
      AuthImpl2.prototype.registerStateListener = function(subscription, nextOrObserver, error3, completed) {
        var _this = this;
        if (this._deleted) {
          return function() {
          };
        }
        var cb = typeof nextOrObserver === "function" ? nextOrObserver : nextOrObserver.next;
        var promise = this._isInitialized ? Promise.resolve() : this._initializationPromise;
        _assert(promise, this, "internal-error");
        promise.then(function() {
          return cb(_this.currentUser);
        });
        if (typeof nextOrObserver === "function") {
          return subscription.addObserver(nextOrObserver, error3, completed);
        } else {
          return subscription.addObserver(nextOrObserver);
        }
      };
      AuthImpl2.prototype.directlySetCurrentUser = function(user) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          return tslib.__generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                if (this.currentUser && this.currentUser !== user) {
                  this._currentUser._stopProactiveRefresh();
                  if (user && this.isProactiveRefreshEnabled) {
                    user._startProactiveRefresh();
                  }
                }
                this.currentUser = user;
                if (!user)
                  return [3, 2];
                return [4, this.assertedPersistence.setCurrentUser(user)];
              case 1:
                _a2.sent();
                return [3, 4];
              case 2:
                return [4, this.assertedPersistence.removeCurrentUser()];
              case 3:
                _a2.sent();
                _a2.label = 4;
              case 4:
                return [2];
            }
          });
        });
      };
      AuthImpl2.prototype.queue = function(action) {
        this.operations = this.operations.then(action, action);
        return this.operations;
      };
      Object.defineProperty(AuthImpl2.prototype, "assertedPersistence", {
        get: function() {
          _assert(this.persistenceManager, this, "internal-error");
          return this.persistenceManager;
        },
        enumerable: false,
        configurable: true
      });
      AuthImpl2.prototype._logFramework = function(framework) {
        if (this.frameworks.includes(framework)) {
          return;
        }
        this.frameworks.push(framework);
        this.frameworks.sort();
        this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());
      };
      AuthImpl2.prototype._getFrameworks = function() {
        return this.frameworks;
      };
      AuthImpl2.prototype._getSdkClientVersion = function() {
        return this.clientVersion;
      };
      return AuthImpl2;
    }();
    function _castAuth(auth) {
      return util.getModularInstance(auth);
    }
    var Subscription = function() {
      function Subscription2(auth) {
        var _this = this;
        this.auth = auth;
        this.observer = null;
        this.addObserver = util.createSubscribe(function(observer) {
          return _this.observer = observer;
        });
      }
      Object.defineProperty(Subscription2.prototype, "next", {
        get: function() {
          _assert(this.observer, this.auth, "internal-error");
          return this.observer.next.bind(this.observer);
        },
        enumerable: false,
        configurable: true
      });
      return Subscription2;
    }();
    function useAuthEmulator(auth, url, options2) {
      var authInternal = _castAuth(auth);
      _assert(authInternal._canInitEmulator, authInternal, "emulator-config-failed");
      _assert(/^https?:\/\//.test(url), authInternal, "invalid-emulator-scheme");
      var disableWarnings = !!(options2 === null || options2 === void 0 ? void 0 : options2.disableWarnings);
      var protocol = extractProtocol(url);
      var _a2 = extractHostAndPort(url), host = _a2.host, port = _a2.port;
      var portStr = port === null ? "" : ":" + port;
      authInternal.config.emulator = {url: protocol + "//" + host + portStr + "/"};
      authInternal.settings.appVerificationDisabledForTesting = true;
      authInternal.emulatorConfig = Object.freeze({
        host,
        port,
        protocol: protocol.replace(":", ""),
        options: Object.freeze({disableWarnings})
      });
      emitEmulatorWarning(disableWarnings);
    }
    function extractProtocol(url) {
      var protocolEnd = url.indexOf(":");
      return protocolEnd < 0 ? "" : url.substr(0, protocolEnd + 1);
    }
    function extractHostAndPort(url) {
      var protocol = extractProtocol(url);
      var authority = /(\/\/)?([^?#/]+)/.exec(url.substr(protocol.length));
      if (!authority) {
        return {host: "", port: null};
      }
      var hostAndPort = authority[2].split("@").pop() || "";
      var bracketedIPv6 = /^(\[[^\]]+\])(:|$)/.exec(hostAndPort);
      if (bracketedIPv6) {
        var host = bracketedIPv6[1];
        return {host, port: parsePort(hostAndPort.substr(host.length + 1))};
      } else {
        var _a2 = hostAndPort.split(":"), host = _a2[0], port = _a2[1];
        return {host, port: parsePort(port)};
      }
    }
    function parsePort(portStr) {
      if (!portStr) {
        return null;
      }
      var port = Number(portStr);
      if (isNaN(port)) {
        return null;
      }
      return port;
    }
    function emitEmulatorWarning(disableBanner) {
      function attachBanner() {
        var el = document.createElement("p");
        var sty = el.style;
        el.innerText = "Running in emulator mode. Do not use with production credentials.";
        sty.position = "fixed";
        sty.width = "100%";
        sty.backgroundColor = "#ffffff";
        sty.border = ".1em solid #000000";
        sty.color = "#ff0000";
        sty.bottom = "0px";
        sty.left = "0px";
        sty.margin = "0px";
        sty.zIndex = "10000";
        sty.textAlign = "center";
        el.classList.add("firebase-emulator-warning");
        document.body.appendChild(el);
      }
      if (typeof console !== "undefined" && typeof console.info === "function") {
        console.info("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials.");
      }
      if (typeof window !== "undefined" && typeof document !== "undefined" && !disableBanner) {
        if (document.readyState === "loading") {
          window.addEventListener("DOMContentLoaded", attachBanner);
        } else {
          attachBanner();
        }
      }
    }
    var AuthCredential = function() {
      function AuthCredential2(providerId, signInMethod) {
        this.providerId = providerId;
        this.signInMethod = signInMethod;
      }
      AuthCredential2.prototype.toJSON = function() {
        return debugFail("not implemented");
      };
      AuthCredential2.prototype._getIdTokenResponse = function(_auth) {
        return debugFail("not implemented");
      };
      AuthCredential2.prototype._linkToIdToken = function(_auth, _idToken) {
        return debugFail("not implemented");
      };
      AuthCredential2.prototype._getReauthenticationResolver = function(_auth) {
        return debugFail("not implemented");
      };
      return AuthCredential2;
    }();
    function resetPassword(auth, request) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_a2) {
          return [2, _performApiRequest(auth, "POST", "/v1/accounts:resetPassword", _addTidIfNecessary(auth, request))];
        });
      });
    }
    function updateEmailPassword(auth, request) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_a2) {
          return [2, _performApiRequest(auth, "POST", "/v1/accounts:update", request)];
        });
      });
    }
    function applyActionCode(auth, request) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_a2) {
          return [2, _performApiRequest(auth, "POST", "/v1/accounts:update", _addTidIfNecessary(auth, request))];
        });
      });
    }
    function signInWithPassword(auth, request) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_a2) {
          return [2, _performSignInRequest(auth, "POST", "/v1/accounts:signInWithPassword", _addTidIfNecessary(auth, request))];
        });
      });
    }
    function sendOobCode(auth, request) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_a2) {
          return [2, _performApiRequest(auth, "POST", "/v1/accounts:sendOobCode", _addTidIfNecessary(auth, request))];
        });
      });
    }
    function sendEmailVerification(auth, request) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_a2) {
          return [2, sendOobCode(auth, request)];
        });
      });
    }
    function sendPasswordResetEmail(auth, request) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_a2) {
          return [2, sendOobCode(auth, request)];
        });
      });
    }
    function sendSignInLinkToEmail(auth, request) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_a2) {
          return [2, sendOobCode(auth, request)];
        });
      });
    }
    function verifyAndChangeEmail(auth, request) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_a2) {
          return [2, sendOobCode(auth, request)];
        });
      });
    }
    function signInWithEmailLink(auth, request) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_a2) {
          return [2, _performSignInRequest(auth, "POST", "/v1/accounts:signInWithEmailLink", _addTidIfNecessary(auth, request))];
        });
      });
    }
    function signInWithEmailLinkForLinking(auth, request) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_a2) {
          return [2, _performSignInRequest(auth, "POST", "/v1/accounts:signInWithEmailLink", _addTidIfNecessary(auth, request))];
        });
      });
    }
    var EmailAuthCredential = function(_super) {
      tslib.__extends(EmailAuthCredential2, _super);
      function EmailAuthCredential2(_email, _password, signInMethod, _tenantId) {
        if (_tenantId === void 0) {
          _tenantId = null;
        }
        var _this = _super.call(this, "password", signInMethod) || this;
        _this._email = _email;
        _this._password = _password;
        _this._tenantId = _tenantId;
        return _this;
      }
      EmailAuthCredential2._fromEmailAndPassword = function(email, password) {
        return new EmailAuthCredential2(email, password, "password");
      };
      EmailAuthCredential2._fromEmailAndCode = function(email, oobCode, tenantId) {
        if (tenantId === void 0) {
          tenantId = null;
        }
        return new EmailAuthCredential2(email, oobCode, "emailLink", tenantId);
      };
      EmailAuthCredential2.prototype.toJSON = function() {
        return {
          email: this._email,
          password: this._password,
          signInMethod: this.signInMethod,
          tenantId: this._tenantId
        };
      };
      EmailAuthCredential2.fromJSON = function(json) {
        var obj = typeof json === "string" ? JSON.parse(json) : json;
        if ((obj === null || obj === void 0 ? void 0 : obj.email) && (obj === null || obj === void 0 ? void 0 : obj.password)) {
          if (obj.signInMethod === "password") {
            return this._fromEmailAndPassword(obj.email, obj.password);
          } else if (obj.signInMethod === "emailLink") {
            return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);
          }
        }
        return null;
      };
      EmailAuthCredential2.prototype._getIdTokenResponse = function(auth) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          return tslib.__generator(this, function(_a2) {
            switch (this.signInMethod) {
              case "password":
                return [2, signInWithPassword(auth, {
                  returnSecureToken: true,
                  email: this._email,
                  password: this._password
                })];
              case "emailLink":
                return [2, signInWithEmailLink(auth, {
                  email: this._email,
                  oobCode: this._password
                })];
              default:
                _fail(auth, "internal-error");
            }
            return [2];
          });
        });
      };
      EmailAuthCredential2.prototype._linkToIdToken = function(auth, idToken) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          return tslib.__generator(this, function(_a2) {
            switch (this.signInMethod) {
              case "password":
                return [2, updateEmailPassword(auth, {
                  idToken,
                  returnSecureToken: true,
                  email: this._email,
                  password: this._password
                })];
              case "emailLink":
                return [2, signInWithEmailLinkForLinking(auth, {
                  idToken,
                  email: this._email,
                  oobCode: this._password
                })];
              default:
                _fail(auth, "internal-error");
            }
            return [2];
          });
        });
      };
      EmailAuthCredential2.prototype._getReauthenticationResolver = function(auth) {
        return this._getIdTokenResponse(auth);
      };
      return EmailAuthCredential2;
    }(AuthCredential);
    function signInWithIdp(auth, request) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_a2) {
          return [2, _performSignInRequest(auth, "POST", "/v1/accounts:signInWithIdp", _addTidIfNecessary(auth, request))];
        });
      });
    }
    var IDP_REQUEST_URI = "http://localhost";
    var OAuthCredential = function(_super) {
      tslib.__extends(OAuthCredential2, _super);
      function OAuthCredential2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.pendingToken = null;
        return _this;
      }
      OAuthCredential2._fromParams = function(params) {
        var cred = new OAuthCredential2(params.providerId, params.signInMethod);
        if (params.idToken || params.accessToken) {
          if (params.idToken) {
            cred.idToken = params.idToken;
          }
          if (params.accessToken) {
            cred.accessToken = params.accessToken;
          }
          if (params.nonce && !params.pendingToken) {
            cred.nonce = params.nonce;
          }
          if (params.pendingToken) {
            cred.pendingToken = params.pendingToken;
          }
        } else if (params.oauthToken && params.oauthTokenSecret) {
          cred.accessToken = params.oauthToken;
          cred.secret = params.oauthTokenSecret;
        } else {
          _fail("argument-error");
        }
        return cred;
      };
      OAuthCredential2.prototype.toJSON = function() {
        return {
          idToken: this.idToken,
          accessToken: this.accessToken,
          secret: this.secret,
          nonce: this.nonce,
          pendingToken: this.pendingToken,
          providerId: this.providerId,
          signInMethod: this.signInMethod
        };
      };
      OAuthCredential2.fromJSON = function(json) {
        var obj = typeof json === "string" ? JSON.parse(json) : json;
        var providerId = obj.providerId, signInMethod = obj.signInMethod, rest = tslib.__rest(obj, ["providerId", "signInMethod"]);
        if (!providerId || !signInMethod) {
          return null;
        }
        var cred = new OAuthCredential2(providerId, signInMethod);
        Object.assign(cred, rest);
        return cred;
      };
      OAuthCredential2.prototype._getIdTokenResponse = function(auth) {
        var request = this.buildRequest();
        return signInWithIdp(auth, request);
      };
      OAuthCredential2.prototype._linkToIdToken = function(auth, idToken) {
        var request = this.buildRequest();
        request.idToken = idToken;
        return signInWithIdp(auth, request);
      };
      OAuthCredential2.prototype._getReauthenticationResolver = function(auth) {
        var request = this.buildRequest();
        request.autoCreate = false;
        return signInWithIdp(auth, request);
      };
      OAuthCredential2.prototype.buildRequest = function() {
        var request = {
          requestUri: IDP_REQUEST_URI,
          returnSecureToken: true
        };
        if (this.pendingToken) {
          request.pendingToken = this.pendingToken;
        } else {
          var postBody = {};
          if (this.idToken) {
            postBody["id_token"] = this.idToken;
          }
          if (this.accessToken) {
            postBody["access_token"] = this.accessToken;
          }
          if (this.secret) {
            postBody["oauth_token_secret"] = this.secret;
          }
          postBody["providerId"] = this.providerId;
          if (this.nonce && !this.pendingToken) {
            postBody["nonce"] = this.nonce;
          }
          request.postBody = util.querystring(postBody);
        }
        return request;
      };
      return OAuthCredential2;
    }(AuthCredential);
    var _a$1;
    function sendPhoneVerificationCode(auth, request) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_a2) {
          return [2, _performApiRequest(auth, "POST", "/v1/accounts:sendVerificationCode", _addTidIfNecessary(auth, request))];
        });
      });
    }
    function signInWithPhoneNumber(auth, request) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_a2) {
          return [2, _performSignInRequest(auth, "POST", "/v1/accounts:signInWithPhoneNumber", _addTidIfNecessary(auth, request))];
        });
      });
    }
    function linkWithPhoneNumber(auth, request) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var response;
        return tslib.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, _performSignInRequest(auth, "POST", "/v1/accounts:signInWithPhoneNumber", _addTidIfNecessary(auth, request))];
            case 1:
              response = _a2.sent();
              if (response.temporaryProof) {
                throw _makeTaggedError(auth, "account-exists-with-different-credential", response);
              }
              return [2, response];
          }
        });
      });
    }
    var VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = (_a$1 = {}, _a$1["USER_NOT_FOUND"] = "user-not-found", _a$1);
    function verifyPhoneNumberForExisting(auth, request) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var apiRequest;
        return tslib.__generator(this, function(_a2) {
          apiRequest = tslib.__assign(tslib.__assign({}, request), {operation: "REAUTH"});
          return [2, _performSignInRequest(auth, "POST", "/v1/accounts:signInWithPhoneNumber", _addTidIfNecessary(auth, apiRequest), VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_)];
        });
      });
    }
    var PhoneAuthCredential = function(_super) {
      tslib.__extends(PhoneAuthCredential2, _super);
      function PhoneAuthCredential2(params) {
        var _this = _super.call(this, "phone", "phone") || this;
        _this.params = params;
        return _this;
      }
      PhoneAuthCredential2._fromVerification = function(verificationId, verificationCode) {
        return new PhoneAuthCredential2({verificationId, verificationCode});
      };
      PhoneAuthCredential2._fromTokenResponse = function(phoneNumber, temporaryProof) {
        return new PhoneAuthCredential2({phoneNumber, temporaryProof});
      };
      PhoneAuthCredential2.prototype._getIdTokenResponse = function(auth) {
        return signInWithPhoneNumber(auth, this._makeVerificationRequest());
      };
      PhoneAuthCredential2.prototype._linkToIdToken = function(auth, idToken) {
        return linkWithPhoneNumber(auth, tslib.__assign({idToken}, this._makeVerificationRequest()));
      };
      PhoneAuthCredential2.prototype._getReauthenticationResolver = function(auth) {
        return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());
      };
      PhoneAuthCredential2.prototype._makeVerificationRequest = function() {
        var _a2 = this.params, temporaryProof = _a2.temporaryProof, phoneNumber = _a2.phoneNumber, verificationId = _a2.verificationId, verificationCode = _a2.verificationCode;
        if (temporaryProof && phoneNumber) {
          return {temporaryProof, phoneNumber};
        }
        return {
          sessionInfo: verificationId,
          code: verificationCode
        };
      };
      PhoneAuthCredential2.prototype.toJSON = function() {
        var obj = {
          providerId: this.providerId
        };
        if (this.params.phoneNumber) {
          obj.phoneNumber = this.params.phoneNumber;
        }
        if (this.params.temporaryProof) {
          obj.temporaryProof = this.params.temporaryProof;
        }
        if (this.params.verificationCode) {
          obj.verificationCode = this.params.verificationCode;
        }
        if (this.params.verificationId) {
          obj.verificationId = this.params.verificationId;
        }
        return obj;
      };
      PhoneAuthCredential2.fromJSON = function(json) {
        if (typeof json === "string") {
          json = JSON.parse(json);
        }
        var _a2 = json, verificationId = _a2.verificationId, verificationCode = _a2.verificationCode, phoneNumber = _a2.phoneNumber, temporaryProof = _a2.temporaryProof;
        if (!verificationCode && !verificationId && !phoneNumber && !temporaryProof) {
          return null;
        }
        return new PhoneAuthCredential2({
          verificationId,
          verificationCode,
          phoneNumber,
          temporaryProof
        });
      };
      return PhoneAuthCredential2;
    }(AuthCredential);
    function parseMode(mode) {
      switch (mode) {
        case "recoverEmail":
          return "RECOVER_EMAIL";
        case "resetPassword":
          return "PASSWORD_RESET";
        case "signIn":
          return "EMAIL_SIGNIN";
        case "verifyEmail":
          return "VERIFY_EMAIL";
        case "verifyAndChangeEmail":
          return "VERIFY_AND_CHANGE_EMAIL";
        case "revertSecondFactorAddition":
          return "REVERT_SECOND_FACTOR_ADDITION";
        default:
          return null;
      }
    }
    function parseDeepLink(url) {
      var link = util.querystringDecode(util.extractQuerystring(url))["link"];
      var doubleDeepLink = link ? util.querystringDecode(util.extractQuerystring(link))["deep_link_id"] : null;
      var iOSDeepLink = util.querystringDecode(util.extractQuerystring(url))["deep_link_id"];
      var iOSDoubleDeepLink = iOSDeepLink ? util.querystringDecode(util.extractQuerystring(iOSDeepLink))["link"] : null;
      return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;
    }
    var ActionCodeURL = function() {
      function ActionCodeURL2(actionLink) {
        var _a2, _b, _c, _d, _e, _f;
        var searchParams = util.querystringDecode(util.extractQuerystring(actionLink));
        var apiKey = (_a2 = searchParams["apiKey"]) !== null && _a2 !== void 0 ? _a2 : null;
        var code = (_b = searchParams["oobCode"]) !== null && _b !== void 0 ? _b : null;
        var operation = parseMode((_c = searchParams["mode"]) !== null && _c !== void 0 ? _c : null);
        _assert(apiKey && code && operation, "argument-error");
        this.apiKey = apiKey;
        this.operation = operation;
        this.code = code;
        this.continueUrl = (_d = searchParams["continueUrl"]) !== null && _d !== void 0 ? _d : null;
        this.languageCode = (_e = searchParams["languageCode"]) !== null && _e !== void 0 ? _e : null;
        this.tenantId = (_f = searchParams["tenantId"]) !== null && _f !== void 0 ? _f : null;
      }
      ActionCodeURL2.parseLink = function(link) {
        var actionLink = parseDeepLink(link);
        try {
          return new ActionCodeURL2(actionLink);
        } catch (_a2) {
          return null;
        }
      };
      return ActionCodeURL2;
    }();
    function parseActionCodeURL(link) {
      return ActionCodeURL.parseLink(link);
    }
    var EmailAuthProvider = function() {
      function EmailAuthProvider2() {
        this.providerId = EmailAuthProvider2.PROVIDER_ID;
      }
      EmailAuthProvider2.credential = function(email, password) {
        return EmailAuthCredential._fromEmailAndPassword(email, password);
      };
      EmailAuthProvider2.credentialWithLink = function(email, emailLink) {
        var actionCodeUrl = ActionCodeURL.parseLink(emailLink);
        _assert(actionCodeUrl, "argument-error");
        return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);
      };
      EmailAuthProvider2.PROVIDER_ID = "password";
      EmailAuthProvider2.EMAIL_PASSWORD_SIGN_IN_METHOD = "password";
      EmailAuthProvider2.EMAIL_LINK_SIGN_IN_METHOD = "emailLink";
      return EmailAuthProvider2;
    }();
    var FederatedAuthProvider = function() {
      function FederatedAuthProvider2(providerId) {
        this.providerId = providerId;
        this.defaultLanguageCode = null;
        this.customParameters = {};
      }
      FederatedAuthProvider2.prototype.setDefaultLanguage = function(languageCode) {
        this.defaultLanguageCode = languageCode;
      };
      FederatedAuthProvider2.prototype.setCustomParameters = function(customOAuthParameters) {
        this.customParameters = customOAuthParameters;
        return this;
      };
      FederatedAuthProvider2.prototype.getCustomParameters = function() {
        return this.customParameters;
      };
      return FederatedAuthProvider2;
    }();
    var BaseOAuthProvider = function(_super) {
      tslib.__extends(BaseOAuthProvider2, _super);
      function BaseOAuthProvider2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.scopes = [];
        return _this;
      }
      BaseOAuthProvider2.prototype.addScope = function(scope) {
        if (!this.scopes.includes(scope)) {
          this.scopes.push(scope);
        }
        return this;
      };
      BaseOAuthProvider2.prototype.getScopes = function() {
        return tslib.__spreadArray([], this.scopes);
      };
      return BaseOAuthProvider2;
    }(FederatedAuthProvider);
    var OAuthProvider = function(_super) {
      tslib.__extends(OAuthProvider2, _super);
      function OAuthProvider2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      OAuthProvider2.credentialFromJSON = function(json) {
        var obj = typeof json === "string" ? JSON.parse(json) : json;
        _assert("providerId" in obj && "signInMethod" in obj, "argument-error");
        return OAuthCredential._fromParams(obj);
      };
      OAuthProvider2.prototype.credential = function(params) {
        return this._credential(params);
      };
      OAuthProvider2.prototype._credential = function(params) {
        _assert(params.idToken || params.accessToken, "argument-error");
        return OAuthCredential._fromParams(tslib.__assign(tslib.__assign({}, params), {providerId: this.providerId, signInMethod: this.providerId}));
      };
      OAuthProvider2.credentialFromResult = function(userCredential) {
        return OAuthProvider2.oauthCredentialFromTaggedObject(userCredential);
      };
      OAuthProvider2.credentialFromError = function(error3) {
        return OAuthProvider2.oauthCredentialFromTaggedObject(error3.customData || {});
      };
      OAuthProvider2.oauthCredentialFromTaggedObject = function(_a2) {
        var tokenResponse = _a2._tokenResponse;
        if (!tokenResponse) {
          return null;
        }
        var _b = tokenResponse, oauthIdToken = _b.oauthIdToken, oauthAccessToken = _b.oauthAccessToken, oauthTokenSecret = _b.oauthTokenSecret, pendingToken = _b.pendingToken, nonce = _b.nonce, providerId = _b.providerId;
        if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) {
          return null;
        }
        if (!providerId) {
          return null;
        }
        try {
          return new OAuthProvider2(providerId)._credential({
            idToken: oauthIdToken,
            accessToken: oauthAccessToken,
            rawNonce: nonce,
            pendingToken
          });
        } catch (e) {
          return null;
        }
      };
      return OAuthProvider2;
    }(BaseOAuthProvider);
    var FacebookAuthProvider = function(_super) {
      tslib.__extends(FacebookAuthProvider2, _super);
      function FacebookAuthProvider2() {
        return _super.call(this, "facebook.com") || this;
      }
      FacebookAuthProvider2.credential = function(accessToken) {
        return OAuthCredential._fromParams({
          providerId: FacebookAuthProvider2.PROVIDER_ID,
          signInMethod: FacebookAuthProvider2.FACEBOOK_SIGN_IN_METHOD,
          accessToken
        });
      };
      FacebookAuthProvider2.credentialFromResult = function(userCredential) {
        return FacebookAuthProvider2.credentialFromTaggedObject(userCredential);
      };
      FacebookAuthProvider2.credentialFromError = function(error3) {
        return FacebookAuthProvider2.credentialFromTaggedObject(error3.customData || {});
      };
      FacebookAuthProvider2.credentialFromTaggedObject = function(_a2) {
        var tokenResponse = _a2._tokenResponse;
        if (!tokenResponse || !("oauthAccessToken" in tokenResponse)) {
          return null;
        }
        if (!tokenResponse.oauthAccessToken) {
          return null;
        }
        try {
          return FacebookAuthProvider2.credential(tokenResponse.oauthAccessToken);
        } catch (_b) {
          return null;
        }
      };
      FacebookAuthProvider2.FACEBOOK_SIGN_IN_METHOD = "facebook.com";
      FacebookAuthProvider2.PROVIDER_ID = "facebook.com";
      return FacebookAuthProvider2;
    }(BaseOAuthProvider);
    var GoogleAuthProvider = function(_super) {
      tslib.__extends(GoogleAuthProvider2, _super);
      function GoogleAuthProvider2() {
        var _this = _super.call(this, "google.com") || this;
        _this.addScope("profile");
        return _this;
      }
      GoogleAuthProvider2.credential = function(idToken, accessToken) {
        return OAuthCredential._fromParams({
          providerId: GoogleAuthProvider2.PROVIDER_ID,
          signInMethod: GoogleAuthProvider2.GOOGLE_SIGN_IN_METHOD,
          idToken,
          accessToken
        });
      };
      GoogleAuthProvider2.credentialFromResult = function(userCredential) {
        return GoogleAuthProvider2.credentialFromTaggedObject(userCredential);
      };
      GoogleAuthProvider2.credentialFromError = function(error3) {
        return GoogleAuthProvider2.credentialFromTaggedObject(error3.customData || {});
      };
      GoogleAuthProvider2.credentialFromTaggedObject = function(_a2) {
        var tokenResponse = _a2._tokenResponse;
        if (!tokenResponse) {
          return null;
        }
        var _b = tokenResponse, oauthIdToken = _b.oauthIdToken, oauthAccessToken = _b.oauthAccessToken;
        if (!oauthIdToken && !oauthAccessToken) {
          return null;
        }
        try {
          return GoogleAuthProvider2.credential(oauthIdToken, oauthAccessToken);
        } catch (_c) {
          return null;
        }
      };
      GoogleAuthProvider2.GOOGLE_SIGN_IN_METHOD = "google.com";
      GoogleAuthProvider2.PROVIDER_ID = "google.com";
      return GoogleAuthProvider2;
    }(BaseOAuthProvider);
    var GithubAuthProvider = function(_super) {
      tslib.__extends(GithubAuthProvider2, _super);
      function GithubAuthProvider2() {
        return _super.call(this, "github.com") || this;
      }
      GithubAuthProvider2.credential = function(accessToken) {
        return OAuthCredential._fromParams({
          providerId: GithubAuthProvider2.PROVIDER_ID,
          signInMethod: GithubAuthProvider2.GITHUB_SIGN_IN_METHOD,
          accessToken
        });
      };
      GithubAuthProvider2.credentialFromResult = function(userCredential) {
        return GithubAuthProvider2.credentialFromTaggedObject(userCredential);
      };
      GithubAuthProvider2.credentialFromError = function(error3) {
        return GithubAuthProvider2.credentialFromTaggedObject(error3.customData || {});
      };
      GithubAuthProvider2.credentialFromTaggedObject = function(_a2) {
        var tokenResponse = _a2._tokenResponse;
        if (!tokenResponse || !("oauthAccessToken" in tokenResponse)) {
          return null;
        }
        if (!tokenResponse.oauthAccessToken) {
          return null;
        }
        try {
          return GithubAuthProvider2.credential(tokenResponse.oauthAccessToken);
        } catch (_b) {
          return null;
        }
      };
      GithubAuthProvider2.GITHUB_SIGN_IN_METHOD = "github.com";
      GithubAuthProvider2.PROVIDER_ID = "github.com";
      return GithubAuthProvider2;
    }(BaseOAuthProvider);
    var IDP_REQUEST_URI$1 = "http://localhost";
    var SAMLAuthCredential = function(_super) {
      tslib.__extends(SAMLAuthCredential2, _super);
      function SAMLAuthCredential2(providerId, pendingToken) {
        var _this = _super.call(this, providerId, providerId) || this;
        _this.pendingToken = pendingToken;
        return _this;
      }
      SAMLAuthCredential2.prototype._getIdTokenResponse = function(auth) {
        var request = this.buildRequest();
        return signInWithIdp(auth, request);
      };
      SAMLAuthCredential2.prototype._linkToIdToken = function(auth, idToken) {
        var request = this.buildRequest();
        request.idToken = idToken;
        return signInWithIdp(auth, request);
      };
      SAMLAuthCredential2.prototype._getReauthenticationResolver = function(auth) {
        var request = this.buildRequest();
        request.autoCreate = false;
        return signInWithIdp(auth, request);
      };
      SAMLAuthCredential2.prototype.toJSON = function() {
        return {
          signInMethod: this.signInMethod,
          providerId: this.providerId,
          pendingToken: this.pendingToken
        };
      };
      SAMLAuthCredential2.fromJSON = function(json) {
        var obj = typeof json === "string" ? JSON.parse(json) : json;
        var providerId = obj.providerId, signInMethod = obj.signInMethod, pendingToken = obj.pendingToken;
        if (!providerId || !signInMethod || !pendingToken || providerId !== signInMethod) {
          return null;
        }
        return new SAMLAuthCredential2(providerId, pendingToken);
      };
      SAMLAuthCredential2._create = function(providerId, pendingToken) {
        return new SAMLAuthCredential2(providerId, pendingToken);
      };
      SAMLAuthCredential2.prototype.buildRequest = function() {
        return {
          requestUri: IDP_REQUEST_URI$1,
          returnSecureToken: true,
          pendingToken: this.pendingToken
        };
      };
      return SAMLAuthCredential2;
    }(AuthCredential);
    var SAML_PROVIDER_PREFIX = "saml.";
    var SAMLAuthProvider = function(_super) {
      tslib.__extends(SAMLAuthProvider2, _super);
      function SAMLAuthProvider2(providerId) {
        var _this = this;
        _assert(providerId.startsWith(SAML_PROVIDER_PREFIX), "argument-error");
        _this = _super.call(this, providerId) || this;
        return _this;
      }
      SAMLAuthProvider2.credentialFromResult = function(userCredential) {
        return SAMLAuthProvider2.samlCredentialFromTaggedObject(userCredential);
      };
      SAMLAuthProvider2.credentialFromError = function(error3) {
        return SAMLAuthProvider2.samlCredentialFromTaggedObject(error3.customData || {});
      };
      SAMLAuthProvider2.credentialFromJSON = function(json) {
        var credential = SAMLAuthCredential.fromJSON(json);
        _assert(credential, "argument-error");
        return credential;
      };
      SAMLAuthProvider2.samlCredentialFromTaggedObject = function(_a2) {
        var tokenResponse = _a2._tokenResponse;
        if (!tokenResponse) {
          return null;
        }
        var _b = tokenResponse, pendingToken = _b.pendingToken, providerId = _b.providerId;
        if (!pendingToken || !providerId) {
          return null;
        }
        try {
          return SAMLAuthCredential._create(providerId, pendingToken);
        } catch (e) {
          return null;
        }
      };
      return SAMLAuthProvider2;
    }(FederatedAuthProvider);
    var TwitterAuthProvider = function(_super) {
      tslib.__extends(TwitterAuthProvider2, _super);
      function TwitterAuthProvider2() {
        return _super.call(this, "twitter.com") || this;
      }
      TwitterAuthProvider2.credential = function(token, secret) {
        return OAuthCredential._fromParams({
          providerId: TwitterAuthProvider2.PROVIDER_ID,
          signInMethod: TwitterAuthProvider2.TWITTER_SIGN_IN_METHOD,
          oauthToken: token,
          oauthTokenSecret: secret
        });
      };
      TwitterAuthProvider2.credentialFromResult = function(userCredential) {
        return TwitterAuthProvider2.credentialFromTaggedObject(userCredential);
      };
      TwitterAuthProvider2.credentialFromError = function(error3) {
        return TwitterAuthProvider2.credentialFromTaggedObject(error3.customData || {});
      };
      TwitterAuthProvider2.credentialFromTaggedObject = function(_a2) {
        var tokenResponse = _a2._tokenResponse;
        if (!tokenResponse) {
          return null;
        }
        var _b = tokenResponse, oauthAccessToken = _b.oauthAccessToken, oauthTokenSecret = _b.oauthTokenSecret;
        if (!oauthAccessToken || !oauthTokenSecret) {
          return null;
        }
        try {
          return TwitterAuthProvider2.credential(oauthAccessToken, oauthTokenSecret);
        } catch (_c) {
          return null;
        }
      };
      TwitterAuthProvider2.TWITTER_SIGN_IN_METHOD = "twitter.com";
      TwitterAuthProvider2.PROVIDER_ID = "twitter.com";
      return TwitterAuthProvider2;
    }(BaseOAuthProvider);
    function signUp(auth, request) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_a2) {
          return [2, _performSignInRequest(auth, "POST", "/v1/accounts:signUp", _addTidIfNecessary(auth, request))];
        });
      });
    }
    var UserCredentialImpl = function() {
      function UserCredentialImpl2(params) {
        this.user = params.user;
        this.providerId = params.providerId;
        this._tokenResponse = params._tokenResponse;
        this.operationType = params.operationType;
      }
      UserCredentialImpl2._fromIdTokenResponse = function(auth, operationType, idTokenResponse, isAnonymous) {
        if (isAnonymous === void 0) {
          isAnonymous = false;
        }
        return tslib.__awaiter(this, void 0, void 0, function() {
          var user, providerId, userCred;
          return tslib.__generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                return [4, UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous)];
              case 1:
                user = _a2.sent();
                providerId = providerIdForResponse(idTokenResponse);
                userCred = new UserCredentialImpl2({
                  user,
                  providerId,
                  _tokenResponse: idTokenResponse,
                  operationType
                });
                return [2, userCred];
            }
          });
        });
      };
      UserCredentialImpl2._forOperation = function(user, operationType, response) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var providerId;
          return tslib.__generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                return [4, user._updateTokensIfNecessary(response, true)];
              case 1:
                _a2.sent();
                providerId = providerIdForResponse(response);
                return [2, new UserCredentialImpl2({
                  user,
                  providerId,
                  _tokenResponse: response,
                  operationType
                })];
            }
          });
        });
      };
      return UserCredentialImpl2;
    }();
    function providerIdForResponse(response) {
      if (response.providerId) {
        return response.providerId;
      }
      if ("phoneNumber" in response) {
        return "phone";
      }
      return null;
    }
    function signInAnonymously(auth) {
      var _a2;
      return tslib.__awaiter(this, void 0, void 0, function() {
        var authInternal, response, userCredential;
        return tslib.__generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              authInternal = _castAuth(auth);
              if ((_a2 = authInternal.currentUser) === null || _a2 === void 0 ? void 0 : _a2.isAnonymous) {
                return [2, new UserCredentialImpl({
                  user: authInternal.currentUser,
                  providerId: null,
                  operationType: "signIn"
                })];
              }
              return [4, signUp(authInternal, {
                returnSecureToken: true
              })];
            case 1:
              response = _b.sent();
              return [4, UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn", response, true)];
            case 2:
              userCredential = _b.sent();
              return [4, authInternal._updateCurrentUser(userCredential.user)];
            case 3:
              _b.sent();
              return [2, userCredential];
          }
        });
      });
    }
    var MultiFactorError = function(_super) {
      tslib.__extends(MultiFactorError2, _super);
      function MultiFactorError2(auth, error3, operationType, user) {
        var _a2;
        var _this = _super.call(this, error3.code, error3.message) || this;
        _this.operationType = operationType;
        _this.user = user;
        _this.name = "FirebaseError";
        Object.setPrototypeOf(_this, MultiFactorError2.prototype);
        _this.appName = auth.name;
        _this.code = error3.code;
        _this.tenantId = (_a2 = auth.tenantId) !== null && _a2 !== void 0 ? _a2 : void 0;
        _this.serverResponse = error3.customData.serverResponse;
        return _this;
      }
      MultiFactorError2._fromErrorAndOperation = function(auth, error3, operationType, user) {
        return new MultiFactorError2(auth, error3, operationType, user);
      };
      return MultiFactorError2;
    }(util.FirebaseError);
    function _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {
      var idTokenProvider = operationType === "reauthenticate" ? credential._getReauthenticationResolver(auth) : credential._getIdTokenResponse(auth);
      return idTokenProvider.catch(function(error3) {
        if (error3.code === "auth/multi-factor-auth-required") {
          throw MultiFactorError._fromErrorAndOperation(auth, error3, operationType, user);
        }
        throw error3;
      });
    }
    function providerDataAsNames(providerData) {
      return new Set(providerData.map(function(_a2) {
        var providerId = _a2.providerId;
        return providerId;
      }).filter(function(pid) {
        return !!pid;
      }));
    }
    function unlink(user, providerId) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var userInternal, providerUserInfo, _a2, _b, providersLeft;
        var _c;
        return tslib.__generator(this, function(_d) {
          switch (_d.label) {
            case 0:
              userInternal = util.getModularInstance(user);
              return [4, _assertLinkedStatus(true, userInternal, providerId)];
            case 1:
              _d.sent();
              _a2 = deleteLinkedAccounts;
              _b = [userInternal.auth];
              _c = {};
              return [4, userInternal.getIdToken()];
            case 2:
              return [4, _a2.apply(void 0, _b.concat([(_c.idToken = _d.sent(), _c.deleteProvider = [providerId], _c)]))];
            case 3:
              providerUserInfo = _d.sent().providerUserInfo;
              providersLeft = providerDataAsNames(providerUserInfo || []);
              userInternal.providerData = userInternal.providerData.filter(function(pd) {
                return providersLeft.has(pd.providerId);
              });
              if (!providersLeft.has("phone")) {
                userInternal.phoneNumber = null;
              }
              return [4, userInternal.auth._persistUserIfCurrent(userInternal)];
            case 4:
              _d.sent();
              return [2, userInternal];
          }
        });
      });
    }
    function _link(user, credential, bypassAuthState) {
      if (bypassAuthState === void 0) {
        bypassAuthState = false;
      }
      return tslib.__awaiter(this, void 0, void 0, function() {
        var response, _a2, _b, _c, _d, _e;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              _a2 = _logoutIfInvalidated;
              _b = [user];
              _d = (_c = credential)._linkToIdToken;
              _e = [user.auth];
              return [4, user.getIdToken()];
            case 1:
              return [4, _a2.apply(void 0, _b.concat([_d.apply(_c, _e.concat([_f.sent()])), bypassAuthState]))];
            case 2:
              response = _f.sent();
              return [2, UserCredentialImpl._forOperation(user, "link", response)];
          }
        });
      });
    }
    function _assertLinkedStatus(expected, user, provider) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var providerIds, code;
        return tslib.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, _reloadWithoutSaving(user)];
            case 1:
              _a2.sent();
              providerIds = providerDataAsNames(user.providerData);
              code = expected === false ? "provider-already-linked" : "no-such-provider";
              _assert(providerIds.has(provider) === expected, user.auth, code);
              return [2];
          }
        });
      });
    }
    function _reauthenticate(user, credential, bypassAuthState) {
      if (bypassAuthState === void 0) {
        bypassAuthState = false;
      }
      return tslib.__awaiter(this, void 0, void 0, function() {
        var auth, operationType, response, parsed, localId, e_1;
        return tslib.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              auth = user.auth;
              operationType = "reauthenticate";
              _a2.label = 1;
            case 1:
              _a2.trys.push([1, 3, , 4]);
              return [4, _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState)];
            case 2:
              response = _a2.sent();
              _assert(response.idToken, auth, "internal-error");
              parsed = _parseToken(response.idToken);
              _assert(parsed, auth, "internal-error");
              localId = parsed.sub;
              _assert(user.uid === localId, auth, "user-mismatch");
              return [2, UserCredentialImpl._forOperation(user, operationType, response)];
            case 3:
              e_1 = _a2.sent();
              if ((e_1 === null || e_1 === void 0 ? void 0 : e_1.code) === "auth/user-not-found") {
                _fail(auth, "user-mismatch");
              }
              throw e_1;
            case 4:
              return [2];
          }
        });
      });
    }
    function _signInWithCredential(auth, credential, bypassAuthState) {
      if (bypassAuthState === void 0) {
        bypassAuthState = false;
      }
      return tslib.__awaiter(this, void 0, void 0, function() {
        var operationType, response, userCredential;
        return tslib.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              operationType = "signIn";
              return [4, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential)];
            case 1:
              response = _a2.sent();
              return [4, UserCredentialImpl._fromIdTokenResponse(auth, operationType, response)];
            case 2:
              userCredential = _a2.sent();
              if (!!bypassAuthState)
                return [3, 4];
              return [4, auth._updateCurrentUser(userCredential.user)];
            case 3:
              _a2.sent();
              _a2.label = 4;
            case 4:
              return [2, userCredential];
          }
        });
      });
    }
    function signInWithCredential(auth, credential) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_a2) {
          return [2, _signInWithCredential(_castAuth(auth), credential)];
        });
      });
    }
    function linkWithCredential(user, credential) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var userInternal;
        return tslib.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              userInternal = util.getModularInstance(user);
              return [4, _assertLinkedStatus(false, userInternal, credential.providerId)];
            case 1:
              _a2.sent();
              return [2, _link(userInternal, credential)];
          }
        });
      });
    }
    function reauthenticateWithCredential(user, credential) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_a2) {
          return [2, _reauthenticate(util.getModularInstance(user), credential)];
        });
      });
    }
    function signInWithCustomToken(auth, request) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_a2) {
          return [2, _performSignInRequest(auth, "POST", "/v1/accounts:signInWithCustomToken", _addTidIfNecessary(auth, request))];
        });
      });
    }
    function signInWithCustomToken$1(auth, customToken) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var authInternal, response, cred;
        return tslib.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              authInternal = _castAuth(auth);
              return [4, signInWithCustomToken(authInternal, {
                token: customToken,
                returnSecureToken: true
              })];
            case 1:
              response = _a2.sent();
              return [4, UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn", response)];
            case 2:
              cred = _a2.sent();
              return [4, authInternal._updateCurrentUser(cred.user)];
            case 3:
              _a2.sent();
              return [2, cred];
          }
        });
      });
    }
    var MultiFactorInfoImpl = function() {
      function MultiFactorInfoImpl2(factorId, response) {
        this.factorId = factorId;
        this.uid = response.mfaEnrollmentId;
        this.enrollmentTime = new Date(response.enrolledAt).toUTCString();
        this.displayName = response.displayName;
      }
      MultiFactorInfoImpl2._fromServerResponse = function(auth, enrollment) {
        if ("phoneInfo" in enrollment) {
          return PhoneMultiFactorInfo._fromServerResponse(auth, enrollment);
        }
        return _fail(auth, "internal-error");
      };
      return MultiFactorInfoImpl2;
    }();
    var PhoneMultiFactorInfo = function(_super) {
      tslib.__extends(PhoneMultiFactorInfo2, _super);
      function PhoneMultiFactorInfo2(response) {
        var _this = _super.call(this, "phone", response) || this;
        _this.phoneNumber = response.phoneInfo;
        return _this;
      }
      PhoneMultiFactorInfo2._fromServerResponse = function(_auth, enrollment) {
        return new PhoneMultiFactorInfo2(enrollment);
      };
      return PhoneMultiFactorInfo2;
    }(MultiFactorInfoImpl);
    function _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {
      var _a2;
      _assert(((_a2 = actionCodeSettings.url) === null || _a2 === void 0 ? void 0 : _a2.length) > 0, auth, "invalid-continue-uri");
      _assert(typeof actionCodeSettings.dynamicLinkDomain === "undefined" || actionCodeSettings.dynamicLinkDomain.length > 0, auth, "invalid-dynamic-link-domain");
      request.continueUrl = actionCodeSettings.url;
      request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;
      request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;
      if (actionCodeSettings.iOS) {
        _assert(actionCodeSettings.iOS.bundleId.length > 0, auth, "missing-ios-bundle-id");
        request.iosBundleId = actionCodeSettings.iOS.bundleId;
      }
      if (actionCodeSettings.android) {
        _assert(actionCodeSettings.android.packageName.length > 0, auth, "missing-android-pkg-name");
        request.androidInstallApp = actionCodeSettings.android.installApp;
        request.androidMinimumVersionCode = actionCodeSettings.android.minimumVersion;
        request.androidPackageName = actionCodeSettings.android.packageName;
      }
    }
    function sendPasswordResetEmail$1(auth, email, actionCodeSettings) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var authModular, request;
        return tslib.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              authModular = util.getModularInstance(auth);
              request = {
                requestType: "PASSWORD_RESET",
                email
              };
              if (actionCodeSettings) {
                _setActionCodeSettingsOnRequest(authModular, request, actionCodeSettings);
              }
              return [4, sendPasswordResetEmail(authModular, request)];
            case 1:
              _a2.sent();
              return [2];
          }
        });
      });
    }
    function confirmPasswordReset(auth, oobCode, newPassword) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, resetPassword(util.getModularInstance(auth), {
                oobCode,
                newPassword
              })];
            case 1:
              _a2.sent();
              return [2];
          }
        });
      });
    }
    function applyActionCode$1(auth, oobCode) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, applyActionCode(util.getModularInstance(auth), {oobCode})];
            case 1:
              _a2.sent();
              return [2];
          }
        });
      });
    }
    function checkActionCode(auth, oobCode) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var authModular, response, operation, multiFactorInfo;
        return tslib.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              authModular = util.getModularInstance(auth);
              return [4, resetPassword(authModular, {oobCode})];
            case 1:
              response = _a2.sent();
              operation = response.requestType;
              _assert(operation, authModular, "internal-error");
              switch (operation) {
                case "EMAIL_SIGNIN":
                  break;
                case "VERIFY_AND_CHANGE_EMAIL":
                  _assert(response.newEmail, authModular, "internal-error");
                  break;
                case "REVERT_SECOND_FACTOR_ADDITION":
                  _assert(response.mfaInfo, authModular, "internal-error");
                default:
                  _assert(response.email, authModular, "internal-error");
              }
              multiFactorInfo = null;
              if (response.mfaInfo) {
                multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(_castAuth(authModular), response.mfaInfo);
              }
              return [2, {
                data: {
                  email: (response.requestType === "VERIFY_AND_CHANGE_EMAIL" ? response.newEmail : response.email) || null,
                  previousEmail: (response.requestType === "VERIFY_AND_CHANGE_EMAIL" ? response.email : response.newEmail) || null,
                  multiFactorInfo
                },
                operation
              }];
          }
        });
      });
    }
    function verifyPasswordResetCode(auth, code) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var data;
        return tslib.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, checkActionCode(util.getModularInstance(auth), code)];
            case 1:
              data = _a2.sent().data;
              return [2, data.email];
          }
        });
      });
    }
    function createUserWithEmailAndPassword(auth, email, password) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var authInternal, response, userCredential;
        return tslib.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              authInternal = _castAuth(auth);
              return [4, signUp(authInternal, {
                returnSecureToken: true,
                email,
                password
              })];
            case 1:
              response = _a2.sent();
              return [4, UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn", response)];
            case 2:
              userCredential = _a2.sent();
              return [4, authInternal._updateCurrentUser(userCredential.user)];
            case 3:
              _a2.sent();
              return [2, userCredential];
          }
        });
      });
    }
    function signInWithEmailAndPassword(auth, email, password) {
      return signInWithCredential(util.getModularInstance(auth), EmailAuthProvider.credential(email, password));
    }
    function sendSignInLinkToEmail$1(auth, email, actionCodeSettings) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var authModular, request;
        return tslib.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              authModular = util.getModularInstance(auth);
              request = {
                requestType: "EMAIL_SIGNIN",
                email
              };
              _assert(actionCodeSettings.handleCodeInApp, authModular, "argument-error");
              if (actionCodeSettings) {
                _setActionCodeSettingsOnRequest(authModular, request, actionCodeSettings);
              }
              return [4, sendSignInLinkToEmail(authModular, request)];
            case 1:
              _a2.sent();
              return [2];
          }
        });
      });
    }
    function isSignInWithEmailLink(auth, emailLink) {
      var actionCodeUrl = ActionCodeURL.parseLink(emailLink);
      return (actionCodeUrl === null || actionCodeUrl === void 0 ? void 0 : actionCodeUrl.operation) === "EMAIL_SIGNIN";
    }
    function signInWithEmailLink$1(auth, email, emailLink) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var authModular, credential;
        return tslib.__generator(this, function(_a2) {
          authModular = util.getModularInstance(auth);
          credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl());
          _assert(credential._tenantId === (authModular.tenantId || null), authModular, "tenant-id-mismatch");
          return [2, signInWithCredential(authModular, credential)];
        });
      });
    }
    function createAuthUri(auth, request) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_a2) {
          return [2, _performApiRequest(auth, "POST", "/v1/accounts:createAuthUri", _addTidIfNecessary(auth, request))];
        });
      });
    }
    function fetchSignInMethodsForEmail(auth, email) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var continueUri, request, signinMethods;
        return tslib.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              continueUri = _isHttpOrHttps() ? _getCurrentUrl() : "http://localhost";
              request = {
                identifier: email,
                continueUri
              };
              return [4, createAuthUri(util.getModularInstance(auth), request)];
            case 1:
              signinMethods = _a2.sent().signinMethods;
              return [2, signinMethods || []];
          }
        });
      });
    }
    function sendEmailVerification$1(user, actionCodeSettings) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var userInternal, idToken, request, email;
        return tslib.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              userInternal = util.getModularInstance(user);
              return [4, user.getIdToken()];
            case 1:
              idToken = _a2.sent();
              request = {
                requestType: "VERIFY_EMAIL",
                idToken
              };
              if (actionCodeSettings) {
                _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);
              }
              return [4, sendEmailVerification(userInternal.auth, request)];
            case 2:
              email = _a2.sent().email;
              if (!(email !== user.email))
                return [3, 4];
              return [4, user.reload()];
            case 3:
              _a2.sent();
              _a2.label = 4;
            case 4:
              return [2];
          }
        });
      });
    }
    function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var userInternal, idToken, request, email;
        return tslib.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              userInternal = util.getModularInstance(user);
              return [4, user.getIdToken()];
            case 1:
              idToken = _a2.sent();
              request = {
                requestType: "VERIFY_AND_CHANGE_EMAIL",
                idToken,
                newEmail
              };
              if (actionCodeSettings) {
                _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);
              }
              return [4, verifyAndChangeEmail(userInternal.auth, request)];
            case 2:
              email = _a2.sent().email;
              if (!(email !== user.email))
                return [3, 4];
              return [4, user.reload()];
            case 3:
              _a2.sent();
              _a2.label = 4;
            case 4:
              return [2];
          }
        });
      });
    }
    function updateProfile(auth, request) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_a2) {
          return [2, _performApiRequest(auth, "POST", "/v1/accounts:update", request)];
        });
      });
    }
    function updateProfile$1(user, _a2) {
      var displayName = _a2.displayName, photoUrl = _a2.photoURL;
      return tslib.__awaiter(this, void 0, void 0, function() {
        var userInternal, idToken, profileRequest, response, passwordProvider;
        return tslib.__generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (displayName === void 0 && photoUrl === void 0) {
                return [2];
              }
              userInternal = util.getModularInstance(user);
              return [4, userInternal.getIdToken()];
            case 1:
              idToken = _b.sent();
              profileRequest = {
                idToken,
                displayName,
                photoUrl,
                returnSecureToken: true
              };
              return [4, _logoutIfInvalidated(userInternal, updateProfile(userInternal.auth, profileRequest))];
            case 2:
              response = _b.sent();
              userInternal.displayName = response.displayName || null;
              userInternal.photoURL = response.photoUrl || null;
              passwordProvider = userInternal.providerData.find(function(_a3) {
                var providerId = _a3.providerId;
                return providerId === "password";
              });
              if (passwordProvider) {
                passwordProvider.displayName = userInternal.displayName;
                passwordProvider.photoURL = userInternal.photoURL;
              }
              return [4, userInternal._updateTokensIfNecessary(response)];
            case 3:
              _b.sent();
              return [2];
          }
        });
      });
    }
    function updateEmail(user, newEmail) {
      return updateEmailOrPassword(util.getModularInstance(user), newEmail, null);
    }
    function updatePassword(user, newPassword) {
      return updateEmailOrPassword(util.getModularInstance(user), null, newPassword);
    }
    function updateEmailOrPassword(user, email, password) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var auth, idToken, request, response;
        return tslib.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              auth = user.auth;
              return [4, user.getIdToken()];
            case 1:
              idToken = _a2.sent();
              request = {
                idToken,
                returnSecureToken: true
              };
              if (email) {
                request.email = email;
              }
              if (password) {
                request.password = password;
              }
              return [4, _logoutIfInvalidated(user, updateEmailPassword(auth, request))];
            case 2:
              response = _a2.sent();
              return [4, user._updateTokensIfNecessary(response, true)];
            case 3:
              _a2.sent();
              return [2];
          }
        });
      });
    }
    function _fromIdTokenResponse(idTokenResponse) {
      var _a2, _b;
      if (!idTokenResponse) {
        return null;
      }
      var providerId = idTokenResponse.providerId;
      var profile = idTokenResponse.rawUserInfo ? JSON.parse(idTokenResponse.rawUserInfo) : {};
      var isNewUser = idTokenResponse.isNewUser || idTokenResponse.kind === "identitytoolkit#SignupNewUserResponse";
      if (!providerId && (idTokenResponse === null || idTokenResponse === void 0 ? void 0 : idTokenResponse.idToken)) {
        var signInProvider = (_b = (_a2 = _parseToken(idTokenResponse.idToken)) === null || _a2 === void 0 ? void 0 : _a2.firebase) === null || _b === void 0 ? void 0 : _b["sign_in_provider"];
        if (signInProvider) {
          var filteredProviderId = signInProvider !== "anonymous" && signInProvider !== "custom" ? signInProvider : null;
          return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);
        }
      }
      if (!providerId) {
        return null;
      }
      switch (providerId) {
        case "facebook.com":
          return new FacebookAdditionalUserInfo(isNewUser, profile);
        case "github.com":
          return new GithubAdditionalUserInfo(isNewUser, profile);
        case "google.com":
          return new GoogleAdditionalUserInfo(isNewUser, profile);
        case "twitter.com":
          return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);
        case "custom":
        case "anonymous":
          return new GenericAdditionalUserInfo(isNewUser, null);
        default:
          return new GenericAdditionalUserInfo(isNewUser, providerId, profile);
      }
    }
    var GenericAdditionalUserInfo = function() {
      function GenericAdditionalUserInfo2(isNewUser, providerId, profile) {
        if (profile === void 0) {
          profile = {};
        }
        this.isNewUser = isNewUser;
        this.providerId = providerId;
        this.profile = profile;
      }
      return GenericAdditionalUserInfo2;
    }();
    var FederatedAdditionalUserInfoWithUsername = function(_super) {
      tslib.__extends(FederatedAdditionalUserInfoWithUsername2, _super);
      function FederatedAdditionalUserInfoWithUsername2(isNewUser, providerId, profile, username) {
        var _this = _super.call(this, isNewUser, providerId, profile) || this;
        _this.username = username;
        return _this;
      }
      return FederatedAdditionalUserInfoWithUsername2;
    }(GenericAdditionalUserInfo);
    var FacebookAdditionalUserInfo = function(_super) {
      tslib.__extends(FacebookAdditionalUserInfo2, _super);
      function FacebookAdditionalUserInfo2(isNewUser, profile) {
        return _super.call(this, isNewUser, "facebook.com", profile) || this;
      }
      return FacebookAdditionalUserInfo2;
    }(GenericAdditionalUserInfo);
    var GithubAdditionalUserInfo = function(_super) {
      tslib.__extends(GithubAdditionalUserInfo2, _super);
      function GithubAdditionalUserInfo2(isNewUser, profile) {
        return _super.call(this, isNewUser, "github.com", profile, typeof (profile === null || profile === void 0 ? void 0 : profile.login) === "string" ? profile === null || profile === void 0 ? void 0 : profile.login : null) || this;
      }
      return GithubAdditionalUserInfo2;
    }(FederatedAdditionalUserInfoWithUsername);
    var GoogleAdditionalUserInfo = function(_super) {
      tslib.__extends(GoogleAdditionalUserInfo2, _super);
      function GoogleAdditionalUserInfo2(isNewUser, profile) {
        return _super.call(this, isNewUser, "google.com", profile) || this;
      }
      return GoogleAdditionalUserInfo2;
    }(GenericAdditionalUserInfo);
    var TwitterAdditionalUserInfo = function(_super) {
      tslib.__extends(TwitterAdditionalUserInfo2, _super);
      function TwitterAdditionalUserInfo2(isNewUser, profile, screenName) {
        return _super.call(this, isNewUser, "twitter.com", profile, screenName) || this;
      }
      return TwitterAdditionalUserInfo2;
    }(FederatedAdditionalUserInfoWithUsername);
    function getAdditionalUserInfo(userCredential) {
      var _a2 = userCredential, user = _a2.user, _tokenResponse = _a2._tokenResponse;
      if (user.isAnonymous && !_tokenResponse) {
        return {
          providerId: null,
          isNewUser: false,
          profile: null
        };
      }
      return _fromIdTokenResponse(_tokenResponse);
    }
    function setPersistence(auth, persistence) {
      return util.getModularInstance(auth).setPersistence(persistence);
    }
    function onIdTokenChanged(auth, nextOrObserver, error3, completed) {
      return util.getModularInstance(auth).onIdTokenChanged(nextOrObserver, error3, completed);
    }
    function onAuthStateChanged2(auth, nextOrObserver, error3, completed) {
      return util.getModularInstance(auth).onAuthStateChanged(nextOrObserver, error3, completed);
    }
    function useDeviceLanguage(auth) {
      util.getModularInstance(auth).useDeviceLanguage();
    }
    function updateCurrentUser(auth, user) {
      return util.getModularInstance(auth).updateCurrentUser(user);
    }
    function signOut(auth) {
      return util.getModularInstance(auth).signOut();
    }
    function deleteUser(user) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_a2) {
          return [2, util.getModularInstance(user).delete()];
        });
      });
    }
    var MultiFactorSessionImpl = function() {
      function MultiFactorSessionImpl2(type, credential) {
        this.type = type;
        this.credential = credential;
      }
      MultiFactorSessionImpl2._fromIdtoken = function(idToken) {
        return new MultiFactorSessionImpl2("enroll", idToken);
      };
      MultiFactorSessionImpl2._fromMfaPendingCredential = function(mfaPendingCredential) {
        return new MultiFactorSessionImpl2("signin", mfaPendingCredential);
      };
      MultiFactorSessionImpl2.prototype.toJSON = function() {
        var _a2;
        var key = this.type === "enroll" ? "idToken" : "pendingCredential";
        return {
          multiFactorSession: (_a2 = {}, _a2[key] = this.credential, _a2)
        };
      };
      MultiFactorSessionImpl2.fromJSON = function(obj) {
        var _a2, _b;
        if (obj === null || obj === void 0 ? void 0 : obj.multiFactorSession) {
          if ((_a2 = obj.multiFactorSession) === null || _a2 === void 0 ? void 0 : _a2.pendingCredential) {
            return MultiFactorSessionImpl2._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);
          } else if ((_b = obj.multiFactorSession) === null || _b === void 0 ? void 0 : _b.idToken) {
            return MultiFactorSessionImpl2._fromIdtoken(obj.multiFactorSession.idToken);
          }
        }
        return null;
      };
      return MultiFactorSessionImpl2;
    }();
    var MultiFactorResolverImpl = function() {
      function MultiFactorResolverImpl2(session2, hints, signInResolver) {
        this.session = session2;
        this.hints = hints;
        this.signInResolver = signInResolver;
      }
      MultiFactorResolverImpl2._fromError = function(authExtern, error3) {
        var _this = this;
        var auth = _castAuth(authExtern);
        var hints = (error3.serverResponse.mfaInfo || []).map(function(enrollment) {
          return MultiFactorInfoImpl._fromServerResponse(auth, enrollment);
        });
        _assert(error3.serverResponse.mfaPendingCredential, auth, "internal-error");
        var session2 = MultiFactorSessionImpl._fromMfaPendingCredential(error3.serverResponse.mfaPendingCredential);
        return new MultiFactorResolverImpl2(session2, hints, function(assertion) {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            var mfaResponse, idTokenResponse, _a2, userCredential;
            return tslib.__generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  return [4, assertion._process(auth, session2)];
                case 1:
                  mfaResponse = _b.sent();
                  delete error3.serverResponse.mfaInfo;
                  delete error3.serverResponse.mfaPendingCredential;
                  idTokenResponse = tslib.__assign(tslib.__assign({}, error3.serverResponse), {idToken: mfaResponse.idToken, refreshToken: mfaResponse.refreshToken});
                  _a2 = error3.operationType;
                  switch (_a2) {
                    case "signIn":
                      return [3, 2];
                    case "reauthenticate":
                      return [3, 5];
                  }
                  return [3, 6];
                case 2:
                  return [4, UserCredentialImpl._fromIdTokenResponse(auth, error3.operationType, idTokenResponse)];
                case 3:
                  userCredential = _b.sent();
                  return [4, auth._updateCurrentUser(userCredential.user)];
                case 4:
                  _b.sent();
                  return [2, userCredential];
                case 5:
                  _assert(error3.user, auth, "internal-error");
                  return [2, UserCredentialImpl._forOperation(error3.user, error3.operationType, idTokenResponse)];
                case 6:
                  _fail(auth, "internal-error");
                  _b.label = 7;
                case 7:
                  return [2];
              }
            });
          });
        });
      };
      MultiFactorResolverImpl2.prototype.resolveSignIn = function(assertionExtern) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var assertion;
          return tslib.__generator(this, function(_a2) {
            assertion = assertionExtern;
            return [2, this.signInResolver(assertion)];
          });
        });
      };
      return MultiFactorResolverImpl2;
    }();
    function getMultiFactorResolver(auth, error3) {
      var _a2;
      var authModular = util.getModularInstance(auth);
      var errorInternal = error3;
      _assert(error3.operationType, authModular, "argument-error");
      _assert((_a2 = errorInternal.serverResponse) === null || _a2 === void 0 ? void 0 : _a2.mfaPendingCredential, authModular, "argument-error");
      return MultiFactorResolverImpl._fromError(authModular, errorInternal);
    }
    function startEnrollPhoneMfa(auth, request) {
      return _performApiRequest(auth, "POST", "/v2/accounts/mfaEnrollment:start", tslib.__assign({tenantId: auth.tenantId}, request));
    }
    function finalizeEnrollPhoneMfa(auth, request) {
      return _performApiRequest(auth, "POST", "/v2/accounts/mfaEnrollment:finalize", tslib.__assign({tenantId: auth.tenantId}, request));
    }
    function withdrawMfa(auth, request) {
      return _performApiRequest(auth, "POST", "/v2/accounts/mfaEnrollment:withdraw", tslib.__assign({tenantId: auth.tenantId}, request));
    }
    var MultiFactorUserImpl = function() {
      function MultiFactorUserImpl2(user) {
        var _this = this;
        this.user = user;
        this.enrolledFactors = [];
        user._onReload(function(userInfo) {
          if (userInfo.mfaInfo) {
            _this.enrolledFactors = userInfo.mfaInfo.map(function(enrollment) {
              return MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment);
            });
          }
        });
      }
      MultiFactorUserImpl2._fromUser = function(user) {
        return new MultiFactorUserImpl2(user);
      };
      MultiFactorUserImpl2.prototype.getSession = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var _a2, _b;
          return tslib.__generator(this, function(_c) {
            switch (_c.label) {
              case 0:
                _b = (_a2 = MultiFactorSessionImpl)._fromIdtoken;
                return [4, this.user.getIdToken()];
              case 1:
                return [2, _b.apply(_a2, [_c.sent()])];
            }
          });
        });
      };
      MultiFactorUserImpl2.prototype.enroll = function(assertionExtern, displayName) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var assertion, session2, finalizeMfaResponse;
          return tslib.__generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                assertion = assertionExtern;
                return [4, this.getSession()];
              case 1:
                session2 = _a2.sent();
                return [4, _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session2, displayName))];
              case 2:
                finalizeMfaResponse = _a2.sent();
                return [4, this.user._updateTokensIfNecessary(finalizeMfaResponse)];
              case 3:
                _a2.sent();
                return [2, this.user.reload()];
            }
          });
        });
      };
      MultiFactorUserImpl2.prototype.unenroll = function(infoOrUid) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var mfaEnrollmentId, idToken, idTokenResponse, e_1;
          return tslib.__generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                mfaEnrollmentId = typeof infoOrUid === "string" ? infoOrUid : infoOrUid.uid;
                return [4, this.user.getIdToken()];
              case 1:
                idToken = _a2.sent();
                return [4, _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {
                  idToken,
                  mfaEnrollmentId
                }))];
              case 2:
                idTokenResponse = _a2.sent();
                this.enrolledFactors = this.enrolledFactors.filter(function(_a3) {
                  var uid = _a3.uid;
                  return uid !== mfaEnrollmentId;
                });
                return [4, this.user._updateTokensIfNecessary(idTokenResponse)];
              case 3:
                _a2.sent();
                _a2.label = 4;
              case 4:
                _a2.trys.push([4, 6, , 7]);
                return [4, this.user.reload()];
              case 5:
                _a2.sent();
                return [3, 7];
              case 6:
                e_1 = _a2.sent();
                if (e_1.code !== "auth/user-token-expired") {
                  throw e_1;
                }
                return [3, 7];
              case 7:
                return [2];
            }
          });
        });
      };
      return MultiFactorUserImpl2;
    }();
    var multiFactorUserCache = new WeakMap();
    function multiFactor(user) {
      var userModular = util.getModularInstance(user);
      if (!multiFactorUserCache.has(userModular)) {
        multiFactorUserCache.set(userModular, MultiFactorUserImpl._fromUser(userModular));
      }
      return multiFactorUserCache.get(userModular);
    }
    var name = "@firebase/auth-exp";
    var version = "0.0.900-exp.894b5da5a";
    var AuthInterop = function() {
      function AuthInterop2(auth) {
        this.auth = auth;
        this.internalListeners = new Map();
      }
      AuthInterop2.prototype.getUid = function() {
        var _a2;
        this.assertAuthConfigured();
        return ((_a2 = this.auth.currentUser) === null || _a2 === void 0 ? void 0 : _a2.uid) || null;
      };
      AuthInterop2.prototype.getToken = function(forceRefresh) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var accessToken;
          return tslib.__generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                this.assertAuthConfigured();
                return [4, this.auth._initializationPromise];
              case 1:
                _a2.sent();
                if (!this.auth.currentUser) {
                  return [2, null];
                }
                return [4, this.auth.currentUser.getIdToken(forceRefresh)];
              case 2:
                accessToken = _a2.sent();
                return [2, {accessToken}];
            }
          });
        });
      };
      AuthInterop2.prototype.addAuthTokenListener = function(listener) {
        this.assertAuthConfigured();
        if (this.internalListeners.has(listener)) {
          return;
        }
        var unsubscribe = this.auth.onIdTokenChanged(function(user) {
          var _a2;
          listener(((_a2 = user) === null || _a2 === void 0 ? void 0 : _a2.stsTokenManager.accessToken) || null);
        });
        this.internalListeners.set(listener, unsubscribe);
        this.updateProactiveRefresh();
      };
      AuthInterop2.prototype.removeAuthTokenListener = function(listener) {
        this.assertAuthConfigured();
        var unsubscribe = this.internalListeners.get(listener);
        if (!unsubscribe) {
          return;
        }
        this.internalListeners.delete(listener);
        unsubscribe();
        this.updateProactiveRefresh();
      };
      AuthInterop2.prototype.assertAuthConfigured = function() {
        _assert(this.auth._initializationPromise, "dependent-sdk-initialized-before-auth");
      };
      AuthInterop2.prototype.updateProactiveRefresh = function() {
        if (this.internalListeners.size > 0) {
          this.auth._startProactiveRefresh();
        } else {
          this.auth._stopProactiveRefresh();
        }
      };
      return AuthInterop2;
    }();
    function getVersionForPlatform(clientPlatform) {
      switch (clientPlatform) {
        case "Node":
          return "node";
        case "ReactNative":
          return "rn";
        case "Worker":
          return "webworker";
        case "Cordova":
          return "cordova";
        default:
          return void 0;
      }
    }
    function registerAuth(clientPlatform) {
      app._registerComponent(new component.Component("auth-exp", function(container, _a2) {
        var deps = _a2.options;
        var app2 = container.getProvider("app-exp").getImmediate();
        var _b = app2.options, apiKey = _b.apiKey, authDomain = _b.authDomain;
        return function(app3) {
          _assert(apiKey && !apiKey.includes(":"), "invalid-api-key", {appName: app3.name});
          _assert(!(authDomain === null || authDomain === void 0 ? void 0 : authDomain.includes(":")), "argument-error", {
            appName: app3.name
          });
          var config = {
            apiKey,
            authDomain,
            clientPlatform,
            apiHost: "identitytoolkit.googleapis.com",
            tokenApiHost: "securetoken.googleapis.com",
            apiScheme: "https",
            sdkClientVersion: _getClientVersion(clientPlatform)
          };
          var authInstance = new AuthImpl(app3, config);
          _initializeAuthInstance(authInstance, deps);
          return authInstance;
        }(app2);
      }, "PUBLIC").setInstantiationMode("EXPLICIT").setInstanceCreatedCallback(function(container, _instanceIdentifier, _instance) {
        var authInternalProvider = container.getProvider("auth-internal");
        authInternalProvider.initialize();
      }));
      app._registerComponent(new component.Component("auth-internal", function(container) {
        var auth = _castAuth(container.getProvider("auth-exp").getImmediate());
        return function(auth2) {
          return new AuthInterop(auth2);
        }(auth);
      }, "PRIVATE").setInstantiationMode("EXPLICIT"));
      app.registerVersion(name, version, getVersionForPlatform(clientPlatform));
    }
    exports2.ActionCodeURL = ActionCodeURL;
    exports2.AuthCredential = AuthCredential;
    exports2.AuthImpl = AuthImpl;
    exports2.BaseOAuthProvider = BaseOAuthProvider;
    exports2.Delay = Delay;
    exports2.EmailAuthCredential = EmailAuthCredential;
    exports2.EmailAuthProvider = EmailAuthProvider;
    exports2.FacebookAuthProvider = FacebookAuthProvider;
    exports2.FederatedAuthProvider = FederatedAuthProvider;
    exports2.FetchProvider = FetchProvider;
    exports2.GithubAuthProvider = GithubAuthProvider;
    exports2.GoogleAuthProvider = GoogleAuthProvider;
    exports2.OAuthCredential = OAuthCredential;
    exports2.OAuthProvider = OAuthProvider;
    exports2.PhoneAuthCredential = PhoneAuthCredential;
    exports2.SAMLAuthCredential = SAMLAuthCredential;
    exports2.SAMLAuthProvider = SAMLAuthProvider;
    exports2.TwitterAuthProvider = TwitterAuthProvider;
    exports2.UserImpl = UserImpl;
    exports2._assert = _assert;
    exports2._assertLinkedStatus = _assertLinkedStatus;
    exports2._castAuth = _castAuth;
    exports2._createError = _createError;
    exports2._emulatorUrl = _emulatorUrl;
    exports2._fail = _fail;
    exports2._getClientVersion = _getClientVersion;
    exports2._getCurrentUrl = _getCurrentUrl;
    exports2._getInstance = _getInstance;
    exports2._isAndroid = _isAndroid;
    exports2._isChromeIOS = _isChromeIOS;
    exports2._isFirefox = _isFirefox;
    exports2._isHttpOrHttps = _isHttpOrHttps;
    exports2._isIE10 = _isIE10;
    exports2._isIOS = _isIOS;
    exports2._isIOS7Or8 = _isIOS7Or8;
    exports2._isIOSStandalone = _isIOSStandalone;
    exports2._isIframe = _isIframe;
    exports2._isMobileBrowser = _isMobileBrowser;
    exports2._isSafari = _isSafari;
    exports2._link = _link;
    exports2._performApiRequest = _performApiRequest;
    exports2._persistenceKeyName = _persistenceKeyName;
    exports2._reauthenticate = _reauthenticate;
    exports2._signInWithCredential = _signInWithCredential;
    exports2.applyActionCode = applyActionCode$1;
    exports2.checkActionCode = checkActionCode;
    exports2.confirmPasswordReset = confirmPasswordReset;
    exports2.createUserWithEmailAndPassword = createUserWithEmailAndPassword;
    exports2.debugAssert = debugAssert;
    exports2.debugErrorMap = debugErrorMap;
    exports2.debugFail = debugFail;
    exports2.deleteUser = deleteUser;
    exports2.fetchSignInMethodsForEmail = fetchSignInMethodsForEmail;
    exports2.finalizeEnrollPhoneMfa = finalizeEnrollPhoneMfa;
    exports2.getAdditionalUserInfo = getAdditionalUserInfo;
    exports2.getIdToken = getIdToken;
    exports2.getIdTokenResult = getIdTokenResult;
    exports2.getMultiFactorResolver = getMultiFactorResolver;
    exports2.inMemoryPersistence = inMemoryPersistence;
    exports2.initializeAuth = initializeAuth;
    exports2.isSignInWithEmailLink = isSignInWithEmailLink;
    exports2.linkWithCredential = linkWithCredential;
    exports2.multiFactor = multiFactor;
    exports2.onAuthStateChanged = onAuthStateChanged2;
    exports2.onIdTokenChanged = onIdTokenChanged;
    exports2.parseActionCodeURL = parseActionCodeURL;
    exports2.prodErrorMap = prodErrorMap;
    exports2.reauthenticateWithCredential = reauthenticateWithCredential;
    exports2.registerAuth = registerAuth;
    exports2.reload = reload;
    exports2.sendEmailVerification = sendEmailVerification$1;
    exports2.sendPasswordResetEmail = sendPasswordResetEmail$1;
    exports2.sendPhoneVerificationCode = sendPhoneVerificationCode;
    exports2.sendSignInLinkToEmail = sendSignInLinkToEmail$1;
    exports2.setPersistence = setPersistence;
    exports2.signInAnonymously = signInAnonymously;
    exports2.signInWithCredential = signInWithCredential;
    exports2.signInWithCustomToken = signInWithCustomToken$1;
    exports2.signInWithEmailAndPassword = signInWithEmailAndPassword;
    exports2.signInWithEmailLink = signInWithEmailLink$1;
    exports2.signInWithIdp = signInWithIdp;
    exports2.signOut = signOut;
    exports2.startEnrollPhoneMfa = startEnrollPhoneMfa;
    exports2.unlink = unlink;
    exports2.updateCurrentUser = updateCurrentUser;
    exports2.updateEmail = updateEmail;
    exports2.updatePassword = updatePassword;
    exports2.updateProfile = updateProfile$1;
    exports2.useAuthEmulator = useAuthEmulator;
    exports2.useDeviceLanguage = useDeviceLanguage;
    exports2.verifyBeforeUpdateEmail = verifyBeforeUpdateEmail;
    exports2.verifyPasswordResetCode = verifyPasswordResetCode;
  }
});

// node_modules/@firebase/auth/dist/node/index.js
var require_node = __commonJS({
  "node_modules/@firebase/auth/dist/node/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    var fetchImpl = require_lib();
    var app = require_index_cjs3();
    require_tslib();
    require_index_node_cjs();
    var register = require_register_784c267e();
    require_index_cjs2();
    require_index_cjs();
    function _interopDefaultLegacy(e) {
      return e && typeof e === "object" && "default" in e ? e : {"default": e};
    }
    var fetchImpl__default = /* @__PURE__ */ _interopDefaultLegacy(fetchImpl);
    register.FetchProvider.initialize(fetchImpl__default["default"], fetchImpl.Headers, fetchImpl.Response);
    function getAuth2(app$1) {
      var provider = app._getProvider(app$1, "auth-exp");
      if (provider.isInitialized()) {
        return provider.getImmediate();
      }
      return register.initializeAuth(app$1);
    }
    register.registerAuth("Node");
    exports2.ActionCodeURL = register.ActionCodeURL;
    exports2.AuthCredential = register.AuthCredential;
    exports2.EmailAuthCredential = register.EmailAuthCredential;
    exports2.EmailAuthProvider = register.EmailAuthProvider;
    exports2.FacebookAuthProvider = register.FacebookAuthProvider;
    exports2.GithubAuthProvider = register.GithubAuthProvider;
    exports2.GoogleAuthProvider = register.GoogleAuthProvider;
    exports2.OAuthCredential = register.OAuthCredential;
    exports2.OAuthProvider = register.OAuthProvider;
    exports2.PhoneAuthCredential = register.PhoneAuthCredential;
    exports2.SAMLAuthProvider = register.SAMLAuthProvider;
    exports2.TwitterAuthProvider = register.TwitterAuthProvider;
    exports2.applyActionCode = register.applyActionCode;
    exports2.checkActionCode = register.checkActionCode;
    exports2.confirmPasswordReset = register.confirmPasswordReset;
    exports2.createUserWithEmailAndPassword = register.createUserWithEmailAndPassword;
    exports2.debugErrorMap = register.debugErrorMap;
    exports2.deleteUser = register.deleteUser;
    exports2.fetchSignInMethodsForEmail = register.fetchSignInMethodsForEmail;
    exports2.getAdditionalUserInfo = register.getAdditionalUserInfo;
    exports2.getIdToken = register.getIdToken;
    exports2.getIdTokenResult = register.getIdTokenResult;
    exports2.getMultiFactorResolver = register.getMultiFactorResolver;
    exports2.inMemoryPersistence = register.inMemoryPersistence;
    exports2.initializeAuth = register.initializeAuth;
    exports2.isSignInWithEmailLink = register.isSignInWithEmailLink;
    exports2.linkWithCredential = register.linkWithCredential;
    exports2.multiFactor = register.multiFactor;
    exports2.onAuthStateChanged = register.onAuthStateChanged;
    exports2.onIdTokenChanged = register.onIdTokenChanged;
    exports2.parseActionCodeURL = register.parseActionCodeURL;
    exports2.prodErrorMap = register.prodErrorMap;
    exports2.reauthenticateWithCredential = register.reauthenticateWithCredential;
    exports2.reload = register.reload;
    exports2.sendEmailVerification = register.sendEmailVerification;
    exports2.sendPasswordResetEmail = register.sendPasswordResetEmail;
    exports2.sendSignInLinkToEmail = register.sendSignInLinkToEmail;
    exports2.setPersistence = register.setPersistence;
    exports2.signInAnonymously = register.signInAnonymously;
    exports2.signInWithCredential = register.signInWithCredential;
    exports2.signInWithCustomToken = register.signInWithCustomToken;
    exports2.signInWithEmailAndPassword = register.signInWithEmailAndPassword;
    exports2.signInWithEmailLink = register.signInWithEmailLink;
    exports2.signOut = register.signOut;
    exports2.unlink = register.unlink;
    exports2.updateCurrentUser = register.updateCurrentUser;
    exports2.updateEmail = register.updateEmail;
    exports2.updatePassword = register.updatePassword;
    exports2.updateProfile = register.updateProfile;
    exports2.useAuthEmulator = register.useAuthEmulator;
    exports2.useDeviceLanguage = register.useDeviceLanguage;
    exports2.verifyBeforeUpdateEmail = register.verifyBeforeUpdateEmail;
    exports2.verifyPasswordResetCode = register.verifyPasswordResetCode;
    exports2.getAuth = getAuth2;
  }
});

// node_modules/firebase/auth/dist/index.cjs.js
var require_index_cjs5 = __commonJS({
  "node_modules/firebase/auth/dist/index.cjs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    var auth = require_node();
    Object.keys(auth).forEach(function(k) {
      if (k !== "default")
        Object.defineProperty(exports2, k, {
          enumerable: true,
          get: function() {
            return auth[k];
          }
        });
    });
  }
});

// node_modules/@grpc/grpc-js/build/src/constants.js
var require_constants = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH = exports2.DEFAULT_MAX_SEND_MESSAGE_LENGTH = exports2.Propagate = exports2.LogVerbosity = exports2.Status = void 0;
    var Status;
    (function(Status2) {
      Status2[Status2["OK"] = 0] = "OK";
      Status2[Status2["CANCELLED"] = 1] = "CANCELLED";
      Status2[Status2["UNKNOWN"] = 2] = "UNKNOWN";
      Status2[Status2["INVALID_ARGUMENT"] = 3] = "INVALID_ARGUMENT";
      Status2[Status2["DEADLINE_EXCEEDED"] = 4] = "DEADLINE_EXCEEDED";
      Status2[Status2["NOT_FOUND"] = 5] = "NOT_FOUND";
      Status2[Status2["ALREADY_EXISTS"] = 6] = "ALREADY_EXISTS";
      Status2[Status2["PERMISSION_DENIED"] = 7] = "PERMISSION_DENIED";
      Status2[Status2["RESOURCE_EXHAUSTED"] = 8] = "RESOURCE_EXHAUSTED";
      Status2[Status2["FAILED_PRECONDITION"] = 9] = "FAILED_PRECONDITION";
      Status2[Status2["ABORTED"] = 10] = "ABORTED";
      Status2[Status2["OUT_OF_RANGE"] = 11] = "OUT_OF_RANGE";
      Status2[Status2["UNIMPLEMENTED"] = 12] = "UNIMPLEMENTED";
      Status2[Status2["INTERNAL"] = 13] = "INTERNAL";
      Status2[Status2["UNAVAILABLE"] = 14] = "UNAVAILABLE";
      Status2[Status2["DATA_LOSS"] = 15] = "DATA_LOSS";
      Status2[Status2["UNAUTHENTICATED"] = 16] = "UNAUTHENTICATED";
    })(Status = exports2.Status || (exports2.Status = {}));
    var LogVerbosity;
    (function(LogVerbosity2) {
      LogVerbosity2[LogVerbosity2["DEBUG"] = 0] = "DEBUG";
      LogVerbosity2[LogVerbosity2["INFO"] = 1] = "INFO";
      LogVerbosity2[LogVerbosity2["ERROR"] = 2] = "ERROR";
    })(LogVerbosity = exports2.LogVerbosity || (exports2.LogVerbosity = {}));
    var Propagate;
    (function(Propagate2) {
      Propagate2[Propagate2["DEADLINE"] = 1] = "DEADLINE";
      Propagate2[Propagate2["CENSUS_STATS_CONTEXT"] = 2] = "CENSUS_STATS_CONTEXT";
      Propagate2[Propagate2["CENSUS_TRACING_CONTEXT"] = 4] = "CENSUS_TRACING_CONTEXT";
      Propagate2[Propagate2["CANCELLATION"] = 8] = "CANCELLATION";
      Propagate2[Propagate2["DEFAULTS"] = 65535] = "DEFAULTS";
    })(Propagate = exports2.Propagate || (exports2.Propagate = {}));
    exports2.DEFAULT_MAX_SEND_MESSAGE_LENGTH = -1;
    exports2.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH = 4 * 1024 * 1024;
  }
});

// node_modules/@grpc/grpc-js/build/src/logging.js
var require_logging = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/logging.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    var _d;
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.trace = exports2.log = exports2.setLoggerVerbosity = exports2.setLogger = exports2.getLogger = void 0;
    var constants_1 = require_constants();
    var _logger = console;
    var _logVerbosity = constants_1.LogVerbosity.ERROR;
    var verbosityString = (_b = (_a = process.env.GRPC_NODE_VERBOSITY) !== null && _a !== void 0 ? _a : process.env.GRPC_VERBOSITY) !== null && _b !== void 0 ? _b : "";
    switch (verbosityString) {
      case "DEBUG":
        _logVerbosity = constants_1.LogVerbosity.DEBUG;
        break;
      case "INFO":
        _logVerbosity = constants_1.LogVerbosity.INFO;
        break;
      case "ERROR":
        _logVerbosity = constants_1.LogVerbosity.ERROR;
        break;
      default:
    }
    exports2.getLogger = () => {
      return _logger;
    };
    exports2.setLogger = (logger) => {
      _logger = logger;
    };
    exports2.setLoggerVerbosity = (verbosity) => {
      _logVerbosity = verbosity;
    };
    exports2.log = (severity, ...args) => {
      if (severity >= _logVerbosity && typeof _logger.error === "function") {
        _logger.error(...args);
      }
    };
    var tracersString = (_d = (_c = process.env.GRPC_NODE_TRACE) !== null && _c !== void 0 ? _c : process.env.GRPC_TRACE) !== null && _d !== void 0 ? _d : "";
    var enabledTracers = tracersString.split(",");
    var allEnabled = enabledTracers.includes("all");
    function trace(severity, tracer, text) {
      if (allEnabled || enabledTracers.includes(tracer)) {
        exports2.log(severity, new Date().toISOString() + " | " + tracer + " | " + text);
      }
    }
    exports2.trace = trace;
  }
});

// node_modules/@grpc/grpc-js/build/src/metadata.js
var require_metadata = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/metadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.Metadata = void 0;
    var logging_1 = require_logging();
    var constants_1 = require_constants();
    var LEGAL_KEY_REGEX = /^[0-9a-z_.-]+$/;
    var LEGAL_NON_BINARY_VALUE_REGEX = /^[ -~]*$/;
    function isLegalKey(key) {
      return LEGAL_KEY_REGEX.test(key);
    }
    function isLegalNonBinaryValue(value) {
      return LEGAL_NON_BINARY_VALUE_REGEX.test(value);
    }
    function isBinaryKey(key) {
      return key.endsWith("-bin");
    }
    function isCustomMetadata(key) {
      return !key.startsWith("grpc-");
    }
    function normalizeKey(key) {
      return key.toLowerCase();
    }
    function validate(key, value) {
      if (!isLegalKey(key)) {
        throw new Error('Metadata key "' + key + '" contains illegal characters');
      }
      if (value !== null && value !== void 0) {
        if (isBinaryKey(key)) {
          if (!(value instanceof Buffer)) {
            throw new Error("keys that end with '-bin' must have Buffer values");
          }
        } else {
          if (value instanceof Buffer) {
            throw new Error("keys that don't end with '-bin' must have String values");
          }
          if (!isLegalNonBinaryValue(value)) {
            throw new Error('Metadata string value "' + value + '" contains illegal characters');
          }
        }
      }
    }
    var Metadata = class {
      constructor(options2) {
        this.internalRepr = new Map();
        if (options2 === void 0) {
          this.options = {};
        } else {
          this.options = options2;
        }
      }
      set(key, value) {
        key = normalizeKey(key);
        validate(key, value);
        this.internalRepr.set(key, [value]);
      }
      add(key, value) {
        key = normalizeKey(key);
        validate(key, value);
        const existingValue = this.internalRepr.get(key);
        if (existingValue === void 0) {
          this.internalRepr.set(key, [value]);
        } else {
          existingValue.push(value);
        }
      }
      remove(key) {
        key = normalizeKey(key);
        validate(key);
        this.internalRepr.delete(key);
      }
      get(key) {
        key = normalizeKey(key);
        validate(key);
        return this.internalRepr.get(key) || [];
      }
      getMap() {
        const result = {};
        this.internalRepr.forEach((values, key) => {
          if (values.length > 0) {
            const v = values[0];
            result[key] = v instanceof Buffer ? v.slice() : v;
          }
        });
        return result;
      }
      clone() {
        const newMetadata = new Metadata(this.options);
        const newInternalRepr = newMetadata.internalRepr;
        this.internalRepr.forEach((value, key) => {
          const clonedValue = value.map((v) => {
            if (v instanceof Buffer) {
              return Buffer.from(v);
            } else {
              return v;
            }
          });
          newInternalRepr.set(key, clonedValue);
        });
        return newMetadata;
      }
      merge(other) {
        other.internalRepr.forEach((values, key) => {
          const mergedValue = (this.internalRepr.get(key) || []).concat(values);
          this.internalRepr.set(key, mergedValue);
        });
      }
      setOptions(options2) {
        this.options = options2;
      }
      getOptions() {
        return this.options;
      }
      toHttp2Headers() {
        const result = {};
        this.internalRepr.forEach((values, key) => {
          result[key] = values.map((value) => {
            if (value instanceof Buffer) {
              return value.toString("base64");
            } else {
              return value;
            }
          });
        });
        return result;
      }
      _getCoreRepresentation() {
        return this.internalRepr;
      }
      static fromHttp2Headers(headers) {
        const result = new Metadata();
        Object.keys(headers).forEach((key) => {
          if (key.charAt(0) === ":") {
            return;
          }
          const values = headers[key];
          try {
            if (isBinaryKey(key)) {
              if (Array.isArray(values)) {
                values.forEach((value) => {
                  result.add(key, Buffer.from(value, "base64"));
                });
              } else if (values !== void 0) {
                if (isCustomMetadata(key)) {
                  values.split(",").forEach((v) => {
                    result.add(key, Buffer.from(v.trim(), "base64"));
                  });
                } else {
                  result.add(key, Buffer.from(values, "base64"));
                }
              }
            } else {
              if (Array.isArray(values)) {
                values.forEach((value) => {
                  result.add(key, value);
                });
              } else if (values !== void 0) {
                result.add(key, values);
              }
            }
          } catch (error3) {
            const message = `Failed to add metadata entry ${key}: ${values}. ${error3.message}. For more information see https://github.com/grpc/grpc-node/issues/1173`;
            logging_1.log(constants_1.LogVerbosity.ERROR, message);
          }
        });
        return result;
      }
    };
    exports2.Metadata = Metadata;
  }
});

// node_modules/@grpc/grpc-js/build/src/call-credentials.js
var require_call_credentials = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/call-credentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.CallCredentials = void 0;
    var metadata_1 = require_metadata();
    function isCurrentOauth2Client(client) {
      return "getRequestHeaders" in client && typeof client.getRequestHeaders === "function";
    }
    var CallCredentials = class {
      static createFromMetadataGenerator(metadataGenerator) {
        return new SingleCallCredentials(metadataGenerator);
      }
      static createFromGoogleCredential(googleCredentials) {
        return CallCredentials.createFromMetadataGenerator((options2, callback) => {
          let getHeaders;
          if (isCurrentOauth2Client(googleCredentials)) {
            getHeaders = googleCredentials.getRequestHeaders(options2.service_url);
          } else {
            getHeaders = new Promise((resolve2, reject) => {
              googleCredentials.getRequestMetadata(options2.service_url, (err, headers) => {
                if (err) {
                  reject(err);
                  return;
                }
                resolve2(headers);
              });
            });
          }
          getHeaders.then((headers) => {
            const metadata = new metadata_1.Metadata();
            for (const key of Object.keys(headers)) {
              metadata.add(key, headers[key]);
            }
            callback(null, metadata);
          }, (err) => {
            callback(err);
          });
        });
      }
      static createEmpty() {
        return new EmptyCallCredentials();
      }
    };
    exports2.CallCredentials = CallCredentials;
    var ComposedCallCredentials = class extends CallCredentials {
      constructor(creds) {
        super();
        this.creds = creds;
      }
      async generateMetadata(options2) {
        const base = new metadata_1.Metadata();
        const generated = await Promise.all(this.creds.map((cred) => cred.generateMetadata(options2)));
        for (const gen of generated) {
          base.merge(gen);
        }
        return base;
      }
      compose(other) {
        return new ComposedCallCredentials(this.creds.concat([other]));
      }
      _equals(other) {
        if (this === other) {
          return true;
        }
        if (other instanceof ComposedCallCredentials) {
          return this.creds.every((value, index2) => value._equals(other.creds[index2]));
        } else {
          return false;
        }
      }
    };
    var SingleCallCredentials = class extends CallCredentials {
      constructor(metadataGenerator) {
        super();
        this.metadataGenerator = metadataGenerator;
      }
      generateMetadata(options2) {
        return new Promise((resolve2, reject) => {
          this.metadataGenerator(options2, (err, metadata) => {
            if (metadata !== void 0) {
              resolve2(metadata);
            } else {
              reject(err);
            }
          });
        });
      }
      compose(other) {
        return new ComposedCallCredentials([this, other]);
      }
      _equals(other) {
        if (this === other) {
          return true;
        }
        if (other instanceof SingleCallCredentials) {
          return this.metadataGenerator === other.metadataGenerator;
        } else {
          return false;
        }
      }
    };
    var EmptyCallCredentials = class extends CallCredentials {
      generateMetadata(options2) {
        return Promise.resolve(new metadata_1.Metadata());
      }
      compose(other) {
        return other;
      }
      _equals(other) {
        return other instanceof EmptyCallCredentials;
      }
    };
  }
});

// node_modules/@grpc/grpc-js/build/src/filter-stack.js
var require_filter_stack = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/filter-stack.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.FilterStackFactory = exports2.FilterStack = void 0;
    var FilterStack = class {
      constructor(filters) {
        this.filters = filters;
      }
      sendMetadata(metadata) {
        let result = metadata;
        for (let i = 0; i < this.filters.length; i++) {
          result = this.filters[i].sendMetadata(result);
        }
        return result;
      }
      receiveMetadata(metadata) {
        let result = metadata;
        for (let i = this.filters.length - 1; i >= 0; i--) {
          result = this.filters[i].receiveMetadata(result);
        }
        return result;
      }
      sendMessage(message) {
        let result = message;
        for (let i = 0; i < this.filters.length; i++) {
          result = this.filters[i].sendMessage(result);
        }
        return result;
      }
      receiveMessage(message) {
        let result = message;
        for (let i = this.filters.length - 1; i >= 0; i--) {
          result = this.filters[i].receiveMessage(result);
        }
        return result;
      }
      receiveTrailers(status) {
        let result = status;
        for (let i = this.filters.length - 1; i >= 0; i--) {
          result = this.filters[i].receiveTrailers(result);
        }
        return result;
      }
    };
    exports2.FilterStack = FilterStack;
    var FilterStackFactory = class {
      constructor(factories) {
        this.factories = factories;
      }
      createFilter(callStream) {
        return new FilterStack(this.factories.map((factory) => factory.createFilter(callStream)));
      }
    };
    exports2.FilterStackFactory = FilterStackFactory;
  }
});

// node_modules/@grpc/grpc-js/build/src/stream-decoder.js
var require_stream_decoder = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/stream-decoder.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.StreamDecoder = void 0;
    var ReadState;
    (function(ReadState2) {
      ReadState2[ReadState2["NO_DATA"] = 0] = "NO_DATA";
      ReadState2[ReadState2["READING_SIZE"] = 1] = "READING_SIZE";
      ReadState2[ReadState2["READING_MESSAGE"] = 2] = "READING_MESSAGE";
    })(ReadState || (ReadState = {}));
    var StreamDecoder = class {
      constructor() {
        this.readState = ReadState.NO_DATA;
        this.readCompressFlag = Buffer.alloc(1);
        this.readPartialSize = Buffer.alloc(4);
        this.readSizeRemaining = 4;
        this.readMessageSize = 0;
        this.readPartialMessage = [];
        this.readMessageRemaining = 0;
      }
      write(data) {
        let readHead = 0;
        let toRead;
        const result = [];
        while (readHead < data.length) {
          switch (this.readState) {
            case ReadState.NO_DATA:
              this.readCompressFlag = data.slice(readHead, readHead + 1);
              readHead += 1;
              this.readState = ReadState.READING_SIZE;
              this.readPartialSize.fill(0);
              this.readSizeRemaining = 4;
              this.readMessageSize = 0;
              this.readMessageRemaining = 0;
              this.readPartialMessage = [];
              break;
            case ReadState.READING_SIZE:
              toRead = Math.min(data.length - readHead, this.readSizeRemaining);
              data.copy(this.readPartialSize, 4 - this.readSizeRemaining, readHead, readHead + toRead);
              this.readSizeRemaining -= toRead;
              readHead += toRead;
              if (this.readSizeRemaining === 0) {
                this.readMessageSize = this.readPartialSize.readUInt32BE(0);
                this.readMessageRemaining = this.readMessageSize;
                if (this.readMessageRemaining > 0) {
                  this.readState = ReadState.READING_MESSAGE;
                } else {
                  const message = Buffer.concat([this.readCompressFlag, this.readPartialSize], 5);
                  this.readState = ReadState.NO_DATA;
                  result.push(message);
                }
              }
              break;
            case ReadState.READING_MESSAGE:
              toRead = Math.min(data.length - readHead, this.readMessageRemaining);
              this.readPartialMessage.push(data.slice(readHead, readHead + toRead));
              this.readMessageRemaining -= toRead;
              readHead += toRead;
              if (this.readMessageRemaining === 0) {
                const framedMessageBuffers = [
                  this.readCompressFlag,
                  this.readPartialSize
                ].concat(this.readPartialMessage);
                const framedMessage = Buffer.concat(framedMessageBuffers, this.readMessageSize + 5);
                this.readState = ReadState.NO_DATA;
                result.push(framedMessage);
              }
              break;
            default:
              throw new Error("Unexpected read state");
          }
        }
        return result;
      }
    };
    exports2.StreamDecoder = StreamDecoder;
  }
});

// node_modules/@grpc/grpc-js/build/src/call-stream.js
var require_call_stream = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/call-stream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.Http2CallStream = exports2.InterceptingListenerImpl = exports2.isInterceptingListener = void 0;
    var http2 = require("http2");
    var os = require("os");
    var constants_1 = require_constants();
    var filter_stack_1 = require_filter_stack();
    var metadata_1 = require_metadata();
    var stream_decoder_1 = require_stream_decoder();
    var logging = require_logging();
    var constants_2 = require_constants();
    var TRACER_NAME = "call_stream";
    var {HTTP2_HEADER_STATUS, HTTP2_HEADER_CONTENT_TYPE, NGHTTP2_CANCEL} = http2.constants;
    function getSystemErrorName(errno) {
      for (const [name, num] of Object.entries(os.constants.errno)) {
        if (num === errno) {
          return name;
        }
      }
      return "Unknown system error " + errno;
    }
    function isInterceptingListener(listener) {
      return listener.onReceiveMetadata !== void 0 && listener.onReceiveMetadata.length === 1;
    }
    exports2.isInterceptingListener = isInterceptingListener;
    var InterceptingListenerImpl = class {
      constructor(listener, nextListener) {
        this.listener = listener;
        this.nextListener = nextListener;
        this.processingMessage = false;
        this.pendingStatus = null;
      }
      onReceiveMetadata(metadata) {
        this.listener.onReceiveMetadata(metadata, (metadata2) => {
          this.nextListener.onReceiveMetadata(metadata2);
        });
      }
      onReceiveMessage(message) {
        this.processingMessage = true;
        this.listener.onReceiveMessage(message, (msg) => {
          this.processingMessage = false;
          this.nextListener.onReceiveMessage(msg);
          if (this.pendingStatus) {
            this.nextListener.onReceiveStatus(this.pendingStatus);
          }
        });
      }
      onReceiveStatus(status) {
        this.listener.onReceiveStatus(status, (processedStatus) => {
          if (this.processingMessage) {
            this.pendingStatus = processedStatus;
          } else {
            this.nextListener.onReceiveStatus(processedStatus);
          }
        });
      }
    };
    exports2.InterceptingListenerImpl = InterceptingListenerImpl;
    var Http2CallStream = class {
      constructor(methodName, channel, options2, filterStackFactory, channelCallCredentials, callNumber) {
        this.methodName = methodName;
        this.channel = channel;
        this.options = options2;
        this.channelCallCredentials = channelCallCredentials;
        this.callNumber = callNumber;
        this.http2Stream = null;
        this.pendingRead = false;
        this.isWriteFilterPending = false;
        this.pendingWrite = null;
        this.pendingWriteCallback = null;
        this.writesClosed = false;
        this.decoder = new stream_decoder_1.StreamDecoder();
        this.isReadFilterPending = false;
        this.canPush = false;
        this.readsClosed = false;
        this.statusOutput = false;
        this.unpushedReadMessages = [];
        this.unfilteredReadMessages = [];
        this.mappedStatusCode = constants_1.Status.UNKNOWN;
        this.finalStatus = null;
        this.subchannel = null;
        this.listener = null;
        this.internalError = null;
        this.filterStack = filterStackFactory.createFilter(this);
        this.credentials = channelCallCredentials;
        this.disconnectListener = () => {
          this.endCall({
            code: constants_1.Status.UNAVAILABLE,
            details: "Connection dropped",
            metadata: new metadata_1.Metadata()
          });
        };
        if (this.options.parentCall && this.options.flags & constants_1.Propagate.CANCELLATION) {
          this.options.parentCall.on("cancelled", () => {
            this.cancelWithStatus(constants_1.Status.CANCELLED, "Cancelled by parent call");
          });
        }
      }
      outputStatus() {
        if (!this.statusOutput) {
          this.statusOutput = true;
          const filteredStatus = this.filterStack.receiveTrailers(this.finalStatus);
          process.nextTick(() => {
            var _a;
            (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus(filteredStatus);
          });
          if (this.subchannel) {
            this.subchannel.callUnref();
            this.subchannel.removeDisconnectListener(this.disconnectListener);
          }
        }
      }
      trace(text) {
        logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, "[" + this.callNumber + "] " + text);
      }
      endCall(status) {
        if (this.finalStatus === null || this.finalStatus.code === constants_1.Status.OK) {
          this.trace("ended with status: code=" + status.code + ' details="' + status.details + '"');
          this.finalStatus = status;
          this.maybeOutputStatus();
        }
        this.destroyHttp2Stream();
      }
      maybeOutputStatus() {
        if (this.finalStatus !== null) {
          if (this.finalStatus.code !== constants_1.Status.OK || this.readsClosed && this.unpushedReadMessages.length === 0 && this.unfilteredReadMessages.length === 0 && !this.isReadFilterPending) {
            this.outputStatus();
          }
        }
      }
      push(message) {
        this.trace("pushing to reader message of length " + (message instanceof Buffer ? message.length : null));
        this.canPush = false;
        process.nextTick(() => {
          var _a;
          if (this.statusOutput) {
            return;
          }
          (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveMessage(message);
          this.maybeOutputStatus();
        });
      }
      handleFilterError(error3) {
        this.cancelWithStatus(constants_1.Status.INTERNAL, error3.message);
      }
      handleFilteredRead(message) {
        if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {
          this.maybeOutputStatus();
          return;
        }
        this.isReadFilterPending = false;
        if (this.canPush) {
          this.http2Stream.pause();
          this.push(message);
        } else {
          this.trace("unpushedReadMessages.push message of length " + message.length);
          this.unpushedReadMessages.push(message);
        }
        if (this.unfilteredReadMessages.length > 0) {
          const nextMessage = this.unfilteredReadMessages.shift();
          this.filterReceivedMessage(nextMessage);
        }
      }
      filterReceivedMessage(framedMessage) {
        if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {
          this.maybeOutputStatus();
          return;
        }
        this.trace("filterReceivedMessage of length " + framedMessage.length);
        this.isReadFilterPending = true;
        this.filterStack.receiveMessage(Promise.resolve(framedMessage)).then(this.handleFilteredRead.bind(this), this.handleFilterError.bind(this));
      }
      tryPush(messageBytes) {
        if (this.isReadFilterPending) {
          this.trace("unfilteredReadMessages.push message of length " + (messageBytes && messageBytes.length));
          this.unfilteredReadMessages.push(messageBytes);
        } else {
          this.filterReceivedMessage(messageBytes);
        }
      }
      handleTrailers(headers) {
        let headersString = "";
        for (const header of Object.keys(headers)) {
          headersString += "		" + header + ": " + headers[header] + "\n";
        }
        this.trace("Received server trailers:\n" + headersString);
        let metadata;
        try {
          metadata = metadata_1.Metadata.fromHttp2Headers(headers);
        } catch (e) {
          metadata = new metadata_1.Metadata();
        }
        const metadataMap = metadata.getMap();
        let code = this.mappedStatusCode;
        if (code === constants_1.Status.UNKNOWN && typeof metadataMap["grpc-status"] === "string") {
          const receivedStatus = Number(metadataMap["grpc-status"]);
          if (receivedStatus in constants_1.Status) {
            code = receivedStatus;
            this.trace("received status code " + receivedStatus + " from server");
          }
          metadata.remove("grpc-status");
        }
        let details = "";
        if (typeof metadataMap["grpc-message"] === "string") {
          details = decodeURI(metadataMap["grpc-message"]);
          metadata.remove("grpc-message");
          this.trace('received status details string "' + details + '" from server');
        }
        const status = {code, details, metadata};
        this.endCall(status);
      }
      attachHttp2Stream(stream, subchannel, extraFilterFactory) {
        if (extraFilterFactory !== void 0) {
          this.filterStack = new filter_stack_1.FilterStack([
            this.filterStack,
            extraFilterFactory.createFilter(this)
          ]);
        }
        if (this.finalStatus !== null) {
          stream.close(NGHTTP2_CANCEL);
        } else {
          this.trace("attachHttp2Stream from subchannel " + subchannel.getAddress());
          this.http2Stream = stream;
          this.subchannel = subchannel;
          subchannel.addDisconnectListener(this.disconnectListener);
          subchannel.callRef();
          stream.on("response", (headers, flags) => {
            var _a;
            let headersString = "";
            for (const header of Object.keys(headers)) {
              headersString += "		" + header + ": " + headers[header] + "\n";
            }
            this.trace("Received server headers:\n" + headersString);
            switch (headers[":status"]) {
              case 400:
                this.mappedStatusCode = constants_1.Status.INTERNAL;
                break;
              case 401:
                this.mappedStatusCode = constants_1.Status.UNAUTHENTICATED;
                break;
              case 403:
                this.mappedStatusCode = constants_1.Status.PERMISSION_DENIED;
                break;
              case 404:
                this.mappedStatusCode = constants_1.Status.UNIMPLEMENTED;
                break;
              case 429:
              case 502:
              case 503:
              case 504:
                this.mappedStatusCode = constants_1.Status.UNAVAILABLE;
                break;
              default:
                this.mappedStatusCode = constants_1.Status.UNKNOWN;
            }
            if (flags & http2.constants.NGHTTP2_FLAG_END_STREAM) {
              this.handleTrailers(headers);
            } else {
              let metadata;
              try {
                metadata = metadata_1.Metadata.fromHttp2Headers(headers);
              } catch (error3) {
                this.endCall({
                  code: constants_1.Status.UNKNOWN,
                  details: error3.message,
                  metadata: new metadata_1.Metadata()
                });
                return;
              }
              try {
                const finalMetadata = this.filterStack.receiveMetadata(metadata);
                (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveMetadata(finalMetadata);
              } catch (error3) {
                this.endCall({
                  code: constants_1.Status.UNKNOWN,
                  details: error3.message,
                  metadata: new metadata_1.Metadata()
                });
              }
            }
          });
          stream.on("trailers", this.handleTrailers.bind(this));
          stream.on("data", (data) => {
            this.trace("receive HTTP/2 data frame of length " + data.length);
            const messages = this.decoder.write(data);
            for (const message of messages) {
              this.trace("parsed message of length " + message.length);
              this.tryPush(message);
            }
          });
          stream.on("end", () => {
            this.readsClosed = true;
            this.maybeOutputStatus();
          });
          stream.on("close", () => {
            process.nextTick(() => {
              var _a;
              this.trace("HTTP/2 stream closed with code " + stream.rstCode);
              if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {
                return;
              }
              let code;
              let details = "";
              switch (stream.rstCode) {
                case http2.constants.NGHTTP2_NO_ERROR:
                  if (this.finalStatus !== null) {
                    return;
                  }
                  code = constants_1.Status.INTERNAL;
                  details = `Received RST_STREAM with code ${stream.rstCode}`;
                  break;
                case http2.constants.NGHTTP2_REFUSED_STREAM:
                  code = constants_1.Status.UNAVAILABLE;
                  details = "Stream refused by server";
                  break;
                case http2.constants.NGHTTP2_CANCEL:
                  code = constants_1.Status.CANCELLED;
                  details = "Call cancelled";
                  break;
                case http2.constants.NGHTTP2_ENHANCE_YOUR_CALM:
                  code = constants_1.Status.RESOURCE_EXHAUSTED;
                  details = "Bandwidth exhausted";
                  break;
                case http2.constants.NGHTTP2_INADEQUATE_SECURITY:
                  code = constants_1.Status.PERMISSION_DENIED;
                  details = "Protocol not secure enough";
                  break;
                case http2.constants.NGHTTP2_INTERNAL_ERROR:
                  code = constants_1.Status.INTERNAL;
                  if (this.internalError === null) {
                    details = `Received RST_STREAM with code ${stream.rstCode} (Internal server error)`;
                  } else {
                    if (this.internalError.errno === os.constants.errno.ECONNRESET) {
                      code = constants_1.Status.UNAVAILABLE;
                      details = this.internalError.message;
                    } else {
                      details = `Received RST_STREAM with code ${stream.rstCode} triggered by internal client error: ${this.internalError.message}`;
                    }
                  }
                  break;
                default:
                  code = constants_1.Status.INTERNAL;
                  details = `Received RST_STREAM with code ${stream.rstCode}`;
              }
              this.endCall({code, details, metadata: new metadata_1.Metadata()});
            });
          });
          stream.on("error", (err) => {
            if (err.code !== "ERR_HTTP2_STREAM_ERROR") {
              this.trace("Node error event: message=" + err.message + " code=" + err.code + " errno=" + getSystemErrorName(err.errno) + " syscall=" + err.syscall);
              this.internalError = err;
            }
          });
          if (!this.pendingRead) {
            stream.pause();
          }
          if (this.pendingWrite) {
            if (!this.pendingWriteCallback) {
              throw new Error("Invalid state in write handling code");
            }
            this.trace("sending data chunk of length " + this.pendingWrite.length + " (deferred)");
            stream.write(this.pendingWrite, this.pendingWriteCallback);
          }
          this.maybeCloseWrites();
        }
      }
      start(metadata, listener) {
        this.trace("Sending metadata");
        this.listener = listener;
        this.channel._startCallStream(this, metadata);
      }
      destroyHttp2Stream() {
        var _a;
        if (this.http2Stream !== null && !this.http2Stream.destroyed) {
          let code;
          if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {
            code = http2.constants.NGHTTP2_NO_ERROR;
          } else {
            code = http2.constants.NGHTTP2_CANCEL;
          }
          this.trace("close http2 stream with code " + code);
          this.http2Stream.close(code);
        }
      }
      cancelWithStatus(status, details) {
        this.trace("cancelWithStatus code: " + status + ' details: "' + details + '"');
        this.endCall({code: status, details, metadata: new metadata_1.Metadata()});
      }
      getDeadline() {
        if (this.options.parentCall && this.options.flags & constants_1.Propagate.DEADLINE) {
          const parentDeadline = this.options.parentCall.getDeadline();
          const selfDeadline = this.options.deadline;
          const parentDeadlineMsecs = parentDeadline instanceof Date ? parentDeadline.getTime() : parentDeadline;
          const selfDeadlineMsecs = selfDeadline instanceof Date ? selfDeadline.getTime() : selfDeadline;
          return Math.min(parentDeadlineMsecs, selfDeadlineMsecs);
        } else {
          return this.options.deadline;
        }
      }
      getCredentials() {
        return this.credentials;
      }
      setCredentials(credentials) {
        this.credentials = this.channelCallCredentials.compose(credentials);
      }
      getStatus() {
        return this.finalStatus;
      }
      getPeer() {
        var _a, _b;
        return (_b = (_a = this.subchannel) === null || _a === void 0 ? void 0 : _a.getAddress()) !== null && _b !== void 0 ? _b : this.channel.getTarget();
      }
      getMethod() {
        return this.methodName;
      }
      getHost() {
        return this.options.host;
      }
      startRead() {
        if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {
          this.readsClosed = true;
          this.maybeOutputStatus();
          return;
        }
        this.canPush = true;
        if (this.http2Stream === null) {
          this.pendingRead = true;
        } else {
          if (this.unpushedReadMessages.length > 0) {
            const nextMessage = this.unpushedReadMessages.shift();
            this.push(nextMessage);
            return;
          }
          this.http2Stream.resume();
        }
      }
      maybeCloseWrites() {
        if (this.writesClosed && !this.isWriteFilterPending && this.http2Stream !== null) {
          this.trace("calling end() on HTTP/2 stream");
          this.http2Stream.end();
        }
      }
      sendMessageWithContext(context, message) {
        var _a;
        this.trace("write() called with message of length " + message.length);
        const writeObj = {
          message,
          flags: context.flags
        };
        const cb = (_a = context.callback) !== null && _a !== void 0 ? _a : () => {
        };
        this.isWriteFilterPending = true;
        this.filterStack.sendMessage(Promise.resolve(writeObj)).then((message2) => {
          this.isWriteFilterPending = false;
          if (this.http2Stream === null) {
            this.trace("deferring writing data chunk of length " + message2.message.length);
            this.pendingWrite = message2.message;
            this.pendingWriteCallback = cb;
          } else {
            this.trace("sending data chunk of length " + message2.message.length);
            this.http2Stream.write(message2.message, cb);
            this.maybeCloseWrites();
          }
        }, this.handleFilterError.bind(this));
      }
      halfClose() {
        this.trace("end() called");
        this.writesClosed = true;
        this.maybeCloseWrites();
      }
    };
    exports2.Http2CallStream = Http2CallStream;
  }
});

// node_modules/@grpc/grpc-js/build/src/tls-helpers.js
var require_tls_helpers = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/tls-helpers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.getDefaultRootsData = exports2.CIPHER_SUITES = void 0;
    var fs = require("fs");
    exports2.CIPHER_SUITES = process.env.GRPC_SSL_CIPHER_SUITES;
    var DEFAULT_ROOTS_FILE_PATH = process.env.GRPC_DEFAULT_SSL_ROOTS_FILE_PATH;
    var defaultRootsData = null;
    function getDefaultRootsData() {
      if (DEFAULT_ROOTS_FILE_PATH) {
        if (defaultRootsData === null) {
          defaultRootsData = fs.readFileSync(DEFAULT_ROOTS_FILE_PATH);
        }
        return defaultRootsData;
      }
      return null;
    }
    exports2.getDefaultRootsData = getDefaultRootsData;
  }
});

// node_modules/@grpc/grpc-js/build/src/channel-credentials.js
var require_channel_credentials = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/channel-credentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.ChannelCredentials = void 0;
    var tls_1 = require("tls");
    var call_credentials_1 = require_call_credentials();
    var tls_helpers_1 = require_tls_helpers();
    function verifyIsBufferOrNull(obj, friendlyName) {
      if (obj && !(obj instanceof Buffer)) {
        throw new TypeError(`${friendlyName}, if provided, must be a Buffer.`);
      }
    }
    function bufferOrNullEqual(buf1, buf2) {
      if (buf1 === null && buf2 === null) {
        return true;
      } else {
        return buf1 !== null && buf2 !== null && buf1.equals(buf2);
      }
    }
    var ChannelCredentials = class {
      constructor(callCredentials) {
        this.callCredentials = callCredentials || call_credentials_1.CallCredentials.createEmpty();
      }
      _getCallCredentials() {
        return this.callCredentials;
      }
      static createSsl(rootCerts, privateKey, certChain, verifyOptions) {
        verifyIsBufferOrNull(rootCerts, "Root certificate");
        verifyIsBufferOrNull(privateKey, "Private key");
        verifyIsBufferOrNull(certChain, "Certificate chain");
        if (privateKey && !certChain) {
          throw new Error("Private key must be given with accompanying certificate chain");
        }
        if (!privateKey && certChain) {
          throw new Error("Certificate chain must be given with accompanying private key");
        }
        return new SecureChannelCredentialsImpl(rootCerts || tls_helpers_1.getDefaultRootsData(), privateKey || null, certChain || null, verifyOptions || {});
      }
      static createInsecure() {
        return new InsecureChannelCredentialsImpl();
      }
    };
    exports2.ChannelCredentials = ChannelCredentials;
    var InsecureChannelCredentialsImpl = class extends ChannelCredentials {
      constructor(callCredentials) {
        super(callCredentials);
      }
      compose(callCredentials) {
        throw new Error("Cannot compose insecure credentials");
      }
      _getConnectionOptions() {
        return null;
      }
      _isSecure() {
        return false;
      }
      _equals(other) {
        return other instanceof InsecureChannelCredentialsImpl;
      }
    };
    var SecureChannelCredentialsImpl = class extends ChannelCredentials {
      constructor(rootCerts, privateKey, certChain, verifyOptions) {
        super();
        this.rootCerts = rootCerts;
        this.privateKey = privateKey;
        this.certChain = certChain;
        this.verifyOptions = verifyOptions;
        const secureContext = tls_1.createSecureContext({
          ca: rootCerts || void 0,
          key: privateKey || void 0,
          cert: certChain || void 0,
          ciphers: tls_helpers_1.CIPHER_SUITES
        });
        this.connectionOptions = {secureContext};
        if (verifyOptions && verifyOptions.checkServerIdentity) {
          this.connectionOptions.checkServerIdentity = (host, cert) => {
            return verifyOptions.checkServerIdentity(host, {raw: cert.raw});
          };
        }
      }
      compose(callCredentials) {
        const combinedCallCredentials = this.callCredentials.compose(callCredentials);
        return new ComposedChannelCredentialsImpl(this, combinedCallCredentials);
      }
      _getConnectionOptions() {
        return Object.assign({}, this.connectionOptions);
      }
      _isSecure() {
        return true;
      }
      _equals(other) {
        if (this === other) {
          return true;
        }
        if (other instanceof SecureChannelCredentialsImpl) {
          if (!bufferOrNullEqual(this.rootCerts, other.rootCerts)) {
            return false;
          }
          if (!bufferOrNullEqual(this.privateKey, other.privateKey)) {
            return false;
          }
          if (!bufferOrNullEqual(this.certChain, other.certChain)) {
            return false;
          }
          return this.verifyOptions.checkServerIdentity === other.verifyOptions.checkServerIdentity;
        } else {
          return false;
        }
      }
    };
    var ComposedChannelCredentialsImpl = class extends ChannelCredentials {
      constructor(channelCredentials, callCreds) {
        super(callCreds);
        this.channelCredentials = channelCredentials;
      }
      compose(callCredentials) {
        const combinedCallCredentials = this.callCredentials.compose(callCredentials);
        return new ComposedChannelCredentialsImpl(this.channelCredentials, combinedCallCredentials);
      }
      _getConnectionOptions() {
        return this.channelCredentials._getConnectionOptions();
      }
      _isSecure() {
        return true;
      }
      _equals(other) {
        if (this === other) {
          return true;
        }
        if (other instanceof ComposedChannelCredentialsImpl) {
          return this.channelCredentials._equals(other.channelCredentials) && this.callCredentials._equals(other.callCredentials);
        } else {
          return false;
        }
      }
    };
  }
});

// node_modules/@grpc/grpc-js/build/src/picker.js
var require_picker = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/picker.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.QueuePicker = exports2.UnavailablePicker = exports2.PickResultType = void 0;
    var metadata_1 = require_metadata();
    var constants_1 = require_constants();
    var PickResultType;
    (function(PickResultType2) {
      PickResultType2[PickResultType2["COMPLETE"] = 0] = "COMPLETE";
      PickResultType2[PickResultType2["QUEUE"] = 1] = "QUEUE";
      PickResultType2[PickResultType2["TRANSIENT_FAILURE"] = 2] = "TRANSIENT_FAILURE";
      PickResultType2[PickResultType2["DROP"] = 3] = "DROP";
    })(PickResultType = exports2.PickResultType || (exports2.PickResultType = {}));
    var UnavailablePicker = class {
      constructor(status) {
        if (status !== void 0) {
          this.status = status;
        } else {
          this.status = {
            code: constants_1.Status.UNAVAILABLE,
            details: "No connection established",
            metadata: new metadata_1.Metadata()
          };
        }
      }
      pick(pickArgs) {
        return {
          pickResultType: PickResultType.TRANSIENT_FAILURE,
          subchannel: null,
          status: this.status,
          extraFilterFactory: null,
          onCallStarted: null
        };
      }
    };
    exports2.UnavailablePicker = UnavailablePicker;
    var QueuePicker = class {
      constructor(loadBalancer) {
        this.loadBalancer = loadBalancer;
        this.calledExitIdle = false;
      }
      pick(pickArgs) {
        if (!this.calledExitIdle) {
          process.nextTick(() => {
            this.loadBalancer.exitIdle();
          });
          this.calledExitIdle = true;
        }
        return {
          pickResultType: PickResultType.QUEUE,
          subchannel: null,
          status: null,
          extraFilterFactory: null,
          onCallStarted: null
        };
      }
    };
    exports2.QueuePicker = QueuePicker;
  }
});

// node_modules/@grpc/grpc-js/build/src/backoff-timeout.js
var require_backoff_timeout = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/backoff-timeout.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.BackoffTimeout = void 0;
    var INITIAL_BACKOFF_MS = 1e3;
    var BACKOFF_MULTIPLIER = 1.6;
    var MAX_BACKOFF_MS = 12e4;
    var BACKOFF_JITTER = 0.2;
    function uniformRandom(min, max) {
      return Math.random() * (max - min) + min;
    }
    var BackoffTimeout = class {
      constructor(callback, options2) {
        this.callback = callback;
        this.initialDelay = INITIAL_BACKOFF_MS;
        this.multiplier = BACKOFF_MULTIPLIER;
        this.maxDelay = MAX_BACKOFF_MS;
        this.jitter = BACKOFF_JITTER;
        this.running = false;
        this.hasRef = true;
        if (options2) {
          if (options2.initialDelay) {
            this.initialDelay = options2.initialDelay;
          }
          if (options2.multiplier) {
            this.multiplier = options2.multiplier;
          }
          if (options2.jitter) {
            this.jitter = options2.jitter;
          }
          if (options2.maxDelay) {
            this.maxDelay = options2.maxDelay;
          }
        }
        this.nextDelay = this.initialDelay;
        this.timerId = setTimeout(() => {
        }, 0);
        clearTimeout(this.timerId);
      }
      runOnce() {
        var _a, _b;
        this.running = true;
        this.timerId = setTimeout(() => {
          this.callback();
          this.running = false;
        }, this.nextDelay);
        if (!this.hasRef) {
          (_b = (_a = this.timerId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
        }
        const nextBackoff = Math.min(this.nextDelay * this.multiplier, this.maxDelay);
        const jitterMagnitude = nextBackoff * this.jitter;
        this.nextDelay = nextBackoff + uniformRandom(-jitterMagnitude, jitterMagnitude);
      }
      stop() {
        clearTimeout(this.timerId);
        this.running = false;
      }
      reset() {
        this.nextDelay = this.initialDelay;
      }
      isRunning() {
        return this.running;
      }
      ref() {
        var _a, _b;
        this.hasRef = true;
        (_b = (_a = this.timerId).ref) === null || _b === void 0 ? void 0 : _b.call(_a);
      }
      unref() {
        var _a, _b;
        this.hasRef = false;
        (_b = (_a = this.timerId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
      }
    };
    exports2.BackoffTimeout = BackoffTimeout;
  }
});

// node_modules/@grpc/grpc-js/build/src/service-config.js
var require_service_config = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/service-config.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.extractAndSelectServiceConfig = exports2.validateServiceConfig = void 0;
    var os = require("os");
    var load_balancer_1 = require_load_balancer();
    var TIMEOUT_REGEX = /^\d+(\.\d{1,9})?s$/;
    var CLIENT_LANGUAGE_STRING = "node";
    function validateName(obj) {
      if (!("service" in obj) || typeof obj.service !== "string") {
        throw new Error("Invalid method config name: invalid service");
      }
      const result = {
        service: obj.service
      };
      if ("method" in obj) {
        if (typeof obj.method === "string") {
          result.method = obj.method;
        } else {
          throw new Error("Invalid method config name: invalid method");
        }
      }
      return result;
    }
    function validateMethodConfig(obj) {
      const result = {
        name: []
      };
      if (!("name" in obj) || !Array.isArray(obj.name)) {
        throw new Error("Invalid method config: invalid name array");
      }
      for (const name of obj.name) {
        result.name.push(validateName(name));
      }
      if ("waitForReady" in obj) {
        if (typeof obj.waitForReady !== "boolean") {
          throw new Error("Invalid method config: invalid waitForReady");
        }
        result.waitForReady = obj.waitForReady;
      }
      if ("timeout" in obj) {
        if (!(typeof obj.timeout === "string") || !TIMEOUT_REGEX.test(obj.timeout)) {
          throw new Error("Invalid method config: invalid timeout");
        }
        result.timeout = obj.timeout;
      }
      if ("maxRequestBytes" in obj) {
        if (typeof obj.maxRequestBytes !== "number") {
          throw new Error("Invalid method config: invalid maxRequestBytes");
        }
        result.maxRequestBytes = obj.maxRequestBytes;
      }
      if ("maxResponseBytes" in obj) {
        if (typeof obj.maxResponseBytes !== "number") {
          throw new Error("Invalid method config: invalid maxRequestBytes");
        }
        result.maxResponseBytes = obj.maxResponseBytes;
      }
      return result;
    }
    function validateServiceConfig(obj) {
      const result = {
        loadBalancingConfig: [],
        methodConfig: []
      };
      if ("loadBalancingPolicy" in obj) {
        if (typeof obj.loadBalancingPolicy === "string") {
          result.loadBalancingPolicy = obj.loadBalancingPolicy;
        } else {
          throw new Error("Invalid service config: invalid loadBalancingPolicy");
        }
      }
      if ("loadBalancingConfig" in obj) {
        if (Array.isArray(obj.loadBalancingConfig)) {
          for (const config of obj.loadBalancingConfig) {
            result.loadBalancingConfig.push(load_balancer_1.validateLoadBalancingConfig(config));
          }
        } else {
          throw new Error("Invalid service config: invalid loadBalancingConfig");
        }
      }
      if ("methodConfig" in obj) {
        if (Array.isArray(obj.methodConfig)) {
          for (const methodConfig of obj.methodConfig) {
            result.methodConfig.push(validateMethodConfig(methodConfig));
          }
        }
      }
      const seenMethodNames = [];
      for (const methodConfig of result.methodConfig) {
        for (const name of methodConfig.name) {
          for (const seenName of seenMethodNames) {
            if (name.service === seenName.service && name.method === seenName.method) {
              throw new Error(`Invalid service config: duplicate name ${name.service}/${name.method}`);
            }
          }
          seenMethodNames.push(name);
        }
      }
      return result;
    }
    exports2.validateServiceConfig = validateServiceConfig;
    function validateCanaryConfig(obj) {
      if (!("serviceConfig" in obj)) {
        throw new Error("Invalid service config choice: missing service config");
      }
      const result = {
        serviceConfig: validateServiceConfig(obj.serviceConfig)
      };
      if ("clientLanguage" in obj) {
        if (Array.isArray(obj.clientLanguage)) {
          result.clientLanguage = [];
          for (const lang of obj.clientLanguage) {
            if (typeof lang === "string") {
              result.clientLanguage.push(lang);
            } else {
              throw new Error("Invalid service config choice: invalid clientLanguage");
            }
          }
        } else {
          throw new Error("Invalid service config choice: invalid clientLanguage");
        }
      }
      if ("clientHostname" in obj) {
        if (Array.isArray(obj.clientHostname)) {
          result.clientHostname = [];
          for (const lang of obj.clientHostname) {
            if (typeof lang === "string") {
              result.clientHostname.push(lang);
            } else {
              throw new Error("Invalid service config choice: invalid clientHostname");
            }
          }
        } else {
          throw new Error("Invalid service config choice: invalid clientHostname");
        }
      }
      if ("percentage" in obj) {
        if (typeof obj.percentage === "number" && 0 <= obj.percentage && obj.percentage <= 100) {
          result.percentage = obj.percentage;
        } else {
          throw new Error("Invalid service config choice: invalid percentage");
        }
      }
      const allowedFields = [
        "clientLanguage",
        "percentage",
        "clientHostname",
        "serviceConfig"
      ];
      for (const field in obj) {
        if (!allowedFields.includes(field)) {
          throw new Error(`Invalid service config choice: unexpected field ${field}`);
        }
      }
      return result;
    }
    function validateAndSelectCanaryConfig(obj, percentage) {
      if (!Array.isArray(obj)) {
        throw new Error("Invalid service config list");
      }
      for (const config of obj) {
        const validatedConfig = validateCanaryConfig(config);
        if (typeof validatedConfig.percentage === "number" && percentage > validatedConfig.percentage) {
          continue;
        }
        if (Array.isArray(validatedConfig.clientHostname)) {
          let hostnameMatched = false;
          for (const hostname of validatedConfig.clientHostname) {
            if (hostname === os.hostname()) {
              hostnameMatched = true;
            }
          }
          if (!hostnameMatched) {
            continue;
          }
        }
        if (Array.isArray(validatedConfig.clientLanguage)) {
          let languageMatched = false;
          for (const language of validatedConfig.clientLanguage) {
            if (language === CLIENT_LANGUAGE_STRING) {
              languageMatched = true;
            }
          }
          if (!languageMatched) {
            continue;
          }
        }
        return validatedConfig.serviceConfig;
      }
      throw new Error("No matching service config found");
    }
    function extractAndSelectServiceConfig(txtRecord, percentage) {
      for (const record of txtRecord) {
        if (record.length > 0 && record[0].startsWith("grpc_config=")) {
          const recordString = record.join("").substring("grpc_config=".length);
          const recordJson = JSON.parse(recordString);
          return validateAndSelectCanaryConfig(recordJson, percentage);
        }
      }
      return null;
    }
    exports2.extractAndSelectServiceConfig = extractAndSelectServiceConfig;
  }
});

// node_modules/@grpc/grpc-js/build/src/uri-parser.js
var require_uri_parser = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/uri-parser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.uriToString = exports2.splitHostPort = exports2.parseUri = void 0;
    var URI_REGEX = /^(?:([A-Za-z0-9+.-]+):)?(?:\/\/([^/]*)\/)?(.+)$/;
    function parseUri(uriString) {
      const parsedUri = URI_REGEX.exec(uriString);
      if (parsedUri === null) {
        return null;
      }
      return {
        scheme: parsedUri[1],
        authority: parsedUri[2],
        path: parsedUri[3]
      };
    }
    exports2.parseUri = parseUri;
    var NUMBER_REGEX = /^\d+$/;
    function splitHostPort(path) {
      if (path.startsWith("[")) {
        const hostEnd = path.indexOf("]");
        if (hostEnd === -1) {
          return null;
        }
        const host = path.substring(1, hostEnd);
        if (host.indexOf(":") === -1) {
          return null;
        }
        if (path.length > hostEnd + 1) {
          if (path[hostEnd + 1] === ":") {
            const portString = path.substring(hostEnd + 2);
            if (NUMBER_REGEX.test(portString)) {
              return {
                host,
                port: +portString
              };
            } else {
              return null;
            }
          } else {
            return null;
          }
        } else {
          return {
            host
          };
        }
      } else {
        const splitPath = path.split(":");
        if (splitPath.length === 2) {
          if (NUMBER_REGEX.test(splitPath[1])) {
            return {
              host: splitPath[0],
              port: +splitPath[1]
            };
          } else {
            return null;
          }
        } else {
          return {
            host: path
          };
        }
      }
    }
    exports2.splitHostPort = splitHostPort;
    function uriToString(uri) {
      let result = "";
      if (uri.scheme !== void 0) {
        result += uri.scheme + ":";
      }
      if (uri.authority !== void 0) {
        result += "//" + uri.authority + "/";
      }
      result += uri.path;
      return result;
    }
    exports2.uriToString = uriToString;
  }
});

// node_modules/@grpc/grpc-js/build/src/resolver-dns.js
var require_resolver_dns = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/resolver-dns.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.setup = void 0;
    var resolver_1 = require_resolver();
    var dns = require("dns");
    var util = require("util");
    var service_config_1 = require_service_config();
    var constants_1 = require_constants();
    var metadata_1 = require_metadata();
    var logging = require_logging();
    var constants_2 = require_constants();
    var uri_parser_1 = require_uri_parser();
    var net_1 = require("net");
    var TRACER_NAME = "dns_resolver";
    function trace(text) {
      logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, text);
    }
    var DEFAULT_PORT = 443;
    var resolveTxtPromise = util.promisify(dns.resolveTxt);
    var dnsLookupPromise = util.promisify(dns.lookup);
    function mergeArrays(...arrays) {
      const result = [];
      for (let i = 0; i < Math.max.apply(null, arrays.map((array) => array.length)); i++) {
        for (const array of arrays) {
          if (i < array.length) {
            result.push(array[i]);
          }
        }
      }
      return result;
    }
    var DnsResolver = class {
      constructor(target, listener, channelOptions) {
        var _a, _b;
        this.target = target;
        this.listener = listener;
        this.pendingLookupPromise = null;
        this.pendingTxtPromise = null;
        this.latestLookupResult = null;
        this.latestServiceConfig = null;
        this.latestServiceConfigError = null;
        trace("Resolver constructed for target " + uri_parser_1.uriToString(target));
        const hostPort = uri_parser_1.splitHostPort(target.path);
        if (hostPort === null) {
          this.ipResult = null;
          this.dnsHostname = null;
          this.port = null;
        } else {
          if (net_1.isIPv4(hostPort.host) || net_1.isIPv6(hostPort.host)) {
            this.ipResult = [
              {
                host: hostPort.host,
                port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : DEFAULT_PORT
              }
            ];
            this.dnsHostname = null;
            this.port = null;
          } else {
            this.ipResult = null;
            this.dnsHostname = hostPort.host;
            this.port = (_b = hostPort.port) !== null && _b !== void 0 ? _b : DEFAULT_PORT;
          }
        }
        this.percentage = Math.random() * 100;
        this.defaultResolutionError = {
          code: constants_1.Status.UNAVAILABLE,
          details: `Name resolution failed for target ${uri_parser_1.uriToString(this.target)}`,
          metadata: new metadata_1.Metadata()
        };
      }
      startResolution() {
        if (this.ipResult !== null) {
          trace("Returning IP address for target " + uri_parser_1.uriToString(this.target));
          setImmediate(() => {
            this.listener.onSuccessfulResolution(this.ipResult, null, null, null, {});
          });
          return;
        }
        if (this.dnsHostname === null) {
          setImmediate(() => {
            this.listener.onError({
              code: constants_1.Status.UNAVAILABLE,
              details: `Failed to parse DNS address ${uri_parser_1.uriToString(this.target)}`,
              metadata: new metadata_1.Metadata()
            });
          });
        } else {
          this.latestLookupResult = null;
          const hostname = this.dnsHostname;
          this.pendingLookupPromise = dnsLookupPromise(hostname, {all: true});
          this.pendingLookupPromise.then((addressList) => {
            this.pendingLookupPromise = null;
            const ip4Addresses = addressList.filter((addr) => addr.family === 4);
            const ip6Addresses = addressList.filter((addr) => addr.family === 6);
            this.latestLookupResult = mergeArrays(ip6Addresses, ip4Addresses).map((addr) => ({host: addr.address, port: +this.port}));
            const allAddressesString = "[" + this.latestLookupResult.map((addr) => addr.host + ":" + addr.port).join(",") + "]";
            trace("Resolved addresses for target " + uri_parser_1.uriToString(this.target) + ": " + allAddressesString);
            if (this.latestLookupResult.length === 0) {
              this.listener.onError(this.defaultResolutionError);
              return;
            }
            this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});
          }, (err) => {
            trace("Resolution error for target " + uri_parser_1.uriToString(this.target) + ": " + err.message);
            this.pendingLookupPromise = null;
            this.listener.onError(this.defaultResolutionError);
          });
          if (this.pendingTxtPromise === null) {
            this.pendingTxtPromise = resolveTxtPromise(hostname);
            this.pendingTxtPromise.then((txtRecord) => {
              this.pendingTxtPromise = null;
              try {
                this.latestServiceConfig = service_config_1.extractAndSelectServiceConfig(txtRecord, this.percentage);
              } catch (err) {
                this.latestServiceConfigError = {
                  code: constants_1.Status.UNAVAILABLE,
                  details: "Parsing service config failed",
                  metadata: new metadata_1.Metadata()
                };
              }
              if (this.latestLookupResult !== null) {
                this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});
              }
            }, (err) => {
            });
          }
        }
      }
      updateResolution() {
        trace("Resolution update requested for target " + uri_parser_1.uriToString(this.target));
        if (this.pendingLookupPromise === null) {
          this.startResolution();
        }
      }
      destroy() {
      }
      static getDefaultAuthority(target) {
        return target.path;
      }
    };
    function setup() {
      resolver_1.registerResolver("dns", DnsResolver);
      resolver_1.registerDefaultScheme("dns");
    }
    exports2.setup = setup;
  }
});

// node_modules/@grpc/grpc-js/build/src/resolver-uds.js
var require_resolver_uds = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/resolver-uds.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.setup = void 0;
    var resolver_1 = require_resolver();
    var UdsResolver = class {
      constructor(target, listener, channelOptions) {
        this.listener = listener;
        this.addresses = [];
        let path;
        if (target.authority === "") {
          path = "/" + target.path;
        } else {
          path = target.path;
        }
        this.addresses = [{path}];
      }
      updateResolution() {
        process.nextTick(this.listener.onSuccessfulResolution, this.addresses, null, null, null, {});
      }
      destroy() {
      }
      static getDefaultAuthority(target) {
        return "localhost";
      }
    };
    function setup() {
      resolver_1.registerResolver("unix", UdsResolver);
    }
    exports2.setup = setup;
  }
});

// node_modules/@grpc/grpc-js/build/src/resolver-ip.js
var require_resolver_ip = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/resolver-ip.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.setup = void 0;
    var net_1 = require("net");
    var constants_1 = require_constants();
    var metadata_1 = require_metadata();
    var resolver_1 = require_resolver();
    var uri_parser_1 = require_uri_parser();
    var logging = require_logging();
    var TRACER_NAME = "ip_resolver";
    function trace(text) {
      logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);
    }
    var IPV4_SCHEME = "ipv4";
    var IPV6_SCHEME = "ipv6";
    var DEFAULT_PORT = 443;
    var IpResolver = class {
      constructor(target, listener, channelOptions) {
        var _a;
        this.target = target;
        this.listener = listener;
        this.addresses = [];
        this.error = null;
        trace("Resolver constructed for target " + uri_parser_1.uriToString(target));
        const addresses = [];
        if (!(target.scheme === IPV4_SCHEME || target.scheme === IPV6_SCHEME)) {
          this.error = {
            code: constants_1.Status.UNAVAILABLE,
            details: `Unrecognized scheme ${target.scheme} in IP resolver`,
            metadata: new metadata_1.Metadata()
          };
          return;
        }
        const pathList = target.path.split(",");
        for (const path of pathList) {
          const hostPort = uri_parser_1.splitHostPort(path);
          if (hostPort === null) {
            this.error = {
              code: constants_1.Status.UNAVAILABLE,
              details: `Failed to parse ${target.scheme} address ${path}`,
              metadata: new metadata_1.Metadata()
            };
            return;
          }
          if (target.scheme === IPV4_SCHEME && !net_1.isIPv4(hostPort.host) || target.scheme === IPV6_SCHEME && !net_1.isIPv6(hostPort.host)) {
            this.error = {
              code: constants_1.Status.UNAVAILABLE,
              details: `Failed to parse ${target.scheme} address ${path}`,
              metadata: new metadata_1.Metadata()
            };
            return;
          }
          addresses.push({
            host: hostPort.host,
            port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : DEFAULT_PORT
          });
        }
        this.addresses = addresses;
        trace("Parsed " + target.scheme + " address list " + this.addresses);
      }
      updateResolution() {
        process.nextTick(() => {
          if (this.error) {
            this.listener.onError(this.error);
          } else {
            this.listener.onSuccessfulResolution(this.addresses, null, null, null, {});
          }
        });
      }
      destroy() {
      }
      static getDefaultAuthority(target) {
        return target.path.split(",")[0];
      }
    };
    function setup() {
      resolver_1.registerResolver(IPV4_SCHEME, IpResolver);
      resolver_1.registerResolver(IPV6_SCHEME, IpResolver);
    }
    exports2.setup = setup;
  }
});

// node_modules/@grpc/grpc-js/build/src/resolver.js
var require_resolver = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/resolver.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.registerAll = exports2.mapUriDefaultScheme = exports2.getDefaultAuthority = exports2.createResolver = exports2.registerDefaultScheme = exports2.registerResolver = void 0;
    var resolver_dns = require_resolver_dns();
    var resolver_uds = require_resolver_uds();
    var resolver_ip = require_resolver_ip();
    var uri_parser_1 = require_uri_parser();
    var registeredResolvers = {};
    var defaultScheme = null;
    function registerResolver(scheme, resolverClass) {
      registeredResolvers[scheme] = resolverClass;
    }
    exports2.registerResolver = registerResolver;
    function registerDefaultScheme(scheme) {
      defaultScheme = scheme;
    }
    exports2.registerDefaultScheme = registerDefaultScheme;
    function createResolver(target, listener, options2) {
      if (target.scheme !== void 0 && target.scheme in registeredResolvers) {
        return new registeredResolvers[target.scheme](target, listener, options2);
      } else {
        throw new Error(`No resolver could be created for target ${uri_parser_1.uriToString(target)}`);
      }
    }
    exports2.createResolver = createResolver;
    function getDefaultAuthority(target) {
      if (target.scheme !== void 0 && target.scheme in registeredResolvers) {
        return registeredResolvers[target.scheme].getDefaultAuthority(target);
      } else {
        throw new Error(`Invalid target ${uri_parser_1.uriToString(target)}`);
      }
    }
    exports2.getDefaultAuthority = getDefaultAuthority;
    function mapUriDefaultScheme(target) {
      if (target.scheme === void 0 || !(target.scheme in registeredResolvers)) {
        if (defaultScheme !== null) {
          return {
            scheme: defaultScheme,
            authority: void 0,
            path: uri_parser_1.uriToString(target)
          };
        } else {
          return null;
        }
      }
      return target;
    }
    exports2.mapUriDefaultScheme = mapUriDefaultScheme;
    function registerAll() {
      resolver_dns.setup();
      resolver_uds.setup();
      resolver_ip.setup();
    }
    exports2.registerAll = registerAll;
  }
});

// node_modules/@grpc/grpc-js/build/src/http_proxy.js
var require_http_proxy = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/http_proxy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.getProxiedConnection = exports2.mapProxyName = void 0;
    var logging_1 = require_logging();
    var constants_1 = require_constants();
    var resolver_1 = require_resolver();
    var http2 = require("http");
    var tls = require("tls");
    var logging = require_logging();
    var subchannel_1 = require_subchannel();
    var uri_parser_1 = require_uri_parser();
    var url_1 = require("url");
    var TRACER_NAME = "proxy";
    function trace(text) {
      logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);
    }
    function getProxyInfo() {
      let proxyEnv = "";
      let envVar = "";
      if (process.env.grpc_proxy) {
        envVar = "grpc_proxy";
        proxyEnv = process.env.grpc_proxy;
      } else if (process.env.https_proxy) {
        envVar = "https_proxy";
        proxyEnv = process.env.https_proxy;
      } else if (process.env.http_proxy) {
        envVar = "http_proxy";
        proxyEnv = process.env.http_proxy;
      } else {
        return {};
      }
      let proxyUrl;
      try {
        proxyUrl = new url_1.URL(proxyEnv);
      } catch (e) {
        logging_1.log(constants_1.LogVerbosity.ERROR, `cannot parse value of "${envVar}" env var`);
        return {};
      }
      if (proxyUrl.protocol !== "http:") {
        logging_1.log(constants_1.LogVerbosity.ERROR, `"${proxyUrl.protocol}" scheme not supported in proxy URI`);
        return {};
      }
      let userCred = null;
      if (proxyUrl.username) {
        if (proxyUrl.password) {
          logging_1.log(constants_1.LogVerbosity.INFO, "userinfo found in proxy URI");
          userCred = `${proxyUrl.username}:${proxyUrl.password}`;
        } else {
          userCred = proxyUrl.username;
        }
      }
      const hostname = proxyUrl.hostname;
      let port = proxyUrl.port;
      if (port === "") {
        port = "80";
      }
      const result = {
        address: `${hostname}:${port}`
      };
      if (userCred) {
        result.creds = userCred;
      }
      trace("Proxy server " + result.address + " set by environment variable " + envVar);
      return result;
    }
    function getNoProxyHostList() {
      let noProxyStr = process.env.no_grpc_proxy;
      let envVar = "no_grpc_proxy";
      if (!noProxyStr) {
        noProxyStr = process.env.no_proxy;
        envVar = "no_proxy";
      }
      if (noProxyStr) {
        trace("No proxy server list set by environment variable " + envVar);
        return noProxyStr.split(",");
      } else {
        return [];
      }
    }
    function mapProxyName(target, options2) {
      var _a;
      const noProxyResult = {
        target,
        extraOptions: {}
      };
      if (((_a = options2["grpc.enable_http_proxy"]) !== null && _a !== void 0 ? _a : 1) === 0) {
        return noProxyResult;
      }
      const proxyInfo = getProxyInfo();
      if (!proxyInfo.address) {
        return noProxyResult;
      }
      const hostPort = uri_parser_1.splitHostPort(target.path);
      if (!hostPort) {
        return noProxyResult;
      }
      const serverHost = hostPort.host;
      for (const host of getNoProxyHostList()) {
        if (host === serverHost) {
          trace("Not using proxy for target in no_proxy list: " + uri_parser_1.uriToString(target));
          return noProxyResult;
        }
      }
      const extraOptions = {
        "grpc.http_connect_target": uri_parser_1.uriToString(target)
      };
      if (proxyInfo.creds) {
        extraOptions["grpc.http_connect_creds"] = proxyInfo.creds;
      }
      return {
        target: {
          scheme: "dns",
          path: proxyInfo.address
        },
        extraOptions
      };
    }
    exports2.mapProxyName = mapProxyName;
    function getProxiedConnection(address, channelOptions, connectionOptions) {
      if (!("grpc.http_connect_target" in channelOptions)) {
        return Promise.resolve({});
      }
      const realTarget = channelOptions["grpc.http_connect_target"];
      const parsedTarget = uri_parser_1.parseUri(realTarget);
      if (parsedTarget === null) {
        return Promise.resolve({});
      }
      const options2 = {
        method: "CONNECT",
        path: parsedTarget.path
      };
      if (subchannel_1.isTcpSubchannelAddress(address)) {
        options2.host = address.host;
        options2.port = address.port;
      } else {
        options2.socketPath = address.path;
      }
      if ("grpc.http_connect_creds" in channelOptions) {
        options2.headers = {
          "Proxy-Authorization": "Basic " + Buffer.from(channelOptions["grpc.http_connect_creds"]).toString("base64")
        };
      }
      const proxyAddressString = subchannel_1.subchannelAddressToString(address);
      trace("Using proxy " + proxyAddressString + " to connect to " + options2.path);
      return new Promise((resolve2, reject) => {
        const request = http2.request(options2);
        request.once("connect", (res, socket, head) => {
          var _a;
          request.removeAllListeners();
          socket.removeAllListeners();
          if (res.statusCode === 200) {
            trace("Successfully connected to " + options2.path + " through proxy " + proxyAddressString);
            if ("secureContext" in connectionOptions) {
              const targetPath = resolver_1.getDefaultAuthority(parsedTarget);
              const hostPort = uri_parser_1.splitHostPort(targetPath);
              const remoteHost = (_a = hostPort === null || hostPort === void 0 ? void 0 : hostPort.host) !== null && _a !== void 0 ? _a : targetPath;
              const cts = tls.connect(Object.assign({host: remoteHost, servername: remoteHost, socket}, connectionOptions), () => {
                trace("Successfully established a TLS connection to " + options2.path + " through proxy " + proxyAddressString);
                resolve2({socket: cts, realTarget: parsedTarget});
              });
              cts.on("error", () => {
                reject();
              });
            } else {
              resolve2({
                socket,
                realTarget: parsedTarget
              });
            }
          } else {
            logging_1.log(constants_1.LogVerbosity.ERROR, "Failed to connect to " + options2.path + " through proxy " + proxyAddressString + " with status " + res.statusCode);
            reject();
          }
        });
        request.once("error", (err) => {
          request.removeAllListeners();
          logging_1.log(constants_1.LogVerbosity.ERROR, "Failed to connect to proxy " + proxyAddressString + " with error " + err.message);
          reject();
        });
        request.end();
      });
    }
    exports2.getProxiedConnection = getProxiedConnection;
  }
});

// node_modules/@grpc/grpc-js/package.json
var require_package = __commonJS({
  "node_modules/@grpc/grpc-js/package.json"(exports2, module2) {
    module2.exports = {
      _from: "@grpc/grpc-js@^1.0.0",
      _id: "@grpc/grpc-js@1.3.0",
      _inBundle: false,
      _integrity: "sha512-fiL7ZaGg2HBiFtmv6m34d5jEgEtNXfctjzB3f7b3iuT7olBX4mHLMOqOBmGTTSOTfNRQJH5+vsyk6mEz3I0Q7Q==",
      _location: "/@grpc/grpc-js",
      _phantomChildren: {},
      _requested: {
        type: "range",
        registry: true,
        raw: "@grpc/grpc-js@^1.0.0",
        name: "@grpc/grpc-js",
        escapedName: "@grpc%2fgrpc-js",
        scope: "@grpc",
        rawSpec: "^1.0.0",
        saveSpec: null,
        fetchSpec: "^1.0.0"
      },
      _requiredBy: [
        "/@firebase/firestore",
        "/@firebase/firestore-compat"
      ],
      _resolved: "https://registry.npmjs.org/@grpc/grpc-js/-/grpc-js-1.3.0.tgz",
      _shasum: "c6febaaf00ce7f53b5ec52c7cf3e2a4725b82bcb",
      _spec: "@grpc/grpc-js@^1.0.0",
      _where: "/Users/aaronjohnson/Development/BigMoonCreative/SvelteKit/rideshare/node_modules/@firebase/firestore",
      author: {
        name: "Google Inc."
      },
      bundleDependencies: false,
      contributors: [
        {
          name: "Google Inc."
        }
      ],
      dependencies: {
        "@types/node": ">=12.12.47"
      },
      deprecated: false,
      description: "gRPC Library for Node - pure JS implementation",
      devDependencies: {
        "@grpc/proto-loader": "^0.5.5",
        "@types/gulp": "^4.0.6",
        "@types/gulp-mocha": "0.0.32",
        "@types/lodash": "^4.14.108",
        "@types/mocha": "^5.2.6",
        "@types/ncp": "^2.0.1",
        "@types/pify": "^3.0.2",
        "@types/yargs": "^15.0.5",
        "clang-format": "^1.0.55",
        execa: "^2.0.3",
        gts: "^2.0.0",
        gulp: "^4.0.2",
        "gulp-mocha": "^6.0.0",
        lodash: "^4.17.4",
        "mocha-jenkins-reporter": "^0.4.1",
        ncp: "^2.0.0",
        pify: "^4.0.1",
        rimraf: "^3.0.2",
        "ts-node": "^8.3.0",
        typescript: "^3.7.2",
        yargs: "^15.4.1"
      },
      engines: {
        node: "^8.13.0 || >=10.10.0"
      },
      files: [
        "src/**/*.ts",
        "build/src/*.{js,d.ts,js.map}",
        "LICENSE",
        "deps/envoy-api/envoy/api/v2/**/*.proto",
        "deps/envoy-api/envoy/config/**/*.proto",
        "deps/envoy-api/envoy/service/**/*.proto",
        "deps/envoy-api/envoy/type/**/*.proto",
        "deps/udpa/udpa/**/*.proto",
        "deps/googleapis/google/api/*.proto",
        "deps/googleapis/google/rpc/*.proto",
        "deps/protoc-gen-validate/validate/**/*.proto"
      ],
      homepage: "https://grpc.io/",
      keywords: [],
      license: "Apache-2.0",
      main: "build/src/index.js",
      name: "@grpc/grpc-js",
      repository: {
        type: "git",
        url: "https://github.com/grpc/grpc-node/tree/master/packages/grpc-js"
      },
      scripts: {
        build: "npm run compile",
        check: "gts check src/**/*.ts",
        clean: `node -e 'require("rimraf")("./build", () => {})'`,
        compile: "tsc -p .",
        fix: "gts fix src/*.ts",
        format: 'clang-format -i -style="{Language: JavaScript, BasedOnStyle: Google, ColumnLimit: 80}" src/*.ts test/*.ts',
        lint: "npm run check",
        posttest: "npm run check",
        prepare: "npm run compile",
        pretest: "npm run compile",
        test: "gulp test"
      },
      types: "build/src/index.d.ts",
      version: "1.3.0"
    };
  }
});

// node_modules/@grpc/grpc-js/build/src/subchannel.js
var require_subchannel = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/subchannel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.Subchannel = exports2.subchannelAddressToString = exports2.subchannelAddressEqual = exports2.isTcpSubchannelAddress = void 0;
    var http2 = require("http2");
    var tls_1 = require("tls");
    var channel_1 = require_channel();
    var backoff_timeout_1 = require_backoff_timeout();
    var resolver_1 = require_resolver();
    var logging = require_logging();
    var constants_1 = require_constants();
    var http_proxy_1 = require_http_proxy();
    var net = require("net");
    var uri_parser_1 = require_uri_parser();
    var clientVersion = require_package().version;
    var TRACER_NAME = "subchannel";
    function trace(text) {
      logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);
    }
    function refTrace(text) {
      logging.trace(constants_1.LogVerbosity.DEBUG, "subchannel_refcount", text);
    }
    var KEEPALIVE_MAX_TIME_MS = ~(1 << 31);
    var KEEPALIVE_TIMEOUT_MS = 2e4;
    var {HTTP2_HEADER_AUTHORITY, HTTP2_HEADER_CONTENT_TYPE, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_HEADER_TE, HTTP2_HEADER_USER_AGENT} = http2.constants;
    var tooManyPingsData = Buffer.from("too_many_pings", "ascii");
    function isTcpSubchannelAddress(address) {
      return "port" in address;
    }
    exports2.isTcpSubchannelAddress = isTcpSubchannelAddress;
    function subchannelAddressEqual(address1, address2) {
      if (isTcpSubchannelAddress(address1)) {
        return isTcpSubchannelAddress(address2) && address1.host === address2.host && address1.port === address2.port;
      } else {
        return !isTcpSubchannelAddress(address2) && address1.path === address2.path;
      }
    }
    exports2.subchannelAddressEqual = subchannelAddressEqual;
    function subchannelAddressToString(address) {
      if (isTcpSubchannelAddress(address)) {
        return address.host + ":" + address.port;
      } else {
        return address.path;
      }
    }
    exports2.subchannelAddressToString = subchannelAddressToString;
    var Subchannel = class {
      constructor(channelTarget, subchannelAddress, options2, credentials) {
        this.channelTarget = channelTarget;
        this.subchannelAddress = subchannelAddress;
        this.options = options2;
        this.credentials = credentials;
        this.connectivityState = channel_1.ConnectivityState.IDLE;
        this.session = null;
        this.continueConnecting = false;
        this.stateListeners = [];
        this.disconnectListeners = [];
        this.keepaliveTimeMs = KEEPALIVE_MAX_TIME_MS;
        this.keepaliveTimeoutMs = KEEPALIVE_TIMEOUT_MS;
        this.keepaliveWithoutCalls = false;
        this.callRefcount = 0;
        this.refcount = 0;
        this.userAgent = [
          options2["grpc.primary_user_agent"],
          `grpc-node-js/${clientVersion}`,
          options2["grpc.secondary_user_agent"]
        ].filter((e) => e).join(" ");
        if ("grpc.keepalive_time_ms" in options2) {
          this.keepaliveTimeMs = options2["grpc.keepalive_time_ms"];
        }
        if ("grpc.keepalive_timeout_ms" in options2) {
          this.keepaliveTimeoutMs = options2["grpc.keepalive_timeout_ms"];
        }
        if ("grpc.keepalive_permit_without_calls" in options2) {
          this.keepaliveWithoutCalls = options2["grpc.keepalive_permit_without_calls"] === 1;
        } else {
          this.keepaliveWithoutCalls = false;
        }
        this.keepaliveIntervalId = setTimeout(() => {
        }, 0);
        clearTimeout(this.keepaliveIntervalId);
        this.keepaliveTimeoutId = setTimeout(() => {
        }, 0);
        clearTimeout(this.keepaliveTimeoutId);
        const backoffOptions = {
          initialDelay: options2["grpc.initial_reconnect_backoff_ms"],
          maxDelay: options2["grpc.max_reconnect_backoff_ms"]
        };
        this.backoffTimeout = new backoff_timeout_1.BackoffTimeout(() => {
          this.handleBackoffTimer();
        }, backoffOptions);
        this.subchannelAddressString = subchannelAddressToString(subchannelAddress);
      }
      handleBackoffTimer() {
        if (this.continueConnecting) {
          this.transitionToState([channel_1.ConnectivityState.TRANSIENT_FAILURE], channel_1.ConnectivityState.CONNECTING);
        } else {
          this.transitionToState([channel_1.ConnectivityState.TRANSIENT_FAILURE], channel_1.ConnectivityState.IDLE);
        }
      }
      startBackoff() {
        this.backoffTimeout.runOnce();
      }
      stopBackoff() {
        this.backoffTimeout.stop();
        this.backoffTimeout.reset();
      }
      sendPing() {
        logging.trace(constants_1.LogVerbosity.DEBUG, "keepalive", "Sending ping to " + this.subchannelAddressString);
        this.keepaliveTimeoutId = setTimeout(() => {
          this.transitionToState([channel_1.ConnectivityState.READY], channel_1.ConnectivityState.IDLE);
        }, this.keepaliveTimeoutMs);
        this.session.ping((err, duration, payload) => {
          clearTimeout(this.keepaliveTimeoutId);
        });
      }
      startKeepalivePings() {
        this.keepaliveIntervalId = setInterval(() => {
          this.sendPing();
        }, this.keepaliveTimeMs);
      }
      stopKeepalivePings() {
        clearInterval(this.keepaliveIntervalId);
        clearTimeout(this.keepaliveTimeoutId);
      }
      createSession(proxyConnectionResult) {
        var _a, _b, _c;
        const targetAuthority = resolver_1.getDefaultAuthority((_a = proxyConnectionResult.realTarget) !== null && _a !== void 0 ? _a : this.channelTarget);
        let connectionOptions = this.credentials._getConnectionOptions() || {};
        connectionOptions.maxSendHeaderBlockLength = Number.MAX_SAFE_INTEGER;
        if ("grpc-node.max_session_memory" in this.options) {
          connectionOptions.maxSessionMemory = this.options["grpc-node.max_session_memory"];
        }
        let addressScheme = "http://";
        if ("secureContext" in connectionOptions) {
          addressScheme = "https://";
          if (this.options["grpc.ssl_target_name_override"]) {
            const sslTargetNameOverride = this.options["grpc.ssl_target_name_override"];
            connectionOptions.checkServerIdentity = (host, cert) => {
              return tls_1.checkServerIdentity(sslTargetNameOverride, cert);
            };
            connectionOptions.servername = sslTargetNameOverride;
          } else {
            const authorityHostname = (_c = (_b = uri_parser_1.splitHostPort(targetAuthority)) === null || _b === void 0 ? void 0 : _b.host) !== null && _c !== void 0 ? _c : "localhost";
            connectionOptions.servername = authorityHostname;
          }
          if (proxyConnectionResult.socket) {
            connectionOptions.createConnection = (authority, option) => {
              return proxyConnectionResult.socket;
            };
          }
        } else {
          connectionOptions.createConnection = (authority, option) => {
            if (proxyConnectionResult.socket) {
              return proxyConnectionResult.socket;
            } else {
              return net.connect(this.subchannelAddress);
            }
          };
        }
        connectionOptions = Object.assign(Object.assign({}, connectionOptions), this.subchannelAddress);
        const session2 = http2.connect(addressScheme + targetAuthority, connectionOptions);
        this.session = session2;
        session2.unref();
        session2.once("connect", () => {
          if (this.session === session2) {
            this.transitionToState([channel_1.ConnectivityState.CONNECTING], channel_1.ConnectivityState.READY);
          }
        });
        session2.once("close", () => {
          if (this.session === session2) {
            this.transitionToState([channel_1.ConnectivityState.CONNECTING], channel_1.ConnectivityState.TRANSIENT_FAILURE);
            this.transitionToState([channel_1.ConnectivityState.READY], channel_1.ConnectivityState.IDLE);
          }
        });
        session2.once("goaway", (errorCode, lastStreamID, opaqueData) => {
          if (this.session === session2) {
            if (errorCode === http2.constants.NGHTTP2_ENHANCE_YOUR_CALM && opaqueData.equals(tooManyPingsData)) {
              this.keepaliveTimeMs = Math.min(2 * this.keepaliveTimeMs, KEEPALIVE_MAX_TIME_MS);
              logging.log(constants_1.LogVerbosity.ERROR, `Connection to ${uri_parser_1.uriToString(this.channelTarget)} at ${this.subchannelAddressString} rejected by server because of excess pings. Increasing ping interval to ${this.keepaliveTimeMs} ms`);
            }
            trace(this.subchannelAddressString + " connection closed by GOAWAY with code " + errorCode);
            this.transitionToState([channel_1.ConnectivityState.CONNECTING, channel_1.ConnectivityState.READY], channel_1.ConnectivityState.IDLE);
          }
        });
        session2.once("error", (error3) => {
          trace(this.subchannelAddressString + " connection closed with error " + error3.message);
        });
      }
      startConnectingInternal() {
        var _a, _b;
        const connectionOptions = this.credentials._getConnectionOptions() || {};
        if ("secureContext" in connectionOptions) {
          connectionOptions.ALPNProtocols = ["h2"];
          if (this.options["grpc.ssl_target_name_override"]) {
            const sslTargetNameOverride = this.options["grpc.ssl_target_name_override"];
            connectionOptions.checkServerIdentity = (host, cert) => {
              return tls_1.checkServerIdentity(sslTargetNameOverride, cert);
            };
            connectionOptions.servername = sslTargetNameOverride;
          } else {
            if ("grpc.http_connect_target" in this.options) {
              const targetPath = resolver_1.getDefaultAuthority((_a = uri_parser_1.parseUri(this.options["grpc.http_connect_target"])) !== null && _a !== void 0 ? _a : {
                path: "localhost"
              });
              const hostPort = uri_parser_1.splitHostPort(targetPath);
              connectionOptions.servername = (_b = hostPort === null || hostPort === void 0 ? void 0 : hostPort.host) !== null && _b !== void 0 ? _b : targetPath;
            }
          }
        }
        http_proxy_1.getProxiedConnection(this.subchannelAddress, this.options, connectionOptions).then((result) => {
          this.createSession(result);
        }, (reason) => {
          this.transitionToState([channel_1.ConnectivityState.CONNECTING], channel_1.ConnectivityState.TRANSIENT_FAILURE);
        });
      }
      transitionToState(oldStates, newState) {
        if (oldStates.indexOf(this.connectivityState) === -1) {
          return false;
        }
        trace(this.subchannelAddressString + " " + channel_1.ConnectivityState[this.connectivityState] + " -> " + channel_1.ConnectivityState[newState]);
        const previousState = this.connectivityState;
        this.connectivityState = newState;
        switch (newState) {
          case channel_1.ConnectivityState.READY:
            this.stopBackoff();
            this.session.socket.once("close", () => {
              for (const listener of this.disconnectListeners) {
                listener();
              }
            });
            if (this.keepaliveWithoutCalls) {
              this.startKeepalivePings();
            }
            break;
          case channel_1.ConnectivityState.CONNECTING:
            this.startBackoff();
            this.startConnectingInternal();
            this.continueConnecting = false;
            break;
          case channel_1.ConnectivityState.TRANSIENT_FAILURE:
            if (this.session) {
              this.session.close();
            }
            this.session = null;
            this.stopKeepalivePings();
            if (!this.backoffTimeout.isRunning()) {
              process.nextTick(() => {
                this.handleBackoffTimer();
              });
            }
            break;
          case channel_1.ConnectivityState.IDLE:
            if (this.session) {
              this.session.close();
            }
            this.session = null;
            this.stopKeepalivePings();
            break;
          default:
            throw new Error(`Invalid state: unknown ConnectivityState ${newState}`);
        }
        for (const listener of [...this.stateListeners]) {
          listener(this, previousState, newState);
        }
        return true;
      }
      checkBothRefcounts() {
        if (this.callRefcount === 0 && this.refcount === 0) {
          this.transitionToState([
            channel_1.ConnectivityState.CONNECTING,
            channel_1.ConnectivityState.IDLE,
            channel_1.ConnectivityState.READY
          ], channel_1.ConnectivityState.TRANSIENT_FAILURE);
        }
      }
      callRef() {
        refTrace(this.subchannelAddressString + " callRefcount " + this.callRefcount + " -> " + (this.callRefcount + 1));
        if (this.callRefcount === 0) {
          if (this.session) {
            this.session.ref();
          }
          this.backoffTimeout.ref();
          if (!this.keepaliveWithoutCalls) {
            this.startKeepalivePings();
          }
        }
        this.callRefcount += 1;
      }
      callUnref() {
        refTrace(this.subchannelAddressString + " callRefcount " + this.callRefcount + " -> " + (this.callRefcount - 1));
        this.callRefcount -= 1;
        if (this.callRefcount === 0) {
          if (this.session) {
            this.session.unref();
          }
          this.backoffTimeout.unref();
          if (!this.keepaliveWithoutCalls) {
            this.stopKeepalivePings();
          }
          this.checkBothRefcounts();
        }
      }
      ref() {
        refTrace(this.subchannelAddressString + " refcount " + this.refcount + " -> " + (this.refcount + 1));
        this.refcount += 1;
      }
      unref() {
        refTrace(this.subchannelAddressString + " refcount " + this.refcount + " -> " + (this.refcount - 1));
        this.refcount -= 1;
        this.checkBothRefcounts();
      }
      unrefIfOneRef() {
        if (this.refcount === 1) {
          this.unref();
          return true;
        }
        return false;
      }
      startCallStream(metadata, callStream, extraFilterFactory) {
        const headers = metadata.toHttp2Headers();
        headers[HTTP2_HEADER_AUTHORITY] = callStream.getHost();
        headers[HTTP2_HEADER_USER_AGENT] = this.userAgent;
        headers[HTTP2_HEADER_CONTENT_TYPE] = "application/grpc";
        headers[HTTP2_HEADER_METHOD] = "POST";
        headers[HTTP2_HEADER_PATH] = callStream.getMethod();
        headers[HTTP2_HEADER_TE] = "trailers";
        let http2Stream;
        try {
          http2Stream = this.session.request(headers);
        } catch (e) {
          this.transitionToState([channel_1.ConnectivityState.READY], channel_1.ConnectivityState.TRANSIENT_FAILURE);
          throw e;
        }
        let headersString = "";
        for (const header of Object.keys(headers)) {
          headersString += "		" + header + ": " + headers[header] + "\n";
        }
        logging.trace(constants_1.LogVerbosity.DEBUG, "call_stream", "Starting stream on subchannel " + this.subchannelAddressString + " with headers\n" + headersString);
        callStream.attachHttp2Stream(http2Stream, this, extraFilterFactory);
      }
      startConnecting() {
        if (!this.transitionToState([channel_1.ConnectivityState.IDLE], channel_1.ConnectivityState.CONNECTING)) {
          if (this.connectivityState === channel_1.ConnectivityState.TRANSIENT_FAILURE) {
            this.continueConnecting = true;
          }
        }
      }
      getConnectivityState() {
        return this.connectivityState;
      }
      addConnectivityStateListener(listener) {
        this.stateListeners.push(listener);
      }
      removeConnectivityStateListener(listener) {
        const listenerIndex = this.stateListeners.indexOf(listener);
        if (listenerIndex > -1) {
          this.stateListeners.splice(listenerIndex, 1);
        }
      }
      addDisconnectListener(listener) {
        this.disconnectListeners.push(listener);
      }
      removeDisconnectListener(listener) {
        const listenerIndex = this.disconnectListeners.indexOf(listener);
        if (listenerIndex > -1) {
          this.disconnectListeners.splice(listenerIndex, 1);
        }
      }
      resetBackoff() {
        this.backoffTimeout.reset();
        this.transitionToState([channel_1.ConnectivityState.TRANSIENT_FAILURE], channel_1.ConnectivityState.CONNECTING);
      }
      getAddress() {
        return this.subchannelAddressString;
      }
    };
    exports2.Subchannel = Subchannel;
  }
});

// node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js
var require_load_balancer_pick_first = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.setup = exports2.PickFirstLoadBalancer = exports2.PickFirstLoadBalancingConfig = void 0;
    var load_balancer_1 = require_load_balancer();
    var channel_1 = require_channel();
    var picker_1 = require_picker();
    var subchannel_1 = require_subchannel();
    var logging = require_logging();
    var constants_1 = require_constants();
    var TRACER_NAME = "pick_first";
    function trace(text) {
      logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);
    }
    var TYPE_NAME = "pick_first";
    var CONNECTION_DELAY_INTERVAL_MS = 250;
    var PickFirstLoadBalancingConfig = class {
      getLoadBalancerName() {
        return TYPE_NAME;
      }
      constructor() {
      }
      toJsonObject() {
        return {
          [TYPE_NAME]: {}
        };
      }
      static createFromJson(obj) {
        return new PickFirstLoadBalancingConfig();
      }
    };
    exports2.PickFirstLoadBalancingConfig = PickFirstLoadBalancingConfig;
    var PickFirstPicker = class {
      constructor(subchannel) {
        this.subchannel = subchannel;
      }
      pick(pickArgs) {
        return {
          pickResultType: picker_1.PickResultType.COMPLETE,
          subchannel: this.subchannel,
          status: null,
          extraFilterFactory: null,
          onCallStarted: null
        };
      }
    };
    var PickFirstLoadBalancer = class {
      constructor(channelControlHelper) {
        this.channelControlHelper = channelControlHelper;
        this.latestAddressList = [];
        this.subchannels = [];
        this.currentState = channel_1.ConnectivityState.IDLE;
        this.currentSubchannelIndex = 0;
        this.currentPick = null;
        this.triedAllSubchannels = false;
        this.subchannelStateCounts = {
          [channel_1.ConnectivityState.CONNECTING]: 0,
          [channel_1.ConnectivityState.IDLE]: 0,
          [channel_1.ConnectivityState.READY]: 0,
          [channel_1.ConnectivityState.SHUTDOWN]: 0,
          [channel_1.ConnectivityState.TRANSIENT_FAILURE]: 0
        };
        this.subchannelStateListener = (subchannel, previousState, newState) => {
          this.subchannelStateCounts[previousState] -= 1;
          this.subchannelStateCounts[newState] += 1;
          if (subchannel === this.subchannels[this.currentSubchannelIndex] && newState === channel_1.ConnectivityState.TRANSIENT_FAILURE) {
            this.startNextSubchannelConnecting();
          }
          if (newState === channel_1.ConnectivityState.READY) {
            this.pickSubchannel(subchannel);
            return;
          } else {
            if (this.triedAllSubchannels && this.subchannelStateCounts[channel_1.ConnectivityState.IDLE] === this.subchannels.length) {
              this.resetSubchannelList();
              this.updateState(channel_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this));
              return;
            }
            if (this.currentPick === null) {
              if (this.triedAllSubchannels) {
                let newLBState;
                if (this.subchannelStateCounts[channel_1.ConnectivityState.CONNECTING] > 0) {
                  newLBState = channel_1.ConnectivityState.CONNECTING;
                } else if (this.subchannelStateCounts[channel_1.ConnectivityState.TRANSIENT_FAILURE] > 0) {
                  newLBState = channel_1.ConnectivityState.TRANSIENT_FAILURE;
                } else {
                  newLBState = channel_1.ConnectivityState.IDLE;
                }
                if (newLBState !== this.currentState) {
                  if (newLBState === channel_1.ConnectivityState.TRANSIENT_FAILURE) {
                    this.updateState(newLBState, new picker_1.UnavailablePicker());
                  } else {
                    this.updateState(newLBState, new picker_1.QueuePicker(this));
                  }
                }
              } else {
                this.updateState(channel_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));
              }
            }
          }
        };
        this.pickedSubchannelStateListener = (subchannel, previousState, newState) => {
          if (newState !== channel_1.ConnectivityState.READY) {
            this.currentPick = null;
            subchannel.unref();
            subchannel.removeConnectivityStateListener(this.pickedSubchannelStateListener);
            if (this.subchannels.length > 0) {
              if (this.triedAllSubchannels) {
                let newLBState;
                if (this.subchannelStateCounts[channel_1.ConnectivityState.CONNECTING] > 0) {
                  newLBState = channel_1.ConnectivityState.CONNECTING;
                } else if (this.subchannelStateCounts[channel_1.ConnectivityState.TRANSIENT_FAILURE] > 0) {
                  newLBState = channel_1.ConnectivityState.TRANSIENT_FAILURE;
                } else {
                  newLBState = channel_1.ConnectivityState.IDLE;
                }
                if (newLBState === channel_1.ConnectivityState.TRANSIENT_FAILURE) {
                  this.updateState(newLBState, new picker_1.UnavailablePicker());
                } else {
                  this.updateState(newLBState, new picker_1.QueuePicker(this));
                }
              } else {
                this.updateState(channel_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));
              }
            } else {
              this.updateState(channel_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this));
            }
          }
        };
        this.connectionDelayTimeout = setTimeout(() => {
        }, 0);
        clearTimeout(this.connectionDelayTimeout);
      }
      startNextSubchannelConnecting() {
        if (this.triedAllSubchannels) {
          return;
        }
        for (const [index2, subchannel] of this.subchannels.entries()) {
          if (index2 > this.currentSubchannelIndex) {
            const subchannelState = subchannel.getConnectivityState();
            if (subchannelState === channel_1.ConnectivityState.IDLE || subchannelState === channel_1.ConnectivityState.CONNECTING) {
              this.startConnecting(index2);
              return;
            }
          }
        }
        this.triedAllSubchannels = true;
      }
      startConnecting(subchannelIndex) {
        clearTimeout(this.connectionDelayTimeout);
        this.currentSubchannelIndex = subchannelIndex;
        if (this.subchannels[subchannelIndex].getConnectivityState() === channel_1.ConnectivityState.IDLE) {
          trace("Start connecting to subchannel with address " + this.subchannels[subchannelIndex].getAddress());
          process.nextTick(() => {
            this.subchannels[subchannelIndex].startConnecting();
          });
        }
        this.connectionDelayTimeout = setTimeout(() => {
          this.startNextSubchannelConnecting();
        }, CONNECTION_DELAY_INTERVAL_MS);
      }
      pickSubchannel(subchannel) {
        trace("Pick subchannel with address " + subchannel.getAddress());
        if (this.currentPick !== null) {
          this.currentPick.unref();
          this.currentPick.removeConnectivityStateListener(this.pickedSubchannelStateListener);
        }
        this.currentPick = subchannel;
        this.updateState(channel_1.ConnectivityState.READY, new PickFirstPicker(subchannel));
        subchannel.addConnectivityStateListener(this.pickedSubchannelStateListener);
        subchannel.ref();
        this.resetSubchannelList();
        clearTimeout(this.connectionDelayTimeout);
      }
      updateState(newState, picker) {
        trace(channel_1.ConnectivityState[this.currentState] + " -> " + channel_1.ConnectivityState[newState]);
        this.currentState = newState;
        this.channelControlHelper.updateState(newState, picker);
      }
      resetSubchannelList() {
        for (const subchannel of this.subchannels) {
          subchannel.removeConnectivityStateListener(this.subchannelStateListener);
          subchannel.unref();
        }
        this.currentSubchannelIndex = 0;
        this.subchannelStateCounts = {
          [channel_1.ConnectivityState.CONNECTING]: 0,
          [channel_1.ConnectivityState.IDLE]: 0,
          [channel_1.ConnectivityState.READY]: 0,
          [channel_1.ConnectivityState.SHUTDOWN]: 0,
          [channel_1.ConnectivityState.TRANSIENT_FAILURE]: 0
        };
        this.subchannels = [];
        this.triedAllSubchannels = false;
      }
      connectToAddressList() {
        this.resetSubchannelList();
        trace("Connect to address list " + this.latestAddressList.map((address) => subchannel_1.subchannelAddressToString(address)));
        this.subchannels = this.latestAddressList.map((address) => this.channelControlHelper.createSubchannel(address, {}));
        for (const subchannel of this.subchannels) {
          subchannel.ref();
        }
        for (const subchannel of this.subchannels) {
          subchannel.addConnectivityStateListener(this.subchannelStateListener);
          this.subchannelStateCounts[subchannel.getConnectivityState()] += 1;
          if (subchannel.getConnectivityState() === channel_1.ConnectivityState.READY) {
            this.pickSubchannel(subchannel);
            this.resetSubchannelList();
            return;
          }
        }
        for (const [index2, subchannel] of this.subchannels.entries()) {
          const subchannelState = subchannel.getConnectivityState();
          if (subchannelState === channel_1.ConnectivityState.IDLE || subchannelState === channel_1.ConnectivityState.CONNECTING) {
            this.startConnecting(index2);
            if (this.currentPick === null) {
              this.updateState(channel_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));
            }
            return;
          }
        }
        if (this.currentPick === null) {
          this.updateState(channel_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker());
        }
      }
      updateAddressList(addressList, lbConfig) {
        if (this.subchannels.length === 0 || !this.latestAddressList.every((value, index2) => addressList[index2] === value)) {
          this.latestAddressList = addressList;
          this.connectToAddressList();
        }
      }
      exitIdle() {
        for (const subchannel of this.subchannels) {
          subchannel.startConnecting();
        }
        if (this.currentState === channel_1.ConnectivityState.IDLE) {
          if (this.latestAddressList.length > 0) {
            this.connectToAddressList();
          }
        }
        if (this.currentState === channel_1.ConnectivityState.IDLE || this.triedAllSubchannels) {
          this.channelControlHelper.requestReresolution();
        }
      }
      resetBackoff() {
      }
      destroy() {
        this.resetSubchannelList();
        if (this.currentPick !== null) {
          this.currentPick.unref();
          this.currentPick.removeConnectivityStateListener(this.pickedSubchannelStateListener);
        }
      }
      getTypeName() {
        return TYPE_NAME;
      }
    };
    exports2.PickFirstLoadBalancer = PickFirstLoadBalancer;
    function setup() {
      load_balancer_1.registerLoadBalancerType(TYPE_NAME, PickFirstLoadBalancer, PickFirstLoadBalancingConfig);
    }
    exports2.setup = setup;
  }
});

// node_modules/@grpc/grpc-js/build/src/load-balancer-round-robin.js
var require_load_balancer_round_robin = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/load-balancer-round-robin.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.setup = exports2.RoundRobinLoadBalancer = void 0;
    var load_balancer_1 = require_load_balancer();
    var channel_1 = require_channel();
    var picker_1 = require_picker();
    var subchannel_1 = require_subchannel();
    var logging = require_logging();
    var constants_1 = require_constants();
    var TRACER_NAME = "round_robin";
    function trace(text) {
      logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);
    }
    var TYPE_NAME = "round_robin";
    var RoundRobinLoadBalancingConfig = class {
      getLoadBalancerName() {
        return TYPE_NAME;
      }
      constructor() {
      }
      toJsonObject() {
        return {
          [TYPE_NAME]: {}
        };
      }
      static createFromJson(obj) {
        return new RoundRobinLoadBalancingConfig();
      }
    };
    var RoundRobinPicker = class {
      constructor(subchannelList, nextIndex = 0) {
        this.subchannelList = subchannelList;
        this.nextIndex = nextIndex;
      }
      pick(pickArgs) {
        const pickedSubchannel = this.subchannelList[this.nextIndex];
        this.nextIndex = (this.nextIndex + 1) % this.subchannelList.length;
        return {
          pickResultType: picker_1.PickResultType.COMPLETE,
          subchannel: pickedSubchannel,
          status: null,
          extraFilterFactory: null,
          onCallStarted: null
        };
      }
      peekNextSubchannel() {
        return this.subchannelList[this.nextIndex];
      }
    };
    var RoundRobinLoadBalancer = class {
      constructor(channelControlHelper) {
        this.channelControlHelper = channelControlHelper;
        this.subchannels = [];
        this.currentState = channel_1.ConnectivityState.IDLE;
        this.currentReadyPicker = null;
        this.subchannelStateCounts = {
          [channel_1.ConnectivityState.CONNECTING]: 0,
          [channel_1.ConnectivityState.IDLE]: 0,
          [channel_1.ConnectivityState.READY]: 0,
          [channel_1.ConnectivityState.SHUTDOWN]: 0,
          [channel_1.ConnectivityState.TRANSIENT_FAILURE]: 0
        };
        this.subchannelStateListener = (subchannel, previousState, newState) => {
          this.subchannelStateCounts[previousState] -= 1;
          this.subchannelStateCounts[newState] += 1;
          this.calculateAndUpdateState();
          if (newState === channel_1.ConnectivityState.TRANSIENT_FAILURE || newState === channel_1.ConnectivityState.IDLE) {
            this.channelControlHelper.requestReresolution();
            subchannel.startConnecting();
          }
        };
      }
      calculateAndUpdateState() {
        if (this.subchannelStateCounts[channel_1.ConnectivityState.READY] > 0) {
          const readySubchannels = this.subchannels.filter((subchannel) => subchannel.getConnectivityState() === channel_1.ConnectivityState.READY);
          let index2 = 0;
          if (this.currentReadyPicker !== null) {
            index2 = readySubchannels.indexOf(this.currentReadyPicker.peekNextSubchannel());
            if (index2 < 0) {
              index2 = 0;
            }
          }
          this.updateState(channel_1.ConnectivityState.READY, new RoundRobinPicker(readySubchannels, index2));
        } else if (this.subchannelStateCounts[channel_1.ConnectivityState.CONNECTING] > 0) {
          this.updateState(channel_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));
        } else if (this.subchannelStateCounts[channel_1.ConnectivityState.TRANSIENT_FAILURE] > 0) {
          this.updateState(channel_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker());
        } else {
          this.updateState(channel_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this));
        }
      }
      updateState(newState, picker) {
        trace(channel_1.ConnectivityState[this.currentState] + " -> " + channel_1.ConnectivityState[newState]);
        if (newState === channel_1.ConnectivityState.READY) {
          this.currentReadyPicker = picker;
        } else {
          this.currentReadyPicker = null;
        }
        this.currentState = newState;
        this.channelControlHelper.updateState(newState, picker);
      }
      resetSubchannelList() {
        for (const subchannel of this.subchannels) {
          subchannel.removeConnectivityStateListener(this.subchannelStateListener);
          subchannel.unref();
        }
        this.subchannelStateCounts = {
          [channel_1.ConnectivityState.CONNECTING]: 0,
          [channel_1.ConnectivityState.IDLE]: 0,
          [channel_1.ConnectivityState.READY]: 0,
          [channel_1.ConnectivityState.SHUTDOWN]: 0,
          [channel_1.ConnectivityState.TRANSIENT_FAILURE]: 0
        };
        this.subchannels = [];
      }
      updateAddressList(addressList, lbConfig) {
        this.resetSubchannelList();
        trace("Connect to address list " + addressList.map((address) => subchannel_1.subchannelAddressToString(address)));
        this.subchannels = addressList.map((address) => this.channelControlHelper.createSubchannel(address, {}));
        for (const subchannel of this.subchannels) {
          subchannel.ref();
          subchannel.addConnectivityStateListener(this.subchannelStateListener);
          const subchannelState = subchannel.getConnectivityState();
          this.subchannelStateCounts[subchannelState] += 1;
          if (subchannelState === channel_1.ConnectivityState.IDLE || subchannelState === channel_1.ConnectivityState.TRANSIENT_FAILURE) {
            subchannel.startConnecting();
          }
        }
        this.calculateAndUpdateState();
      }
      exitIdle() {
        for (const subchannel of this.subchannels) {
          subchannel.startConnecting();
        }
      }
      resetBackoff() {
      }
      destroy() {
        this.resetSubchannelList();
      }
      getTypeName() {
        return TYPE_NAME;
      }
    };
    exports2.RoundRobinLoadBalancer = RoundRobinLoadBalancer;
    function setup() {
      load_balancer_1.registerLoadBalancerType(TYPE_NAME, RoundRobinLoadBalancer, RoundRobinLoadBalancingConfig);
    }
    exports2.setup = setup;
  }
});

// node_modules/@grpc/grpc-js/build/src/load-balancer.js
var require_load_balancer = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/load-balancer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.registerAll = exports2.validateLoadBalancingConfig = exports2.getFirstUsableConfig = exports2.isLoadBalancerNameRegistered = exports2.createLoadBalancer = exports2.registerLoadBalancerType = void 0;
    var load_balancer_pick_first = require_load_balancer_pick_first();
    var load_balancer_round_robin = require_load_balancer_round_robin();
    var registeredLoadBalancerTypes = {};
    function registerLoadBalancerType(typeName, loadBalancerType, loadBalancingConfigType) {
      registeredLoadBalancerTypes[typeName] = {
        LoadBalancer: loadBalancerType,
        LoadBalancingConfig: loadBalancingConfigType
      };
    }
    exports2.registerLoadBalancerType = registerLoadBalancerType;
    function createLoadBalancer(config, channelControlHelper) {
      const typeName = config.getLoadBalancerName();
      if (typeName in registeredLoadBalancerTypes) {
        return new registeredLoadBalancerTypes[typeName].LoadBalancer(channelControlHelper);
      } else {
        return null;
      }
    }
    exports2.createLoadBalancer = createLoadBalancer;
    function isLoadBalancerNameRegistered(typeName) {
      return typeName in registeredLoadBalancerTypes;
    }
    exports2.isLoadBalancerNameRegistered = isLoadBalancerNameRegistered;
    function getFirstUsableConfig(configs, defaultPickFirst = false) {
      for (const config of configs) {
        if (config.getLoadBalancerName() in registeredLoadBalancerTypes) {
          return config;
        }
      }
      if (defaultPickFirst) {
        return new load_balancer_pick_first.PickFirstLoadBalancingConfig();
      } else {
        return null;
      }
    }
    exports2.getFirstUsableConfig = getFirstUsableConfig;
    function validateLoadBalancingConfig(obj) {
      if (!(obj !== null && typeof obj === "object")) {
        throw new Error("Load balancing config must be an object");
      }
      const keys = Object.keys(obj);
      if (keys.length !== 1) {
        throw new Error("Provided load balancing config has multiple conflicting entries");
      }
      const typeName = keys[0];
      if (typeName in registeredLoadBalancerTypes) {
        return registeredLoadBalancerTypes[typeName].LoadBalancingConfig.createFromJson(obj[typeName]);
      } else {
        throw new Error(`Unrecognized load balancing config name ${typeName}`);
      }
    }
    exports2.validateLoadBalancingConfig = validateLoadBalancingConfig;
    function registerAll() {
      load_balancer_pick_first.setup();
      load_balancer_round_robin.setup();
    }
    exports2.registerAll = registerAll;
  }
});

// node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js
var require_load_balancer_child_handler = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.ChildLoadBalancerHandler = void 0;
    var load_balancer_1 = require_load_balancer();
    var channel_1 = require_channel();
    var TYPE_NAME = "child_load_balancer_helper";
    var ChildLoadBalancerHandler = class {
      constructor(channelControlHelper) {
        this.channelControlHelper = channelControlHelper;
        this.currentChild = null;
        this.pendingChild = null;
        this.ChildPolicyHelper = class {
          constructor(parent) {
            this.parent = parent;
            this.child = null;
          }
          createSubchannel(subchannelAddress, subchannelArgs) {
            return this.parent.channelControlHelper.createSubchannel(subchannelAddress, subchannelArgs);
          }
          updateState(connectivityState, picker) {
            var _a;
            if (this.calledByPendingChild()) {
              if (connectivityState !== channel_1.ConnectivityState.READY) {
                return;
              }
              (_a = this.parent.currentChild) === null || _a === void 0 ? void 0 : _a.destroy();
              this.parent.currentChild = this.parent.pendingChild;
              this.parent.pendingChild = null;
            } else if (!this.calledByCurrentChild()) {
              return;
            }
            this.parent.channelControlHelper.updateState(connectivityState, picker);
          }
          requestReresolution() {
            var _a;
            const latestChild = (_a = this.parent.pendingChild) !== null && _a !== void 0 ? _a : this.parent.currentChild;
            if (this.child === latestChild) {
              this.parent.channelControlHelper.requestReresolution();
            }
          }
          setChild(newChild) {
            this.child = newChild;
          }
          calledByPendingChild() {
            return this.child === this.parent.pendingChild;
          }
          calledByCurrentChild() {
            return this.child === this.parent.currentChild;
          }
        };
      }
      updateAddressList(addressList, lbConfig, attributes) {
        let childToUpdate;
        if (this.currentChild === null || this.currentChild.getTypeName() !== lbConfig.getLoadBalancerName()) {
          const newHelper = new this.ChildPolicyHelper(this);
          const newChild = load_balancer_1.createLoadBalancer(lbConfig, newHelper);
          newHelper.setChild(newChild);
          if (this.currentChild === null) {
            this.currentChild = newChild;
            childToUpdate = this.currentChild;
          } else {
            if (this.pendingChild) {
              this.pendingChild.destroy();
            }
            this.pendingChild = newChild;
            childToUpdate = this.pendingChild;
          }
        } else {
          if (this.pendingChild === null) {
            childToUpdate = this.currentChild;
          } else {
            childToUpdate = this.pendingChild;
          }
        }
        childToUpdate.updateAddressList(addressList, lbConfig, attributes);
      }
      exitIdle() {
        if (this.currentChild) {
          this.currentChild.resetBackoff();
          if (this.pendingChild) {
            this.pendingChild.resetBackoff();
          }
        }
      }
      resetBackoff() {
        if (this.currentChild) {
          this.currentChild.resetBackoff();
          if (this.pendingChild) {
            this.pendingChild.resetBackoff();
          }
        }
      }
      destroy() {
        if (this.currentChild) {
          this.currentChild.destroy();
          this.currentChild = null;
        }
        if (this.pendingChild) {
          this.pendingChild.destroy();
          this.pendingChild = null;
        }
      }
      getTypeName() {
        return TYPE_NAME;
      }
    };
    exports2.ChildLoadBalancerHandler = ChildLoadBalancerHandler;
  }
});

// node_modules/@grpc/grpc-js/build/src/resolving-load-balancer.js
var require_resolving_load_balancer = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/resolving-load-balancer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.ResolvingLoadBalancer = void 0;
    var load_balancer_1 = require_load_balancer();
    var service_config_1 = require_service_config();
    var channel_1 = require_channel();
    var resolver_1 = require_resolver();
    var picker_1 = require_picker();
    var backoff_timeout_1 = require_backoff_timeout();
    var constants_1 = require_constants();
    var metadata_1 = require_metadata();
    var logging = require_logging();
    var constants_2 = require_constants();
    var uri_parser_1 = require_uri_parser();
    var load_balancer_child_handler_1 = require_load_balancer_child_handler();
    var TRACER_NAME = "resolving_load_balancer";
    function trace(text) {
      logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, text);
    }
    function getDefaultConfigSelector(serviceConfig) {
      return function defaultConfigSelector(methodName, metadata) {
        var _a, _b;
        const splitName = methodName.split("/").filter((x) => x.length > 0);
        const service = (_a = splitName[0]) !== null && _a !== void 0 ? _a : "";
        const method = (_b = splitName[1]) !== null && _b !== void 0 ? _b : "";
        if (serviceConfig && serviceConfig.methodConfig) {
          for (const methodConfig of serviceConfig.methodConfig) {
            for (const name of methodConfig.name) {
              if (name.service === service && (name.method === void 0 || name.method === method)) {
                return {
                  methodConfig,
                  pickInformation: {},
                  status: constants_1.Status.OK
                };
              }
            }
          }
        }
        return {
          methodConfig: {name: []},
          pickInformation: {},
          status: constants_1.Status.OK
        };
      };
    }
    var ResolvingLoadBalancer = class {
      constructor(target, channelControlHelper, channelOptions, onSuccessfulResolution, onFailedResolution) {
        this.target = target;
        this.channelControlHelper = channelControlHelper;
        this.channelOptions = channelOptions;
        this.onSuccessfulResolution = onSuccessfulResolution;
        this.onFailedResolution = onFailedResolution;
        this.latestChildState = channel_1.ConnectivityState.IDLE;
        this.latestChildPicker = new picker_1.QueuePicker(this);
        this.currentState = channel_1.ConnectivityState.IDLE;
        this.previousServiceConfig = null;
        this.continueResolving = false;
        if (channelOptions["grpc.service_config"]) {
          this.defaultServiceConfig = service_config_1.validateServiceConfig(JSON.parse(channelOptions["grpc.service_config"]));
        } else {
          this.defaultServiceConfig = {
            loadBalancingConfig: [],
            methodConfig: []
          };
        }
        this.updateState(channel_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this));
        this.childLoadBalancer = new load_balancer_child_handler_1.ChildLoadBalancerHandler({
          createSubchannel: channelControlHelper.createSubchannel.bind(channelControlHelper),
          requestReresolution: () => {
            if (this.backoffTimeout.isRunning()) {
              this.continueResolving = true;
            } else {
              this.updateResolution();
            }
          },
          updateState: (newState, picker) => {
            this.latestChildState = newState;
            this.latestChildPicker = picker;
            this.updateState(newState, picker);
          }
        });
        this.innerResolver = resolver_1.createResolver(target, {
          onSuccessfulResolution: (addressList, serviceConfig, serviceConfigError, configSelector, attributes) => {
            var _a;
            let workingServiceConfig = null;
            if (serviceConfig === null) {
              if (serviceConfigError === null) {
                this.previousServiceConfig = null;
                workingServiceConfig = this.defaultServiceConfig;
              } else {
                if (this.previousServiceConfig === null) {
                  this.handleResolutionFailure(serviceConfigError);
                } else {
                  workingServiceConfig = this.previousServiceConfig;
                }
              }
            } else {
              workingServiceConfig = serviceConfig;
              this.previousServiceConfig = serviceConfig;
            }
            const workingConfigList = (_a = workingServiceConfig === null || workingServiceConfig === void 0 ? void 0 : workingServiceConfig.loadBalancingConfig) !== null && _a !== void 0 ? _a : [];
            const loadBalancingConfig = load_balancer_1.getFirstUsableConfig(workingConfigList, true);
            if (loadBalancingConfig === null) {
              this.handleResolutionFailure({
                code: constants_1.Status.UNAVAILABLE,
                details: "All load balancer options in service config are not compatible",
                metadata: new metadata_1.Metadata()
              });
              return;
            }
            this.childLoadBalancer.updateAddressList(addressList, loadBalancingConfig, attributes);
            const finalServiceConfig = workingServiceConfig !== null && workingServiceConfig !== void 0 ? workingServiceConfig : this.defaultServiceConfig;
            this.onSuccessfulResolution(configSelector !== null && configSelector !== void 0 ? configSelector : getDefaultConfigSelector(finalServiceConfig));
          },
          onError: (error3) => {
            this.handleResolutionFailure(error3);
          }
        }, channelOptions);
        this.backoffTimeout = new backoff_timeout_1.BackoffTimeout(() => {
          if (this.continueResolving) {
            this.updateResolution();
            this.continueResolving = false;
          } else {
            this.updateState(this.latestChildState, this.latestChildPicker);
          }
        });
        this.backoffTimeout.unref();
      }
      updateResolution() {
        this.innerResolver.updateResolution();
        if (this.currentState === channel_1.ConnectivityState.IDLE) {
          this.updateState(channel_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));
        }
      }
      updateState(connectivityState, picker) {
        trace(uri_parser_1.uriToString(this.target) + " " + channel_1.ConnectivityState[this.currentState] + " -> " + channel_1.ConnectivityState[connectivityState]);
        if (connectivityState === channel_1.ConnectivityState.IDLE) {
          picker = new picker_1.QueuePicker(this);
        }
        this.currentState = connectivityState;
        this.channelControlHelper.updateState(connectivityState, picker);
      }
      handleResolutionFailure(error3) {
        if (this.latestChildState === channel_1.ConnectivityState.IDLE) {
          this.updateState(channel_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker(error3));
          this.onFailedResolution(error3);
        }
        this.backoffTimeout.runOnce();
      }
      exitIdle() {
        this.childLoadBalancer.exitIdle();
        if (this.currentState === channel_1.ConnectivityState.IDLE) {
          if (this.backoffTimeout.isRunning()) {
            this.continueResolving = true;
          } else {
            this.updateResolution();
          }
          this.updateState(channel_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));
        }
      }
      updateAddressList(addressList, lbConfig) {
        throw new Error("updateAddressList not supported on ResolvingLoadBalancer");
      }
      resetBackoff() {
        this.backoffTimeout.reset();
        this.childLoadBalancer.resetBackoff();
      }
      destroy() {
        this.childLoadBalancer.destroy();
        this.innerResolver.destroy();
        this.updateState(channel_1.ConnectivityState.SHUTDOWN, new picker_1.UnavailablePicker());
      }
      getTypeName() {
        return "resolving_load_balancer";
      }
    };
    exports2.ResolvingLoadBalancer = ResolvingLoadBalancer;
  }
});

// node_modules/@grpc/grpc-js/build/src/channel-options.js
var require_channel_options = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/channel-options.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.channelOptionsEqual = exports2.recognizedOptions = void 0;
    exports2.recognizedOptions = {
      "grpc.ssl_target_name_override": true,
      "grpc.primary_user_agent": true,
      "grpc.secondary_user_agent": true,
      "grpc.default_authority": true,
      "grpc.keepalive_time_ms": true,
      "grpc.keepalive_timeout_ms": true,
      "grpc.keepalive_permit_without_calls": true,
      "grpc.service_config": true,
      "grpc.max_concurrent_streams": true,
      "grpc.initial_reconnect_backoff_ms": true,
      "grpc.max_reconnect_backoff_ms": true,
      "grpc.use_local_subchannel_pool": true,
      "grpc.max_send_message_length": true,
      "grpc.max_receive_message_length": true,
      "grpc.enable_http_proxy": true,
      "grpc-node.max_session_memory": true
    };
    function channelOptionsEqual(options1, options2) {
      const keys1 = Object.keys(options1).sort();
      const keys2 = Object.keys(options2).sort();
      if (keys1.length !== keys2.length) {
        return false;
      }
      for (let i = 0; i < keys1.length; i += 1) {
        if (keys1[i] !== keys2[i]) {
          return false;
        }
        if (options1[keys1[i]] !== options2[keys2[i]]) {
          return false;
        }
      }
      return true;
    }
    exports2.channelOptionsEqual = channelOptionsEqual;
  }
});

// node_modules/@grpc/grpc-js/build/src/subchannel-pool.js
var require_subchannel_pool = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/subchannel-pool.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.getSubchannelPool = exports2.SubchannelPool = void 0;
    var channel_options_1 = require_channel_options();
    var subchannel_1 = require_subchannel();
    var uri_parser_1 = require_uri_parser();
    var REF_CHECK_INTERVAL = 1e4;
    var SubchannelPool = class {
      constructor(global2) {
        this.global = global2;
        this.pool = Object.create(null);
        this.cleanupTimer = null;
      }
      unrefUnusedSubchannels() {
        let allSubchannelsUnrefed = true;
        for (const channelTarget in this.pool) {
          const subchannelObjArray = this.pool[channelTarget];
          const refedSubchannels = subchannelObjArray.filter((value) => !value.subchannel.unrefIfOneRef());
          if (refedSubchannels.length > 0) {
            allSubchannelsUnrefed = false;
          }
          this.pool[channelTarget] = refedSubchannels;
        }
        if (allSubchannelsUnrefed && this.cleanupTimer !== null) {
          clearInterval(this.cleanupTimer);
          this.cleanupTimer = null;
        }
      }
      ensureCleanupTask() {
        var _a, _b;
        if (this.global && this.cleanupTimer === null) {
          this.cleanupTimer = setInterval(() => {
            this.unrefUnusedSubchannels();
          }, REF_CHECK_INTERVAL);
          (_b = (_a = this.cleanupTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
        }
      }
      getOrCreateSubchannel(channelTargetUri, subchannelTarget, channelArguments, channelCredentials) {
        this.ensureCleanupTask();
        const channelTarget = uri_parser_1.uriToString(channelTargetUri);
        if (channelTarget in this.pool) {
          const subchannelObjArray = this.pool[channelTarget];
          for (const subchannelObj of subchannelObjArray) {
            if (subchannel_1.subchannelAddressEqual(subchannelTarget, subchannelObj.subchannelAddress) && channel_options_1.channelOptionsEqual(channelArguments, subchannelObj.channelArguments) && channelCredentials._equals(subchannelObj.channelCredentials)) {
              return subchannelObj.subchannel;
            }
          }
        }
        const subchannel = new subchannel_1.Subchannel(channelTargetUri, subchannelTarget, channelArguments, channelCredentials);
        if (!(channelTarget in this.pool)) {
          this.pool[channelTarget] = [];
        }
        this.pool[channelTarget].push({
          subchannelAddress: subchannelTarget,
          channelArguments,
          channelCredentials,
          subchannel
        });
        if (this.global) {
          subchannel.ref();
        }
        return subchannel;
      }
    };
    exports2.SubchannelPool = SubchannelPool;
    var globalSubchannelPool = new SubchannelPool(true);
    function getSubchannelPool(global2) {
      if (global2) {
        return globalSubchannelPool;
      } else {
        return new SubchannelPool(false);
      }
    }
    exports2.getSubchannelPool = getSubchannelPool;
  }
});

// node_modules/@grpc/grpc-js/build/src/filter.js
var require_filter = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/filter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.BaseFilter = void 0;
    var BaseFilter = class {
      async sendMetadata(metadata) {
        return metadata;
      }
      receiveMetadata(metadata) {
        return metadata;
      }
      async sendMessage(message) {
        return message;
      }
      async receiveMessage(message) {
        return message;
      }
      receiveTrailers(status) {
        return status;
      }
    };
    exports2.BaseFilter = BaseFilter;
  }
});

// node_modules/@grpc/grpc-js/build/src/call-credentials-filter.js
var require_call_credentials_filter = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/call-credentials-filter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.CallCredentialsFilterFactory = exports2.CallCredentialsFilter = void 0;
    var filter_1 = require_filter();
    var constants_1 = require_constants();
    var uri_parser_1 = require_uri_parser();
    var CallCredentialsFilter = class extends filter_1.BaseFilter {
      constructor(channel, stream) {
        var _a, _b;
        super();
        this.channel = channel;
        this.stream = stream;
        this.channel = channel;
        this.stream = stream;
        const splitPath = stream.getMethod().split("/");
        let serviceName = "";
        if (splitPath.length >= 2) {
          serviceName = splitPath[1];
        }
        const hostname = (_b = (_a = uri_parser_1.splitHostPort(stream.getHost())) === null || _a === void 0 ? void 0 : _a.host) !== null && _b !== void 0 ? _b : "localhost";
        this.serviceUrl = `https://${hostname}/${serviceName}`;
      }
      async sendMetadata(metadata) {
        const credentials = this.stream.getCredentials();
        const credsMetadata = credentials.generateMetadata({
          service_url: this.serviceUrl
        });
        const resultMetadata = await metadata;
        try {
          resultMetadata.merge(await credsMetadata);
        } catch (error3) {
          this.stream.cancelWithStatus(constants_1.Status.UNAUTHENTICATED, `Failed to retrieve auth metadata with error: ${error3.message}`);
          return Promise.reject("Failed to retrieve auth metadata");
        }
        if (resultMetadata.get("authorization").length > 1) {
          this.stream.cancelWithStatus(constants_1.Status.INTERNAL, '"authorization" metadata cannot have multiple values');
          return Promise.reject('"authorization" metadata cannot have multiple values');
        }
        return resultMetadata;
      }
    };
    exports2.CallCredentialsFilter = CallCredentialsFilter;
    var CallCredentialsFilterFactory = class {
      constructor(channel) {
        this.channel = channel;
        this.channel = channel;
      }
      createFilter(callStream) {
        return new CallCredentialsFilter(this.channel, callStream);
      }
    };
    exports2.CallCredentialsFilterFactory = CallCredentialsFilterFactory;
  }
});

// node_modules/@grpc/grpc-js/build/src/deadline-filter.js
var require_deadline_filter = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/deadline-filter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.DeadlineFilterFactory = exports2.DeadlineFilter = void 0;
    var constants_1 = require_constants();
    var filter_1 = require_filter();
    var units = [
      ["m", 1],
      ["S", 1e3],
      ["M", 60 * 1e3],
      ["H", 60 * 60 * 1e3]
    ];
    function getDeadline(deadline) {
      const now = new Date().getTime();
      const timeoutMs = Math.max(deadline - now, 0);
      for (const [unit, factor] of units) {
        const amount = timeoutMs / factor;
        if (amount < 1e8) {
          return String(Math.ceil(amount)) + unit;
        }
      }
      throw new Error("Deadline is too far in the future");
    }
    var DeadlineFilter = class extends filter_1.BaseFilter {
      constructor(channel, callStream) {
        var _a, _b;
        super();
        this.channel = channel;
        this.callStream = callStream;
        this.timer = null;
        const callDeadline = callStream.getDeadline();
        if (callDeadline instanceof Date) {
          this.deadline = callDeadline.getTime();
        } else {
          this.deadline = callDeadline;
        }
        const now = new Date().getTime();
        let timeout = this.deadline - now;
        if (timeout <= 0) {
          process.nextTick(() => {
            callStream.cancelWithStatus(constants_1.Status.DEADLINE_EXCEEDED, "Deadline exceeded");
          });
        } else if (this.deadline !== Infinity) {
          this.timer = setTimeout(() => {
            callStream.cancelWithStatus(constants_1.Status.DEADLINE_EXCEEDED, "Deadline exceeded");
          }, timeout);
          (_b = (_a = this.timer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
        }
      }
      async sendMetadata(metadata) {
        if (this.deadline === Infinity) {
          return metadata;
        }
        const finalMetadata = await metadata;
        const timeoutString = getDeadline(this.deadline);
        finalMetadata.set("grpc-timeout", timeoutString);
        return finalMetadata;
      }
      receiveTrailers(status) {
        if (this.timer) {
          clearTimeout(this.timer);
        }
        return status;
      }
    };
    exports2.DeadlineFilter = DeadlineFilter;
    var DeadlineFilterFactory = class {
      constructor(channel) {
        this.channel = channel;
      }
      createFilter(callStream) {
        return new DeadlineFilter(this.channel, callStream);
      }
    };
    exports2.DeadlineFilterFactory = DeadlineFilterFactory;
  }
});

// node_modules/@grpc/grpc-js/build/src/compression-filter.js
var require_compression_filter = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/compression-filter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.CompressionFilterFactory = exports2.CompressionFilter = void 0;
    var zlib2 = require("zlib");
    var filter_1 = require_filter();
    var CompressionHandler = class {
      async writeMessage(message, compress) {
        let messageBuffer = message;
        if (compress) {
          messageBuffer = await this.compressMessage(messageBuffer);
        }
        const output = Buffer.allocUnsafe(messageBuffer.length + 5);
        output.writeUInt8(compress ? 1 : 0, 0);
        output.writeUInt32BE(messageBuffer.length, 1);
        messageBuffer.copy(output, 5);
        return output;
      }
      async readMessage(data) {
        const compressed = data.readUInt8(0) === 1;
        let messageBuffer = data.slice(5);
        if (compressed) {
          messageBuffer = await this.decompressMessage(messageBuffer);
        }
        return messageBuffer;
      }
    };
    var IdentityHandler = class extends CompressionHandler {
      async compressMessage(message) {
        return message;
      }
      async writeMessage(message, compress) {
        const output = Buffer.allocUnsafe(message.length + 5);
        output.writeUInt8(0, 0);
        output.writeUInt32BE(message.length, 1);
        message.copy(output, 5);
        return output;
      }
      decompressMessage(message) {
        return Promise.reject(new Error('Received compressed message but "grpc-encoding" header was identity'));
      }
    };
    var DeflateHandler = class extends CompressionHandler {
      compressMessage(message) {
        return new Promise((resolve2, reject) => {
          zlib2.deflate(message, (err, output) => {
            if (err) {
              reject(err);
            } else {
              resolve2(output);
            }
          });
        });
      }
      decompressMessage(message) {
        return new Promise((resolve2, reject) => {
          zlib2.inflate(message, (err, output) => {
            if (err) {
              reject(err);
            } else {
              resolve2(output);
            }
          });
        });
      }
    };
    var GzipHandler = class extends CompressionHandler {
      compressMessage(message) {
        return new Promise((resolve2, reject) => {
          zlib2.gzip(message, (err, output) => {
            if (err) {
              reject(err);
            } else {
              resolve2(output);
            }
          });
        });
      }
      decompressMessage(message) {
        return new Promise((resolve2, reject) => {
          zlib2.unzip(message, (err, output) => {
            if (err) {
              reject(err);
            } else {
              resolve2(output);
            }
          });
        });
      }
    };
    var UnknownHandler = class extends CompressionHandler {
      constructor(compressionName) {
        super();
        this.compressionName = compressionName;
      }
      compressMessage(message) {
        return Promise.reject(new Error(`Received message compressed with unsupported compression method ${this.compressionName}`));
      }
      decompressMessage(message) {
        return Promise.reject(new Error(`Compression method not supported: ${this.compressionName}`));
      }
    };
    function getCompressionHandler(compressionName) {
      switch (compressionName) {
        case "identity":
          return new IdentityHandler();
        case "deflate":
          return new DeflateHandler();
        case "gzip":
          return new GzipHandler();
        default:
          return new UnknownHandler(compressionName);
      }
    }
    var CompressionFilter = class extends filter_1.BaseFilter {
      constructor() {
        super(...arguments);
        this.sendCompression = new IdentityHandler();
        this.receiveCompression = new IdentityHandler();
      }
      async sendMetadata(metadata) {
        const headers = await metadata;
        headers.set("grpc-accept-encoding", "identity,deflate,gzip");
        headers.set("accept-encoding", "identity");
        return headers;
      }
      receiveMetadata(metadata) {
        const receiveEncoding = metadata.get("grpc-encoding");
        if (receiveEncoding.length > 0) {
          const encoding = receiveEncoding[0];
          if (typeof encoding === "string") {
            this.receiveCompression = getCompressionHandler(encoding);
          }
        }
        metadata.remove("grpc-encoding");
        metadata.remove("grpc-accept-encoding");
        return metadata;
      }
      async sendMessage(message) {
        const resolvedMessage = await message;
        const compress = resolvedMessage.flags === void 0 ? false : (resolvedMessage.flags & 2) === 0;
        return {
          message: await this.sendCompression.writeMessage(resolvedMessage.message, compress),
          flags: resolvedMessage.flags
        };
      }
      async receiveMessage(message) {
        return this.receiveCompression.readMessage(await message);
      }
    };
    exports2.CompressionFilter = CompressionFilter;
    var CompressionFilterFactory = class {
      constructor(channel) {
        this.channel = channel;
      }
      createFilter(callStream) {
        return new CompressionFilter();
      }
    };
    exports2.CompressionFilterFactory = CompressionFilterFactory;
  }
});

// node_modules/@grpc/grpc-js/build/src/max-message-size-filter.js
var require_max_message_size_filter = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/max-message-size-filter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.MaxMessageSizeFilterFactory = exports2.MaxMessageSizeFilter = void 0;
    var filter_1 = require_filter();
    var constants_1 = require_constants();
    var MaxMessageSizeFilter = class extends filter_1.BaseFilter {
      constructor(options2, callStream) {
        super();
        this.options = options2;
        this.callStream = callStream;
        this.maxSendMessageSize = constants_1.DEFAULT_MAX_SEND_MESSAGE_LENGTH;
        this.maxReceiveMessageSize = constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;
        if ("grpc.max_send_message_length" in options2) {
          this.maxSendMessageSize = options2["grpc.max_send_message_length"];
        }
        if ("grpc.max_receive_message_length" in options2) {
          this.maxReceiveMessageSize = options2["grpc.max_receive_message_length"];
        }
      }
      async sendMessage(message) {
        if (this.maxSendMessageSize === -1) {
          return message;
        } else {
          const concreteMessage = await message;
          if (concreteMessage.message.length > this.maxSendMessageSize) {
            this.callStream.cancelWithStatus(constants_1.Status.RESOURCE_EXHAUSTED, `Sent message larger than max (${concreteMessage.message.length} vs. ${this.maxSendMessageSize})`);
            return Promise.reject("Message too large");
          } else {
            return concreteMessage;
          }
        }
      }
      async receiveMessage(message) {
        if (this.maxReceiveMessageSize === -1) {
          return message;
        } else {
          const concreteMessage = await message;
          if (concreteMessage.length > this.maxReceiveMessageSize) {
            this.callStream.cancelWithStatus(constants_1.Status.RESOURCE_EXHAUSTED, `Received message larger than max (${concreteMessage.length} vs. ${this.maxReceiveMessageSize})`);
            return Promise.reject("Message too large");
          } else {
            return concreteMessage;
          }
        }
      }
    };
    exports2.MaxMessageSizeFilter = MaxMessageSizeFilter;
    var MaxMessageSizeFilterFactory = class {
      constructor(options2) {
        this.options = options2;
      }
      createFilter(callStream) {
        return new MaxMessageSizeFilter(this.options, callStream);
      }
    };
    exports2.MaxMessageSizeFilterFactory = MaxMessageSizeFilterFactory;
  }
});

// node_modules/@grpc/grpc-js/build/src/channel.js
var require_channel = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/channel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.ChannelImplementation = exports2.ConnectivityState = void 0;
    var call_stream_1 = require_call_stream();
    var channel_credentials_1 = require_channel_credentials();
    var resolving_load_balancer_1 = require_resolving_load_balancer();
    var subchannel_pool_1 = require_subchannel_pool();
    var picker_1 = require_picker();
    var constants_1 = require_constants();
    var filter_stack_1 = require_filter_stack();
    var call_credentials_filter_1 = require_call_credentials_filter();
    var deadline_filter_1 = require_deadline_filter();
    var compression_filter_1 = require_compression_filter();
    var resolver_1 = require_resolver();
    var logging_1 = require_logging();
    var max_message_size_filter_1 = require_max_message_size_filter();
    var http_proxy_1 = require_http_proxy();
    var uri_parser_1 = require_uri_parser();
    var ConnectivityState;
    (function(ConnectivityState2) {
      ConnectivityState2[ConnectivityState2["IDLE"] = 0] = "IDLE";
      ConnectivityState2[ConnectivityState2["CONNECTING"] = 1] = "CONNECTING";
      ConnectivityState2[ConnectivityState2["READY"] = 2] = "READY";
      ConnectivityState2[ConnectivityState2["TRANSIENT_FAILURE"] = 3] = "TRANSIENT_FAILURE";
      ConnectivityState2[ConnectivityState2["SHUTDOWN"] = 4] = "SHUTDOWN";
    })(ConnectivityState = exports2.ConnectivityState || (exports2.ConnectivityState = {}));
    var MAX_TIMEOUT_TIME = 2147483647;
    var nextCallNumber = 0;
    function getNewCallNumber() {
      const callNumber = nextCallNumber;
      nextCallNumber += 1;
      if (nextCallNumber >= Number.MAX_SAFE_INTEGER) {
        nextCallNumber = 0;
      }
      return callNumber;
    }
    var ChannelImplementation = class {
      constructor(target, credentials, options2) {
        var _a, _b, _c;
        this.credentials = credentials;
        this.options = options2;
        this.connectivityState = ConnectivityState.IDLE;
        this.currentPicker = new picker_1.UnavailablePicker();
        this.configSelectionQueue = [];
        this.pickQueue = [];
        this.connectivityStateWatchers = [];
        this.configSelector = null;
        if (typeof target !== "string") {
          throw new TypeError("Channel target must be a string");
        }
        if (!(credentials instanceof channel_credentials_1.ChannelCredentials)) {
          throw new TypeError("Channel credentials must be a ChannelCredentials object");
        }
        if (options2) {
          if (typeof options2 !== "object" || !Object.values(options2).every((value) => typeof value === "string" || typeof value === "number" || typeof value === "undefined")) {
            throw new TypeError("Channel options must be an object with string or number values");
          }
        }
        const originalTargetUri = uri_parser_1.parseUri(target);
        if (originalTargetUri === null) {
          throw new Error(`Could not parse target name "${target}"`);
        }
        const defaultSchemeMapResult = resolver_1.mapUriDefaultScheme(originalTargetUri);
        if (defaultSchemeMapResult === null) {
          throw new Error(`Could not find a default scheme for target name "${target}"`);
        }
        this.callRefTimer = setInterval(() => {
        }, MAX_TIMEOUT_TIME);
        (_b = (_a = this.callRefTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
        if (this.options["grpc.default_authority"]) {
          this.defaultAuthority = this.options["grpc.default_authority"];
        } else {
          this.defaultAuthority = resolver_1.getDefaultAuthority(defaultSchemeMapResult);
        }
        const proxyMapResult = http_proxy_1.mapProxyName(defaultSchemeMapResult, options2);
        this.target = proxyMapResult.target;
        this.options = Object.assign({}, this.options, proxyMapResult.extraOptions);
        this.subchannelPool = subchannel_pool_1.getSubchannelPool(((_c = options2["grpc.use_local_subchannel_pool"]) !== null && _c !== void 0 ? _c : 0) === 0);
        const channelControlHelper = {
          createSubchannel: (subchannelAddress, subchannelArgs) => {
            return this.subchannelPool.getOrCreateSubchannel(this.target, subchannelAddress, Object.assign({}, this.options, subchannelArgs), this.credentials);
          },
          updateState: (connectivityState, picker) => {
            this.currentPicker = picker;
            const queueCopy = this.pickQueue.slice();
            this.pickQueue = [];
            this.callRefTimerUnref();
            for (const {callStream, callMetadata, callConfig} of queueCopy) {
              this.tryPick(callStream, callMetadata, callConfig);
            }
            this.updateState(connectivityState);
          },
          requestReresolution: () => {
            throw new Error("Resolving load balancer should never call requestReresolution");
          }
        };
        this.resolvingLoadBalancer = new resolving_load_balancer_1.ResolvingLoadBalancer(this.target, channelControlHelper, options2, (configSelector) => {
          this.configSelector = configSelector;
          process.nextTick(() => {
            const localQueue = this.configSelectionQueue;
            this.configSelectionQueue = [];
            this.callRefTimerUnref();
            for (const {callStream, callMetadata} of localQueue) {
              this.tryGetConfig(callStream, callMetadata);
            }
            this.configSelectionQueue = [];
          });
        }, (status) => {
          if (this.configSelectionQueue.length > 0) {
            logging_1.trace(constants_1.LogVerbosity.DEBUG, "channel", "Name resolution failed for target " + uri_parser_1.uriToString(this.target) + " with calls queued for config selection");
          }
          const localQueue = this.configSelectionQueue;
          this.configSelectionQueue = [];
          this.callRefTimerUnref();
          for (const {callStream, callMetadata} of localQueue) {
            if (callMetadata.getOptions().waitForReady) {
              this.callRefTimerRef();
              this.configSelectionQueue.push({callStream, callMetadata});
            } else {
              callStream.cancelWithStatus(status.code, status.details);
            }
          }
        });
        this.filterStackFactory = new filter_stack_1.FilterStackFactory([
          new call_credentials_filter_1.CallCredentialsFilterFactory(this),
          new deadline_filter_1.DeadlineFilterFactory(this),
          new max_message_size_filter_1.MaxMessageSizeFilterFactory(this.options),
          new compression_filter_1.CompressionFilterFactory(this)
        ]);
      }
      callRefTimerRef() {
        var _a, _b, _c, _d;
        if (!((_b = (_a = this.callRefTimer).hasRef) === null || _b === void 0 ? void 0 : _b.call(_a))) {
          logging_1.trace(constants_1.LogVerbosity.DEBUG, "channel", "callRefTimer.ref | configSelectionQueue.length=" + this.configSelectionQueue.length + " pickQueue.length=" + this.pickQueue.length);
          (_d = (_c = this.callRefTimer).ref) === null || _d === void 0 ? void 0 : _d.call(_c);
        }
      }
      callRefTimerUnref() {
        var _a, _b;
        if (!this.callRefTimer.hasRef || this.callRefTimer.hasRef()) {
          logging_1.trace(constants_1.LogVerbosity.DEBUG, "channel", "callRefTimer.unref | configSelectionQueue.length=" + this.configSelectionQueue.length + " pickQueue.length=" + this.pickQueue.length);
          (_b = (_a = this.callRefTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
        }
      }
      pushPick(callStream, callMetadata, callConfig) {
        this.pickQueue.push({callStream, callMetadata, callConfig});
        this.callRefTimerRef();
      }
      tryPick(callStream, callMetadata, callConfig) {
        var _a, _b, _c;
        const pickResult = this.currentPicker.pick({metadata: callMetadata, extraPickInfo: callConfig.pickInformation});
        logging_1.trace(constants_1.LogVerbosity.DEBUG, "channel", "Pick result: " + picker_1.PickResultType[pickResult.pickResultType] + " subchannel: " + ((_a = pickResult.subchannel) === null || _a === void 0 ? void 0 : _a.getAddress()) + " status: " + ((_b = pickResult.status) === null || _b === void 0 ? void 0 : _b.code) + " " + ((_c = pickResult.status) === null || _c === void 0 ? void 0 : _c.details));
        switch (pickResult.pickResultType) {
          case picker_1.PickResultType.COMPLETE:
            if (pickResult.subchannel === null) {
              callStream.cancelWithStatus(constants_1.Status.UNAVAILABLE, "Request dropped by load balancing policy");
            } else {
              if (pickResult.subchannel.getConnectivityState() !== ConnectivityState.READY) {
                logging_1.log(constants_1.LogVerbosity.ERROR, "Error: COMPLETE pick result subchannel " + pickResult.subchannel.getAddress() + " has state " + ConnectivityState[pickResult.subchannel.getConnectivityState()]);
                this.pushPick(callStream, callMetadata, callConfig);
                break;
              }
              callStream.filterStack.sendMetadata(Promise.resolve(callMetadata.clone())).then((finalMetadata) => {
                var _a2, _b2, _c2;
                const subchannelState = pickResult.subchannel.getConnectivityState();
                if (subchannelState === ConnectivityState.READY) {
                  try {
                    pickResult.subchannel.startCallStream(finalMetadata, callStream, (_a2 = pickResult.extraFilterFactory) !== null && _a2 !== void 0 ? _a2 : void 0);
                    (_b2 = callConfig.onCommitted) === null || _b2 === void 0 ? void 0 : _b2.call(callConfig);
                    (_c2 = pickResult.onCallStarted) === null || _c2 === void 0 ? void 0 : _c2.call(pickResult);
                  } catch (error3) {
                    if (error3.code === "ERR_HTTP2_GOAWAY_SESSION") {
                      logging_1.trace(constants_1.LogVerbosity.INFO, "channel", "Failed to start call on picked subchannel " + pickResult.subchannel.getAddress() + " with error " + error3.message + ". Retrying pick");
                      this.tryPick(callStream, callMetadata, callConfig);
                    } else {
                      logging_1.trace(constants_1.LogVerbosity.INFO, "channel", "Failed to start call on picked subchanel " + pickResult.subchannel.getAddress() + " with error " + error3.message + ". Ending call");
                      callStream.cancelWithStatus(constants_1.Status.INTERNAL, `Failed to start HTTP/2 stream with error: ${error3.message}`);
                    }
                  }
                } else {
                  logging_1.trace(constants_1.LogVerbosity.INFO, "channel", "Picked subchannel " + pickResult.subchannel.getAddress() + " has state " + ConnectivityState[subchannelState] + " after metadata filters. Retrying pick");
                  this.tryPick(callStream, callMetadata, callConfig);
                }
              }, (error3) => {
                callStream.cancelWithStatus(typeof error3.code === "number" ? error3.code : constants_1.Status.UNKNOWN, `Getting metadata from plugin failed with error: ${error3.message}`);
              });
            }
            break;
          case picker_1.PickResultType.QUEUE:
            this.pushPick(callStream, callMetadata, callConfig);
            break;
          case picker_1.PickResultType.TRANSIENT_FAILURE:
            if (callMetadata.getOptions().waitForReady) {
              this.pushPick(callStream, callMetadata, callConfig);
            } else {
              callStream.cancelWithStatus(pickResult.status.code, pickResult.status.details);
            }
            break;
          case picker_1.PickResultType.DROP:
            callStream.cancelWithStatus(pickResult.status.code, pickResult.status.details);
            break;
          default:
            throw new Error(`Invalid state: unknown pickResultType ${pickResult.pickResultType}`);
        }
      }
      removeConnectivityStateWatcher(watcherObject) {
        const watcherIndex = this.connectivityStateWatchers.findIndex((value) => value === watcherObject);
        if (watcherIndex >= 0) {
          this.connectivityStateWatchers.splice(watcherIndex, 1);
        }
      }
      updateState(newState) {
        logging_1.trace(constants_1.LogVerbosity.DEBUG, "connectivity_state", uri_parser_1.uriToString(this.target) + " " + ConnectivityState[this.connectivityState] + " -> " + ConnectivityState[newState]);
        this.connectivityState = newState;
        const watchersCopy = this.connectivityStateWatchers.slice();
        for (const watcherObject of watchersCopy) {
          if (newState !== watcherObject.currentState) {
            if (watcherObject.timer) {
              clearTimeout(watcherObject.timer);
            }
            this.removeConnectivityStateWatcher(watcherObject);
            watcherObject.callback();
          }
        }
      }
      tryGetConfig(stream, metadata) {
        if (this.configSelector === null) {
          this.resolvingLoadBalancer.exitIdle();
          this.configSelectionQueue.push({
            callStream: stream,
            callMetadata: metadata
          });
          this.callRefTimerRef();
        } else {
          const callConfig = this.configSelector(stream.getMethod(), metadata);
          if (callConfig.status === constants_1.Status.OK) {
            this.tryPick(stream, metadata, callConfig);
          } else {
            stream.cancelWithStatus(callConfig.status, "Failed to route call to method " + stream.getMethod());
          }
        }
      }
      _startCallStream(stream, metadata) {
        this.tryGetConfig(stream, metadata.clone());
      }
      close() {
        this.resolvingLoadBalancer.destroy();
        this.updateState(ConnectivityState.SHUTDOWN);
        clearInterval(this.callRefTimer);
        this.subchannelPool.unrefUnusedSubchannels();
      }
      getTarget() {
        return uri_parser_1.uriToString(this.target);
      }
      getConnectivityState(tryToConnect) {
        const connectivityState = this.connectivityState;
        if (tryToConnect) {
          this.resolvingLoadBalancer.exitIdle();
        }
        return connectivityState;
      }
      watchConnectivityState(currentState, deadline, callback) {
        if (this.connectivityState === ConnectivityState.SHUTDOWN) {
          throw new Error("Channel has been shut down");
        }
        let timer = null;
        if (deadline !== Infinity) {
          const deadlineDate = deadline instanceof Date ? deadline : new Date(deadline);
          const now = new Date();
          if (deadline === -Infinity || deadlineDate <= now) {
            process.nextTick(callback, new Error("Deadline passed without connectivity state change"));
            return;
          }
          timer = setTimeout(() => {
            this.removeConnectivityStateWatcher(watcherObject);
            callback(new Error("Deadline passed without connectivity state change"));
          }, deadlineDate.getTime() - now.getTime());
        }
        const watcherObject = {
          currentState,
          callback,
          timer
        };
        this.connectivityStateWatchers.push(watcherObject);
      }
      createCall(method, deadline, host, parentCall, propagateFlags) {
        if (typeof method !== "string") {
          throw new TypeError("Channel#createCall: method must be a string");
        }
        if (!(typeof deadline === "number" || deadline instanceof Date)) {
          throw new TypeError("Channel#createCall: deadline must be a number or Date");
        }
        if (this.connectivityState === ConnectivityState.SHUTDOWN) {
          throw new Error("Channel has been shut down");
        }
        const callNumber = getNewCallNumber();
        logging_1.trace(constants_1.LogVerbosity.DEBUG, "channel", uri_parser_1.uriToString(this.target) + " createCall [" + callNumber + '] method="' + method + '", deadline=' + deadline);
        const finalOptions = {
          deadline,
          flags: propagateFlags !== null && propagateFlags !== void 0 ? propagateFlags : constants_1.Propagate.DEFAULTS,
          host: host !== null && host !== void 0 ? host : this.defaultAuthority,
          parentCall
        };
        const stream = new call_stream_1.Http2CallStream(method, this, finalOptions, this.filterStackFactory, this.credentials._getCallCredentials(), callNumber);
        return stream;
      }
    };
    exports2.ChannelImplementation = ChannelImplementation;
  }
});

// node_modules/@grpc/grpc-js/build/src/call.js
var require_call = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/call.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.ClientDuplexStreamImpl = exports2.ClientWritableStreamImpl = exports2.ClientReadableStreamImpl = exports2.ClientUnaryCallImpl = exports2.callErrorFromStatus = void 0;
    var events_1 = require("events");
    var stream_1 = require("stream");
    var constants_1 = require_constants();
    function callErrorFromStatus(status) {
      const message = `${status.code} ${constants_1.Status[status.code]}: ${status.details}`;
      return Object.assign(new Error(message), status);
    }
    exports2.callErrorFromStatus = callErrorFromStatus;
    var ClientUnaryCallImpl = class extends events_1.EventEmitter {
      constructor() {
        super();
      }
      cancel() {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, "Cancelled on client");
      }
      getPeer() {
        var _a, _b;
        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : "unknown";
      }
    };
    exports2.ClientUnaryCallImpl = ClientUnaryCallImpl;
    var ClientReadableStreamImpl = class extends stream_1.Readable {
      constructor(deserialize) {
        super({objectMode: true});
        this.deserialize = deserialize;
      }
      cancel() {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, "Cancelled on client");
      }
      getPeer() {
        var _a, _b;
        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : "unknown";
      }
      _read(_size) {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.startRead();
      }
    };
    exports2.ClientReadableStreamImpl = ClientReadableStreamImpl;
    var ClientWritableStreamImpl = class extends stream_1.Writable {
      constructor(serialize) {
        super({objectMode: true});
        this.serialize = serialize;
      }
      cancel() {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, "Cancelled on client");
      }
      getPeer() {
        var _a, _b;
        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : "unknown";
      }
      _write(chunk, encoding, cb) {
        var _a;
        const context = {
          callback: cb
        };
        const flags = Number(encoding);
        if (!Number.isNaN(flags)) {
          context.flags = flags;
        }
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.sendMessageWithContext(context, chunk);
      }
      _final(cb) {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.halfClose();
        cb();
      }
    };
    exports2.ClientWritableStreamImpl = ClientWritableStreamImpl;
    var ClientDuplexStreamImpl = class extends stream_1.Duplex {
      constructor(serialize, deserialize) {
        super({objectMode: true});
        this.serialize = serialize;
        this.deserialize = deserialize;
      }
      cancel() {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, "Cancelled on client");
      }
      getPeer() {
        var _a, _b;
        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : "unknown";
      }
      _read(_size) {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.startRead();
      }
      _write(chunk, encoding, cb) {
        var _a;
        const context = {
          callback: cb
        };
        const flags = Number(encoding);
        if (!Number.isNaN(flags)) {
          context.flags = flags;
        }
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.sendMessageWithContext(context, chunk);
      }
      _final(cb) {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.halfClose();
        cb();
      }
    };
    exports2.ClientDuplexStreamImpl = ClientDuplexStreamImpl;
  }
});

// node_modules/@grpc/grpc-js/build/src/client-interceptors.js
var require_client_interceptors = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/client-interceptors.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.getInterceptingCall = exports2.InterceptingCall = exports2.RequesterBuilder = exports2.ListenerBuilder = exports2.InterceptorConfigurationError = void 0;
    var metadata_1 = require_metadata();
    var call_stream_1 = require_call_stream();
    var constants_1 = require_constants();
    var InterceptorConfigurationError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "InterceptorConfigurationError";
        Error.captureStackTrace(this, InterceptorConfigurationError);
      }
    };
    exports2.InterceptorConfigurationError = InterceptorConfigurationError;
    var ListenerBuilder = class {
      constructor() {
        this.metadata = void 0;
        this.message = void 0;
        this.status = void 0;
      }
      withOnReceiveMetadata(onReceiveMetadata) {
        this.metadata = onReceiveMetadata;
        return this;
      }
      withOnReceiveMessage(onReceiveMessage) {
        this.message = onReceiveMessage;
        return this;
      }
      withOnReceiveStatus(onReceiveStatus) {
        this.status = onReceiveStatus;
        return this;
      }
      build() {
        return {
          onReceiveMetadata: this.metadata,
          onReceiveMessage: this.message,
          onReceiveStatus: this.status
        };
      }
    };
    exports2.ListenerBuilder = ListenerBuilder;
    var RequesterBuilder = class {
      constructor() {
        this.start = void 0;
        this.message = void 0;
        this.halfClose = void 0;
        this.cancel = void 0;
      }
      withStart(start) {
        this.start = start;
        return this;
      }
      withSendMessage(sendMessage) {
        this.message = sendMessage;
        return this;
      }
      withHalfClose(halfClose) {
        this.halfClose = halfClose;
        return this;
      }
      withCancel(cancel) {
        this.cancel = cancel;
        return this;
      }
      build() {
        return {
          start: this.start,
          sendMessage: this.message,
          halfClose: this.halfClose,
          cancel: this.cancel
        };
      }
    };
    exports2.RequesterBuilder = RequesterBuilder;
    var defaultListener = {
      onReceiveMetadata: (metadata, next) => {
        next(metadata);
      },
      onReceiveMessage: (message, next) => {
        next(message);
      },
      onReceiveStatus: (status, next) => {
        next(status);
      }
    };
    var defaultRequester = {
      start: (metadata, listener, next) => {
        next(metadata, listener);
      },
      sendMessage: (message, next) => {
        next(message);
      },
      halfClose: (next) => {
        next();
      },
      cancel: (next) => {
        next();
      }
    };
    var InterceptingCall = class {
      constructor(nextCall, requester) {
        var _a, _b, _c, _d;
        this.nextCall = nextCall;
        this.processingMessage = false;
        this.pendingHalfClose = false;
        if (requester) {
          this.requester = {
            start: (_a = requester.start) !== null && _a !== void 0 ? _a : defaultRequester.start,
            sendMessage: (_b = requester.sendMessage) !== null && _b !== void 0 ? _b : defaultRequester.sendMessage,
            halfClose: (_c = requester.halfClose) !== null && _c !== void 0 ? _c : defaultRequester.halfClose,
            cancel: (_d = requester.cancel) !== null && _d !== void 0 ? _d : defaultRequester.cancel
          };
        } else {
          this.requester = defaultRequester;
        }
      }
      cancelWithStatus(status, details) {
        this.requester.cancel(() => {
          this.nextCall.cancelWithStatus(status, details);
        });
      }
      getPeer() {
        return this.nextCall.getPeer();
      }
      start(metadata, interceptingListener) {
        var _a, _b, _c, _d, _e, _f;
        const fullInterceptingListener = {
          onReceiveMetadata: (_b = (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.bind(interceptingListener)) !== null && _b !== void 0 ? _b : (metadata2) => {
          },
          onReceiveMessage: (_d = (_c = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMessage) === null || _c === void 0 ? void 0 : _c.bind(interceptingListener)) !== null && _d !== void 0 ? _d : (message) => {
          },
          onReceiveStatus: (_f = (_e = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _e === void 0 ? void 0 : _e.bind(interceptingListener)) !== null && _f !== void 0 ? _f : (status) => {
          }
        };
        this.requester.start(metadata, fullInterceptingListener, (md, listener) => {
          var _a2, _b2, _c2;
          let finalInterceptingListener;
          if (call_stream_1.isInterceptingListener(listener)) {
            finalInterceptingListener = listener;
          } else {
            const fullListener = {
              onReceiveMetadata: (_a2 = listener.onReceiveMetadata) !== null && _a2 !== void 0 ? _a2 : defaultListener.onReceiveMetadata,
              onReceiveMessage: (_b2 = listener.onReceiveMessage) !== null && _b2 !== void 0 ? _b2 : defaultListener.onReceiveMessage,
              onReceiveStatus: (_c2 = listener.onReceiveStatus) !== null && _c2 !== void 0 ? _c2 : defaultListener.onReceiveStatus
            };
            finalInterceptingListener = new call_stream_1.InterceptingListenerImpl(fullListener, fullInterceptingListener);
          }
          this.nextCall.start(md, finalInterceptingListener);
        });
      }
      sendMessageWithContext(context, message) {
        this.processingMessage = true;
        this.requester.sendMessage(message, (finalMessage) => {
          this.processingMessage = false;
          this.nextCall.sendMessageWithContext(context, finalMessage);
          if (this.pendingHalfClose) {
            this.nextCall.halfClose();
          }
        });
      }
      sendMessage(message) {
        this.sendMessageWithContext({}, message);
      }
      startRead() {
        this.nextCall.startRead();
      }
      halfClose() {
        this.requester.halfClose(() => {
          if (this.processingMessage) {
            this.pendingHalfClose = true;
          } else {
            this.nextCall.halfClose();
          }
        });
      }
      setCredentials(credentials) {
        this.nextCall.setCredentials(credentials);
      }
    };
    exports2.InterceptingCall = InterceptingCall;
    function getCall(channel, path, options2) {
      var _a, _b;
      const deadline = (_a = options2.deadline) !== null && _a !== void 0 ? _a : Infinity;
      const host = options2.host;
      const parent = (_b = options2.parent) !== null && _b !== void 0 ? _b : null;
      const propagateFlags = options2.propagate_flags;
      const credentials = options2.credentials;
      const call = channel.createCall(path, deadline, host, parent, propagateFlags);
      if (credentials) {
        call.setCredentials(credentials);
      }
      return call;
    }
    var BaseInterceptingCall = class {
      constructor(call, methodDefinition) {
        this.call = call;
        this.methodDefinition = methodDefinition;
      }
      cancelWithStatus(status, details) {
        this.call.cancelWithStatus(status, details);
      }
      getPeer() {
        return this.call.getPeer();
      }
      setCredentials(credentials) {
        this.call.setCredentials(credentials);
      }
      sendMessageWithContext(context, message) {
        let serialized;
        try {
          serialized = this.methodDefinition.requestSerialize(message);
        } catch (e) {
          this.call.cancelWithStatus(constants_1.Status.INTERNAL, `Request message serialization failure: ${e.message}`);
          return;
        }
        this.call.sendMessageWithContext(context, serialized);
      }
      sendMessage(message) {
        this.sendMessageWithContext({}, message);
      }
      start(metadata, interceptingListener) {
        let readError = null;
        this.call.start(metadata, {
          onReceiveMetadata: (metadata2) => {
            var _a;
            (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, metadata2);
          },
          onReceiveMessage: (message) => {
            var _a;
            let deserialized;
            try {
              deserialized = this.methodDefinition.responseDeserialize(message);
            } catch (e) {
              readError = {
                code: constants_1.Status.INTERNAL,
                details: `Response message parsing error: ${e.message}`,
                metadata: new metadata_1.Metadata()
              };
              this.call.cancelWithStatus(readError.code, readError.details);
              return;
            }
            (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMessage) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, deserialized);
          },
          onReceiveStatus: (status) => {
            var _a, _b;
            if (readError) {
              (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, readError);
            } else {
              (_b = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _b === void 0 ? void 0 : _b.call(interceptingListener, status);
            }
          }
        });
      }
      startRead() {
        this.call.startRead();
      }
      halfClose() {
        this.call.halfClose();
      }
    };
    var BaseUnaryInterceptingCall = class extends BaseInterceptingCall {
      constructor(call, methodDefinition) {
        super(call, methodDefinition);
      }
      start(metadata, listener) {
        var _a, _b;
        let receivedMessage = false;
        const wrapperListener = {
          onReceiveMetadata: (_b = (_a = listener === null || listener === void 0 ? void 0 : listener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.bind(listener)) !== null && _b !== void 0 ? _b : (metadata2) => {
          },
          onReceiveMessage: (message) => {
            var _a2;
            receivedMessage = true;
            (_a2 = listener === null || listener === void 0 ? void 0 : listener.onReceiveMessage) === null || _a2 === void 0 ? void 0 : _a2.call(listener, message);
          },
          onReceiveStatus: (status) => {
            var _a2, _b2;
            if (!receivedMessage) {
              (_a2 = listener === null || listener === void 0 ? void 0 : listener.onReceiveMessage) === null || _a2 === void 0 ? void 0 : _a2.call(listener, null);
            }
            (_b2 = listener === null || listener === void 0 ? void 0 : listener.onReceiveStatus) === null || _b2 === void 0 ? void 0 : _b2.call(listener, status);
          }
        };
        super.start(metadata, wrapperListener);
        this.call.startRead();
      }
    };
    var BaseStreamingInterceptingCall = class extends BaseInterceptingCall {
    };
    function getBottomInterceptingCall(channel, options2, methodDefinition) {
      const call = getCall(channel, methodDefinition.path, options2);
      if (methodDefinition.responseStream) {
        return new BaseStreamingInterceptingCall(call, methodDefinition);
      } else {
        return new BaseUnaryInterceptingCall(call, methodDefinition);
      }
    }
    function getInterceptingCall(interceptorArgs, methodDefinition, options2, channel) {
      if (interceptorArgs.clientInterceptors.length > 0 && interceptorArgs.clientInterceptorProviders.length > 0) {
        throw new InterceptorConfigurationError("Both interceptors and interceptor_providers were passed as options to the client constructor. Only one of these is allowed.");
      }
      if (interceptorArgs.callInterceptors.length > 0 && interceptorArgs.callInterceptorProviders.length > 0) {
        throw new InterceptorConfigurationError("Both interceptors and interceptor_providers were passed as call options. Only one of these is allowed.");
      }
      let interceptors = [];
      if (interceptorArgs.callInterceptors.length > 0 || interceptorArgs.callInterceptorProviders.length > 0) {
        interceptors = [].concat(interceptorArgs.callInterceptors, interceptorArgs.callInterceptorProviders.map((provider) => provider(methodDefinition))).filter((interceptor) => interceptor);
      } else {
        interceptors = [].concat(interceptorArgs.clientInterceptors, interceptorArgs.clientInterceptorProviders.map((provider) => provider(methodDefinition))).filter((interceptor) => interceptor);
      }
      const interceptorOptions = Object.assign({}, options2, {
        method_definition: methodDefinition
      });
      const getCall2 = interceptors.reduceRight((nextCall, nextInterceptor) => {
        return (currentOptions) => nextInterceptor(currentOptions, nextCall);
      }, (finalOptions) => getBottomInterceptingCall(channel, finalOptions, methodDefinition));
      return getCall2(interceptorOptions);
    }
    exports2.getInterceptingCall = getInterceptingCall;
  }
});

// node_modules/@grpc/grpc-js/build/src/client.js
var require_client = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.Client = void 0;
    var call_1 = require_call();
    var channel_1 = require_channel();
    var constants_1 = require_constants();
    var metadata_1 = require_metadata();
    var client_interceptors_1 = require_client_interceptors();
    var CHANNEL_SYMBOL = Symbol();
    var INTERCEPTOR_SYMBOL = Symbol();
    var INTERCEPTOR_PROVIDER_SYMBOL = Symbol();
    var CALL_INVOCATION_TRANSFORMER_SYMBOL = Symbol();
    var Client = class {
      constructor(address, credentials, options2 = {}) {
        var _a, _b;
        options2 = Object.assign({}, options2);
        this[INTERCEPTOR_SYMBOL] = (_a = options2.interceptors) !== null && _a !== void 0 ? _a : [];
        delete options2.interceptors;
        this[INTERCEPTOR_PROVIDER_SYMBOL] = (_b = options2.interceptor_providers) !== null && _b !== void 0 ? _b : [];
        delete options2.interceptor_providers;
        if (this[INTERCEPTOR_SYMBOL].length > 0 && this[INTERCEPTOR_PROVIDER_SYMBOL].length > 0) {
          throw new Error("Both interceptors and interceptor_providers were passed as options to the client constructor. Only one of these is allowed.");
        }
        this[CALL_INVOCATION_TRANSFORMER_SYMBOL] = options2.callInvocationTransformer;
        delete options2.callInvocationTransformer;
        if (options2.channelOverride) {
          this[CHANNEL_SYMBOL] = options2.channelOverride;
        } else if (options2.channelFactoryOverride) {
          const channelFactoryOverride = options2.channelFactoryOverride;
          delete options2.channelFactoryOverride;
          this[CHANNEL_SYMBOL] = channelFactoryOverride(address, credentials, options2);
        } else {
          this[CHANNEL_SYMBOL] = new channel_1.ChannelImplementation(address, credentials, options2);
        }
      }
      close() {
        this[CHANNEL_SYMBOL].close();
      }
      getChannel() {
        return this[CHANNEL_SYMBOL];
      }
      waitForReady(deadline, callback) {
        const checkState = (err) => {
          if (err) {
            callback(new Error("Failed to connect before the deadline"));
            return;
          }
          let newState;
          try {
            newState = this[CHANNEL_SYMBOL].getConnectivityState(true);
          } catch (e) {
            callback(new Error("The channel has been closed"));
            return;
          }
          if (newState === channel_1.ConnectivityState.READY) {
            callback();
          } else {
            try {
              this[CHANNEL_SYMBOL].watchConnectivityState(newState, deadline, checkState);
            } catch (e) {
              callback(new Error("The channel has been closed"));
            }
          }
        };
        setImmediate(checkState);
      }
      checkOptionalUnaryResponseArguments(arg1, arg2, arg3) {
        if (arg1 instanceof Function) {
          return {metadata: new metadata_1.Metadata(), options: {}, callback: arg1};
        } else if (arg2 instanceof Function) {
          if (arg1 instanceof metadata_1.Metadata) {
            return {metadata: arg1, options: {}, callback: arg2};
          } else {
            return {metadata: new metadata_1.Metadata(), options: arg1, callback: arg2};
          }
        } else {
          if (!(arg1 instanceof metadata_1.Metadata && arg2 instanceof Object && arg3 instanceof Function)) {
            throw new Error("Incorrect arguments passed");
          }
          return {metadata: arg1, options: arg2, callback: arg3};
        }
      }
      makeUnaryRequest(method, serialize, deserialize, argument, metadata, options2, callback) {
        var _a, _b;
        const checkedArguments = this.checkOptionalUnaryResponseArguments(metadata, options2, callback);
        const methodDefinition = {
          path: method,
          requestStream: false,
          responseStream: false,
          requestSerialize: serialize,
          responseDeserialize: deserialize
        };
        let callProperties = {
          argument,
          metadata: checkedArguments.metadata,
          call: new call_1.ClientUnaryCallImpl(),
          channel: this[CHANNEL_SYMBOL],
          methodDefinition,
          callOptions: checkedArguments.options,
          callback: checkedArguments.callback
        };
        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {
          callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);
        }
        const emitter = callProperties.call;
        const interceptorArgs = {
          clientInterceptors: this[INTERCEPTOR_SYMBOL],
          clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],
          callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],
          callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []
        };
        const call = client_interceptors_1.getInterceptingCall(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);
        emitter.call = call;
        if (callProperties.callOptions.credentials) {
          call.setCredentials(callProperties.callOptions.credentials);
        }
        let responseMessage = null;
        let receivedStatus = false;
        call.start(callProperties.metadata, {
          onReceiveMetadata: (metadata2) => {
            emitter.emit("metadata", metadata2);
          },
          onReceiveMessage(message) {
            if (responseMessage !== null) {
              call.cancelWithStatus(constants_1.Status.INTERNAL, "Too many responses received");
            }
            responseMessage = message;
          },
          onReceiveStatus(status) {
            if (receivedStatus) {
              return;
            }
            receivedStatus = true;
            if (status.code === constants_1.Status.OK) {
              callProperties.callback(null, responseMessage);
            } else {
              callProperties.callback(call_1.callErrorFromStatus(status));
            }
            emitter.emit("status", status);
          }
        });
        call.sendMessage(argument);
        call.halfClose();
        return emitter;
      }
      makeClientStreamRequest(method, serialize, deserialize, metadata, options2, callback) {
        var _a, _b;
        const checkedArguments = this.checkOptionalUnaryResponseArguments(metadata, options2, callback);
        const methodDefinition = {
          path: method,
          requestStream: true,
          responseStream: false,
          requestSerialize: serialize,
          responseDeserialize: deserialize
        };
        let callProperties = {
          metadata: checkedArguments.metadata,
          call: new call_1.ClientWritableStreamImpl(serialize),
          channel: this[CHANNEL_SYMBOL],
          methodDefinition,
          callOptions: checkedArguments.options,
          callback: checkedArguments.callback
        };
        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {
          callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);
        }
        const emitter = callProperties.call;
        const interceptorArgs = {
          clientInterceptors: this[INTERCEPTOR_SYMBOL],
          clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],
          callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],
          callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []
        };
        const call = client_interceptors_1.getInterceptingCall(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);
        emitter.call = call;
        if (callProperties.callOptions.credentials) {
          call.setCredentials(callProperties.callOptions.credentials);
        }
        let responseMessage = null;
        let receivedStatus = false;
        call.start(callProperties.metadata, {
          onReceiveMetadata: (metadata2) => {
            emitter.emit("metadata", metadata2);
          },
          onReceiveMessage(message) {
            if (responseMessage !== null) {
              call.cancelWithStatus(constants_1.Status.INTERNAL, "Too many responses received");
            }
            responseMessage = message;
          },
          onReceiveStatus(status) {
            if (receivedStatus) {
              return;
            }
            receivedStatus = true;
            if (status.code === constants_1.Status.OK) {
              callProperties.callback(null, responseMessage);
            } else {
              callProperties.callback(call_1.callErrorFromStatus(status));
            }
            emitter.emit("status", status);
          }
        });
        return emitter;
      }
      checkMetadataAndOptions(arg1, arg2) {
        let metadata;
        let options2;
        if (arg1 instanceof metadata_1.Metadata) {
          metadata = arg1;
          if (arg2) {
            options2 = arg2;
          } else {
            options2 = {};
          }
        } else {
          if (arg1) {
            options2 = arg1;
          } else {
            options2 = {};
          }
          metadata = new metadata_1.Metadata();
        }
        return {metadata, options: options2};
      }
      makeServerStreamRequest(method, serialize, deserialize, argument, metadata, options2) {
        var _a, _b;
        const checkedArguments = this.checkMetadataAndOptions(metadata, options2);
        const methodDefinition = {
          path: method,
          requestStream: false,
          responseStream: true,
          requestSerialize: serialize,
          responseDeserialize: deserialize
        };
        let callProperties = {
          argument,
          metadata: checkedArguments.metadata,
          call: new call_1.ClientReadableStreamImpl(deserialize),
          channel: this[CHANNEL_SYMBOL],
          methodDefinition,
          callOptions: checkedArguments.options
        };
        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {
          callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);
        }
        const stream = callProperties.call;
        const interceptorArgs = {
          clientInterceptors: this[INTERCEPTOR_SYMBOL],
          clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],
          callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],
          callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []
        };
        const call = client_interceptors_1.getInterceptingCall(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);
        stream.call = call;
        if (callProperties.callOptions.credentials) {
          call.setCredentials(callProperties.callOptions.credentials);
        }
        let receivedStatus = false;
        call.start(callProperties.metadata, {
          onReceiveMetadata(metadata2) {
            stream.emit("metadata", metadata2);
          },
          onReceiveMessage(message) {
            stream.push(message);
          },
          onReceiveStatus(status) {
            if (receivedStatus) {
              return;
            }
            receivedStatus = true;
            stream.push(null);
            if (status.code !== constants_1.Status.OK) {
              stream.emit("error", call_1.callErrorFromStatus(status));
            }
            stream.emit("status", status);
          }
        });
        call.sendMessage(argument);
        call.halfClose();
        return stream;
      }
      makeBidiStreamRequest(method, serialize, deserialize, metadata, options2) {
        var _a, _b;
        const checkedArguments = this.checkMetadataAndOptions(metadata, options2);
        const methodDefinition = {
          path: method,
          requestStream: true,
          responseStream: true,
          requestSerialize: serialize,
          responseDeserialize: deserialize
        };
        let callProperties = {
          metadata: checkedArguments.metadata,
          call: new call_1.ClientDuplexStreamImpl(serialize, deserialize),
          channel: this[CHANNEL_SYMBOL],
          methodDefinition,
          callOptions: checkedArguments.options
        };
        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {
          callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);
        }
        const stream = callProperties.call;
        const interceptorArgs = {
          clientInterceptors: this[INTERCEPTOR_SYMBOL],
          clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],
          callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],
          callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []
        };
        const call = client_interceptors_1.getInterceptingCall(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);
        stream.call = call;
        if (callProperties.callOptions.credentials) {
          call.setCredentials(callProperties.callOptions.credentials);
        }
        let receivedStatus = false;
        call.start(callProperties.metadata, {
          onReceiveMetadata(metadata2) {
            stream.emit("metadata", metadata2);
          },
          onReceiveMessage(message) {
            stream.push(message);
          },
          onReceiveStatus(status) {
            if (receivedStatus) {
              return;
            }
            receivedStatus = true;
            stream.push(null);
            if (status.code !== constants_1.Status.OK) {
              stream.emit("error", call_1.callErrorFromStatus(status));
            }
            stream.emit("status", status);
          }
        });
        return stream;
      }
    };
    exports2.Client = Client;
  }
});

// node_modules/@grpc/grpc-js/build/src/make-client.js
var require_make_client = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/make-client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.loadPackageDefinition = exports2.makeClientConstructor = void 0;
    var client_1 = require_client();
    var requesterFuncs = {
      unary: client_1.Client.prototype.makeUnaryRequest,
      server_stream: client_1.Client.prototype.makeServerStreamRequest,
      client_stream: client_1.Client.prototype.makeClientStreamRequest,
      bidi: client_1.Client.prototype.makeBidiStreamRequest
    };
    function isPrototypePolluted(key) {
      return ["__proto__", "prototype", "constructor"].includes(key);
    }
    function makeClientConstructor(methods, serviceName, classOptions) {
      if (!classOptions) {
        classOptions = {};
      }
      class ServiceClientImpl extends client_1.Client {
      }
      Object.keys(methods).forEach((name) => {
        if (isPrototypePolluted(name)) {
          return;
        }
        const attrs = methods[name];
        let methodType;
        if (typeof name === "string" && name.charAt(0) === "$") {
          throw new Error("Method names cannot start with $");
        }
        if (attrs.requestStream) {
          if (attrs.responseStream) {
            methodType = "bidi";
          } else {
            methodType = "client_stream";
          }
        } else {
          if (attrs.responseStream) {
            methodType = "server_stream";
          } else {
            methodType = "unary";
          }
        }
        const serialize = attrs.requestSerialize;
        const deserialize = attrs.responseDeserialize;
        const methodFunc = partial(requesterFuncs[methodType], attrs.path, serialize, deserialize);
        ServiceClientImpl.prototype[name] = methodFunc;
        Object.assign(ServiceClientImpl.prototype[name], attrs);
        if (attrs.originalName && !isPrototypePolluted(attrs.originalName)) {
          ServiceClientImpl.prototype[attrs.originalName] = ServiceClientImpl.prototype[name];
        }
      });
      ServiceClientImpl.service = methods;
      return ServiceClientImpl;
    }
    exports2.makeClientConstructor = makeClientConstructor;
    function partial(fn, path, serialize, deserialize) {
      return function(...args) {
        return fn.call(this, path, serialize, deserialize, ...args);
      };
    }
    function isProtobufTypeDefinition(obj) {
      return "format" in obj;
    }
    function loadPackageDefinition(packageDef) {
      const result = {};
      for (const serviceFqn in packageDef) {
        if (Object.prototype.hasOwnProperty.call(packageDef, serviceFqn)) {
          const service = packageDef[serviceFqn];
          const nameComponents = serviceFqn.split(".");
          if (nameComponents.some((comp) => isPrototypePolluted(comp))) {
            continue;
          }
          const serviceName = nameComponents[nameComponents.length - 1];
          let current = result;
          for (const packageName of nameComponents.slice(0, -1)) {
            if (!current[packageName]) {
              current[packageName] = {};
            }
            current = current[packageName];
          }
          if (isProtobufTypeDefinition(service)) {
            current[serviceName] = service;
          } else {
            current[serviceName] = makeClientConstructor(service, serviceName, {});
          }
        }
      }
      return result;
    }
    exports2.loadPackageDefinition = loadPackageDefinition;
  }
});

// node_modules/@grpc/grpc-js/build/src/server-call.js
var require_server_call = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/server-call.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.Http2ServerCallStream = exports2.ServerDuplexStreamImpl = exports2.ServerWritableStreamImpl = exports2.ServerReadableStreamImpl = exports2.ServerUnaryCallImpl = void 0;
    var events_1 = require("events");
    var http2 = require("http2");
    var stream_1 = require("stream");
    var constants_1 = require_constants();
    var metadata_1 = require_metadata();
    var stream_decoder_1 = require_stream_decoder();
    var logging = require_logging();
    var TRACER_NAME = "server_call";
    function trace(text) {
      logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);
    }
    var GRPC_ACCEPT_ENCODING_HEADER = "grpc-accept-encoding";
    var GRPC_ENCODING_HEADER = "grpc-encoding";
    var GRPC_MESSAGE_HEADER = "grpc-message";
    var GRPC_STATUS_HEADER = "grpc-status";
    var GRPC_TIMEOUT_HEADER = "grpc-timeout";
    var DEADLINE_REGEX = /(\d{1,8})\s*([HMSmun])/;
    var deadlineUnitsToMs = {
      H: 36e5,
      M: 6e4,
      S: 1e3,
      m: 1,
      u: 1e-3,
      n: 1e-6
    };
    var defaultResponseHeaders = {
      [GRPC_ACCEPT_ENCODING_HEADER]: "identity",
      [GRPC_ENCODING_HEADER]: "identity",
      [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_OK,
      [http2.constants.HTTP2_HEADER_CONTENT_TYPE]: "application/grpc+proto"
    };
    var defaultResponseOptions = {
      waitForTrailers: true
    };
    var ServerUnaryCallImpl = class extends events_1.EventEmitter {
      constructor(call, metadata, request) {
        super();
        this.call = call;
        this.metadata = metadata;
        this.request = request;
        this.cancelled = false;
        this.call.setupSurfaceCall(this);
      }
      getPeer() {
        return this.call.getPeer();
      }
      sendMetadata(responseMetadata) {
        this.call.sendMetadata(responseMetadata);
      }
      getDeadline() {
        return this.call.getDeadline();
      }
    };
    exports2.ServerUnaryCallImpl = ServerUnaryCallImpl;
    var ServerReadableStreamImpl = class extends stream_1.Readable {
      constructor(call, metadata, deserialize) {
        super({objectMode: true});
        this.call = call;
        this.metadata = metadata;
        this.deserialize = deserialize;
        this.cancelled = false;
        this.call.setupSurfaceCall(this);
        this.call.setupReadable(this);
      }
      _read(size) {
        if (!this.call.consumeUnpushedMessages(this)) {
          return;
        }
        this.call.resume();
      }
      getPeer() {
        return this.call.getPeer();
      }
      sendMetadata(responseMetadata) {
        this.call.sendMetadata(responseMetadata);
      }
      getDeadline() {
        return this.call.getDeadline();
      }
    };
    exports2.ServerReadableStreamImpl = ServerReadableStreamImpl;
    var ServerWritableStreamImpl = class extends stream_1.Writable {
      constructor(call, metadata, serialize, request) {
        super({objectMode: true});
        this.call = call;
        this.metadata = metadata;
        this.serialize = serialize;
        this.request = request;
        this.cancelled = false;
        this.trailingMetadata = new metadata_1.Metadata();
        this.call.setupSurfaceCall(this);
        this.on("error", (err) => {
          this.call.sendError(err);
          this.end();
        });
      }
      getPeer() {
        return this.call.getPeer();
      }
      sendMetadata(responseMetadata) {
        this.call.sendMetadata(responseMetadata);
      }
      getDeadline() {
        return this.call.getDeadline();
      }
      _write(chunk, encoding, callback) {
        try {
          const response = this.call.serializeMessage(chunk);
          if (!this.call.write(response)) {
            this.call.once("drain", callback);
            return;
          }
        } catch (err) {
          err.code = constants_1.Status.INTERNAL;
          this.emit("error", err);
        }
        callback();
      }
      _final(callback) {
        this.call.sendStatus({
          code: constants_1.Status.OK,
          details: "OK",
          metadata: this.trailingMetadata
        });
        callback(null);
      }
      end(metadata) {
        if (metadata) {
          this.trailingMetadata = metadata;
        }
        super.end();
      }
    };
    exports2.ServerWritableStreamImpl = ServerWritableStreamImpl;
    var ServerDuplexStreamImpl = class extends stream_1.Duplex {
      constructor(call, metadata, serialize, deserialize) {
        super({objectMode: true});
        this.call = call;
        this.metadata = metadata;
        this.serialize = serialize;
        this.deserialize = deserialize;
        this.cancelled = false;
        this.trailingMetadata = new metadata_1.Metadata();
        this.call.setupSurfaceCall(this);
        this.call.setupReadable(this);
        this.on("error", (err) => {
          this.call.sendError(err);
          this.end();
        });
      }
      getPeer() {
        return this.call.getPeer();
      }
      sendMetadata(responseMetadata) {
        this.call.sendMetadata(responseMetadata);
      }
      getDeadline() {
        return this.call.getDeadline();
      }
      end(metadata) {
        if (metadata) {
          this.trailingMetadata = metadata;
        }
        super.end();
      }
    };
    exports2.ServerDuplexStreamImpl = ServerDuplexStreamImpl;
    ServerDuplexStreamImpl.prototype._read = ServerReadableStreamImpl.prototype._read;
    ServerDuplexStreamImpl.prototype._write = ServerWritableStreamImpl.prototype._write;
    ServerDuplexStreamImpl.prototype._final = ServerWritableStreamImpl.prototype._final;
    ServerDuplexStreamImpl.prototype.end = ServerWritableStreamImpl.prototype.end;
    var Http2ServerCallStream = class extends events_1.EventEmitter {
      constructor(stream, handler, options2) {
        super();
        this.stream = stream;
        this.handler = handler;
        this.options = options2;
        this.cancelled = false;
        this.deadlineTimer = setTimeout(() => {
        }, 0);
        this.deadline = Infinity;
        this.wantTrailers = false;
        this.metadataSent = false;
        this.canPush = false;
        this.isPushPending = false;
        this.bufferedMessages = [];
        this.messagesToPush = [];
        this.maxSendMessageSize = constants_1.DEFAULT_MAX_SEND_MESSAGE_LENGTH;
        this.maxReceiveMessageSize = constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;
        this.stream.once("error", (err) => {
        });
        this.stream.once("close", () => {
          var _a;
          trace("Request to method " + ((_a = this.handler) === null || _a === void 0 ? void 0 : _a.path) + " stream closed with rstCode " + this.stream.rstCode);
          this.cancelled = true;
          this.emit("cancelled", "cancelled");
        });
        this.stream.on("drain", () => {
          this.emit("drain");
        });
        if ("grpc.max_send_message_length" in options2) {
          this.maxSendMessageSize = options2["grpc.max_send_message_length"];
        }
        if ("grpc.max_receive_message_length" in options2) {
          this.maxReceiveMessageSize = options2["grpc.max_receive_message_length"];
        }
        clearTimeout(this.deadlineTimer);
      }
      checkCancelled() {
        if (this.stream.destroyed) {
          this.cancelled = true;
        }
        return this.cancelled;
      }
      sendMetadata(customMetadata) {
        if (this.checkCancelled()) {
          return;
        }
        if (this.metadataSent) {
          return;
        }
        this.metadataSent = true;
        const custom = customMetadata ? customMetadata.toHttp2Headers() : null;
        const headers = Object.assign({}, defaultResponseHeaders, custom);
        this.stream.respond(headers, defaultResponseOptions);
      }
      receiveMetadata(headers) {
        const metadata = metadata_1.Metadata.fromHttp2Headers(headers);
        const timeoutHeader = metadata.get(GRPC_TIMEOUT_HEADER);
        if (timeoutHeader.length > 0) {
          const match = timeoutHeader[0].toString().match(DEADLINE_REGEX);
          if (match === null) {
            const err = new Error("Invalid deadline");
            err.code = constants_1.Status.OUT_OF_RANGE;
            this.sendError(err);
            return;
          }
          const timeout = +match[1] * deadlineUnitsToMs[match[2]] | 0;
          const now = new Date();
          this.deadline = now.setMilliseconds(now.getMilliseconds() + timeout);
          this.deadlineTimer = setTimeout(handleExpiredDeadline, timeout, this);
          metadata.remove(GRPC_TIMEOUT_HEADER);
        }
        metadata.remove(http2.constants.HTTP2_HEADER_ACCEPT_ENCODING);
        metadata.remove(http2.constants.HTTP2_HEADER_TE);
        metadata.remove(http2.constants.HTTP2_HEADER_CONTENT_TYPE);
        metadata.remove("grpc-encoding");
        metadata.remove("grpc-accept-encoding");
        return metadata;
      }
      receiveUnaryMessage() {
        return new Promise((resolve2, reject) => {
          const stream = this.stream;
          const chunks = [];
          let totalLength = 0;
          stream.on("data", (data) => {
            chunks.push(data);
            totalLength += data.byteLength;
          });
          stream.once("end", async () => {
            try {
              const requestBytes = Buffer.concat(chunks, totalLength);
              if (this.maxReceiveMessageSize !== -1 && requestBytes.length > this.maxReceiveMessageSize) {
                this.sendError({
                  code: constants_1.Status.RESOURCE_EXHAUSTED,
                  details: `Received message larger than max (${requestBytes.length} vs. ${this.maxReceiveMessageSize})`
                });
                resolve2();
              }
              resolve2(this.deserializeMessage(requestBytes));
            } catch (err) {
              err.code = constants_1.Status.INTERNAL;
              this.sendError(err);
              resolve2();
            }
          });
        });
      }
      serializeMessage(value) {
        const messageBuffer = this.handler.serialize(value);
        const byteLength = messageBuffer.byteLength;
        const output = Buffer.allocUnsafe(byteLength + 5);
        output.writeUInt8(0, 0);
        output.writeUInt32BE(byteLength, 1);
        messageBuffer.copy(output, 5);
        return output;
      }
      deserializeMessage(bytes) {
        const receivedMessage = bytes.slice(5);
        return this.handler.deserialize(receivedMessage);
      }
      async sendUnaryMessage(err, value, metadata, flags) {
        if (this.checkCancelled()) {
          return;
        }
        if (!metadata) {
          metadata = new metadata_1.Metadata();
        }
        if (err) {
          if (!Object.prototype.hasOwnProperty.call(err, "metadata")) {
            err.metadata = metadata;
          }
          this.sendError(err);
          return;
        }
        try {
          const response = this.serializeMessage(value);
          this.write(response);
          this.sendStatus({code: constants_1.Status.OK, details: "OK", metadata});
        } catch (err2) {
          err2.code = constants_1.Status.INTERNAL;
          this.sendError(err2);
        }
      }
      sendStatus(statusObj) {
        var _a;
        if (this.checkCancelled()) {
          return;
        }
        trace("Request to method " + ((_a = this.handler) === null || _a === void 0 ? void 0 : _a.path) + " ended with status code: " + constants_1.Status[statusObj.code] + " details: " + statusObj.details);
        clearTimeout(this.deadlineTimer);
        if (!this.wantTrailers) {
          this.wantTrailers = true;
          this.stream.once("wantTrailers", () => {
            const trailersToSend = Object.assign({
              [GRPC_STATUS_HEADER]: statusObj.code,
              [GRPC_MESSAGE_HEADER]: encodeURI(statusObj.details)
            }, statusObj.metadata.toHttp2Headers());
            this.stream.sendTrailers(trailersToSend);
          });
          this.sendMetadata();
          this.stream.end();
        }
      }
      sendError(error3) {
        if (this.checkCancelled()) {
          return;
        }
        const status = {
          code: constants_1.Status.UNKNOWN,
          details: "message" in error3 ? error3.message : "Unknown Error",
          metadata: "metadata" in error3 && error3.metadata !== void 0 ? error3.metadata : new metadata_1.Metadata()
        };
        if ("code" in error3 && typeof error3.code === "number" && Number.isInteger(error3.code)) {
          status.code = error3.code;
          if ("details" in error3 && typeof error3.details === "string") {
            status.details = error3.details;
          }
        }
        this.sendStatus(status);
      }
      write(chunk) {
        if (this.checkCancelled()) {
          return;
        }
        if (this.maxSendMessageSize !== -1 && chunk.length > this.maxSendMessageSize) {
          this.sendError({
            code: constants_1.Status.RESOURCE_EXHAUSTED,
            details: `Sent message larger than max (${chunk.length} vs. ${this.maxSendMessageSize})`
          });
          return;
        }
        this.sendMetadata();
        return this.stream.write(chunk);
      }
      resume() {
        this.stream.resume();
      }
      setupSurfaceCall(call) {
        this.once("cancelled", (reason) => {
          call.cancelled = true;
          call.emit("cancelled", reason);
        });
      }
      setupReadable(readable) {
        const decoder = new stream_decoder_1.StreamDecoder();
        this.stream.on("data", async (data) => {
          const messages = decoder.write(data);
          for (const message of messages) {
            if (this.maxReceiveMessageSize !== -1 && message.length > this.maxReceiveMessageSize) {
              this.sendError({
                code: constants_1.Status.RESOURCE_EXHAUSTED,
                details: `Received message larger than max (${message.length} vs. ${this.maxReceiveMessageSize})`
              });
              return;
            }
            this.pushOrBufferMessage(readable, message);
          }
        });
        this.stream.once("end", () => {
          this.pushOrBufferMessage(readable, null);
        });
      }
      consumeUnpushedMessages(readable) {
        this.canPush = true;
        while (this.messagesToPush.length > 0) {
          const nextMessage = this.messagesToPush.shift();
          const canPush = readable.push(nextMessage);
          if (nextMessage === null || canPush === false) {
            this.canPush = false;
            break;
          }
        }
        return this.canPush;
      }
      pushOrBufferMessage(readable, messageBytes) {
        if (this.isPushPending) {
          this.bufferedMessages.push(messageBytes);
        } else {
          this.pushMessage(readable, messageBytes);
        }
      }
      async pushMessage(readable, messageBytes) {
        if (messageBytes === null) {
          if (this.canPush) {
            readable.push(null);
          } else {
            this.messagesToPush.push(null);
          }
          return;
        }
        this.isPushPending = true;
        try {
          const deserialized = await this.deserializeMessage(messageBytes);
          if (this.canPush) {
            if (!readable.push(deserialized)) {
              this.canPush = false;
              this.stream.pause();
            }
          } else {
            this.messagesToPush.push(deserialized);
          }
        } catch (error3) {
          this.bufferedMessages.length = 0;
          if (!("code" in error3 && typeof error3.code === "number" && Number.isInteger(error3.code) && error3.code >= constants_1.Status.OK && error3.code <= constants_1.Status.UNAUTHENTICATED)) {
            error3.code = constants_1.Status.INTERNAL;
          }
          readable.emit("error", error3);
        }
        this.isPushPending = false;
        if (this.bufferedMessages.length > 0) {
          this.pushMessage(readable, this.bufferedMessages.shift());
        }
      }
      getPeer() {
        const socket = this.stream.session.socket;
        if (socket.remoteAddress) {
          if (socket.remotePort) {
            return `${socket.remoteAddress}:${socket.remotePort}`;
          } else {
            return socket.remoteAddress;
          }
        } else {
          return "unknown";
        }
      }
      getDeadline() {
        return this.deadline;
      }
    };
    exports2.Http2ServerCallStream = Http2ServerCallStream;
    function handleExpiredDeadline(call) {
      const err = new Error("Deadline exceeded");
      err.code = constants_1.Status.DEADLINE_EXCEEDED;
      call.sendError(err);
      call.cancelled = true;
      call.emit("cancelled", "deadline");
    }
  }
});

// node_modules/@grpc/grpc-js/build/src/server.js
var require_server = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/server.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.Server = void 0;
    var http2 = require("http2");
    var constants_1 = require_constants();
    var metadata_1 = require_metadata();
    var server_call_1 = require_server_call();
    var resolver_1 = require_resolver();
    var logging = require_logging();
    var subchannel_1 = require_subchannel();
    var uri_parser_1 = require_uri_parser();
    var TRACER_NAME = "server";
    function trace(text) {
      logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);
    }
    function noop3() {
    }
    function getUnimplementedStatusResponse(methodName) {
      return {
        code: constants_1.Status.UNIMPLEMENTED,
        details: `The server does not implement the method ${methodName}`,
        metadata: new metadata_1.Metadata()
      };
    }
    function getDefaultHandler(handlerType, methodName) {
      const unimplementedStatusResponse = getUnimplementedStatusResponse(methodName);
      switch (handlerType) {
        case "unary":
          return (call, callback) => {
            callback(unimplementedStatusResponse, null);
          };
        case "clientStream":
          return (call, callback) => {
            callback(unimplementedStatusResponse, null);
          };
        case "serverStream":
          return (call) => {
            call.emit("error", unimplementedStatusResponse);
          };
        case "bidi":
          return (call) => {
            call.emit("error", unimplementedStatusResponse);
          };
        default:
          throw new Error(`Invalid handlerType ${handlerType}`);
      }
    }
    var Server = class {
      constructor(options2) {
        this.http2ServerList = [];
        this.handlers = new Map();
        this.sessions = new Set();
        this.started = false;
        this.options = options2 !== null && options2 !== void 0 ? options2 : {};
      }
      addProtoService() {
        throw new Error("Not implemented. Use addService() instead");
      }
      addService(service, implementation) {
        if (service === null || typeof service !== "object" || implementation === null || typeof implementation !== "object") {
          throw new Error("addService() requires two objects as arguments");
        }
        const serviceKeys = Object.keys(service);
        if (serviceKeys.length === 0) {
          throw new Error("Cannot add an empty service to a server");
        }
        serviceKeys.forEach((name) => {
          const attrs = service[name];
          let methodType;
          if (attrs.requestStream) {
            if (attrs.responseStream) {
              methodType = "bidi";
            } else {
              methodType = "clientStream";
            }
          } else {
            if (attrs.responseStream) {
              methodType = "serverStream";
            } else {
              methodType = "unary";
            }
          }
          let implFn = implementation[name];
          let impl;
          if (implFn === void 0 && typeof attrs.originalName === "string") {
            implFn = implementation[attrs.originalName];
          }
          if (implFn !== void 0) {
            impl = implFn.bind(implementation);
          } else {
            impl = getDefaultHandler(methodType, name);
          }
          const success = this.register(attrs.path, impl, attrs.responseSerialize, attrs.requestDeserialize, methodType);
          if (success === false) {
            throw new Error(`Method handler for ${attrs.path} already provided.`);
          }
        });
      }
      removeService(service) {
        if (service === null || typeof service !== "object") {
          throw new Error("removeService() requires object as argument");
        }
        const serviceKeys = Object.keys(service);
        serviceKeys.forEach((name) => {
          const attrs = service[name];
          this.unregister(attrs.path);
        });
      }
      bind(port, creds) {
        throw new Error("Not implemented. Use bindAsync() instead");
      }
      bindAsync(port, creds, callback) {
        if (this.started === true) {
          throw new Error("server is already started");
        }
        if (typeof port !== "string") {
          throw new TypeError("port must be a string");
        }
        if (creds === null || typeof creds !== "object") {
          throw new TypeError("creds must be an object");
        }
        if (typeof callback !== "function") {
          throw new TypeError("callback must be a function");
        }
        const initialPortUri = uri_parser_1.parseUri(port);
        if (initialPortUri === null) {
          throw new Error(`Could not parse port "${port}"`);
        }
        const portUri = resolver_1.mapUriDefaultScheme(initialPortUri);
        if (portUri === null) {
          throw new Error(`Could not get a default scheme for port "${port}"`);
        }
        const serverOptions = {
          maxSendHeaderBlockLength: Number.MAX_SAFE_INTEGER
        };
        if ("grpc-node.max_session_memory" in this.options) {
          serverOptions.maxSessionMemory = this.options["grpc-node.max_session_memory"];
        }
        if ("grpc.max_concurrent_streams" in this.options) {
          serverOptions.settings = {
            maxConcurrentStreams: this.options["grpc.max_concurrent_streams"]
          };
        }
        const setupServer = () => {
          let http2Server;
          if (creds._isSecure()) {
            const secureServerOptions = Object.assign(serverOptions, creds._getSettings());
            http2Server = http2.createSecureServer(secureServerOptions);
          } else {
            http2Server = http2.createServer(serverOptions);
          }
          http2Server.setTimeout(0, noop3);
          this._setupHandlers(http2Server);
          return http2Server;
        };
        const bindSpecificPort = (addressList, portNum, previousCount) => {
          if (addressList.length === 0) {
            return Promise.resolve({port: portNum, count: previousCount});
          }
          return Promise.all(addressList.map((address) => {
            trace("Attempting to bind " + subchannel_1.subchannelAddressToString(address));
            let addr;
            if (subchannel_1.isTcpSubchannelAddress(address)) {
              addr = {
                host: address.host,
                port: portNum
              };
            } else {
              addr = address;
            }
            const http2Server = setupServer();
            return new Promise((resolve2, reject) => {
              function onError(err) {
                resolve2(err);
              }
              http2Server.once("error", onError);
              http2Server.listen(addr, () => {
                trace("Successfully bound " + subchannel_1.subchannelAddressToString(address));
                this.http2ServerList.push(http2Server);
                const boundAddress = http2Server.address();
                if (typeof boundAddress === "string") {
                  resolve2(portNum);
                } else {
                  resolve2(boundAddress.port);
                }
                http2Server.removeListener("error", onError);
              });
            });
          })).then((results) => {
            let count = 0;
            for (const result of results) {
              if (typeof result === "number") {
                count += 1;
                if (result !== portNum) {
                  throw new Error("Invalid state: multiple port numbers added from single address");
                }
              }
            }
            return {
              port: portNum,
              count: count + previousCount
            };
          });
        };
        const bindWildcardPort = (addressList) => {
          if (addressList.length === 0) {
            return Promise.resolve({port: 0, count: 0});
          }
          const address = addressList[0];
          const http2Server = setupServer();
          return new Promise((resolve2, reject) => {
            function onError(err) {
              resolve2(bindWildcardPort(addressList.slice(1)));
            }
            http2Server.once("error", onError);
            http2Server.listen(address, () => {
              this.http2ServerList.push(http2Server);
              resolve2(bindSpecificPort(addressList.slice(1), http2Server.address().port, 1));
              http2Server.removeListener("error", onError);
            });
          });
        };
        const resolverListener = {
          onSuccessfulResolution: (addressList, serviceConfig, serviceConfigError) => {
            resolverListener.onSuccessfulResolution = () => {
            };
            if (addressList.length === 0) {
              callback(new Error(`No addresses resolved for port ${port}`), 0);
              return;
            }
            let bindResultPromise;
            if (subchannel_1.isTcpSubchannelAddress(addressList[0])) {
              if (addressList[0].port === 0) {
                bindResultPromise = bindWildcardPort(addressList);
              } else {
                bindResultPromise = bindSpecificPort(addressList, addressList[0].port, 0);
              }
            } else {
              bindResultPromise = bindSpecificPort(addressList, 1, 0);
            }
            bindResultPromise.then((bindResult) => {
              if (bindResult.count === 0) {
                const errorString = `No address added out of total ${addressList.length} resolved`;
                logging.log(constants_1.LogVerbosity.ERROR, errorString);
                callback(new Error(errorString), 0);
              } else {
                if (bindResult.count < addressList.length) {
                  logging.log(constants_1.LogVerbosity.INFO, `WARNING Only ${bindResult.count} addresses added out of total ${addressList.length} resolved`);
                }
                callback(null, bindResult.port);
              }
            }, (error3) => {
              const errorString = `No address added out of total ${addressList.length} resolved`;
              logging.log(constants_1.LogVerbosity.ERROR, errorString);
              callback(new Error(errorString), 0);
            });
          },
          onError: (error3) => {
            callback(new Error(error3.details), 0);
          }
        };
        const resolver = resolver_1.createResolver(portUri, resolverListener, this.options);
        resolver.updateResolution();
      }
      forceShutdown() {
        for (const http2Server of this.http2ServerList) {
          if (http2Server.listening) {
            http2Server.close();
          }
        }
        this.started = false;
        this.sessions.forEach((session2) => {
          session2.destroy(http2.constants.NGHTTP2_CANCEL);
        });
        this.sessions.clear();
      }
      register(name, handler, serialize, deserialize, type) {
        if (this.handlers.has(name)) {
          return false;
        }
        this.handlers.set(name, {
          func: handler,
          serialize,
          deserialize,
          type,
          path: name
        });
        return true;
      }
      unregister(name) {
        return this.handlers.delete(name);
      }
      start() {
        if (this.http2ServerList.length === 0 || this.http2ServerList.every((http2Server) => http2Server.listening !== true)) {
          throw new Error("server must be bound in order to start");
        }
        if (this.started === true) {
          throw new Error("server is already started");
        }
        this.started = true;
      }
      tryShutdown(callback) {
        let pendingChecks = 0;
        function maybeCallback() {
          pendingChecks--;
          if (pendingChecks === 0) {
            callback();
          }
        }
        this.started = false;
        for (const http2Server of this.http2ServerList) {
          if (http2Server.listening) {
            pendingChecks++;
            http2Server.close(maybeCallback);
          }
        }
        this.sessions.forEach((session2) => {
          if (!session2.closed) {
            pendingChecks += 1;
            session2.close(maybeCallback);
          }
        });
        if (pendingChecks === 0) {
          callback();
        }
      }
      addHttp2Port() {
        throw new Error("Not yet implemented");
      }
      _setupHandlers(http2Server) {
        if (http2Server === null) {
          return;
        }
        http2Server.on("stream", (stream, headers) => {
          const contentType = headers[http2.constants.HTTP2_HEADER_CONTENT_TYPE];
          if (typeof contentType !== "string" || !contentType.startsWith("application/grpc")) {
            stream.respond({
              [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE
            }, {endStream: true});
            return;
          }
          try {
            const path = headers[http2.constants.HTTP2_HEADER_PATH];
            const serverAddress = http2Server.address();
            let serverAddressString = "null";
            if (serverAddress) {
              if (typeof serverAddress === "string") {
                serverAddressString = serverAddress;
              } else {
                serverAddressString = serverAddress.address + ":" + serverAddress.port;
              }
            }
            trace("Received call to method " + path + " at address " + serverAddressString);
            const handler = this.handlers.get(path);
            if (handler === void 0) {
              trace("No handler registered for method " + path + ". Sending UNIMPLEMENTED status.");
              throw getUnimplementedStatusResponse(path);
            }
            const call = new server_call_1.Http2ServerCallStream(stream, handler, this.options);
            const metadata = call.receiveMetadata(headers);
            switch (handler.type) {
              case "unary":
                handleUnary(call, handler, metadata);
                break;
              case "clientStream":
                handleClientStreaming(call, handler, metadata);
                break;
              case "serverStream":
                handleServerStreaming(call, handler, metadata);
                break;
              case "bidi":
                handleBidiStreaming(call, handler, metadata);
                break;
              default:
                throw new Error(`Unknown handler type: ${handler.type}`);
            }
          } catch (err) {
            const call = new server_call_1.Http2ServerCallStream(stream, null, this.options);
            if (err.code === void 0) {
              err.code = constants_1.Status.INTERNAL;
            }
            call.sendError(err);
          }
        });
        http2Server.on("session", (session2) => {
          if (!this.started) {
            session2.destroy();
            return;
          }
          this.sessions.add(session2);
          session2.on("close", () => {
            this.sessions.delete(session2);
          });
        });
      }
    };
    exports2.Server = Server;
    async function handleUnary(call, handler, metadata) {
      const request = await call.receiveUnaryMessage();
      if (request === void 0 || call.cancelled) {
        return;
      }
      const emitter = new server_call_1.ServerUnaryCallImpl(call, metadata, request);
      handler.func(emitter, (err, value, trailer, flags) => {
        call.sendUnaryMessage(err, value, trailer, flags);
      });
    }
    function handleClientStreaming(call, handler, metadata) {
      const stream = new server_call_1.ServerReadableStreamImpl(call, metadata, handler.deserialize);
      function respond2(err, value, trailer, flags) {
        stream.destroy();
        call.sendUnaryMessage(err, value, trailer, flags);
      }
      if (call.cancelled) {
        return;
      }
      stream.on("error", respond2);
      handler.func(stream, respond2);
    }
    async function handleServerStreaming(call, handler, metadata) {
      const request = await call.receiveUnaryMessage();
      if (request === void 0 || call.cancelled) {
        return;
      }
      const stream = new server_call_1.ServerWritableStreamImpl(call, metadata, handler.serialize, request);
      handler.func(stream);
    }
    function handleBidiStreaming(call, handler, metadata) {
      const stream = new server_call_1.ServerDuplexStreamImpl(call, metadata, handler.serialize, handler.deserialize);
      if (call.cancelled) {
        return;
      }
      handler.func(stream);
    }
  }
});

// node_modules/@grpc/grpc-js/build/src/server-credentials.js
var require_server_credentials = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/server-credentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.ServerCredentials = void 0;
    var tls_helpers_1 = require_tls_helpers();
    var ServerCredentials = class {
      static createInsecure() {
        return new InsecureServerCredentials();
      }
      static createSsl(rootCerts, keyCertPairs, checkClientCertificate = false) {
        if (rootCerts !== null && !Buffer.isBuffer(rootCerts)) {
          throw new TypeError("rootCerts must be null or a Buffer");
        }
        if (!Array.isArray(keyCertPairs)) {
          throw new TypeError("keyCertPairs must be an array");
        }
        if (typeof checkClientCertificate !== "boolean") {
          throw new TypeError("checkClientCertificate must be a boolean");
        }
        const cert = [];
        const key = [];
        for (let i = 0; i < keyCertPairs.length; i++) {
          const pair = keyCertPairs[i];
          if (pair === null || typeof pair !== "object") {
            throw new TypeError(`keyCertPair[${i}] must be an object`);
          }
          if (!Buffer.isBuffer(pair.private_key)) {
            throw new TypeError(`keyCertPair[${i}].private_key must be a Buffer`);
          }
          if (!Buffer.isBuffer(pair.cert_chain)) {
            throw new TypeError(`keyCertPair[${i}].cert_chain must be a Buffer`);
          }
          cert.push(pair.cert_chain);
          key.push(pair.private_key);
        }
        return new SecureServerCredentials({
          ca: rootCerts || tls_helpers_1.getDefaultRootsData() || void 0,
          cert,
          key,
          requestCert: checkClientCertificate,
          ciphers: tls_helpers_1.CIPHER_SUITES
        });
      }
    };
    exports2.ServerCredentials = ServerCredentials;
    var InsecureServerCredentials = class extends ServerCredentials {
      _isSecure() {
        return false;
      }
      _getSettings() {
        return null;
      }
    };
    var SecureServerCredentials = class extends ServerCredentials {
      constructor(options2) {
        super();
        this.options = options2;
      }
      _isSecure() {
        return true;
      }
      _getSettings() {
        return this.options;
      }
    };
  }
});

// node_modules/@grpc/grpc-js/build/src/status-builder.js
var require_status_builder = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/status-builder.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.StatusBuilder = void 0;
    var StatusBuilder = class {
      constructor() {
        this.code = null;
        this.details = null;
        this.metadata = null;
      }
      withCode(code) {
        this.code = code;
        return this;
      }
      withDetails(details) {
        this.details = details;
        return this;
      }
      withMetadata(metadata) {
        this.metadata = metadata;
        return this;
      }
      build() {
        const status = {};
        if (this.code !== null) {
          status.code = this.code;
        }
        if (this.details !== null) {
          status.details = this.details;
        }
        if (this.metadata !== null) {
          status.metadata = this.metadata;
        }
        return status;
      }
    };
    exports2.StatusBuilder = StatusBuilder;
  }
});

// node_modules/@grpc/grpc-js/build/src/experimental.js
var require_experimental = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/experimental.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    var logging_1 = require_logging();
    Object.defineProperty(exports2, "trace", {enumerable: true, get: function() {
      return logging_1.trace;
    }});
    var resolver_1 = require_resolver();
    Object.defineProperty(exports2, "registerResolver", {enumerable: true, get: function() {
      return resolver_1.registerResolver;
    }});
    var uri_parser_1 = require_uri_parser();
    Object.defineProperty(exports2, "uriToString", {enumerable: true, get: function() {
      return uri_parser_1.uriToString;
    }});
    var backoff_timeout_1 = require_backoff_timeout();
    Object.defineProperty(exports2, "BackoffTimeout", {enumerable: true, get: function() {
      return backoff_timeout_1.BackoffTimeout;
    }});
    var load_balancer_1 = require_load_balancer();
    Object.defineProperty(exports2, "registerLoadBalancerType", {enumerable: true, get: function() {
      return load_balancer_1.registerLoadBalancerType;
    }});
    Object.defineProperty(exports2, "getFirstUsableConfig", {enumerable: true, get: function() {
      return load_balancer_1.getFirstUsableConfig;
    }});
    Object.defineProperty(exports2, "validateLoadBalancingConfig", {enumerable: true, get: function() {
      return load_balancer_1.validateLoadBalancingConfig;
    }});
    var subchannel_1 = require_subchannel();
    Object.defineProperty(exports2, "subchannelAddressToString", {enumerable: true, get: function() {
      return subchannel_1.subchannelAddressToString;
    }});
    var load_balancer_child_handler_1 = require_load_balancer_child_handler();
    Object.defineProperty(exports2, "ChildLoadBalancerHandler", {enumerable: true, get: function() {
      return load_balancer_child_handler_1.ChildLoadBalancerHandler;
    }});
    var picker_1 = require_picker();
    Object.defineProperty(exports2, "UnavailablePicker", {enumerable: true, get: function() {
      return picker_1.UnavailablePicker;
    }});
    Object.defineProperty(exports2, "QueuePicker", {enumerable: true, get: function() {
      return picker_1.QueuePicker;
    }});
    Object.defineProperty(exports2, "PickResultType", {enumerable: true, get: function() {
      return picker_1.PickResultType;
    }});
    var filter_1 = require_filter();
    Object.defineProperty(exports2, "BaseFilter", {enumerable: true, get: function() {
      return filter_1.BaseFilter;
    }});
    var filter_stack_1 = require_filter_stack();
    Object.defineProperty(exports2, "FilterStackFactory", {enumerable: true, get: function() {
      return filter_stack_1.FilterStackFactory;
    }});
  }
});

// node_modules/@grpc/grpc-js/build/src/index.js
var require_src = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    exports2.experimental = exports2.StatusBuilder = exports2.getClientChannel = exports2.ServerCredentials = exports2.Server = exports2.setLogVerbosity = exports2.setLogger = exports2.load = exports2.loadObject = exports2.CallCredentials = exports2.ChannelCredentials = exports2.waitForClientReady = exports2.closeClient = exports2.Channel = exports2.makeGenericClientConstructor = exports2.makeClientConstructor = exports2.loadPackageDefinition = exports2.Client = exports2.propagate = exports2.connectivityState = exports2.status = exports2.logVerbosity = exports2.Metadata = exports2.credentials = void 0;
    var call_credentials_1 = require_call_credentials();
    Object.defineProperty(exports2, "CallCredentials", {enumerable: true, get: function() {
      return call_credentials_1.CallCredentials;
    }});
    var channel_1 = require_channel();
    Object.defineProperty(exports2, "connectivityState", {enumerable: true, get: function() {
      return channel_1.ConnectivityState;
    }});
    Object.defineProperty(exports2, "Channel", {enumerable: true, get: function() {
      return channel_1.ChannelImplementation;
    }});
    var channel_credentials_1 = require_channel_credentials();
    Object.defineProperty(exports2, "ChannelCredentials", {enumerable: true, get: function() {
      return channel_credentials_1.ChannelCredentials;
    }});
    var client_1 = require_client();
    Object.defineProperty(exports2, "Client", {enumerable: true, get: function() {
      return client_1.Client;
    }});
    var constants_1 = require_constants();
    Object.defineProperty(exports2, "logVerbosity", {enumerable: true, get: function() {
      return constants_1.LogVerbosity;
    }});
    Object.defineProperty(exports2, "status", {enumerable: true, get: function() {
      return constants_1.Status;
    }});
    Object.defineProperty(exports2, "propagate", {enumerable: true, get: function() {
      return constants_1.Propagate;
    }});
    var logging = require_logging();
    var make_client_1 = require_make_client();
    Object.defineProperty(exports2, "loadPackageDefinition", {enumerable: true, get: function() {
      return make_client_1.loadPackageDefinition;
    }});
    Object.defineProperty(exports2, "makeClientConstructor", {enumerable: true, get: function() {
      return make_client_1.makeClientConstructor;
    }});
    Object.defineProperty(exports2, "makeGenericClientConstructor", {enumerable: true, get: function() {
      return make_client_1.makeClientConstructor;
    }});
    var metadata_1 = require_metadata();
    Object.defineProperty(exports2, "Metadata", {enumerable: true, get: function() {
      return metadata_1.Metadata;
    }});
    var server_1 = require_server();
    Object.defineProperty(exports2, "Server", {enumerable: true, get: function() {
      return server_1.Server;
    }});
    var server_credentials_1 = require_server_credentials();
    Object.defineProperty(exports2, "ServerCredentials", {enumerable: true, get: function() {
      return server_credentials_1.ServerCredentials;
    }});
    var status_builder_1 = require_status_builder();
    Object.defineProperty(exports2, "StatusBuilder", {enumerable: true, get: function() {
      return status_builder_1.StatusBuilder;
    }});
    exports2.credentials = {
      combineChannelCredentials: (channelCredentials, ...callCredentials) => {
        return callCredentials.reduce((acc, other) => acc.compose(other), channelCredentials);
      },
      combineCallCredentials: (first, ...additional) => {
        return additional.reduce((acc, other) => acc.compose(other), first);
      },
      createInsecure: channel_credentials_1.ChannelCredentials.createInsecure,
      createSsl: channel_credentials_1.ChannelCredentials.createSsl,
      createFromMetadataGenerator: call_credentials_1.CallCredentials.createFromMetadataGenerator,
      createFromGoogleCredential: call_credentials_1.CallCredentials.createFromGoogleCredential,
      createEmpty: call_credentials_1.CallCredentials.createEmpty
    };
    exports2.closeClient = (client) => client.close();
    exports2.waitForClientReady = (client, deadline, callback) => client.waitForReady(deadline, callback);
    exports2.loadObject = (value, options2) => {
      throw new Error("Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead");
    };
    exports2.load = (filename, format3, options2) => {
      throw new Error("Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead");
    };
    exports2.setLogger = (logger) => {
      logging.setLogger(logger);
    };
    exports2.setLogVerbosity = (verbosity) => {
      logging.setLoggerVerbosity(verbosity);
    };
    exports2.getClientChannel = (client) => {
      return client_1.Client.prototype.getChannel.call(client);
    };
    var client_interceptors_1 = require_client_interceptors();
    Object.defineProperty(exports2, "ListenerBuilder", {enumerable: true, get: function() {
      return client_interceptors_1.ListenerBuilder;
    }});
    Object.defineProperty(exports2, "RequesterBuilder", {enumerable: true, get: function() {
      return client_interceptors_1.RequesterBuilder;
    }});
    Object.defineProperty(exports2, "InterceptingCall", {enumerable: true, get: function() {
      return client_interceptors_1.InterceptingCall;
    }});
    Object.defineProperty(exports2, "InterceptorConfigurationError", {enumerable: true, get: function() {
      return client_interceptors_1.InterceptorConfigurationError;
    }});
    var experimental = require_experimental();
    exports2.experimental = experimental;
    var resolver = require_resolver();
    var load_balancer = require_load_balancer();
    (() => {
      resolver.registerAll();
      load_balancer.registerAll();
    })();
  }
});

// node_modules/@protobufjs/aspromise/index.js
var require_aspromise = __commonJS({
  "node_modules/@protobufjs/aspromise/index.js"(exports2, module2) {
    "use strict";
    module2.exports = asPromise;
    function asPromise(fn, ctx) {
      var params = new Array(arguments.length - 1), offset = 0, index2 = 2, pending = true;
      while (index2 < arguments.length)
        params[offset++] = arguments[index2++];
      return new Promise(function executor(resolve2, reject) {
        params[offset] = function callback(err) {
          if (pending) {
            pending = false;
            if (err)
              reject(err);
            else {
              var params2 = new Array(arguments.length - 1), offset2 = 0;
              while (offset2 < params2.length)
                params2[offset2++] = arguments[offset2];
              resolve2.apply(null, params2);
            }
          }
        };
        try {
          fn.apply(ctx || null, params);
        } catch (err) {
          if (pending) {
            pending = false;
            reject(err);
          }
        }
      });
    }
  }
});

// node_modules/@protobufjs/base64/index.js
var require_base64 = __commonJS({
  "node_modules/@protobufjs/base64/index.js"(exports2) {
    "use strict";
    var base64 = exports2;
    base64.length = function length(string) {
      var p = string.length;
      if (!p)
        return 0;
      var n = 0;
      while (--p % 4 > 1 && string.charAt(p) === "=")
        ++n;
      return Math.ceil(string.length * 3) / 4 - n;
    };
    var b64 = new Array(64);
    var s64 = new Array(123);
    for (var i = 0; i < 64; )
      s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;
    base64.encode = function encode(buffer, start, end) {
      var parts = null, chunk = [];
      var i2 = 0, j = 0, t;
      while (start < end) {
        var b = buffer[start++];
        switch (j) {
          case 0:
            chunk[i2++] = b64[b >> 2];
            t = (b & 3) << 4;
            j = 1;
            break;
          case 1:
            chunk[i2++] = b64[t | b >> 4];
            t = (b & 15) << 2;
            j = 2;
            break;
          case 2:
            chunk[i2++] = b64[t | b >> 6];
            chunk[i2++] = b64[b & 63];
            j = 0;
            break;
        }
        if (i2 > 8191) {
          (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
          i2 = 0;
        }
      }
      if (j) {
        chunk[i2++] = b64[t];
        chunk[i2++] = 61;
        if (j === 1)
          chunk[i2++] = 61;
      }
      if (parts) {
        if (i2)
          parts.push(String.fromCharCode.apply(String, chunk.slice(0, i2)));
        return parts.join("");
      }
      return String.fromCharCode.apply(String, chunk.slice(0, i2));
    };
    var invalidEncoding = "invalid encoding";
    base64.decode = function decode(string, buffer, offset) {
      var start = offset;
      var j = 0, t;
      for (var i2 = 0; i2 < string.length; ) {
        var c = string.charCodeAt(i2++);
        if (c === 61 && j > 1)
          break;
        if ((c = s64[c]) === void 0)
          throw Error(invalidEncoding);
        switch (j) {
          case 0:
            t = c;
            j = 1;
            break;
          case 1:
            buffer[offset++] = t << 2 | (c & 48) >> 4;
            t = c;
            j = 2;
            break;
          case 2:
            buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
            t = c;
            j = 3;
            break;
          case 3:
            buffer[offset++] = (t & 3) << 6 | c;
            j = 0;
            break;
        }
      }
      if (j === 1)
        throw Error(invalidEncoding);
      return offset - start;
    };
    base64.test = function test(string) {
      return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
    };
  }
});

// node_modules/@protobufjs/eventemitter/index.js
var require_eventemitter = __commonJS({
  "node_modules/@protobufjs/eventemitter/index.js"(exports2, module2) {
    "use strict";
    module2.exports = EventEmitter;
    function EventEmitter() {
      this._listeners = {};
    }
    EventEmitter.prototype.on = function on(evt, fn, ctx) {
      (this._listeners[evt] || (this._listeners[evt] = [])).push({
        fn,
        ctx: ctx || this
      });
      return this;
    };
    EventEmitter.prototype.off = function off(evt, fn) {
      if (evt === void 0)
        this._listeners = {};
      else {
        if (fn === void 0)
          this._listeners[evt] = [];
        else {
          var listeners = this._listeners[evt];
          for (var i = 0; i < listeners.length; )
            if (listeners[i].fn === fn)
              listeners.splice(i, 1);
            else
              ++i;
        }
      }
      return this;
    };
    EventEmitter.prototype.emit = function emit(evt) {
      var listeners = this._listeners[evt];
      if (listeners) {
        var args = [], i = 1;
        for (; i < arguments.length; )
          args.push(arguments[i++]);
        for (i = 0; i < listeners.length; )
          listeners[i].fn.apply(listeners[i++].ctx, args);
      }
      return this;
    };
  }
});

// node_modules/@protobufjs/float/index.js
var require_float = __commonJS({
  "node_modules/@protobufjs/float/index.js"(exports2, module2) {
    "use strict";
    module2.exports = factory(factory);
    function factory(exports3) {
      if (typeof Float32Array !== "undefined")
        (function() {
          var f32 = new Float32Array([-0]), f8b = new Uint8Array(f32.buffer), le = f8b[3] === 128;
          function writeFloat_f32_cpy(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
          }
          function writeFloat_f32_rev(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
          }
          exports3.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
          exports3.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;
          function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f32[0];
          }
          function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f32[0];
          }
          exports3.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
          exports3.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;
        })();
      else
        (function() {
          function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
              val = -val;
            if (val === 0)
              writeUint(1 / val > 0 ? 0 : 2147483648, buf, pos);
            else if (isNaN(val))
              writeUint(2143289344, buf, pos);
            else if (val > 34028234663852886e22)
              writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
            else if (val < 11754943508222875e-54)
              writeUint((sign << 31 | Math.round(val / 1401298464324817e-60)) >>> 0, buf, pos);
            else {
              var exponent = Math.floor(Math.log(val) / Math.LN2), mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
              writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
          }
          exports3.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
          exports3.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);
          function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos), sign = (uint >> 31) * 2 + 1, exponent = uint >>> 23 & 255, mantissa = uint & 8388607;
            return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 1401298464324817e-60 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
          }
          exports3.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
          exports3.readFloatBE = readFloat_ieee754.bind(null, readUintBE);
        })();
      if (typeof Float64Array !== "undefined")
        (function() {
          var f64 = new Float64Array([-0]), f8b = new Uint8Array(f64.buffer), le = f8b[7] === 128;
          function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
          }
          function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
          }
          exports3.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
          exports3.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;
          function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
          }
          function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
          }
          exports3.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
          exports3.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;
        })();
      else
        (function() {
          function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
              val = -val;
            if (val === 0) {
              writeUint(0, buf, pos + off0);
              writeUint(1 / val > 0 ? 0 : 2147483648, buf, pos + off1);
            } else if (isNaN(val)) {
              writeUint(0, buf, pos + off0);
              writeUint(2146959360, buf, pos + off1);
            } else if (val > 17976931348623157e292) {
              writeUint(0, buf, pos + off0);
              writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
              var mantissa;
              if (val < 22250738585072014e-324) {
                mantissa = val / 5e-324;
                writeUint(mantissa >>> 0, buf, pos + off0);
                writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
              } else {
                var exponent = Math.floor(Math.log(val) / Math.LN2);
                if (exponent === 1024)
                  exponent = 1023;
                mantissa = val * Math.pow(2, -exponent);
                writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
              }
            }
          }
          exports3.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
          exports3.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);
          function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0), hi = readUint(buf, pos + off1);
            var sign = (hi >> 31) * 2 + 1, exponent = hi >>> 20 & 2047, mantissa = 4294967296 * (hi & 1048575) + lo;
            return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
          }
          exports3.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
          exports3.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);
        })();
      return exports3;
    }
    function writeUintLE(val, buf, pos) {
      buf[pos] = val & 255;
      buf[pos + 1] = val >>> 8 & 255;
      buf[pos + 2] = val >>> 16 & 255;
      buf[pos + 3] = val >>> 24;
    }
    function writeUintBE(val, buf, pos) {
      buf[pos] = val >>> 24;
      buf[pos + 1] = val >>> 16 & 255;
      buf[pos + 2] = val >>> 8 & 255;
      buf[pos + 3] = val & 255;
    }
    function readUintLE(buf, pos) {
      return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;
    }
    function readUintBE(buf, pos) {
      return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;
    }
  }
});

// node_modules/@protobufjs/inquire/index.js
var require_inquire = __commonJS({
  "node_modules/@protobufjs/inquire/index.js"(exports, module) {
    "use strict";
    module.exports = inquire;
    function inquire(moduleName) {
      try {
        var mod = eval("quire".replace(/^/, "re"))(moduleName);
        if (mod && (mod.length || Object.keys(mod).length))
          return mod;
      } catch (e) {
      }
      return null;
    }
  }
});

// node_modules/@protobufjs/utf8/index.js
var require_utf8 = __commonJS({
  "node_modules/@protobufjs/utf8/index.js"(exports2) {
    "use strict";
    var utf8 = exports2;
    utf8.length = function utf8_length(string) {
      var len = 0, c = 0;
      for (var i = 0; i < string.length; ++i) {
        c = string.charCodeAt(i);
        if (c < 128)
          len += 1;
        else if (c < 2048)
          len += 2;
        else if ((c & 64512) === 55296 && (string.charCodeAt(i + 1) & 64512) === 56320) {
          ++i;
          len += 4;
        } else
          len += 3;
      }
      return len;
    };
    utf8.read = function utf8_read(buffer, start, end) {
      var len = end - start;
      if (len < 1)
        return "";
      var parts = null, chunk = [], i = 0, t;
      while (start < end) {
        t = buffer[start++];
        if (t < 128)
          chunk[i++] = t;
        else if (t > 191 && t < 224)
          chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
        else if (t > 239 && t < 365) {
          t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 65536;
          chunk[i++] = 55296 + (t >> 10);
          chunk[i++] = 56320 + (t & 1023);
        } else
          chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
        if (i > 8191) {
          (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
          i = 0;
        }
      }
      if (parts) {
        if (i)
          parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
      }
      return String.fromCharCode.apply(String, chunk.slice(0, i));
    };
    utf8.write = function utf8_write(string, buffer, offset) {
      var start = offset, c1, c2;
      for (var i = 0; i < string.length; ++i) {
        c1 = string.charCodeAt(i);
        if (c1 < 128) {
          buffer[offset++] = c1;
        } else if (c1 < 2048) {
          buffer[offset++] = c1 >> 6 | 192;
          buffer[offset++] = c1 & 63 | 128;
        } else if ((c1 & 64512) === 55296 && ((c2 = string.charCodeAt(i + 1)) & 64512) === 56320) {
          c1 = 65536 + ((c1 & 1023) << 10) + (c2 & 1023);
          ++i;
          buffer[offset++] = c1 >> 18 | 240;
          buffer[offset++] = c1 >> 12 & 63 | 128;
          buffer[offset++] = c1 >> 6 & 63 | 128;
          buffer[offset++] = c1 & 63 | 128;
        } else {
          buffer[offset++] = c1 >> 12 | 224;
          buffer[offset++] = c1 >> 6 & 63 | 128;
          buffer[offset++] = c1 & 63 | 128;
        }
      }
      return offset - start;
    };
  }
});

// node_modules/@protobufjs/pool/index.js
var require_pool = __commonJS({
  "node_modules/@protobufjs/pool/index.js"(exports2, module2) {
    "use strict";
    module2.exports = pool;
    function pool(alloc, slice, size) {
      var SIZE = size || 8192;
      var MAX = SIZE >>> 1;
      var slab = null;
      var offset = SIZE;
      return function pool_alloc(size2) {
        if (size2 < 1 || size2 > MAX)
          return alloc(size2);
        if (offset + size2 > SIZE) {
          slab = alloc(SIZE);
          offset = 0;
        }
        var buf = slice.call(slab, offset, offset += size2);
        if (offset & 7)
          offset = (offset | 7) + 1;
        return buf;
      };
    }
  }
});

// node_modules/protobufjs/src/util/longbits.js
var require_longbits = __commonJS({
  "node_modules/protobufjs/src/util/longbits.js"(exports2, module2) {
    "use strict";
    module2.exports = LongBits;
    var util = require_minimal();
    function LongBits(lo, hi) {
      this.lo = lo >>> 0;
      this.hi = hi >>> 0;
    }
    var zero = LongBits.zero = new LongBits(0, 0);
    zero.toNumber = function() {
      return 0;
    };
    zero.zzEncode = zero.zzDecode = function() {
      return this;
    };
    zero.length = function() {
      return 1;
    };
    var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";
    LongBits.fromNumber = function fromNumber(value) {
      if (value === 0)
        return zero;
      var sign = value < 0;
      if (sign)
        value = -value;
      var lo = value >>> 0, hi = (value - lo) / 4294967296 >>> 0;
      if (sign) {
        hi = ~hi >>> 0;
        lo = ~lo >>> 0;
        if (++lo > 4294967295) {
          lo = 0;
          if (++hi > 4294967295)
            hi = 0;
        }
      }
      return new LongBits(lo, hi);
    };
    LongBits.from = function from(value) {
      if (typeof value === "number")
        return LongBits.fromNumber(value);
      if (util.isString(value)) {
        if (util.Long)
          value = util.Long.fromString(value);
        else
          return LongBits.fromNumber(parseInt(value, 10));
      }
      return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
    };
    LongBits.prototype.toNumber = function toNumber(unsigned) {
      if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0, hi = ~this.hi >>> 0;
        if (!lo)
          hi = hi + 1 >>> 0;
        return -(lo + hi * 4294967296);
      }
      return this.lo + this.hi * 4294967296;
    };
    LongBits.prototype.toLong = function toLong(unsigned) {
      return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned)) : {low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned)};
    };
    var charCodeAt = String.prototype.charCodeAt;
    LongBits.fromHash = function fromHash(hash2) {
      if (hash2 === zeroHash)
        return zero;
      return new LongBits((charCodeAt.call(hash2, 0) | charCodeAt.call(hash2, 1) << 8 | charCodeAt.call(hash2, 2) << 16 | charCodeAt.call(hash2, 3) << 24) >>> 0, (charCodeAt.call(hash2, 4) | charCodeAt.call(hash2, 5) << 8 | charCodeAt.call(hash2, 6) << 16 | charCodeAt.call(hash2, 7) << 24) >>> 0);
    };
    LongBits.prototype.toHash = function toHash() {
      return String.fromCharCode(this.lo & 255, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, this.hi & 255, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);
    };
    LongBits.prototype.zzEncode = function zzEncode() {
      var mask = this.hi >> 31;
      this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
      this.lo = (this.lo << 1 ^ mask) >>> 0;
      return this;
    };
    LongBits.prototype.zzDecode = function zzDecode() {
      var mask = -(this.lo & 1);
      this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
      this.hi = (this.hi >>> 1 ^ mask) >>> 0;
      return this;
    };
    LongBits.prototype.length = function length() {
      var part0 = this.lo, part1 = (this.lo >>> 28 | this.hi << 4) >>> 0, part2 = this.hi >>> 24;
      return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;
    };
  }
});

// node_modules/protobufjs/src/util/minimal.js
var require_minimal = __commonJS({
  "node_modules/protobufjs/src/util/minimal.js"(exports2) {
    "use strict";
    var util = exports2;
    util.asPromise = require_aspromise();
    util.base64 = require_base64();
    util.EventEmitter = require_eventemitter();
    util.float = require_float();
    util.inquire = require_inquire();
    util.utf8 = require_utf8();
    util.pool = require_pool();
    util.LongBits = require_longbits();
    util.isNode = Boolean(typeof global !== "undefined" && global && global.process && global.process.versions && global.process.versions.node);
    util.global = util.isNode && global || typeof window !== "undefined" && window || typeof self !== "undefined" && self || exports2;
    util.emptyArray = Object.freeze ? Object.freeze([]) : [];
    util.emptyObject = Object.freeze ? Object.freeze({}) : {};
    util.isInteger = Number.isInteger || function isInteger(value) {
      return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
    };
    util.isString = function isString(value) {
      return typeof value === "string" || value instanceof String;
    };
    util.isObject = function isObject(value) {
      return value && typeof value === "object";
    };
    util.isset = util.isSet = function isSet(obj, prop) {
      var value = obj[prop];
      if (value != null && obj.hasOwnProperty(prop))
        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
      return false;
    };
    util.Buffer = function() {
      try {
        var Buffer2 = util.inquire("buffer").Buffer;
        return Buffer2.prototype.utf8Write ? Buffer2 : null;
      } catch (e) {
        return null;
      }
    }();
    util._Buffer_from = null;
    util._Buffer_allocUnsafe = null;
    util.newBuffer = function newBuffer(sizeOrArray) {
      return typeof sizeOrArray === "number" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === "undefined" ? sizeOrArray : new Uint8Array(sizeOrArray);
    };
    util.Array = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    util.Long = util.global.dcodeIO && util.global.dcodeIO.Long || util.global.Long || util.inquire("long");
    util.key2Re = /^true|false|0|1$/;
    util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;
    util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;
    util.longToHash = function longToHash(value) {
      return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;
    };
    util.longFromHash = function longFromHash(hash2, unsigned) {
      var bits = util.LongBits.fromHash(hash2);
      if (util.Long)
        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
      return bits.toNumber(Boolean(unsigned));
    };
    function merge(dst, src2, ifNotSet) {
      for (var keys = Object.keys(src2), i = 0; i < keys.length; ++i)
        if (dst[keys[i]] === void 0 || !ifNotSet)
          dst[keys[i]] = src2[keys[i]];
      return dst;
    }
    util.merge = merge;
    util.lcFirst = function lcFirst(str) {
      return str.charAt(0).toLowerCase() + str.substring(1);
    };
    function newError(name) {
      function CustomError(message, properties) {
        if (!(this instanceof CustomError))
          return new CustomError(message, properties);
        Object.defineProperty(this, "message", {get: function() {
          return message;
        }});
        if (Error.captureStackTrace)
          Error.captureStackTrace(this, CustomError);
        else
          Object.defineProperty(this, "stack", {value: new Error().stack || ""});
        if (properties)
          merge(this, properties);
      }
      (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;
      Object.defineProperty(CustomError.prototype, "name", {get: function() {
        return name;
      }});
      CustomError.prototype.toString = function toString() {
        return this.name + ": " + this.message;
      };
      return CustomError;
    }
    util.newError = newError;
    util.ProtocolError = newError("ProtocolError");
    util.oneOfGetter = function getOneOf(fieldNames) {
      var fieldMap = {};
      for (var i = 0; i < fieldNames.length; ++i)
        fieldMap[fieldNames[i]] = 1;
      return function() {
        for (var keys = Object.keys(this), i2 = keys.length - 1; i2 > -1; --i2)
          if (fieldMap[keys[i2]] === 1 && this[keys[i2]] !== void 0 && this[keys[i2]] !== null)
            return keys[i2];
      };
    };
    util.oneOfSetter = function setOneOf(fieldNames) {
      return function(name) {
        for (var i = 0; i < fieldNames.length; ++i)
          if (fieldNames[i] !== name)
            delete this[fieldNames[i]];
      };
    };
    util.toJSONOptions = {
      longs: String,
      enums: String,
      bytes: String,
      json: true
    };
    util._configure = function() {
      var Buffer2 = util.Buffer;
      if (!Buffer2) {
        util._Buffer_from = util._Buffer_allocUnsafe = null;
        return;
      }
      util._Buffer_from = Buffer2.from !== Uint8Array.from && Buffer2.from || function Buffer_from(value, encoding) {
        return new Buffer2(value, encoding);
      };
      util._Buffer_allocUnsafe = Buffer2.allocUnsafe || function Buffer_allocUnsafe(size) {
        return new Buffer2(size);
      };
    };
  }
});

// node_modules/protobufjs/src/writer.js
var require_writer = __commonJS({
  "node_modules/protobufjs/src/writer.js"(exports2, module2) {
    "use strict";
    module2.exports = Writer;
    var util = require_minimal();
    var BufferWriter;
    var LongBits = util.LongBits;
    var base64 = util.base64;
    var utf8 = util.utf8;
    function Op(fn, len, val) {
      this.fn = fn;
      this.len = len;
      this.next = void 0;
      this.val = val;
    }
    function noop3() {
    }
    function State(writer) {
      this.head = writer.head;
      this.tail = writer.tail;
      this.len = writer.len;
      this.next = writer.states;
    }
    function Writer() {
      this.len = 0;
      this.head = new Op(noop3, 0, 0);
      this.tail = this.head;
      this.states = null;
    }
    var create = function create2() {
      return util.Buffer ? function create_buffer_setup() {
        return (Writer.create = function create_buffer() {
          return new BufferWriter();
        })();
      } : function create_array() {
        return new Writer();
      };
    };
    Writer.create = create();
    Writer.alloc = function alloc(size) {
      return new util.Array(size);
    };
    if (util.Array !== Array)
      Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);
    Writer.prototype._push = function push(fn, len, val) {
      this.tail = this.tail.next = new Op(fn, len, val);
      this.len += len;
      return this;
    };
    function writeByte(val, buf, pos) {
      buf[pos] = val & 255;
    }
    function writeVarint32(val, buf, pos) {
      while (val > 127) {
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
      }
      buf[pos] = val;
    }
    function VarintOp(len, val) {
      this.len = len;
      this.next = void 0;
      this.val = val;
    }
    VarintOp.prototype = Object.create(Op.prototype);
    VarintOp.prototype.fn = writeVarint32;
    Writer.prototype.uint32 = function write_uint32(value) {
      this.len += (this.tail = this.tail.next = new VarintOp((value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5, value)).len;
      return this;
    };
    Writer.prototype.int32 = function write_int32(value) {
      return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) : this.uint32(value);
    };
    Writer.prototype.sint32 = function write_sint32(value) {
      return this.uint32((value << 1 ^ value >> 31) >>> 0);
    };
    function writeVarint64(val, buf, pos) {
      while (val.hi) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
      }
      while (val.lo > 127) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
      }
      buf[pos++] = val.lo;
    }
    Writer.prototype.uint64 = function write_uint64(value) {
      var bits = LongBits.from(value);
      return this._push(writeVarint64, bits.length(), bits);
    };
    Writer.prototype.int64 = Writer.prototype.uint64;
    Writer.prototype.sint64 = function write_sint64(value) {
      var bits = LongBits.from(value).zzEncode();
      return this._push(writeVarint64, bits.length(), bits);
    };
    Writer.prototype.bool = function write_bool(value) {
      return this._push(writeByte, 1, value ? 1 : 0);
    };
    function writeFixed32(val, buf, pos) {
      buf[pos] = val & 255;
      buf[pos + 1] = val >>> 8 & 255;
      buf[pos + 2] = val >>> 16 & 255;
      buf[pos + 3] = val >>> 24;
    }
    Writer.prototype.fixed32 = function write_fixed32(value) {
      return this._push(writeFixed32, 4, value >>> 0);
    };
    Writer.prototype.sfixed32 = Writer.prototype.fixed32;
    Writer.prototype.fixed64 = function write_fixed64(value) {
      var bits = LongBits.from(value);
      return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
    };
    Writer.prototype.sfixed64 = Writer.prototype.fixed64;
    Writer.prototype.float = function write_float(value) {
      return this._push(util.float.writeFloatLE, 4, value);
    };
    Writer.prototype.double = function write_double(value) {
      return this._push(util.float.writeDoubleLE, 8, value);
    };
    var writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {
      buf.set(val, pos);
    } : function writeBytes_for(val, buf, pos) {
      for (var i = 0; i < val.length; ++i)
        buf[pos + i] = val[i];
    };
    Writer.prototype.bytes = function write_bytes(value) {
      var len = value.length >>> 0;
      if (!len)
        return this._push(writeByte, 1, 0);
      if (util.isString(value)) {
        var buf = Writer.alloc(len = base64.length(value));
        base64.decode(value, buf, 0);
        value = buf;
      }
      return this.uint32(len)._push(writeBytes, len, value);
    };
    Writer.prototype.string = function write_string(value) {
      var len = utf8.length(value);
      return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);
    };
    Writer.prototype.fork = function fork() {
      this.states = new State(this);
      this.head = this.tail = new Op(noop3, 0, 0);
      this.len = 0;
      return this;
    };
    Writer.prototype.reset = function reset() {
      if (this.states) {
        this.head = this.states.head;
        this.tail = this.states.tail;
        this.len = this.states.len;
        this.states = this.states.next;
      } else {
        this.head = this.tail = new Op(noop3, 0, 0);
        this.len = 0;
      }
      return this;
    };
    Writer.prototype.ldelim = function ldelim() {
      var head = this.head, tail = this.tail, len = this.len;
      this.reset().uint32(len);
      if (len) {
        this.tail.next = head.next;
        this.tail = tail;
        this.len += len;
      }
      return this;
    };
    Writer.prototype.finish = function finish() {
      var head = this.head.next, buf = this.constructor.alloc(this.len), pos = 0;
      while (head) {
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
      }
      return buf;
    };
    Writer._configure = function(BufferWriter_) {
      BufferWriter = BufferWriter_;
      Writer.create = create();
      BufferWriter._configure();
    };
  }
});

// node_modules/protobufjs/src/writer_buffer.js
var require_writer_buffer = __commonJS({
  "node_modules/protobufjs/src/writer_buffer.js"(exports2, module2) {
    "use strict";
    module2.exports = BufferWriter;
    var Writer = require_writer();
    (BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;
    var util = require_minimal();
    function BufferWriter() {
      Writer.call(this);
    }
    BufferWriter._configure = function() {
      BufferWriter.alloc = util._Buffer_allocUnsafe;
      BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set" ? function writeBytesBuffer_set(val, buf, pos) {
        buf.set(val, pos);
      } : function writeBytesBuffer_copy(val, buf, pos) {
        if (val.copy)
          val.copy(buf, pos, 0, val.length);
        else
          for (var i = 0; i < val.length; )
            buf[pos++] = val[i++];
      };
    };
    BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
      if (util.isString(value))
        value = util._Buffer_from(value, "base64");
      var len = value.length >>> 0;
      this.uint32(len);
      if (len)
        this._push(BufferWriter.writeBytesBuffer, len, value);
      return this;
    };
    function writeStringBuffer(val, buf, pos) {
      if (val.length < 40)
        util.utf8.write(val, buf, pos);
      else if (buf.utf8Write)
        buf.utf8Write(val, pos);
      else
        buf.write(val, pos);
    }
    BufferWriter.prototype.string = function write_string_buffer(value) {
      var len = util.Buffer.byteLength(value);
      this.uint32(len);
      if (len)
        this._push(writeStringBuffer, len, value);
      return this;
    };
    BufferWriter._configure();
  }
});

// node_modules/protobufjs/src/reader.js
var require_reader = __commonJS({
  "node_modules/protobufjs/src/reader.js"(exports2, module2) {
    "use strict";
    module2.exports = Reader;
    var util = require_minimal();
    var BufferReader;
    var LongBits = util.LongBits;
    var utf8 = util.utf8;
    function indexOutOfRange(reader, writeLength) {
      return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
    }
    function Reader(buffer) {
      this.buf = buffer;
      this.pos = 0;
      this.len = buffer.length;
    }
    var create_array = typeof Uint8Array !== "undefined" ? function create_typed_array(buffer) {
      if (buffer instanceof Uint8Array || Array.isArray(buffer))
        return new Reader(buffer);
      throw Error("illegal buffer");
    } : function create_array2(buffer) {
      if (Array.isArray(buffer))
        return new Reader(buffer);
      throw Error("illegal buffer");
    };
    var create = function create2() {
      return util.Buffer ? function create_buffer_setup(buffer) {
        return (Reader.create = function create_buffer(buffer2) {
          return util.Buffer.isBuffer(buffer2) ? new BufferReader(buffer2) : create_array(buffer2);
        })(buffer);
      } : create_array;
    };
    Reader.create = create();
    Reader.prototype._slice = util.Array.prototype.subarray || util.Array.prototype.slice;
    Reader.prototype.uint32 = function read_uint32_setup() {
      var value = 4294967295;
      return function read_uint32() {
        value = (this.buf[this.pos] & 127) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        if ((this.pos += 5) > this.len) {
          this.pos = this.len;
          throw indexOutOfRange(this, 10);
        }
        return value;
      };
    }();
    Reader.prototype.int32 = function read_int32() {
      return this.uint32() | 0;
    };
    Reader.prototype.sint32 = function read_sint32() {
      var value = this.uint32();
      return value >>> 1 ^ -(value & 1) | 0;
    };
    function readLongVarint() {
      var bits = new LongBits(0, 0);
      var i = 0;
      if (this.len - this.pos > 4) {
        for (; i < 4; ++i) {
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;
        if (this.buf[this.pos++] < 128)
          return bits;
        i = 0;
      } else {
        for (; i < 3; ++i) {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
      }
      if (this.len - this.pos > 4) {
        for (; i < 5; ++i) {
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
      } else {
        for (; i < 5; ++i) {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
      }
      throw Error("invalid varint encoding");
    }
    Reader.prototype.bool = function read_bool() {
      return this.uint32() !== 0;
    };
    function readFixed32_end(buf, end) {
      return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;
    }
    Reader.prototype.fixed32 = function read_fixed32() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      return readFixed32_end(this.buf, this.pos += 4);
    };
    Reader.prototype.sfixed32 = function read_sfixed32() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      return readFixed32_end(this.buf, this.pos += 4) | 0;
    };
    function readFixed64() {
      if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 8);
      return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
    }
    Reader.prototype.float = function read_float() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      var value = util.float.readFloatLE(this.buf, this.pos);
      this.pos += 4;
      return value;
    };
    Reader.prototype.double = function read_double() {
      if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 4);
      var value = util.float.readDoubleLE(this.buf, this.pos);
      this.pos += 8;
      return value;
    };
    Reader.prototype.bytes = function read_bytes() {
      var length = this.uint32(), start = this.pos, end = this.pos + length;
      if (end > this.len)
        throw indexOutOfRange(this, length);
      this.pos += length;
      if (Array.isArray(this.buf))
        return this.buf.slice(start, end);
      return start === end ? new this.buf.constructor(0) : this._slice.call(this.buf, start, end);
    };
    Reader.prototype.string = function read_string() {
      var bytes = this.bytes();
      return utf8.read(bytes, 0, bytes.length);
    };
    Reader.prototype.skip = function skip(length) {
      if (typeof length === "number") {
        if (this.pos + length > this.len)
          throw indexOutOfRange(this, length);
        this.pos += length;
      } else {
        do {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
        } while (this.buf[this.pos++] & 128);
      }
      return this;
    };
    Reader.prototype.skipType = function(wireType) {
      switch (wireType) {
        case 0:
          this.skip();
          break;
        case 1:
          this.skip(8);
          break;
        case 2:
          this.skip(this.uint32());
          break;
        case 3:
          while ((wireType = this.uint32() & 7) !== 4) {
            this.skipType(wireType);
          }
          break;
        case 5:
          this.skip(4);
          break;
        default:
          throw Error("invalid wire type " + wireType + " at offset " + this.pos);
      }
      return this;
    };
    Reader._configure = function(BufferReader_) {
      BufferReader = BufferReader_;
      Reader.create = create();
      BufferReader._configure();
      var fn = util.Long ? "toLong" : "toNumber";
      util.merge(Reader.prototype, {
        int64: function read_int64() {
          return readLongVarint.call(this)[fn](false);
        },
        uint64: function read_uint64() {
          return readLongVarint.call(this)[fn](true);
        },
        sint64: function read_sint64() {
          return readLongVarint.call(this).zzDecode()[fn](false);
        },
        fixed64: function read_fixed64() {
          return readFixed64.call(this)[fn](true);
        },
        sfixed64: function read_sfixed64() {
          return readFixed64.call(this)[fn](false);
        }
      });
    };
  }
});

// node_modules/protobufjs/src/reader_buffer.js
var require_reader_buffer = __commonJS({
  "node_modules/protobufjs/src/reader_buffer.js"(exports2, module2) {
    "use strict";
    module2.exports = BufferReader;
    var Reader = require_reader();
    (BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;
    var util = require_minimal();
    function BufferReader(buffer) {
      Reader.call(this, buffer);
    }
    BufferReader._configure = function() {
      if (util.Buffer)
        BufferReader.prototype._slice = util.Buffer.prototype.slice;
    };
    BufferReader.prototype.string = function read_string_buffer() {
      var len = this.uint32();
      return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
    };
    BufferReader._configure();
  }
});

// node_modules/protobufjs/src/rpc/service.js
var require_service = __commonJS({
  "node_modules/protobufjs/src/rpc/service.js"(exports2, module2) {
    "use strict";
    module2.exports = Service;
    var util = require_minimal();
    (Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;
    function Service(rpcImpl, requestDelimited, responseDelimited) {
      if (typeof rpcImpl !== "function")
        throw TypeError("rpcImpl must be a function");
      util.EventEmitter.call(this);
      this.rpcImpl = rpcImpl;
      this.requestDelimited = Boolean(requestDelimited);
      this.responseDelimited = Boolean(responseDelimited);
    }
    Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {
      if (!request)
        throw TypeError("request must be specified");
      var self2 = this;
      if (!callback)
        return util.asPromise(rpcCall, self2, method, requestCtor, responseCtor, request);
      if (!self2.rpcImpl) {
        setTimeout(function() {
          callback(Error("already ended"));
        }, 0);
        return void 0;
      }
      try {
        return self2.rpcImpl(method, requestCtor[self2.requestDelimited ? "encodeDelimited" : "encode"](request).finish(), function rpcCallback(err, response) {
          if (err) {
            self2.emit("error", err, method);
            return callback(err);
          }
          if (response === null) {
            self2.end(true);
            return void 0;
          }
          if (!(response instanceof responseCtor)) {
            try {
              response = responseCtor[self2.responseDelimited ? "decodeDelimited" : "decode"](response);
            } catch (err2) {
              self2.emit("error", err2, method);
              return callback(err2);
            }
          }
          self2.emit("data", response, method);
          return callback(null, response);
        });
      } catch (err) {
        self2.emit("error", err, method);
        setTimeout(function() {
          callback(err);
        }, 0);
        return void 0;
      }
    };
    Service.prototype.end = function end(endedByRPC) {
      if (this.rpcImpl) {
        if (!endedByRPC)
          this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
      }
      return this;
    };
  }
});

// node_modules/protobufjs/src/rpc.js
var require_rpc = __commonJS({
  "node_modules/protobufjs/src/rpc.js"(exports2) {
    "use strict";
    var rpc = exports2;
    rpc.Service = require_service();
  }
});

// node_modules/protobufjs/src/roots.js
var require_roots = __commonJS({
  "node_modules/protobufjs/src/roots.js"(exports2, module2) {
    "use strict";
    module2.exports = {};
  }
});

// node_modules/protobufjs/src/index-minimal.js
var require_index_minimal = __commonJS({
  "node_modules/protobufjs/src/index-minimal.js"(exports2) {
    "use strict";
    var protobuf = exports2;
    protobuf.build = "minimal";
    protobuf.Writer = require_writer();
    protobuf.BufferWriter = require_writer_buffer();
    protobuf.Reader = require_reader();
    protobuf.BufferReader = require_reader_buffer();
    protobuf.util = require_minimal();
    protobuf.rpc = require_rpc();
    protobuf.roots = require_roots();
    protobuf.configure = configure;
    function configure() {
      protobuf.util._configure();
      protobuf.Writer._configure(protobuf.BufferWriter);
      protobuf.Reader._configure(protobuf.BufferReader);
    }
    configure();
  }
});

// node_modules/@protobufjs/codegen/index.js
var require_codegen = __commonJS({
  "node_modules/@protobufjs/codegen/index.js"(exports2, module2) {
    "use strict";
    module2.exports = codegen;
    function codegen(functionParams, functionName) {
      if (typeof functionParams === "string") {
        functionName = functionParams;
        functionParams = void 0;
      }
      var body = [];
      function Codegen(formatStringOrScope) {
        if (typeof formatStringOrScope !== "string") {
          var source = toString();
          if (codegen.verbose)
            console.log("codegen: " + source);
          source = "return " + source;
          if (formatStringOrScope) {
            var scopeKeys = Object.keys(formatStringOrScope), scopeParams = new Array(scopeKeys.length + 1), scopeValues = new Array(scopeKeys.length), scopeOffset = 0;
            while (scopeOffset < scopeKeys.length) {
              scopeParams[scopeOffset] = scopeKeys[scopeOffset];
              scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];
            }
            scopeParams[scopeOffset] = source;
            return Function.apply(null, scopeParams).apply(null, scopeValues);
          }
          return Function(source)();
        }
        var formatParams = new Array(arguments.length - 1), formatOffset = 0;
        while (formatOffset < formatParams.length)
          formatParams[formatOffset] = arguments[++formatOffset];
        formatOffset = 0;
        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {
          var value = formatParams[formatOffset++];
          switch ($1) {
            case "d":
            case "f":
              return String(Number(value));
            case "i":
              return String(Math.floor(value));
            case "j":
              return JSON.stringify(value);
            case "s":
              return String(value);
          }
          return "%";
        });
        if (formatOffset !== formatParams.length)
          throw Error("parameter count mismatch");
        body.push(formatStringOrScope);
        return Codegen;
      }
      function toString(functionNameOverride) {
        return "function " + (functionNameOverride || functionName || "") + "(" + (functionParams && functionParams.join(",") || "") + "){\n  " + body.join("\n  ") + "\n}";
      }
      Codegen.toString = toString;
      return Codegen;
    }
    codegen.verbose = false;
  }
});

// node_modules/@protobufjs/fetch/index.js
var require_fetch = __commonJS({
  "node_modules/@protobufjs/fetch/index.js"(exports2, module2) {
    "use strict";
    module2.exports = fetch3;
    var asPromise = require_aspromise();
    var inquire2 = require_inquire();
    var fs = inquire2("fs");
    function fetch3(filename, options2, callback) {
      if (typeof options2 === "function") {
        callback = options2;
        options2 = {};
      } else if (!options2)
        options2 = {};
      if (!callback)
        return asPromise(fetch3, this, filename, options2);
      if (!options2.xhr && fs && fs.readFile)
        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {
          return err && typeof XMLHttpRequest !== "undefined" ? fetch3.xhr(filename, options2, callback) : err ? callback(err) : callback(null, options2.binary ? contents : contents.toString("utf8"));
        });
      return fetch3.xhr(filename, options2, callback);
    }
    fetch3.xhr = function fetch_xhr(filename, options2, callback) {
      var xhr = new XMLHttpRequest();
      xhr.onreadystatechange = function fetchOnReadyStateChange() {
        if (xhr.readyState !== 4)
          return void 0;
        if (xhr.status !== 0 && xhr.status !== 200)
          return callback(Error("status " + xhr.status));
        if (options2.binary) {
          var buffer = xhr.response;
          if (!buffer) {
            buffer = [];
            for (var i = 0; i < xhr.responseText.length; ++i)
              buffer.push(xhr.responseText.charCodeAt(i) & 255);
          }
          return callback(null, typeof Uint8Array !== "undefined" ? new Uint8Array(buffer) : buffer);
        }
        return callback(null, xhr.responseText);
      };
      if (options2.binary) {
        if ("overrideMimeType" in xhr)
          xhr.overrideMimeType("text/plain; charset=x-user-defined");
        xhr.responseType = "arraybuffer";
      }
      xhr.open("GET", filename);
      xhr.send();
    };
  }
});

// node_modules/@protobufjs/path/index.js
var require_path = __commonJS({
  "node_modules/@protobufjs/path/index.js"(exports2) {
    "use strict";
    var path = exports2;
    var isAbsolute = path.isAbsolute = function isAbsolute2(path2) {
      return /^(?:\/|\w+:)/.test(path2);
    };
    var normalize2 = path.normalize = function normalize3(path2) {
      path2 = path2.replace(/\\/g, "/").replace(/\/{2,}/g, "/");
      var parts = path2.split("/"), absolute = isAbsolute(path2), prefix = "";
      if (absolute)
        prefix = parts.shift() + "/";
      for (var i = 0; i < parts.length; ) {
        if (parts[i] === "..") {
          if (i > 0 && parts[i - 1] !== "..")
            parts.splice(--i, 2);
          else if (absolute)
            parts.splice(i, 1);
          else
            ++i;
        } else if (parts[i] === ".")
          parts.splice(i, 1);
        else
          ++i;
      }
      return prefix + parts.join("/");
    };
    path.resolve = function resolve2(originPath, includePath, alreadyNormalized) {
      if (!alreadyNormalized)
        includePath = normalize2(includePath);
      if (isAbsolute(includePath))
        return includePath;
      if (!alreadyNormalized)
        originPath = normalize2(originPath);
      return (originPath = originPath.replace(/(?:\/|^)[^/]+$/, "")).length ? normalize2(originPath + "/" + includePath) : includePath;
    };
  }
});

// node_modules/protobufjs/src/types.js
var require_types = __commonJS({
  "node_modules/protobufjs/src/types.js"(exports2) {
    "use strict";
    var types2 = exports2;
    var util = require_util();
    var s2 = [
      "double",
      "float",
      "int32",
      "uint32",
      "sint32",
      "fixed32",
      "sfixed32",
      "int64",
      "uint64",
      "sint64",
      "fixed64",
      "sfixed64",
      "bool",
      "string",
      "bytes"
    ];
    function bake(values, offset) {
      var i = 0, o = {};
      offset |= 0;
      while (i < values.length)
        o[s2[i + offset]] = values[i++];
      return o;
    }
    types2.basic = bake([
      1,
      5,
      0,
      0,
      0,
      5,
      5,
      0,
      0,
      0,
      1,
      1,
      0,
      2,
      2
    ]);
    types2.defaults = bake([
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      false,
      "",
      util.emptyArray,
      null
    ]);
    types2.long = bake([
      0,
      0,
      0,
      1,
      1
    ], 7);
    types2.mapKey = bake([
      0,
      0,
      0,
      5,
      5,
      0,
      0,
      0,
      1,
      1,
      0,
      2
    ], 2);
    types2.packed = bake([
      1,
      5,
      0,
      0,
      0,
      5,
      5,
      0,
      0,
      0,
      1,
      1,
      0
    ]);
  }
});

// node_modules/protobufjs/src/field.js
var require_field = __commonJS({
  "node_modules/protobufjs/src/field.js"(exports2, module2) {
    "use strict";
    module2.exports = Field;
    var ReflectionObject = require_object();
    ((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = "Field";
    var Enum = require_enum();
    var types2 = require_types();
    var util = require_util();
    var Type;
    var ruleRe = /^required|optional|repeated$/;
    Field.fromJSON = function fromJSON(name, json) {
      return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);
    };
    function Field(name, id, type, rule, extend, options2, comment) {
      if (util.isObject(rule)) {
        comment = extend;
        options2 = rule;
        rule = extend = void 0;
      } else if (util.isObject(extend)) {
        comment = options2;
        options2 = extend;
        extend = void 0;
      }
      ReflectionObject.call(this, name, options2);
      if (!util.isInteger(id) || id < 0)
        throw TypeError("id must be a non-negative integer");
      if (!util.isString(type))
        throw TypeError("type must be a string");
      if (rule !== void 0 && !ruleRe.test(rule = rule.toString().toLowerCase()))
        throw TypeError("rule must be a string rule");
      if (extend !== void 0 && !util.isString(extend))
        throw TypeError("extend must be a string");
      if (rule === "proto3_optional") {
        rule = "optional";
      }
      this.rule = rule && rule !== "optional" ? rule : void 0;
      this.type = type;
      this.id = id;
      this.extend = extend || void 0;
      this.required = rule === "required";
      this.optional = !this.required;
      this.repeated = rule === "repeated";
      this.map = false;
      this.message = null;
      this.partOf = null;
      this.typeDefault = null;
      this.defaultValue = null;
      this.long = util.Long ? types2.long[type] !== void 0 : false;
      this.bytes = type === "bytes";
      this.resolvedType = null;
      this.extensionField = null;
      this.declaringField = null;
      this._packed = null;
      this.comment = comment;
    }
    Object.defineProperty(Field.prototype, "packed", {
      get: function() {
        if (this._packed === null)
          this._packed = this.getOption("packed") !== false;
        return this._packed;
      }
    });
    Field.prototype.setOption = function setOption(name, value, ifNotSet) {
      if (name === "packed")
        this._packed = null;
      return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);
    };
    Field.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "rule",
        this.rule !== "optional" && this.rule || void 0,
        "type",
        this.type,
        "id",
        this.id,
        "extend",
        this.extend,
        "options",
        this.options,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    Field.prototype.resolve = function resolve2() {
      if (this.resolved)
        return this;
      if ((this.typeDefault = types2.defaults[this.type]) === void 0) {
        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);
        if (this.resolvedType instanceof Type)
          this.typeDefault = null;
        else
          this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]];
      }
      if (this.options && this.options["default"] != null) {
        this.typeDefault = this.options["default"];
        if (this.resolvedType instanceof Enum && typeof this.typeDefault === "string")
          this.typeDefault = this.resolvedType.values[this.typeDefault];
      }
      if (this.options) {
        if (this.options.packed === true || this.options.packed !== void 0 && this.resolvedType && !(this.resolvedType instanceof Enum))
          delete this.options.packed;
        if (!Object.keys(this.options).length)
          this.options = void 0;
      }
      if (this.long) {
        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === "u");
        if (Object.freeze)
          Object.freeze(this.typeDefault);
      } else if (this.bytes && typeof this.typeDefault === "string") {
        var buf;
        if (util.base64.test(this.typeDefault))
          util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);
        else
          util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);
        this.typeDefault = buf;
      }
      if (this.map)
        this.defaultValue = util.emptyObject;
      else if (this.repeated)
        this.defaultValue = util.emptyArray;
      else
        this.defaultValue = this.typeDefault;
      if (this.parent instanceof Type)
        this.parent.ctor.prototype[this.name] = this.defaultValue;
      return ReflectionObject.prototype.resolve.call(this);
    };
    Field.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {
      if (typeof fieldType === "function")
        fieldType = util.decorateType(fieldType).name;
      else if (fieldType && typeof fieldType === "object")
        fieldType = util.decorateEnum(fieldType).name;
      return function fieldDecorator(prototype, fieldName) {
        util.decorateType(prototype.constructor).add(new Field(fieldName, fieldId, fieldType, fieldRule, {"default": defaultValue}));
      };
    };
    Field._configure = function configure(Type_) {
      Type = Type_;
    };
  }
});

// node_modules/protobufjs/src/oneof.js
var require_oneof = __commonJS({
  "node_modules/protobufjs/src/oneof.js"(exports2, module2) {
    "use strict";
    module2.exports = OneOf;
    var ReflectionObject = require_object();
    ((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = "OneOf";
    var Field = require_field();
    var util = require_util();
    function OneOf(name, fieldNames, options2, comment) {
      if (!Array.isArray(fieldNames)) {
        options2 = fieldNames;
        fieldNames = void 0;
      }
      ReflectionObject.call(this, name, options2);
      if (!(fieldNames === void 0 || Array.isArray(fieldNames)))
        throw TypeError("fieldNames must be an Array");
      this.oneof = fieldNames || [];
      this.fieldsArray = [];
      this.comment = comment;
    }
    OneOf.fromJSON = function fromJSON(name, json) {
      return new OneOf(name, json.oneof, json.options, json.comment);
    };
    OneOf.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "options",
        this.options,
        "oneof",
        this.oneof,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    function addFieldsToParent(oneof) {
      if (oneof.parent) {
        for (var i = 0; i < oneof.fieldsArray.length; ++i)
          if (!oneof.fieldsArray[i].parent)
            oneof.parent.add(oneof.fieldsArray[i]);
      }
    }
    OneOf.prototype.add = function add(field) {
      if (!(field instanceof Field))
        throw TypeError("field must be a Field");
      if (field.parent && field.parent !== this.parent)
        field.parent.remove(field);
      this.oneof.push(field.name);
      this.fieldsArray.push(field);
      field.partOf = this;
      addFieldsToParent(this);
      return this;
    };
    OneOf.prototype.remove = function remove(field) {
      if (!(field instanceof Field))
        throw TypeError("field must be a Field");
      var index2 = this.fieldsArray.indexOf(field);
      if (index2 < 0)
        throw Error(field + " is not a member of " + this);
      this.fieldsArray.splice(index2, 1);
      index2 = this.oneof.indexOf(field.name);
      if (index2 > -1)
        this.oneof.splice(index2, 1);
      field.partOf = null;
      return this;
    };
    OneOf.prototype.onAdd = function onAdd(parent) {
      ReflectionObject.prototype.onAdd.call(this, parent);
      var self2 = this;
      for (var i = 0; i < this.oneof.length; ++i) {
        var field = parent.get(this.oneof[i]);
        if (field && !field.partOf) {
          field.partOf = self2;
          self2.fieldsArray.push(field);
        }
      }
      addFieldsToParent(this);
    };
    OneOf.prototype.onRemove = function onRemove(parent) {
      for (var i = 0, field; i < this.fieldsArray.length; ++i)
        if ((field = this.fieldsArray[i]).parent)
          field.parent.remove(field);
      ReflectionObject.prototype.onRemove.call(this, parent);
    };
    OneOf.d = function decorateOneOf() {
      var fieldNames = new Array(arguments.length), index2 = 0;
      while (index2 < arguments.length)
        fieldNames[index2] = arguments[index2++];
      return function oneOfDecorator(prototype, oneofName) {
        util.decorateType(prototype.constructor).add(new OneOf(oneofName, fieldNames));
        Object.defineProperty(prototype, oneofName, {
          get: util.oneOfGetter(fieldNames),
          set: util.oneOfSetter(fieldNames)
        });
      };
    };
  }
});

// node_modules/protobufjs/src/namespace.js
var require_namespace = __commonJS({
  "node_modules/protobufjs/src/namespace.js"(exports2, module2) {
    "use strict";
    module2.exports = Namespace;
    var ReflectionObject = require_object();
    ((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = "Namespace";
    var Field = require_field();
    var OneOf = require_oneof();
    var util = require_util();
    var Type;
    var Service;
    var Enum;
    Namespace.fromJSON = function fromJSON(name, json) {
      return new Namespace(name, json.options).addJSON(json.nested);
    };
    function arrayToJSON(array, toJSONOptions) {
      if (!(array && array.length))
        return void 0;
      var obj = {};
      for (var i = 0; i < array.length; ++i)
        obj[array[i].name] = array[i].toJSON(toJSONOptions);
      return obj;
    }
    Namespace.arrayToJSON = arrayToJSON;
    Namespace.isReservedId = function isReservedId(reserved2, id) {
      if (reserved2) {
        for (var i = 0; i < reserved2.length; ++i)
          if (typeof reserved2[i] !== "string" && reserved2[i][0] <= id && reserved2[i][1] > id)
            return true;
      }
      return false;
    };
    Namespace.isReservedName = function isReservedName(reserved2, name) {
      if (reserved2) {
        for (var i = 0; i < reserved2.length; ++i)
          if (reserved2[i] === name)
            return true;
      }
      return false;
    };
    function Namespace(name, options2) {
      ReflectionObject.call(this, name, options2);
      this.nested = void 0;
      this._nestedArray = null;
    }
    function clearCache(namespace) {
      namespace._nestedArray = null;
      return namespace;
    }
    Object.defineProperty(Namespace.prototype, "nestedArray", {
      get: function() {
        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));
      }
    });
    Namespace.prototype.toJSON = function toJSON(toJSONOptions) {
      return util.toObject([
        "options",
        this.options,
        "nested",
        arrayToJSON(this.nestedArray, toJSONOptions)
      ]);
    };
    Namespace.prototype.addJSON = function addJSON(nestedJson) {
      var ns = this;
      if (nestedJson) {
        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {
          nested = nestedJson[names[i]];
          ns.add((nested.fields !== void 0 ? Type.fromJSON : nested.values !== void 0 ? Enum.fromJSON : nested.methods !== void 0 ? Service.fromJSON : nested.id !== void 0 ? Field.fromJSON : Namespace.fromJSON)(names[i], nested));
        }
      }
      return this;
    };
    Namespace.prototype.get = function get(name) {
      return this.nested && this.nested[name] || null;
    };
    Namespace.prototype.getEnum = function getEnum(name) {
      if (this.nested && this.nested[name] instanceof Enum)
        return this.nested[name].values;
      throw Error("no such enum: " + name);
    };
    Namespace.prototype.add = function add(object) {
      if (!(object instanceof Field && object.extend !== void 0 || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace || object instanceof OneOf))
        throw TypeError("object must be a valid nested object");
      if (!this.nested)
        this.nested = {};
      else {
        var prev = this.get(object.name);
        if (prev) {
          if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {
            var nested = prev.nestedArray;
            for (var i = 0; i < nested.length; ++i)
              object.add(nested[i]);
            this.remove(prev);
            if (!this.nested)
              this.nested = {};
            object.setOptions(prev.options, true);
          } else
            throw Error("duplicate name '" + object.name + "' in " + this);
        }
      }
      this.nested[object.name] = object;
      object.onAdd(this);
      return clearCache(this);
    };
    Namespace.prototype.remove = function remove(object) {
      if (!(object instanceof ReflectionObject))
        throw TypeError("object must be a ReflectionObject");
      if (object.parent !== this)
        throw Error(object + " is not a member of " + this);
      delete this.nested[object.name];
      if (!Object.keys(this.nested).length)
        this.nested = void 0;
      object.onRemove(this);
      return clearCache(this);
    };
    Namespace.prototype.define = function define2(path, json) {
      if (util.isString(path))
        path = path.split(".");
      else if (!Array.isArray(path))
        throw TypeError("illegal path");
      if (path && path.length && path[0] === "")
        throw Error("path must be relative");
      var ptr = this;
      while (path.length > 0) {
        var part = path.shift();
        if (ptr.nested && ptr.nested[part]) {
          ptr = ptr.nested[part];
          if (!(ptr instanceof Namespace))
            throw Error("path conflicts with non-namespace objects");
        } else
          ptr.add(ptr = new Namespace(part));
      }
      if (json)
        ptr.addJSON(json);
      return ptr;
    };
    Namespace.prototype.resolveAll = function resolveAll() {
      var nested = this.nestedArray, i = 0;
      while (i < nested.length)
        if (nested[i] instanceof Namespace)
          nested[i++].resolveAll();
        else
          nested[i++].resolve();
      return this.resolve();
    };
    Namespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {
      if (typeof filterTypes === "boolean") {
        parentAlreadyChecked = filterTypes;
        filterTypes = void 0;
      } else if (filterTypes && !Array.isArray(filterTypes))
        filterTypes = [filterTypes];
      if (util.isString(path) && path.length) {
        if (path === ".")
          return this.root;
        path = path.split(".");
      } else if (!path.length)
        return this;
      if (path[0] === "")
        return this.root.lookup(path.slice(1), filterTypes);
      var found = this.get(path[0]);
      if (found) {
        if (path.length === 1) {
          if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)
            return found;
        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))
          return found;
      } else
        for (var i = 0; i < this.nestedArray.length; ++i)
          if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))
            return found;
      if (this.parent === null || parentAlreadyChecked)
        return null;
      return this.parent.lookup(path, filterTypes);
    };
    Namespace.prototype.lookupType = function lookupType(path) {
      var found = this.lookup(path, [Type]);
      if (!found)
        throw Error("no such type: " + path);
      return found;
    };
    Namespace.prototype.lookupEnum = function lookupEnum(path) {
      var found = this.lookup(path, [Enum]);
      if (!found)
        throw Error("no such Enum '" + path + "' in " + this);
      return found;
    };
    Namespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {
      var found = this.lookup(path, [Type, Enum]);
      if (!found)
        throw Error("no such Type or Enum '" + path + "' in " + this);
      return found;
    };
    Namespace.prototype.lookupService = function lookupService(path) {
      var found = this.lookup(path, [Service]);
      if (!found)
        throw Error("no such Service '" + path + "' in " + this);
      return found;
    };
    Namespace._configure = function(Type_, Service_, Enum_) {
      Type = Type_;
      Service = Service_;
      Enum = Enum_;
    };
  }
});

// node_modules/protobufjs/src/mapfield.js
var require_mapfield = __commonJS({
  "node_modules/protobufjs/src/mapfield.js"(exports2, module2) {
    "use strict";
    module2.exports = MapField;
    var Field = require_field();
    ((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = "MapField";
    var types2 = require_types();
    var util = require_util();
    function MapField(name, id, keyType, type, options2, comment) {
      Field.call(this, name, id, type, void 0, void 0, options2, comment);
      if (!util.isString(keyType))
        throw TypeError("keyType must be a string");
      this.keyType = keyType;
      this.resolvedKeyType = null;
      this.map = true;
    }
    MapField.fromJSON = function fromJSON(name, json) {
      return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);
    };
    MapField.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "keyType",
        this.keyType,
        "type",
        this.type,
        "id",
        this.id,
        "extend",
        this.extend,
        "options",
        this.options,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    MapField.prototype.resolve = function resolve2() {
      if (this.resolved)
        return this;
      if (types2.mapKey[this.keyType] === void 0)
        throw Error("invalid key type: " + this.keyType);
      return Field.prototype.resolve.call(this);
    };
    MapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {
      if (typeof fieldValueType === "function")
        fieldValueType = util.decorateType(fieldValueType).name;
      else if (fieldValueType && typeof fieldValueType === "object")
        fieldValueType = util.decorateEnum(fieldValueType).name;
      return function mapFieldDecorator(prototype, fieldName) {
        util.decorateType(prototype.constructor).add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));
      };
    };
  }
});

// node_modules/protobufjs/src/method.js
var require_method = __commonJS({
  "node_modules/protobufjs/src/method.js"(exports2, module2) {
    "use strict";
    module2.exports = Method;
    var ReflectionObject = require_object();
    ((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = "Method";
    var util = require_util();
    function Method(name, type, requestType, responseType, requestStream, responseStream, options2, comment, parsedOptions) {
      if (util.isObject(requestStream)) {
        options2 = requestStream;
        requestStream = responseStream = void 0;
      } else if (util.isObject(responseStream)) {
        options2 = responseStream;
        responseStream = void 0;
      }
      if (!(type === void 0 || util.isString(type)))
        throw TypeError("type must be a string");
      if (!util.isString(requestType))
        throw TypeError("requestType must be a string");
      if (!util.isString(responseType))
        throw TypeError("responseType must be a string");
      ReflectionObject.call(this, name, options2);
      this.type = type || "rpc";
      this.requestType = requestType;
      this.requestStream = requestStream ? true : void 0;
      this.responseType = responseType;
      this.responseStream = responseStream ? true : void 0;
      this.resolvedRequestType = null;
      this.resolvedResponseType = null;
      this.comment = comment;
      this.parsedOptions = parsedOptions;
    }
    Method.fromJSON = function fromJSON(name, json) {
      return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);
    };
    Method.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "type",
        this.type !== "rpc" && this.type || void 0,
        "requestType",
        this.requestType,
        "requestStream",
        this.requestStream,
        "responseType",
        this.responseType,
        "responseStream",
        this.responseStream,
        "options",
        this.options,
        "comment",
        keepComments ? this.comment : void 0,
        "parsedOptions",
        this.parsedOptions
      ]);
    };
    Method.prototype.resolve = function resolve2() {
      if (this.resolved)
        return this;
      this.resolvedRequestType = this.parent.lookupType(this.requestType);
      this.resolvedResponseType = this.parent.lookupType(this.responseType);
      return ReflectionObject.prototype.resolve.call(this);
    };
  }
});

// node_modules/protobufjs/src/service.js
var require_service2 = __commonJS({
  "node_modules/protobufjs/src/service.js"(exports2, module2) {
    "use strict";
    module2.exports = Service;
    var Namespace = require_namespace();
    ((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = "Service";
    var Method = require_method();
    var util = require_util();
    var rpc = require_rpc();
    function Service(name, options2) {
      Namespace.call(this, name, options2);
      this.methods = {};
      this._methodsArray = null;
    }
    Service.fromJSON = function fromJSON(name, json) {
      var service = new Service(name, json.options);
      if (json.methods)
        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)
          service.add(Method.fromJSON(names[i], json.methods[names[i]]));
      if (json.nested)
        service.addJSON(json.nested);
      service.comment = json.comment;
      return service;
    };
    Service.prototype.toJSON = function toJSON(toJSONOptions) {
      var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "options",
        inherited && inherited.options || void 0,
        "methods",
        Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || {},
        "nested",
        inherited && inherited.nested || void 0,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    Object.defineProperty(Service.prototype, "methodsArray", {
      get: function() {
        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));
      }
    });
    function clearCache(service) {
      service._methodsArray = null;
      return service;
    }
    Service.prototype.get = function get(name) {
      return this.methods[name] || Namespace.prototype.get.call(this, name);
    };
    Service.prototype.resolveAll = function resolveAll() {
      var methods = this.methodsArray;
      for (var i = 0; i < methods.length; ++i)
        methods[i].resolve();
      return Namespace.prototype.resolve.call(this);
    };
    Service.prototype.add = function add(object) {
      if (this.get(object.name))
        throw Error("duplicate name '" + object.name + "' in " + this);
      if (object instanceof Method) {
        this.methods[object.name] = object;
        object.parent = this;
        return clearCache(this);
      }
      return Namespace.prototype.add.call(this, object);
    };
    Service.prototype.remove = function remove(object) {
      if (object instanceof Method) {
        if (this.methods[object.name] !== object)
          throw Error(object + " is not a member of " + this);
        delete this.methods[object.name];
        object.parent = null;
        return clearCache(this);
      }
      return Namespace.prototype.remove.call(this, object);
    };
    Service.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {
      var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);
      for (var i = 0, method; i < this.methodsArray.length; ++i) {
        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\w_]/g, "");
        rpcService[methodName] = util.codegen(["r", "c"], util.isReserved(methodName) ? methodName + "_" : methodName)("return this.rpcCall(m,q,s,r,c)")({
          m: method,
          q: method.resolvedRequestType.ctor,
          s: method.resolvedResponseType.ctor
        });
      }
      return rpcService;
    };
  }
});

// node_modules/protobufjs/src/message.js
var require_message = __commonJS({
  "node_modules/protobufjs/src/message.js"(exports2, module2) {
    "use strict";
    module2.exports = Message;
    var util = require_minimal();
    function Message(properties) {
      if (properties)
        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          this[keys[i]] = properties[keys[i]];
    }
    Message.create = function create(properties) {
      return this.$type.create(properties);
    };
    Message.encode = function encode(message, writer) {
      return this.$type.encode(message, writer);
    };
    Message.encodeDelimited = function encodeDelimited(message, writer) {
      return this.$type.encodeDelimited(message, writer);
    };
    Message.decode = function decode(reader) {
      return this.$type.decode(reader);
    };
    Message.decodeDelimited = function decodeDelimited(reader) {
      return this.$type.decodeDelimited(reader);
    };
    Message.verify = function verify(message) {
      return this.$type.verify(message);
    };
    Message.fromObject = function fromObject(object) {
      return this.$type.fromObject(object);
    };
    Message.toObject = function toObject(message, options2) {
      return this.$type.toObject(message, options2);
    };
    Message.prototype.toJSON = function toJSON() {
      return this.$type.toObject(this, util.toJSONOptions);
    };
  }
});

// node_modules/protobufjs/src/decoder.js
var require_decoder = __commonJS({
  "node_modules/protobufjs/src/decoder.js"(exports2, module2) {
    "use strict";
    module2.exports = decoder;
    var Enum = require_enum();
    var types2 = require_types();
    var util = require_util();
    function missing(field) {
      return "missing required '" + field.name + "'";
    }
    function decoder(mtype) {
      var gen = util.codegen(["r", "l"], mtype.name + "$decode")("if(!(r instanceof Reader))")("r=Reader.create(r)")("var c=l===undefined?r.len:r.pos+l,m=new this.ctor" + (mtype.fieldsArray.filter(function(field2) {
        return field2.map;
      }).length ? ",k,value" : ""))("while(r.pos<c){")("var t=r.uint32()");
      if (mtype.group)
        gen("if((t&7)===4)")("break");
      gen("switch(t>>>3){");
      var i = 0;
      for (; i < mtype.fieldsArray.length; ++i) {
        var field = mtype._fieldsArray[i].resolve(), type = field.resolvedType instanceof Enum ? "int32" : field.type, ref = "m" + util.safeProp(field.name);
        gen("case %i:", field.id);
        if (field.map) {
          gen("if(%s===util.emptyObject)", ref)("%s={}", ref)("var c2 = r.uint32()+r.pos");
          if (types2.defaults[field.keyType] !== void 0)
            gen("k=%j", types2.defaults[field.keyType]);
          else
            gen("k=null");
          if (types2.defaults[type] !== void 0)
            gen("value=%j", types2.defaults[type]);
          else
            gen("value=null");
          gen("while(r.pos<c2){")("var tag2=r.uint32()")("switch(tag2>>>3){")("case 1: k=r.%s(); break", field.keyType)("case 2:");
          if (types2.basic[type] === void 0)
            gen("value=types[%i].decode(r,r.uint32())", i);
          else
            gen("value=r.%s()", type);
          gen("break")("default:")("r.skipType(tag2&7)")("break")("}")("}");
          if (types2.long[field.keyType] !== void 0)
            gen('%s[typeof k==="object"?util.longToHash(k):k]=value', ref);
          else
            gen("%s[k]=value", ref);
        } else if (field.repeated) {
          gen("if(!(%s&&%s.length))", ref, ref)("%s=[]", ref);
          if (types2.packed[type] !== void 0)
            gen("if((t&7)===2){")("var c2=r.uint32()+r.pos")("while(r.pos<c2)")("%s.push(r.%s())", ref, type)("}else");
          if (types2.basic[type] === void 0)
            gen(field.resolvedType.group ? "%s.push(types[%i].decode(r))" : "%s.push(types[%i].decode(r,r.uint32()))", ref, i);
          else
            gen("%s.push(r.%s())", ref, type);
        } else if (types2.basic[type] === void 0)
          gen(field.resolvedType.group ? "%s=types[%i].decode(r)" : "%s=types[%i].decode(r,r.uint32())", ref, i);
        else
          gen("%s=r.%s()", ref, type);
        gen("break");
      }
      gen("default:")("r.skipType(t&7)")("break")("}")("}");
      for (i = 0; i < mtype._fieldsArray.length; ++i) {
        var rfield = mtype._fieldsArray[i];
        if (rfield.required)
          gen("if(!m.hasOwnProperty(%j))", rfield.name)("throw util.ProtocolError(%j,{instance:m})", missing(rfield));
      }
      return gen("return m");
    }
  }
});

// node_modules/protobufjs/src/verifier.js
var require_verifier = __commonJS({
  "node_modules/protobufjs/src/verifier.js"(exports2, module2) {
    "use strict";
    module2.exports = verifier;
    var Enum = require_enum();
    var util = require_util();
    function invalid(field, expected) {
      return field.name + ": " + expected + (field.repeated && expected !== "array" ? "[]" : field.map && expected !== "object" ? "{k:" + field.keyType + "}" : "") + " expected";
    }
    function genVerifyValue(gen, field, fieldIndex, ref) {
      if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) {
          gen("switch(%s){", ref)("default:")("return%j", invalid(field, "enum value"));
          for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j)
            gen("case %i:", field.resolvedType.values[keys[j]]);
          gen("break")("}");
        } else {
          gen("{")("var e=types[%i].verify(%s);", fieldIndex, ref)("if(e)")("return%j+e", field.name + ".")("}");
        }
      } else {
        switch (field.type) {
          case "int32":
          case "uint32":
          case "sint32":
          case "fixed32":
          case "sfixed32":
            gen("if(!util.isInteger(%s))", ref)("return%j", invalid(field, "integer"));
            break;
          case "int64":
          case "uint64":
          case "sint64":
          case "fixed64":
          case "sfixed64":
            gen("if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))", ref, ref, ref, ref)("return%j", invalid(field, "integer|Long"));
            break;
          case "float":
          case "double":
            gen('if(typeof %s!=="number")', ref)("return%j", invalid(field, "number"));
            break;
          case "bool":
            gen('if(typeof %s!=="boolean")', ref)("return%j", invalid(field, "boolean"));
            break;
          case "string":
            gen("if(!util.isString(%s))", ref)("return%j", invalid(field, "string"));
            break;
          case "bytes":
            gen('if(!(%s&&typeof %s.length==="number"||util.isString(%s)))', ref, ref, ref)("return%j", invalid(field, "buffer"));
            break;
        }
      }
      return gen;
    }
    function genVerifyKey(gen, field, ref) {
      switch (field.keyType) {
        case "int32":
        case "uint32":
        case "sint32":
        case "fixed32":
        case "sfixed32":
          gen("if(!util.key32Re.test(%s))", ref)("return%j", invalid(field, "integer key"));
          break;
        case "int64":
        case "uint64":
        case "sint64":
        case "fixed64":
        case "sfixed64":
          gen("if(!util.key64Re.test(%s))", ref)("return%j", invalid(field, "integer|Long key"));
          break;
        case "bool":
          gen("if(!util.key2Re.test(%s))", ref)("return%j", invalid(field, "boolean key"));
          break;
      }
      return gen;
    }
    function verifier(mtype) {
      var gen = util.codegen(["m"], mtype.name + "$verify")('if(typeof m!=="object"||m===null)')("return%j", "object expected");
      var oneofs = mtype.oneofsArray, seenFirstField = {};
      if (oneofs.length)
        gen("var p={}");
      for (var i = 0; i < mtype.fieldsArray.length; ++i) {
        var field = mtype._fieldsArray[i].resolve(), ref = "m" + util.safeProp(field.name);
        if (field.optional)
          gen("if(%s!=null&&m.hasOwnProperty(%j)){", ref, field.name);
        if (field.map) {
          gen("if(!util.isObject(%s))", ref)("return%j", invalid(field, "object"))("var k=Object.keys(%s)", ref)("for(var i=0;i<k.length;++i){");
          genVerifyKey(gen, field, "k[i]");
          genVerifyValue(gen, field, i, ref + "[k[i]]")("}");
        } else if (field.repeated) {
          gen("if(!Array.isArray(%s))", ref)("return%j", invalid(field, "array"))("for(var i=0;i<%s.length;++i){", ref);
          genVerifyValue(gen, field, i, ref + "[i]")("}");
        } else {
          if (field.partOf) {
            var oneofProp = util.safeProp(field.partOf.name);
            if (seenFirstField[field.partOf.name] === 1)
              gen("if(p%s===1)", oneofProp)("return%j", field.partOf.name + ": multiple values");
            seenFirstField[field.partOf.name] = 1;
            gen("p%s=1", oneofProp);
          }
          genVerifyValue(gen, field, i, ref);
        }
        if (field.optional)
          gen("}");
      }
      return gen("return null");
    }
  }
});

// node_modules/protobufjs/src/converter.js
var require_converter = __commonJS({
  "node_modules/protobufjs/src/converter.js"(exports2) {
    "use strict";
    var converter = exports2;
    var Enum = require_enum();
    var util = require_util();
    function genValuePartial_fromObject(gen, field, fieldIndex, prop) {
      if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) {
          gen("switch(d%s){", prop);
          for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {
            if (field.repeated && values[keys[i]] === field.typeDefault)
              gen("default:");
            gen("case%j:", keys[i])("case %i:", values[keys[i]])("m%s=%j", prop, values[keys[i]])("break");
          }
          gen("}");
        } else
          gen('if(typeof d%s!=="object")', prop)("throw TypeError(%j)", field.fullName + ": object expected")("m%s=types[%i].fromObject(d%s)", prop, fieldIndex, prop);
      } else {
        var isUnsigned = false;
        switch (field.type) {
          case "double":
          case "float":
            gen("m%s=Number(d%s)", prop, prop);
            break;
          case "uint32":
          case "fixed32":
            gen("m%s=d%s>>>0", prop, prop);
            break;
          case "int32":
          case "sint32":
          case "sfixed32":
            gen("m%s=d%s|0", prop, prop);
            break;
          case "uint64":
            isUnsigned = true;
          case "int64":
          case "sint64":
          case "fixed64":
          case "sfixed64":
            gen("if(util.Long)")("(m%s=util.Long.fromValue(d%s)).unsigned=%j", prop, prop, isUnsigned)('else if(typeof d%s==="string")', prop)("m%s=parseInt(d%s,10)", prop, prop)('else if(typeof d%s==="number")', prop)("m%s=d%s", prop, prop)('else if(typeof d%s==="object")', prop)("m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)", prop, prop, prop, isUnsigned ? "true" : "");
            break;
          case "bytes":
            gen('if(typeof d%s==="string")', prop)("util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)", prop, prop, prop)("else if(d%s.length)", prop)("m%s=d%s", prop, prop);
            break;
          case "string":
            gen("m%s=String(d%s)", prop, prop);
            break;
          case "bool":
            gen("m%s=Boolean(d%s)", prop, prop);
            break;
        }
      }
      return gen;
    }
    converter.fromObject = function fromObject(mtype) {
      var fields = mtype.fieldsArray;
      var gen = util.codegen(["d"], mtype.name + "$fromObject")("if(d instanceof this.ctor)")("return d");
      if (!fields.length)
        return gen("return new this.ctor");
      gen("var m=new this.ctor");
      for (var i = 0; i < fields.length; ++i) {
        var field = fields[i].resolve(), prop = util.safeProp(field.name);
        if (field.map) {
          gen("if(d%s){", prop)('if(typeof d%s!=="object")', prop)("throw TypeError(%j)", field.fullName + ": object expected")("m%s={}", prop)("for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){", prop);
          genValuePartial_fromObject(gen, field, i, prop + "[ks[i]]")("}")("}");
        } else if (field.repeated) {
          gen("if(d%s){", prop)("if(!Array.isArray(d%s))", prop)("throw TypeError(%j)", field.fullName + ": array expected")("m%s=[]", prop)("for(var i=0;i<d%s.length;++i){", prop);
          genValuePartial_fromObject(gen, field, i, prop + "[i]")("}")("}");
        } else {
          if (!(field.resolvedType instanceof Enum))
            gen("if(d%s!=null){", prop);
          genValuePartial_fromObject(gen, field, i, prop);
          if (!(field.resolvedType instanceof Enum))
            gen("}");
        }
      }
      return gen("return m");
    };
    function genValuePartial_toObject(gen, field, fieldIndex, prop) {
      if (field.resolvedType) {
        if (field.resolvedType instanceof Enum)
          gen("d%s=o.enums===String?types[%i].values[m%s]:m%s", prop, fieldIndex, prop, prop);
        else
          gen("d%s=types[%i].toObject(m%s,o)", prop, fieldIndex, prop);
      } else {
        var isUnsigned = false;
        switch (field.type) {
          case "double":
          case "float":
            gen("d%s=o.json&&!isFinite(m%s)?String(m%s):m%s", prop, prop, prop, prop);
            break;
          case "uint64":
            isUnsigned = true;
          case "int64":
          case "sint64":
          case "fixed64":
          case "sfixed64":
            gen('if(typeof m%s==="number")', prop)("d%s=o.longs===String?String(m%s):m%s", prop, prop, prop)("else")("d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s", prop, prop, prop, prop, isUnsigned ? "true" : "", prop);
            break;
          case "bytes":
            gen("d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s", prop, prop, prop, prop, prop);
            break;
          default:
            gen("d%s=m%s", prop, prop);
            break;
        }
      }
      return gen;
    }
    converter.toObject = function toObject(mtype) {
      var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);
      if (!fields.length)
        return util.codegen()("return {}");
      var gen = util.codegen(["m", "o"], mtype.name + "$toObject")("if(!o)")("o={}")("var d={}");
      var repeatedFields = [], mapFields = [], normalFields = [], i = 0;
      for (; i < fields.length; ++i)
        if (!fields[i].partOf)
          (fields[i].resolve().repeated ? repeatedFields : fields[i].map ? mapFields : normalFields).push(fields[i]);
      if (repeatedFields.length) {
        gen("if(o.arrays||o.defaults){");
        for (i = 0; i < repeatedFields.length; ++i)
          gen("d%s=[]", util.safeProp(repeatedFields[i].name));
        gen("}");
      }
      if (mapFields.length) {
        gen("if(o.objects||o.defaults){");
        for (i = 0; i < mapFields.length; ++i)
          gen("d%s={}", util.safeProp(mapFields[i].name));
        gen("}");
      }
      if (normalFields.length) {
        gen("if(o.defaults){");
        for (i = 0; i < normalFields.length; ++i) {
          var field = normalFields[i], prop = util.safeProp(field.name);
          if (field.resolvedType instanceof Enum)
            gen("d%s=o.enums===String?%j:%j", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);
          else if (field.long)
            gen("if(util.Long){")("var n=new util.Long(%i,%i,%j)", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)("d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n", prop)("}else")("d%s=o.longs===String?%j:%i", prop, field.typeDefault.toString(), field.typeDefault.toNumber());
          else if (field.bytes) {
            var arrayDefault = "[" + Array.prototype.slice.call(field.typeDefault).join(",") + "]";
            gen("if(o.bytes===String)d%s=%j", prop, String.fromCharCode.apply(String, field.typeDefault))("else{")("d%s=%s", prop, arrayDefault)("if(o.bytes!==Array)d%s=util.newBuffer(d%s)", prop, prop)("}");
          } else
            gen("d%s=%j", prop, field.typeDefault);
        }
        gen("}");
      }
      var hasKs2 = false;
      for (i = 0; i < fields.length; ++i) {
        var field = fields[i], index2 = mtype._fieldsArray.indexOf(field), prop = util.safeProp(field.name);
        if (field.map) {
          if (!hasKs2) {
            hasKs2 = true;
            gen("var ks2");
          }
          gen("if(m%s&&(ks2=Object.keys(m%s)).length){", prop, prop)("d%s={}", prop)("for(var j=0;j<ks2.length;++j){");
          genValuePartial_toObject(gen, field, index2, prop + "[ks2[j]]")("}");
        } else if (field.repeated) {
          gen("if(m%s&&m%s.length){", prop, prop)("d%s=[]", prop)("for(var j=0;j<m%s.length;++j){", prop);
          genValuePartial_toObject(gen, field, index2, prop + "[j]")("}");
        } else {
          gen("if(m%s!=null&&m.hasOwnProperty(%j)){", prop, field.name);
          genValuePartial_toObject(gen, field, index2, prop);
          if (field.partOf)
            gen("if(o.oneofs)")("d%s=%j", util.safeProp(field.partOf.name), field.name);
        }
        gen("}");
      }
      return gen("return d");
    };
  }
});

// node_modules/protobufjs/src/wrappers.js
var require_wrappers = __commonJS({
  "node_modules/protobufjs/src/wrappers.js"(exports2) {
    "use strict";
    var wrappers = exports2;
    var Message = require_message();
    wrappers[".google.protobuf.Any"] = {
      fromObject: function(object) {
        if (object && object["@type"]) {
          var name = object["@type"].substring(object["@type"].lastIndexOf("/") + 1);
          var type = this.lookup(name);
          if (type) {
            var type_url = object["@type"].charAt(0) === "." ? object["@type"].substr(1) : object["@type"];
            if (type_url.indexOf("/") === -1) {
              type_url = "/" + type_url;
            }
            return this.create({
              type_url,
              value: type.encode(type.fromObject(object)).finish()
            });
          }
        }
        return this.fromObject(object);
      },
      toObject: function(message, options2) {
        var googleApi = "type.googleapis.com/";
        var prefix = "";
        var name = "";
        if (options2 && options2.json && message.type_url && message.value) {
          name = message.type_url.substring(message.type_url.lastIndexOf("/") + 1);
          prefix = message.type_url.substring(0, message.type_url.lastIndexOf("/") + 1);
          var type = this.lookup(name);
          if (type)
            message = type.decode(message.value);
        }
        if (!(message instanceof this.ctor) && message instanceof Message) {
          var object = message.$type.toObject(message, options2);
          var messageName = message.$type.fullName[0] === "." ? message.$type.fullName.substr(1) : message.$type.fullName;
          if (prefix === "") {
            prefix = googleApi;
          }
          name = prefix + messageName;
          object["@type"] = name;
          return object;
        }
        return this.toObject(message, options2);
      }
    };
  }
});

// node_modules/protobufjs/src/type.js
var require_type = __commonJS({
  "node_modules/protobufjs/src/type.js"(exports2, module2) {
    "use strict";
    module2.exports = Type;
    var Namespace = require_namespace();
    ((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = "Type";
    var Enum = require_enum();
    var OneOf = require_oneof();
    var Field = require_field();
    var MapField = require_mapfield();
    var Service = require_service2();
    var Message = require_message();
    var Reader = require_reader();
    var Writer = require_writer();
    var util = require_util();
    var encoder = require_encoder();
    var decoder = require_decoder();
    var verifier = require_verifier();
    var converter = require_converter();
    var wrappers = require_wrappers();
    function Type(name, options2) {
      Namespace.call(this, name, options2);
      this.fields = {};
      this.oneofs = void 0;
      this.extensions = void 0;
      this.reserved = void 0;
      this.group = void 0;
      this._fieldsById = null;
      this._fieldsArray = null;
      this._oneofsArray = null;
      this._ctor = null;
    }
    Object.defineProperties(Type.prototype, {
      fieldsById: {
        get: function() {
          if (this._fieldsById)
            return this._fieldsById;
          this._fieldsById = {};
          for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {
            var field = this.fields[names[i]], id = field.id;
            if (this._fieldsById[id])
              throw Error("duplicate id " + id + " in " + this);
            this._fieldsById[id] = field;
          }
          return this._fieldsById;
        }
      },
      fieldsArray: {
        get: function() {
          return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));
        }
      },
      oneofsArray: {
        get: function() {
          return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));
        }
      },
      ctor: {
        get: function() {
          return this._ctor || (this.ctor = Type.generateConstructor(this)());
        },
        set: function(ctor) {
          var prototype = ctor.prototype;
          if (!(prototype instanceof Message)) {
            (ctor.prototype = new Message()).constructor = ctor;
            util.merge(ctor.prototype, prototype);
          }
          ctor.$type = ctor.prototype.$type = this;
          util.merge(ctor, Message, true);
          this._ctor = ctor;
          var i = 0;
          for (; i < this.fieldsArray.length; ++i)
            this._fieldsArray[i].resolve();
          var ctorProperties = {};
          for (i = 0; i < this.oneofsArray.length; ++i)
            ctorProperties[this._oneofsArray[i].resolve().name] = {
              get: util.oneOfGetter(this._oneofsArray[i].oneof),
              set: util.oneOfSetter(this._oneofsArray[i].oneof)
            };
          if (i)
            Object.defineProperties(ctor.prototype, ctorProperties);
        }
      }
    });
    Type.generateConstructor = function generateConstructor(mtype) {
      var gen = util.codegen(["p"], mtype.name);
      for (var i = 0, field; i < mtype.fieldsArray.length; ++i)
        if ((field = mtype._fieldsArray[i]).map)
          gen("this%s={}", util.safeProp(field.name));
        else if (field.repeated)
          gen("this%s=[]", util.safeProp(field.name));
      return gen("if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)")("this[ks[i]]=p[ks[i]]");
    };
    function clearCache(type) {
      type._fieldsById = type._fieldsArray = type._oneofsArray = null;
      delete type.encode;
      delete type.decode;
      delete type.verify;
      return type;
    }
    Type.fromJSON = function fromJSON(name, json) {
      var type = new Type(name, json.options);
      type.extensions = json.extensions;
      type.reserved = json.reserved;
      var names = Object.keys(json.fields), i = 0;
      for (; i < names.length; ++i)
        type.add((typeof json.fields[names[i]].keyType !== "undefined" ? MapField.fromJSON : Field.fromJSON)(names[i], json.fields[names[i]]));
      if (json.oneofs)
        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)
          type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));
      if (json.nested)
        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {
          var nested = json.nested[names[i]];
          type.add((nested.id !== void 0 ? Field.fromJSON : nested.fields !== void 0 ? Type.fromJSON : nested.values !== void 0 ? Enum.fromJSON : nested.methods !== void 0 ? Service.fromJSON : Namespace.fromJSON)(names[i], nested));
        }
      if (json.extensions && json.extensions.length)
        type.extensions = json.extensions;
      if (json.reserved && json.reserved.length)
        type.reserved = json.reserved;
      if (json.group)
        type.group = true;
      if (json.comment)
        type.comment = json.comment;
      return type;
    };
    Type.prototype.toJSON = function toJSON(toJSONOptions) {
      var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "options",
        inherited && inherited.options || void 0,
        "oneofs",
        Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),
        "fields",
        Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) {
          return !obj.declaringField;
        }), toJSONOptions) || {},
        "extensions",
        this.extensions && this.extensions.length ? this.extensions : void 0,
        "reserved",
        this.reserved && this.reserved.length ? this.reserved : void 0,
        "group",
        this.group || void 0,
        "nested",
        inherited && inherited.nested || void 0,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    Type.prototype.resolveAll = function resolveAll() {
      var fields = this.fieldsArray, i = 0;
      while (i < fields.length)
        fields[i++].resolve();
      var oneofs = this.oneofsArray;
      i = 0;
      while (i < oneofs.length)
        oneofs[i++].resolve();
      return Namespace.prototype.resolveAll.call(this);
    };
    Type.prototype.get = function get(name) {
      return this.fields[name] || this.oneofs && this.oneofs[name] || this.nested && this.nested[name] || null;
    };
    Type.prototype.add = function add(object) {
      if (this.get(object.name))
        throw Error("duplicate name '" + object.name + "' in " + this);
      if (object instanceof Field && object.extend === void 0) {
        if (this._fieldsById ? this._fieldsById[object.id] : this.fieldsById[object.id])
          throw Error("duplicate id " + object.id + " in " + this);
        if (this.isReservedId(object.id))
          throw Error("id " + object.id + " is reserved in " + this);
        if (this.isReservedName(object.name))
          throw Error("name '" + object.name + "' is reserved in " + this);
        if (object.parent)
          object.parent.remove(object);
        this.fields[object.name] = object;
        object.message = this;
        object.onAdd(this);
        return clearCache(this);
      }
      if (object instanceof OneOf) {
        if (!this.oneofs)
          this.oneofs = {};
        this.oneofs[object.name] = object;
        object.onAdd(this);
        return clearCache(this);
      }
      return Namespace.prototype.add.call(this, object);
    };
    Type.prototype.remove = function remove(object) {
      if (object instanceof Field && object.extend === void 0) {
        if (!this.fields || this.fields[object.name] !== object)
          throw Error(object + " is not a member of " + this);
        delete this.fields[object.name];
        object.parent = null;
        object.onRemove(this);
        return clearCache(this);
      }
      if (object instanceof OneOf) {
        if (!this.oneofs || this.oneofs[object.name] !== object)
          throw Error(object + " is not a member of " + this);
        delete this.oneofs[object.name];
        object.parent = null;
        object.onRemove(this);
        return clearCache(this);
      }
      return Namespace.prototype.remove.call(this, object);
    };
    Type.prototype.isReservedId = function isReservedId(id) {
      return Namespace.isReservedId(this.reserved, id);
    };
    Type.prototype.isReservedName = function isReservedName(name) {
      return Namespace.isReservedName(this.reserved, name);
    };
    Type.prototype.create = function create(properties) {
      return new this.ctor(properties);
    };
    Type.prototype.setup = function setup() {
      var fullName = this.fullName, types2 = [];
      for (var i = 0; i < this.fieldsArray.length; ++i)
        types2.push(this._fieldsArray[i].resolve().resolvedType);
      this.encode = encoder(this)({
        Writer,
        types: types2,
        util
      });
      this.decode = decoder(this)({
        Reader,
        types: types2,
        util
      });
      this.verify = verifier(this)({
        types: types2,
        util
      });
      this.fromObject = converter.fromObject(this)({
        types: types2,
        util
      });
      this.toObject = converter.toObject(this)({
        types: types2,
        util
      });
      var wrapper = wrappers[fullName];
      if (wrapper) {
        var originalThis = Object.create(this);
        originalThis.fromObject = this.fromObject;
        this.fromObject = wrapper.fromObject.bind(originalThis);
        originalThis.toObject = this.toObject;
        this.toObject = wrapper.toObject.bind(originalThis);
      }
      return this;
    };
    Type.prototype.encode = function encode_setup(message, writer) {
      return this.setup().encode(message, writer);
    };
    Type.prototype.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();
    };
    Type.prototype.decode = function decode_setup(reader, length) {
      return this.setup().decode(reader, length);
    };
    Type.prototype.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof Reader))
        reader = Reader.create(reader);
      return this.decode(reader, reader.uint32());
    };
    Type.prototype.verify = function verify_setup(message) {
      return this.setup().verify(message);
    };
    Type.prototype.fromObject = function fromObject(object) {
      return this.setup().fromObject(object);
    };
    Type.prototype.toObject = function toObject(message, options2) {
      return this.setup().toObject(message, options2);
    };
    Type.d = function decorateType(typeName) {
      return function typeDecorator(target) {
        util.decorateType(target, typeName);
      };
    };
  }
});

// node_modules/protobufjs/src/root.js
var require_root = __commonJS({
  "node_modules/protobufjs/src/root.js"(exports2, module2) {
    "use strict";
    module2.exports = Root2;
    var Namespace = require_namespace();
    ((Root2.prototype = Object.create(Namespace.prototype)).constructor = Root2).className = "Root";
    var Field = require_field();
    var Enum = require_enum();
    var OneOf = require_oneof();
    var util = require_util();
    var Type;
    var parse;
    var common;
    function Root2(options2) {
      Namespace.call(this, "", options2);
      this.deferred = [];
      this.files = [];
    }
    Root2.fromJSON = function fromJSON(json, root) {
      if (!root)
        root = new Root2();
      if (json.options)
        root.setOptions(json.options);
      return root.addJSON(json.nested);
    };
    Root2.prototype.resolvePath = util.path.resolve;
    Root2.prototype.fetch = util.fetch;
    function SYNC() {
    }
    Root2.prototype.load = function load2(filename, options2, callback) {
      if (typeof options2 === "function") {
        callback = options2;
        options2 = void 0;
      }
      var self2 = this;
      if (!callback)
        return util.asPromise(load2, self2, filename, options2);
      var sync = callback === SYNC;
      function finish(err, root) {
        if (!callback)
          return;
        var cb = callback;
        callback = null;
        if (sync)
          throw err;
        cb(err, root);
      }
      function getBundledFileName(filename2) {
        var idx = filename2.lastIndexOf("google/protobuf/");
        if (idx > -1) {
          var altname = filename2.substring(idx);
          if (altname in common)
            return altname;
        }
        return null;
      }
      function process2(filename2, source) {
        try {
          if (util.isString(source) && source.charAt(0) === "{")
            source = JSON.parse(source);
          if (!util.isString(source))
            self2.setOptions(source.options).addJSON(source.nested);
          else {
            parse.filename = filename2;
            var parsed = parse(source, self2, options2), resolved2, i2 = 0;
            if (parsed.imports) {
              for (; i2 < parsed.imports.length; ++i2)
                if (resolved2 = getBundledFileName(parsed.imports[i2]) || self2.resolvePath(filename2, parsed.imports[i2]))
                  fetch3(resolved2);
            }
            if (parsed.weakImports) {
              for (i2 = 0; i2 < parsed.weakImports.length; ++i2)
                if (resolved2 = getBundledFileName(parsed.weakImports[i2]) || self2.resolvePath(filename2, parsed.weakImports[i2]))
                  fetch3(resolved2, true);
            }
          }
        } catch (err) {
          finish(err);
        }
        if (!sync && !queued)
          finish(null, self2);
      }
      function fetch3(filename2, weak) {
        if (self2.files.indexOf(filename2) > -1)
          return;
        self2.files.push(filename2);
        if (filename2 in common) {
          if (sync)
            process2(filename2, common[filename2]);
          else {
            ++queued;
            setTimeout(function() {
              --queued;
              process2(filename2, common[filename2]);
            });
          }
          return;
        }
        if (sync) {
          var source;
          try {
            source = util.fs.readFileSync(filename2).toString("utf8");
          } catch (err) {
            if (!weak)
              finish(err);
            return;
          }
          process2(filename2, source);
        } else {
          ++queued;
          self2.fetch(filename2, function(err, source2) {
            --queued;
            if (!callback)
              return;
            if (err) {
              if (!weak)
                finish(err);
              else if (!queued)
                finish(null, self2);
              return;
            }
            process2(filename2, source2);
          });
        }
      }
      var queued = 0;
      if (util.isString(filename))
        filename = [filename];
      for (var i = 0, resolved; i < filename.length; ++i)
        if (resolved = self2.resolvePath("", filename[i]))
          fetch3(resolved);
      if (sync)
        return self2;
      if (!queued)
        finish(null, self2);
      return void 0;
    };
    Root2.prototype.loadSync = function loadSync(filename, options2) {
      if (!util.isNode)
        throw Error("not supported");
      return this.load(filename, options2, SYNC);
    };
    Root2.prototype.resolveAll = function resolveAll() {
      if (this.deferred.length)
        throw Error("unresolvable extensions: " + this.deferred.map(function(field) {
          return "'extend " + field.extend + "' in " + field.parent.fullName;
        }).join(", "));
      return Namespace.prototype.resolveAll.call(this);
    };
    var exposeRe = /^[A-Z]/;
    function tryHandleExtension(root, field) {
      var extendedType = field.parent.lookup(field.extend);
      if (extendedType) {
        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, void 0, field.options);
        sisterField.declaringField = field;
        field.extensionField = sisterField;
        extendedType.add(sisterField);
        return true;
      }
      return false;
    }
    Root2.prototype._handleAdd = function _handleAdd(object) {
      if (object instanceof Field) {
        if (object.extend !== void 0 && !object.extensionField) {
          if (!tryHandleExtension(this, object))
            this.deferred.push(object);
        }
      } else if (object instanceof Enum) {
        if (exposeRe.test(object.name))
          object.parent[object.name] = object.values;
      } else if (!(object instanceof OneOf)) {
        if (object instanceof Type)
          for (var i = 0; i < this.deferred.length; )
            if (tryHandleExtension(this, this.deferred[i]))
              this.deferred.splice(i, 1);
            else
              ++i;
        for (var j = 0; j < object.nestedArray.length; ++j)
          this._handleAdd(object._nestedArray[j]);
        if (exposeRe.test(object.name))
          object.parent[object.name] = object;
      }
    };
    Root2.prototype._handleRemove = function _handleRemove(object) {
      if (object instanceof Field) {
        if (object.extend !== void 0) {
          if (object.extensionField) {
            object.extensionField.parent.remove(object.extensionField);
            object.extensionField = null;
          } else {
            var index2 = this.deferred.indexOf(object);
            if (index2 > -1)
              this.deferred.splice(index2, 1);
          }
        }
      } else if (object instanceof Enum) {
        if (exposeRe.test(object.name))
          delete object.parent[object.name];
      } else if (object instanceof Namespace) {
        for (var i = 0; i < object.nestedArray.length; ++i)
          this._handleRemove(object._nestedArray[i]);
        if (exposeRe.test(object.name))
          delete object.parent[object.name];
      }
    };
    Root2._configure = function(Type_, parse_, common_) {
      Type = Type_;
      parse = parse_;
      common = common_;
    };
  }
});

// node_modules/protobufjs/src/util.js
var require_util = __commonJS({
  "node_modules/protobufjs/src/util.js"(exports2, module2) {
    "use strict";
    var util = module2.exports = require_minimal();
    var roots = require_roots();
    var Type;
    var Enum;
    util.codegen = require_codegen();
    util.fetch = require_fetch();
    util.path = require_path();
    util.fs = util.inquire("fs");
    util.toArray = function toArray(object) {
      if (object) {
        var keys = Object.keys(object), array = new Array(keys.length), index2 = 0;
        while (index2 < keys.length)
          array[index2] = object[keys[index2++]];
        return array;
      }
      return [];
    };
    util.toObject = function toObject(array) {
      var object = {}, index2 = 0;
      while (index2 < array.length) {
        var key = array[index2++], val = array[index2++];
        if (val !== void 0)
          object[key] = val;
      }
      return object;
    };
    var safePropBackslashRe = /\\/g;
    var safePropQuoteRe = /"/g;
    util.isReserved = function isReserved(name) {
      return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);
    };
    util.safeProp = function safeProp2(prop) {
      if (!/^[$\w_]+$/.test(prop) || util.isReserved(prop))
        return '["' + prop.replace(safePropBackslashRe, "\\\\").replace(safePropQuoteRe, '\\"') + '"]';
      return "." + prop;
    };
    util.ucFirst = function ucFirst(str) {
      return str.charAt(0).toUpperCase() + str.substring(1);
    };
    var camelCaseRe = /_([a-z])/g;
    util.camelCase = function camelCase(str) {
      return str.substring(0, 1) + str.substring(1).replace(camelCaseRe, function($0, $1) {
        return $1.toUpperCase();
      });
    };
    util.compareFieldsById = function compareFieldsById(a, b) {
      return a.id - b.id;
    };
    util.decorateType = function decorateType(ctor, typeName) {
      if (ctor.$type) {
        if (typeName && ctor.$type.name !== typeName) {
          util.decorateRoot.remove(ctor.$type);
          ctor.$type.name = typeName;
          util.decorateRoot.add(ctor.$type);
        }
        return ctor.$type;
      }
      if (!Type)
        Type = require_type();
      var type = new Type(typeName || ctor.name);
      util.decorateRoot.add(type);
      type.ctor = ctor;
      Object.defineProperty(ctor, "$type", {value: type, enumerable: false});
      Object.defineProperty(ctor.prototype, "$type", {value: type, enumerable: false});
      return type;
    };
    var decorateEnumIndex = 0;
    util.decorateEnum = function decorateEnum(object) {
      if (object.$type)
        return object.$type;
      if (!Enum)
        Enum = require_enum();
      var enm = new Enum("Enum" + decorateEnumIndex++, object);
      util.decorateRoot.add(enm);
      Object.defineProperty(object, "$type", {value: enm, enumerable: false});
      return enm;
    };
    util.setProperty = function setProperty(dst, path, value) {
      function setProp(dst2, path2, value2) {
        var part = path2.shift();
        if (path2.length > 0) {
          dst2[part] = setProp(dst2[part] || {}, path2, value2);
        } else {
          var prevValue = dst2[part];
          if (prevValue)
            value2 = [].concat(prevValue).concat(value2);
          dst2[part] = value2;
        }
        return dst2;
      }
      if (typeof dst !== "object")
        throw TypeError("dst must be an object");
      if (!path)
        throw TypeError("path must be specified");
      path = path.split(".");
      return setProp(dst, path, value);
    };
    Object.defineProperty(util, "decorateRoot", {
      get: function() {
        return roots["decorated"] || (roots["decorated"] = new (require_root())());
      }
    });
  }
});

// node_modules/protobufjs/src/object.js
var require_object = __commonJS({
  "node_modules/protobufjs/src/object.js"(exports2, module2) {
    "use strict";
    module2.exports = ReflectionObject;
    ReflectionObject.className = "ReflectionObject";
    var util = require_util();
    var Root2;
    function ReflectionObject(name, options2) {
      if (!util.isString(name))
        throw TypeError("name must be a string");
      if (options2 && !util.isObject(options2))
        throw TypeError("options must be an object");
      this.options = options2;
      this.parsedOptions = null;
      this.name = name;
      this.parent = null;
      this.resolved = false;
      this.comment = null;
      this.filename = null;
    }
    Object.defineProperties(ReflectionObject.prototype, {
      root: {
        get: function() {
          var ptr = this;
          while (ptr.parent !== null)
            ptr = ptr.parent;
          return ptr;
        }
      },
      fullName: {
        get: function() {
          var path = [this.name], ptr = this.parent;
          while (ptr) {
            path.unshift(ptr.name);
            ptr = ptr.parent;
          }
          return path.join(".");
        }
      }
    });
    ReflectionObject.prototype.toJSON = function toJSON() {
      throw Error();
    };
    ReflectionObject.prototype.onAdd = function onAdd(parent) {
      if (this.parent && this.parent !== parent)
        this.parent.remove(this);
      this.parent = parent;
      this.resolved = false;
      var root = parent.root;
      if (root instanceof Root2)
        root._handleAdd(this);
    };
    ReflectionObject.prototype.onRemove = function onRemove(parent) {
      var root = parent.root;
      if (root instanceof Root2)
        root._handleRemove(this);
      this.parent = null;
      this.resolved = false;
    };
    ReflectionObject.prototype.resolve = function resolve2() {
      if (this.resolved)
        return this;
      if (this.root instanceof Root2)
        this.resolved = true;
      return this;
    };
    ReflectionObject.prototype.getOption = function getOption(name) {
      if (this.options)
        return this.options[name];
      return void 0;
    };
    ReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {
      if (!ifNotSet || !this.options || this.options[name] === void 0)
        (this.options || (this.options = {}))[name] = value;
      return this;
    };
    ReflectionObject.prototype.setParsedOption = function setParsedOption(name, value, propName) {
      if (!this.parsedOptions) {
        this.parsedOptions = [];
      }
      var parsedOptions = this.parsedOptions;
      if (propName) {
        var opt = parsedOptions.find(function(opt2) {
          return Object.prototype.hasOwnProperty.call(opt2, name);
        });
        if (opt) {
          var newValue = opt[name];
          util.setProperty(newValue, propName, value);
        } else {
          opt = {};
          opt[name] = util.setProperty({}, propName, value);
          parsedOptions.push(opt);
        }
      } else {
        var newOpt = {};
        newOpt[name] = value;
        parsedOptions.push(newOpt);
      }
      return this;
    };
    ReflectionObject.prototype.setOptions = function setOptions(options2, ifNotSet) {
      if (options2)
        for (var keys = Object.keys(options2), i = 0; i < keys.length; ++i)
          this.setOption(keys[i], options2[keys[i]], ifNotSet);
      return this;
    };
    ReflectionObject.prototype.toString = function toString() {
      var className = this.constructor.className, fullName = this.fullName;
      if (fullName.length)
        return className + " " + fullName;
      return className;
    };
    ReflectionObject._configure = function(Root_) {
      Root2 = Root_;
    };
  }
});

// node_modules/protobufjs/src/enum.js
var require_enum = __commonJS({
  "node_modules/protobufjs/src/enum.js"(exports2, module2) {
    "use strict";
    module2.exports = Enum;
    var ReflectionObject = require_object();
    ((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = "Enum";
    var Namespace = require_namespace();
    var util = require_util();
    function Enum(name, values, options2, comment, comments) {
      ReflectionObject.call(this, name, options2);
      if (values && typeof values !== "object")
        throw TypeError("values must be an object");
      this.valuesById = {};
      this.values = Object.create(this.valuesById);
      this.comment = comment;
      this.comments = comments || {};
      this.reserved = void 0;
      if (values) {
        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)
          if (typeof values[keys[i]] === "number")
            this.valuesById[this.values[keys[i]] = values[keys[i]]] = keys[i];
      }
    }
    Enum.fromJSON = function fromJSON(name, json) {
      var enm = new Enum(name, json.values, json.options, json.comment, json.comments);
      enm.reserved = json.reserved;
      return enm;
    };
    Enum.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "options",
        this.options,
        "values",
        this.values,
        "reserved",
        this.reserved && this.reserved.length ? this.reserved : void 0,
        "comment",
        keepComments ? this.comment : void 0,
        "comments",
        keepComments ? this.comments : void 0
      ]);
    };
    Enum.prototype.add = function add(name, id, comment) {
      if (!util.isString(name))
        throw TypeError("name must be a string");
      if (!util.isInteger(id))
        throw TypeError("id must be an integer");
      if (this.values[name] !== void 0)
        throw Error("duplicate name '" + name + "' in " + this);
      if (this.isReservedId(id))
        throw Error("id " + id + " is reserved in " + this);
      if (this.isReservedName(name))
        throw Error("name '" + name + "' is reserved in " + this);
      if (this.valuesById[id] !== void 0) {
        if (!(this.options && this.options.allow_alias))
          throw Error("duplicate id " + id + " in " + this);
        this.values[name] = id;
      } else
        this.valuesById[this.values[name] = id] = name;
      this.comments[name] = comment || null;
      return this;
    };
    Enum.prototype.remove = function remove(name) {
      if (!util.isString(name))
        throw TypeError("name must be a string");
      var val = this.values[name];
      if (val == null)
        throw Error("name '" + name + "' does not exist in " + this);
      delete this.valuesById[val];
      delete this.values[name];
      delete this.comments[name];
      return this;
    };
    Enum.prototype.isReservedId = function isReservedId(id) {
      return Namespace.isReservedId(this.reserved, id);
    };
    Enum.prototype.isReservedName = function isReservedName(name) {
      return Namespace.isReservedName(this.reserved, name);
    };
  }
});

// node_modules/protobufjs/src/encoder.js
var require_encoder = __commonJS({
  "node_modules/protobufjs/src/encoder.js"(exports2, module2) {
    "use strict";
    module2.exports = encoder;
    var Enum = require_enum();
    var types2 = require_types();
    var util = require_util();
    function genTypePartial(gen, field, fieldIndex, ref) {
      return field.resolvedType.group ? gen("types[%i].encode(%s,w.uint32(%i)).uint32(%i)", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0) : gen("types[%i].encode(%s,w.uint32(%i).fork()).ldelim()", fieldIndex, ref, (field.id << 3 | 2) >>> 0);
    }
    function encoder(mtype) {
      var gen = util.codegen(["m", "w"], mtype.name + "$encode")("if(!w)")("w=Writer.create()");
      var i, ref;
      var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);
      for (var i = 0; i < fields.length; ++i) {
        var field = fields[i].resolve(), index2 = mtype._fieldsArray.indexOf(field), type = field.resolvedType instanceof Enum ? "int32" : field.type, wireType = types2.basic[type];
        ref = "m" + util.safeProp(field.name);
        if (field.map) {
          gen("if(%s!=null&&Object.hasOwnProperty.call(m,%j)){", ref, field.name)("for(var ks=Object.keys(%s),i=0;i<ks.length;++i){", ref)("w.uint32(%i).fork().uint32(%i).%s(ks[i])", (field.id << 3 | 2) >>> 0, 8 | types2.mapKey[field.keyType], field.keyType);
          if (wireType === void 0)
            gen("types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()", index2, ref);
          else
            gen(".uint32(%i).%s(%s[ks[i]]).ldelim()", 16 | wireType, type, ref);
          gen("}")("}");
        } else if (field.repeated) {
          gen("if(%s!=null&&%s.length){", ref, ref);
          if (field.packed && types2.packed[type] !== void 0) {
            gen("w.uint32(%i).fork()", (field.id << 3 | 2) >>> 0)("for(var i=0;i<%s.length;++i)", ref)("w.%s(%s[i])", type, ref)("w.ldelim()");
          } else {
            gen("for(var i=0;i<%s.length;++i)", ref);
            if (wireType === void 0)
              genTypePartial(gen, field, index2, ref + "[i]");
            else
              gen("w.uint32(%i).%s(%s[i])", (field.id << 3 | wireType) >>> 0, type, ref);
          }
          gen("}");
        } else {
          if (field.optional)
            gen("if(%s!=null&&Object.hasOwnProperty.call(m,%j))", ref, field.name);
          if (wireType === void 0)
            genTypePartial(gen, field, index2, ref);
          else
            gen("w.uint32(%i).%s(%s)", (field.id << 3 | wireType) >>> 0, type, ref);
        }
      }
      return gen("return w");
    }
  }
});

// node_modules/protobufjs/src/index-light.js
var require_index_light = __commonJS({
  "node_modules/protobufjs/src/index-light.js"(exports2, module2) {
    "use strict";
    var protobuf = module2.exports = require_index_minimal();
    protobuf.build = "light";
    function load2(filename, root, callback) {
      if (typeof root === "function") {
        callback = root;
        root = new protobuf.Root();
      } else if (!root)
        root = new protobuf.Root();
      return root.load(filename, callback);
    }
    protobuf.load = load2;
    function loadSync(filename, root) {
      if (!root)
        root = new protobuf.Root();
      return root.loadSync(filename);
    }
    protobuf.loadSync = loadSync;
    protobuf.encoder = require_encoder();
    protobuf.decoder = require_decoder();
    protobuf.verifier = require_verifier();
    protobuf.converter = require_converter();
    protobuf.ReflectionObject = require_object();
    protobuf.Namespace = require_namespace();
    protobuf.Root = require_root();
    protobuf.Enum = require_enum();
    protobuf.Type = require_type();
    protobuf.Field = require_field();
    protobuf.OneOf = require_oneof();
    protobuf.MapField = require_mapfield();
    protobuf.Service = require_service2();
    protobuf.Method = require_method();
    protobuf.Message = require_message();
    protobuf.wrappers = require_wrappers();
    protobuf.types = require_types();
    protobuf.util = require_util();
    protobuf.ReflectionObject._configure(protobuf.Root);
    protobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);
    protobuf.Root._configure(protobuf.Type);
    protobuf.Field._configure(protobuf.Type);
  }
});

// node_modules/protobufjs/src/tokenize.js
var require_tokenize = __commonJS({
  "node_modules/protobufjs/src/tokenize.js"(exports2, module2) {
    "use strict";
    module2.exports = tokenize;
    var delimRe = /[\s{}=;:[\],'"()<>]/g;
    var stringDoubleRe = /(?:"([^"\\]*(?:\\.[^"\\]*)*)")/g;
    var stringSingleRe = /(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g;
    var setCommentRe = /^ *[*/]+ */;
    var setCommentAltRe = /^\s*\*?\/*/;
    var setCommentSplitRe = /\n/g;
    var whitespaceRe = /\s/;
    var unescapeRe = /\\(.?)/g;
    var unescapeMap = {
      "0": "\0",
      "r": "\r",
      "n": "\n",
      "t": "	"
    };
    function unescape2(str) {
      return str.replace(unescapeRe, function($0, $1) {
        switch ($1) {
          case "\\":
          case "":
            return $1;
          default:
            return unescapeMap[$1] || "";
        }
      });
    }
    tokenize.unescape = unescape2;
    function tokenize(source, alternateCommentMode) {
      source = source.toString();
      var offset = 0, length = source.length, line = 1, commentType = null, commentText = null, commentLine = 0, commentLineEmpty = false, commentIsLeading = false;
      var stack = [];
      var stringDelim = null;
      function illegal(subject) {
        return Error("illegal " + subject + " (line " + line + ")");
      }
      function readString() {
        var re = stringDelim === "'" ? stringSingleRe : stringDoubleRe;
        re.lastIndex = offset - 1;
        var match = re.exec(source);
        if (!match)
          throw illegal("string");
        offset = re.lastIndex;
        push(stringDelim);
        stringDelim = null;
        return unescape2(match[1]);
      }
      function charAt(pos) {
        return source.charAt(pos);
      }
      function setComment(start, end, isLeading) {
        commentType = source.charAt(start++);
        commentLine = line;
        commentLineEmpty = false;
        commentIsLeading = isLeading;
        var lookback;
        if (alternateCommentMode) {
          lookback = 2;
        } else {
          lookback = 3;
        }
        var commentOffset = start - lookback, c;
        do {
          if (--commentOffset < 0 || (c = source.charAt(commentOffset)) === "\n") {
            commentLineEmpty = true;
            break;
          }
        } while (c === " " || c === "	");
        var lines = source.substring(start, end).split(setCommentSplitRe);
        for (var i = 0; i < lines.length; ++i)
          lines[i] = lines[i].replace(alternateCommentMode ? setCommentAltRe : setCommentRe, "").trim();
        commentText = lines.join("\n").trim();
      }
      function isDoubleSlashCommentLine(startOffset) {
        var endOffset = findEndOfLine(startOffset);
        var lineText = source.substring(startOffset, endOffset);
        var isComment = /^\s*\/{1,2}/.test(lineText);
        return isComment;
      }
      function findEndOfLine(cursor) {
        var endOffset = cursor;
        while (endOffset < length && charAt(endOffset) !== "\n") {
          endOffset++;
        }
        return endOffset;
      }
      function next() {
        if (stack.length > 0)
          return stack.shift();
        if (stringDelim)
          return readString();
        var repeat, prev, curr, start, isDoc, isLeadingComment = offset === 0;
        do {
          if (offset === length)
            return null;
          repeat = false;
          while (whitespaceRe.test(curr = charAt(offset))) {
            if (curr === "\n") {
              isLeadingComment = true;
              ++line;
            }
            if (++offset === length)
              return null;
          }
          if (charAt(offset) === "/") {
            if (++offset === length) {
              throw illegal("comment");
            }
            if (charAt(offset) === "/") {
              if (!alternateCommentMode) {
                isDoc = charAt(start = offset + 1) === "/";
                while (charAt(++offset) !== "\n") {
                  if (offset === length) {
                    return null;
                  }
                }
                ++offset;
                if (isDoc) {
                  setComment(start, offset - 1, isLeadingComment);
                }
                ++line;
                repeat = true;
              } else {
                start = offset;
                isDoc = false;
                if (isDoubleSlashCommentLine(offset)) {
                  isDoc = true;
                  do {
                    offset = findEndOfLine(offset);
                    if (offset === length) {
                      break;
                    }
                    offset++;
                  } while (isDoubleSlashCommentLine(offset));
                } else {
                  offset = Math.min(length, findEndOfLine(offset) + 1);
                }
                if (isDoc) {
                  setComment(start, offset, isLeadingComment);
                }
                line++;
                repeat = true;
              }
            } else if ((curr = charAt(offset)) === "*") {
              start = offset + 1;
              isDoc = alternateCommentMode || charAt(start) === "*";
              do {
                if (curr === "\n") {
                  ++line;
                }
                if (++offset === length) {
                  throw illegal("comment");
                }
                prev = curr;
                curr = charAt(offset);
              } while (prev !== "*" || curr !== "/");
              ++offset;
              if (isDoc) {
                setComment(start, offset - 2, isLeadingComment);
              }
              repeat = true;
            } else {
              return "/";
            }
          }
        } while (repeat);
        var end = offset;
        delimRe.lastIndex = 0;
        var delim = delimRe.test(charAt(end++));
        if (!delim)
          while (end < length && !delimRe.test(charAt(end)))
            ++end;
        var token = source.substring(offset, offset = end);
        if (token === '"' || token === "'")
          stringDelim = token;
        return token;
      }
      function push(token) {
        stack.push(token);
      }
      function peek() {
        if (!stack.length) {
          var token = next();
          if (token === null)
            return null;
          push(token);
        }
        return stack[0];
      }
      function skip(expected, optional) {
        var actual = peek(), equals = actual === expected;
        if (equals) {
          next();
          return true;
        }
        if (!optional)
          throw illegal("token '" + actual + "', '" + expected + "' expected");
        return false;
      }
      function cmnt(trailingLine) {
        var ret = null;
        if (trailingLine === void 0) {
          if (commentLine === line - 1 && (alternateCommentMode || commentType === "*" || commentLineEmpty)) {
            ret = commentIsLeading ? commentText : null;
          }
        } else {
          if (commentLine < trailingLine) {
            peek();
          }
          if (commentLine === trailingLine && !commentLineEmpty && (alternateCommentMode || commentType === "/")) {
            ret = commentIsLeading ? null : commentText;
          }
        }
        return ret;
      }
      return Object.defineProperty({
        next,
        peek,
        push,
        skip,
        cmnt
      }, "line", {
        get: function() {
          return line;
        }
      });
    }
  }
});

// node_modules/protobufjs/src/parse.js
var require_parse = __commonJS({
  "node_modules/protobufjs/src/parse.js"(exports2, module2) {
    "use strict";
    module2.exports = parse;
    parse.filename = null;
    parse.defaults = {keepCase: false};
    var tokenize = require_tokenize();
    var Root2 = require_root();
    var Type = require_type();
    var Field = require_field();
    var MapField = require_mapfield();
    var OneOf = require_oneof();
    var Enum = require_enum();
    var Service = require_service2();
    var Method = require_method();
    var types2 = require_types();
    var util = require_util();
    var base10Re = /^[1-9][0-9]*$/;
    var base10NegRe = /^-?[1-9][0-9]*$/;
    var base16Re = /^0[x][0-9a-fA-F]+$/;
    var base16NegRe = /^-?0[x][0-9a-fA-F]+$/;
    var base8Re = /^0[0-7]+$/;
    var base8NegRe = /^-?0[0-7]+$/;
    var numberRe = /^(?![eE])[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/;
    var nameRe = /^[a-zA-Z_][a-zA-Z_0-9]*$/;
    var typeRefRe = /^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\.[a-zA-Z_][a-zA-Z_0-9]*)*$/;
    var fqTypeRefRe = /^(?:\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;
    function parse(source, root, options2) {
      if (!(root instanceof Root2)) {
        options2 = root;
        root = new Root2();
      }
      if (!options2)
        options2 = parse.defaults;
      var preferTrailingComment = options2.preferTrailingComment || false;
      var tn = tokenize(source, options2.alternateCommentMode || false), next = tn.next, push = tn.push, peek = tn.peek, skip = tn.skip, cmnt = tn.cmnt;
      var head = true, pkg, imports, weakImports, syntax, isProto3 = false;
      var ptr = root;
      var applyCase = options2.keepCase ? function(name) {
        return name;
      } : util.camelCase;
      function illegal(token2, name, insideTryCatch) {
        var filename = parse.filename;
        if (!insideTryCatch)
          parse.filename = null;
        return Error("illegal " + (name || "token") + " '" + token2 + "' (" + (filename ? filename + ", " : "") + "line " + tn.line + ")");
      }
      function readString() {
        var values = [], token2;
        do {
          if ((token2 = next()) !== '"' && token2 !== "'")
            throw illegal(token2);
          values.push(next());
          skip(token2);
          token2 = peek();
        } while (token2 === '"' || token2 === "'");
        return values.join("");
      }
      function readValue(acceptTypeRef) {
        var token2 = next();
        switch (token2) {
          case "'":
          case '"':
            push(token2);
            return readString();
          case "true":
          case "TRUE":
            return true;
          case "false":
          case "FALSE":
            return false;
        }
        try {
          return parseNumber(token2, true);
        } catch (e) {
          if (acceptTypeRef && typeRefRe.test(token2))
            return token2;
          throw illegal(token2, "value");
        }
      }
      function readRanges(target, acceptStrings) {
        var token2, start;
        do {
          if (acceptStrings && ((token2 = peek()) === '"' || token2 === "'"))
            target.push(readString());
          else
            target.push([start = parseId(next()), skip("to", true) ? parseId(next()) : start]);
        } while (skip(",", true));
        skip(";");
      }
      function parseNumber(token2, insideTryCatch) {
        var sign = 1;
        if (token2.charAt(0) === "-") {
          sign = -1;
          token2 = token2.substring(1);
        }
        switch (token2) {
          case "inf":
          case "INF":
          case "Inf":
            return sign * Infinity;
          case "nan":
          case "NAN":
          case "Nan":
          case "NaN":
            return NaN;
          case "0":
            return 0;
        }
        if (base10Re.test(token2))
          return sign * parseInt(token2, 10);
        if (base16Re.test(token2))
          return sign * parseInt(token2, 16);
        if (base8Re.test(token2))
          return sign * parseInt(token2, 8);
        if (numberRe.test(token2))
          return sign * parseFloat(token2);
        throw illegal(token2, "number", insideTryCatch);
      }
      function parseId(token2, acceptNegative) {
        switch (token2) {
          case "max":
          case "MAX":
          case "Max":
            return 536870911;
          case "0":
            return 0;
        }
        if (!acceptNegative && token2.charAt(0) === "-")
          throw illegal(token2, "id");
        if (base10NegRe.test(token2))
          return parseInt(token2, 10);
        if (base16NegRe.test(token2))
          return parseInt(token2, 16);
        if (base8NegRe.test(token2))
          return parseInt(token2, 8);
        throw illegal(token2, "id");
      }
      function parsePackage() {
        if (pkg !== void 0)
          throw illegal("package");
        pkg = next();
        if (!typeRefRe.test(pkg))
          throw illegal(pkg, "name");
        ptr = ptr.define(pkg);
        skip(";");
      }
      function parseImport() {
        var token2 = peek();
        var whichImports;
        switch (token2) {
          case "weak":
            whichImports = weakImports || (weakImports = []);
            next();
            break;
          case "public":
            next();
          default:
            whichImports = imports || (imports = []);
            break;
        }
        token2 = readString();
        skip(";");
        whichImports.push(token2);
      }
      function parseSyntax() {
        skip("=");
        syntax = readString();
        isProto3 = syntax === "proto3";
        if (!isProto3 && syntax !== "proto2")
          throw illegal(syntax, "syntax");
        skip(";");
      }
      function parseCommon(parent, token2) {
        switch (token2) {
          case "option":
            parseOption(parent, token2);
            skip(";");
            return true;
          case "message":
            parseType(parent, token2);
            return true;
          case "enum":
            parseEnum(parent, token2);
            return true;
          case "service":
            parseService(parent, token2);
            return true;
          case "extend":
            parseExtension(parent, token2);
            return true;
        }
        return false;
      }
      function ifBlock(obj, fnIf, fnElse) {
        var trailingLine = tn.line;
        if (obj) {
          if (typeof obj.comment !== "string") {
            obj.comment = cmnt();
          }
          obj.filename = parse.filename;
        }
        if (skip("{", true)) {
          var token2;
          while ((token2 = next()) !== "}")
            fnIf(token2);
          skip(";", true);
        } else {
          if (fnElse)
            fnElse();
          skip(";");
          if (obj && (typeof obj.comment !== "string" || preferTrailingComment))
            obj.comment = cmnt(trailingLine) || obj.comment;
        }
      }
      function parseType(parent, token2) {
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "type name");
        var type = new Type(token2);
        ifBlock(type, function parseType_block(token3) {
          if (parseCommon(type, token3))
            return;
          switch (token3) {
            case "map":
              parseMapField(type, token3);
              break;
            case "required":
            case "repeated":
              parseField(type, token3);
              break;
            case "optional":
              if (isProto3) {
                parseField(type, "proto3_optional");
              } else {
                parseField(type, "optional");
              }
              break;
            case "oneof":
              parseOneOf(type, token3);
              break;
            case "extensions":
              readRanges(type.extensions || (type.extensions = []));
              break;
            case "reserved":
              readRanges(type.reserved || (type.reserved = []), true);
              break;
            default:
              if (!isProto3 || !typeRefRe.test(token3))
                throw illegal(token3);
              push(token3);
              parseField(type, "optional");
              break;
          }
        });
        parent.add(type);
      }
      function parseField(parent, rule, extend) {
        var type = next();
        if (type === "group") {
          parseGroup(parent, rule);
          return;
        }
        if (!typeRefRe.test(type))
          throw illegal(type, "type");
        var name = next();
        if (!nameRe.test(name))
          throw illegal(name, "name");
        name = applyCase(name);
        skip("=");
        var field = new Field(name, parseId(next()), type, rule, extend);
        ifBlock(field, function parseField_block(token2) {
          if (token2 === "option") {
            parseOption(field, token2);
            skip(";");
          } else
            throw illegal(token2);
        }, function parseField_line() {
          parseInlineOptions(field);
        });
        if (rule === "proto3_optional") {
          var oneof = new OneOf("_" + name);
          field.setOption("proto3_optional", true);
          oneof.add(field);
          parent.add(oneof);
        } else {
          parent.add(field);
        }
        if (!isProto3 && field.repeated && (types2.packed[type] !== void 0 || types2.basic[type] === void 0))
          field.setOption("packed", false, true);
      }
      function parseGroup(parent, rule) {
        var name = next();
        if (!nameRe.test(name))
          throw illegal(name, "name");
        var fieldName = util.lcFirst(name);
        if (name === fieldName)
          name = util.ucFirst(name);
        skip("=");
        var id = parseId(next());
        var type = new Type(name);
        type.group = true;
        var field = new Field(fieldName, id, name, rule);
        field.filename = parse.filename;
        ifBlock(type, function parseGroup_block(token2) {
          switch (token2) {
            case "option":
              parseOption(type, token2);
              skip(";");
              break;
            case "required":
            case "repeated":
              parseField(type, token2);
              break;
            case "optional":
              if (isProto3) {
                parseField(type, "proto3_optional");
              } else {
                parseField(type, "optional");
              }
              break;
            default:
              throw illegal(token2);
          }
        });
        parent.add(type).add(field);
      }
      function parseMapField(parent) {
        skip("<");
        var keyType = next();
        if (types2.mapKey[keyType] === void 0)
          throw illegal(keyType, "type");
        skip(",");
        var valueType = next();
        if (!typeRefRe.test(valueType))
          throw illegal(valueType, "type");
        skip(">");
        var name = next();
        if (!nameRe.test(name))
          throw illegal(name, "name");
        skip("=");
        var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);
        ifBlock(field, function parseMapField_block(token2) {
          if (token2 === "option") {
            parseOption(field, token2);
            skip(";");
          } else
            throw illegal(token2);
        }, function parseMapField_line() {
          parseInlineOptions(field);
        });
        parent.add(field);
      }
      function parseOneOf(parent, token2) {
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "name");
        var oneof = new OneOf(applyCase(token2));
        ifBlock(oneof, function parseOneOf_block(token3) {
          if (token3 === "option") {
            parseOption(oneof, token3);
            skip(";");
          } else {
            push(token3);
            parseField(oneof, "optional");
          }
        });
        parent.add(oneof);
      }
      function parseEnum(parent, token2) {
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "name");
        var enm = new Enum(token2);
        ifBlock(enm, function parseEnum_block(token3) {
          switch (token3) {
            case "option":
              parseOption(enm, token3);
              skip(";");
              break;
            case "reserved":
              readRanges(enm.reserved || (enm.reserved = []), true);
              break;
            default:
              parseEnumValue(enm, token3);
          }
        });
        parent.add(enm);
      }
      function parseEnumValue(parent, token2) {
        if (!nameRe.test(token2))
          throw illegal(token2, "name");
        skip("=");
        var value = parseId(next(), true), dummy = {};
        ifBlock(dummy, function parseEnumValue_block(token3) {
          if (token3 === "option") {
            parseOption(dummy, token3);
            skip(";");
          } else
            throw illegal(token3);
        }, function parseEnumValue_line() {
          parseInlineOptions(dummy);
        });
        parent.add(token2, value, dummy.comment);
      }
      function parseOption(parent, token2) {
        var isCustom = skip("(", true);
        if (!typeRefRe.test(token2 = next()))
          throw illegal(token2, "name");
        var name = token2;
        var option = name;
        var propName;
        if (isCustom) {
          skip(")");
          name = "(" + name + ")";
          option = name;
          token2 = peek();
          if (fqTypeRefRe.test(token2)) {
            propName = token2.substr(1);
            name += token2;
            next();
          }
        }
        skip("=");
        var optionValue = parseOptionValue(parent, name);
        setParsedOption(parent, option, optionValue, propName);
      }
      function parseOptionValue(parent, name) {
        if (skip("{", true)) {
          var result = {};
          while (!skip("}", true)) {
            if (!nameRe.test(token = next()))
              throw illegal(token, "name");
            var value;
            var propName = token;
            if (peek() === "{")
              value = parseOptionValue(parent, name + "." + token);
            else {
              skip(":");
              if (peek() === "{")
                value = parseOptionValue(parent, name + "." + token);
              else {
                value = readValue(true);
                setOption(parent, name + "." + token, value);
              }
            }
            var prevValue = result[propName];
            if (prevValue)
              value = [].concat(prevValue).concat(value);
            result[propName] = value;
            skip(",", true);
          }
          return result;
        }
        var simpleValue = readValue(true);
        setOption(parent, name, simpleValue);
        return simpleValue;
      }
      function setOption(parent, name, value) {
        if (parent.setOption)
          parent.setOption(name, value);
      }
      function setParsedOption(parent, name, value, propName) {
        if (parent.setParsedOption)
          parent.setParsedOption(name, value, propName);
      }
      function parseInlineOptions(parent) {
        if (skip("[", true)) {
          do {
            parseOption(parent, "option");
          } while (skip(",", true));
          skip("]");
        }
        return parent;
      }
      function parseService(parent, token2) {
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "service name");
        var service = new Service(token2);
        ifBlock(service, function parseService_block(token3) {
          if (parseCommon(service, token3))
            return;
          if (token3 === "rpc")
            parseMethod(service, token3);
          else
            throw illegal(token3);
        });
        parent.add(service);
      }
      function parseMethod(parent, token2) {
        var commentText = cmnt();
        var type = token2;
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "name");
        var name = token2, requestType, requestStream, responseType, responseStream;
        skip("(");
        if (skip("stream", true))
          requestStream = true;
        if (!typeRefRe.test(token2 = next()))
          throw illegal(token2);
        requestType = token2;
        skip(")");
        skip("returns");
        skip("(");
        if (skip("stream", true))
          responseStream = true;
        if (!typeRefRe.test(token2 = next()))
          throw illegal(token2);
        responseType = token2;
        skip(")");
        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);
        method.comment = commentText;
        ifBlock(method, function parseMethod_block(token3) {
          if (token3 === "option") {
            parseOption(method, token3);
            skip(";");
          } else
            throw illegal(token3);
        });
        parent.add(method);
      }
      function parseExtension(parent, token2) {
        if (!typeRefRe.test(token2 = next()))
          throw illegal(token2, "reference");
        var reference = token2;
        ifBlock(null, function parseExtension_block(token3) {
          switch (token3) {
            case "required":
            case "repeated":
              parseField(parent, token3, reference);
              break;
            case "optional":
              if (isProto3) {
                parseField(parent, "proto3_optional", reference);
              } else {
                parseField(parent, "optional", reference);
              }
              break;
            default:
              if (!isProto3 || !typeRefRe.test(token3))
                throw illegal(token3);
              push(token3);
              parseField(parent, "optional", reference);
              break;
          }
        });
      }
      var token;
      while ((token = next()) !== null) {
        switch (token) {
          case "package":
            if (!head)
              throw illegal(token);
            parsePackage();
            break;
          case "import":
            if (!head)
              throw illegal(token);
            parseImport();
            break;
          case "syntax":
            if (!head)
              throw illegal(token);
            parseSyntax();
            break;
          case "option":
            parseOption(ptr, token);
            skip(";");
            break;
          default:
            if (parseCommon(ptr, token)) {
              head = false;
              continue;
            }
            throw illegal(token);
        }
      }
      parse.filename = null;
      return {
        "package": pkg,
        "imports": imports,
        weakImports,
        syntax,
        root
      };
    }
  }
});

// node_modules/protobufjs/src/common.js
var require_common = __commonJS({
  "node_modules/protobufjs/src/common.js"(exports2, module2) {
    "use strict";
    module2.exports = common;
    var commonRe = /\/|\./;
    function common(name, json) {
      if (!commonRe.test(name)) {
        name = "google/protobuf/" + name + ".proto";
        json = {nested: {google: {nested: {protobuf: {nested: json}}}}};
      }
      common[name] = json;
    }
    common("any", {
      Any: {
        fields: {
          type_url: {
            type: "string",
            id: 1
          },
          value: {
            type: "bytes",
            id: 2
          }
        }
      }
    });
    var timeType;
    common("duration", {
      Duration: timeType = {
        fields: {
          seconds: {
            type: "int64",
            id: 1
          },
          nanos: {
            type: "int32",
            id: 2
          }
        }
      }
    });
    common("timestamp", {
      Timestamp: timeType
    });
    common("empty", {
      Empty: {
        fields: {}
      }
    });
    common("struct", {
      Struct: {
        fields: {
          fields: {
            keyType: "string",
            type: "Value",
            id: 1
          }
        }
      },
      Value: {
        oneofs: {
          kind: {
            oneof: [
              "nullValue",
              "numberValue",
              "stringValue",
              "boolValue",
              "structValue",
              "listValue"
            ]
          }
        },
        fields: {
          nullValue: {
            type: "NullValue",
            id: 1
          },
          numberValue: {
            type: "double",
            id: 2
          },
          stringValue: {
            type: "string",
            id: 3
          },
          boolValue: {
            type: "bool",
            id: 4
          },
          structValue: {
            type: "Struct",
            id: 5
          },
          listValue: {
            type: "ListValue",
            id: 6
          }
        }
      },
      NullValue: {
        values: {
          NULL_VALUE: 0
        }
      },
      ListValue: {
        fields: {
          values: {
            rule: "repeated",
            type: "Value",
            id: 1
          }
        }
      }
    });
    common("wrappers", {
      DoubleValue: {
        fields: {
          value: {
            type: "double",
            id: 1
          }
        }
      },
      FloatValue: {
        fields: {
          value: {
            type: "float",
            id: 1
          }
        }
      },
      Int64Value: {
        fields: {
          value: {
            type: "int64",
            id: 1
          }
        }
      },
      UInt64Value: {
        fields: {
          value: {
            type: "uint64",
            id: 1
          }
        }
      },
      Int32Value: {
        fields: {
          value: {
            type: "int32",
            id: 1
          }
        }
      },
      UInt32Value: {
        fields: {
          value: {
            type: "uint32",
            id: 1
          }
        }
      },
      BoolValue: {
        fields: {
          value: {
            type: "bool",
            id: 1
          }
        }
      },
      StringValue: {
        fields: {
          value: {
            type: "string",
            id: 1
          }
        }
      },
      BytesValue: {
        fields: {
          value: {
            type: "bytes",
            id: 1
          }
        }
      }
    });
    common("field_mask", {
      FieldMask: {
        fields: {
          paths: {
            rule: "repeated",
            type: "string",
            id: 1
          }
        }
      }
    });
    common.get = function get(file) {
      return common[file] || null;
    };
  }
});

// node_modules/protobufjs/src/index.js
var require_src2 = __commonJS({
  "node_modules/protobufjs/src/index.js"(exports2, module2) {
    "use strict";
    var protobuf = module2.exports = require_index_light();
    protobuf.build = "full";
    protobuf.tokenize = require_tokenize();
    protobuf.parse = require_parse();
    protobuf.common = require_common();
    protobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);
  }
});

// node_modules/protobufjs/index.js
var require_protobufjs = __commonJS({
  "node_modules/protobufjs/index.js"(exports2, module2) {
    "use strict";
    module2.exports = require_src2();
  }
});

// node_modules/protobufjs/google/protobuf/descriptor.json
var require_descriptor = __commonJS({
  "node_modules/protobufjs/google/protobuf/descriptor.json"(exports2, module2) {
    module2.exports = {
      nested: {
        google: {
          nested: {
            protobuf: {
              nested: {
                FileDescriptorSet: {
                  fields: {
                    file: {
                      rule: "repeated",
                      type: "FileDescriptorProto",
                      id: 1
                    }
                  }
                },
                FileDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    package: {
                      type: "string",
                      id: 2
                    },
                    dependency: {
                      rule: "repeated",
                      type: "string",
                      id: 3
                    },
                    publicDependency: {
                      rule: "repeated",
                      type: "int32",
                      id: 10,
                      options: {
                        packed: false
                      }
                    },
                    weakDependency: {
                      rule: "repeated",
                      type: "int32",
                      id: 11,
                      options: {
                        packed: false
                      }
                    },
                    messageType: {
                      rule: "repeated",
                      type: "DescriptorProto",
                      id: 4
                    },
                    enumType: {
                      rule: "repeated",
                      type: "EnumDescriptorProto",
                      id: 5
                    },
                    service: {
                      rule: "repeated",
                      type: "ServiceDescriptorProto",
                      id: 6
                    },
                    extension: {
                      rule: "repeated",
                      type: "FieldDescriptorProto",
                      id: 7
                    },
                    options: {
                      type: "FileOptions",
                      id: 8
                    },
                    sourceCodeInfo: {
                      type: "SourceCodeInfo",
                      id: 9
                    },
                    syntax: {
                      type: "string",
                      id: 12
                    }
                  }
                },
                DescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    field: {
                      rule: "repeated",
                      type: "FieldDescriptorProto",
                      id: 2
                    },
                    extension: {
                      rule: "repeated",
                      type: "FieldDescriptorProto",
                      id: 6
                    },
                    nestedType: {
                      rule: "repeated",
                      type: "DescriptorProto",
                      id: 3
                    },
                    enumType: {
                      rule: "repeated",
                      type: "EnumDescriptorProto",
                      id: 4
                    },
                    extensionRange: {
                      rule: "repeated",
                      type: "ExtensionRange",
                      id: 5
                    },
                    oneofDecl: {
                      rule: "repeated",
                      type: "OneofDescriptorProto",
                      id: 8
                    },
                    options: {
                      type: "MessageOptions",
                      id: 7
                    },
                    reservedRange: {
                      rule: "repeated",
                      type: "ReservedRange",
                      id: 9
                    },
                    reservedName: {
                      rule: "repeated",
                      type: "string",
                      id: 10
                    }
                  },
                  nested: {
                    ExtensionRange: {
                      fields: {
                        start: {
                          type: "int32",
                          id: 1
                        },
                        end: {
                          type: "int32",
                          id: 2
                        }
                      }
                    },
                    ReservedRange: {
                      fields: {
                        start: {
                          type: "int32",
                          id: 1
                        },
                        end: {
                          type: "int32",
                          id: 2
                        }
                      }
                    }
                  }
                },
                FieldDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    number: {
                      type: "int32",
                      id: 3
                    },
                    label: {
                      type: "Label",
                      id: 4
                    },
                    type: {
                      type: "Type",
                      id: 5
                    },
                    typeName: {
                      type: "string",
                      id: 6
                    },
                    extendee: {
                      type: "string",
                      id: 2
                    },
                    defaultValue: {
                      type: "string",
                      id: 7
                    },
                    oneofIndex: {
                      type: "int32",
                      id: 9
                    },
                    jsonName: {
                      type: "string",
                      id: 10
                    },
                    options: {
                      type: "FieldOptions",
                      id: 8
                    }
                  },
                  nested: {
                    Type: {
                      values: {
                        TYPE_DOUBLE: 1,
                        TYPE_FLOAT: 2,
                        TYPE_INT64: 3,
                        TYPE_UINT64: 4,
                        TYPE_INT32: 5,
                        TYPE_FIXED64: 6,
                        TYPE_FIXED32: 7,
                        TYPE_BOOL: 8,
                        TYPE_STRING: 9,
                        TYPE_GROUP: 10,
                        TYPE_MESSAGE: 11,
                        TYPE_BYTES: 12,
                        TYPE_UINT32: 13,
                        TYPE_ENUM: 14,
                        TYPE_SFIXED32: 15,
                        TYPE_SFIXED64: 16,
                        TYPE_SINT32: 17,
                        TYPE_SINT64: 18
                      }
                    },
                    Label: {
                      values: {
                        LABEL_OPTIONAL: 1,
                        LABEL_REQUIRED: 2,
                        LABEL_REPEATED: 3
                      }
                    }
                  }
                },
                OneofDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    options: {
                      type: "OneofOptions",
                      id: 2
                    }
                  }
                },
                EnumDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    value: {
                      rule: "repeated",
                      type: "EnumValueDescriptorProto",
                      id: 2
                    },
                    options: {
                      type: "EnumOptions",
                      id: 3
                    }
                  }
                },
                EnumValueDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    number: {
                      type: "int32",
                      id: 2
                    },
                    options: {
                      type: "EnumValueOptions",
                      id: 3
                    }
                  }
                },
                ServiceDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    method: {
                      rule: "repeated",
                      type: "MethodDescriptorProto",
                      id: 2
                    },
                    options: {
                      type: "ServiceOptions",
                      id: 3
                    }
                  }
                },
                MethodDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    inputType: {
                      type: "string",
                      id: 2
                    },
                    outputType: {
                      type: "string",
                      id: 3
                    },
                    options: {
                      type: "MethodOptions",
                      id: 4
                    },
                    clientStreaming: {
                      type: "bool",
                      id: 5
                    },
                    serverStreaming: {
                      type: "bool",
                      id: 6
                    }
                  }
                },
                FileOptions: {
                  fields: {
                    javaPackage: {
                      type: "string",
                      id: 1
                    },
                    javaOuterClassname: {
                      type: "string",
                      id: 8
                    },
                    javaMultipleFiles: {
                      type: "bool",
                      id: 10
                    },
                    javaGenerateEqualsAndHash: {
                      type: "bool",
                      id: 20,
                      options: {
                        deprecated: true
                      }
                    },
                    javaStringCheckUtf8: {
                      type: "bool",
                      id: 27
                    },
                    optimizeFor: {
                      type: "OptimizeMode",
                      id: 9,
                      options: {
                        default: "SPEED"
                      }
                    },
                    goPackage: {
                      type: "string",
                      id: 11
                    },
                    ccGenericServices: {
                      type: "bool",
                      id: 16
                    },
                    javaGenericServices: {
                      type: "bool",
                      id: 17
                    },
                    pyGenericServices: {
                      type: "bool",
                      id: 18
                    },
                    deprecated: {
                      type: "bool",
                      id: 23
                    },
                    ccEnableArenas: {
                      type: "bool",
                      id: 31
                    },
                    objcClassPrefix: {
                      type: "string",
                      id: 36
                    },
                    csharpNamespace: {
                      type: "string",
                      id: 37
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ],
                  reserved: [
                    [
                      38,
                      38
                    ]
                  ],
                  nested: {
                    OptimizeMode: {
                      values: {
                        SPEED: 1,
                        CODE_SIZE: 2,
                        LITE_RUNTIME: 3
                      }
                    }
                  }
                },
                MessageOptions: {
                  fields: {
                    messageSetWireFormat: {
                      type: "bool",
                      id: 1
                    },
                    noStandardDescriptorAccessor: {
                      type: "bool",
                      id: 2
                    },
                    deprecated: {
                      type: "bool",
                      id: 3
                    },
                    mapEntry: {
                      type: "bool",
                      id: 7
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ],
                  reserved: [
                    [
                      8,
                      8
                    ]
                  ]
                },
                FieldOptions: {
                  fields: {
                    ctype: {
                      type: "CType",
                      id: 1,
                      options: {
                        default: "STRING"
                      }
                    },
                    packed: {
                      type: "bool",
                      id: 2
                    },
                    jstype: {
                      type: "JSType",
                      id: 6,
                      options: {
                        default: "JS_NORMAL"
                      }
                    },
                    lazy: {
                      type: "bool",
                      id: 5
                    },
                    deprecated: {
                      type: "bool",
                      id: 3
                    },
                    weak: {
                      type: "bool",
                      id: 10
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ],
                  reserved: [
                    [
                      4,
                      4
                    ]
                  ],
                  nested: {
                    CType: {
                      values: {
                        STRING: 0,
                        CORD: 1,
                        STRING_PIECE: 2
                      }
                    },
                    JSType: {
                      values: {
                        JS_NORMAL: 0,
                        JS_STRING: 1,
                        JS_NUMBER: 2
                      }
                    }
                  }
                },
                OneofOptions: {
                  fields: {
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ]
                },
                EnumOptions: {
                  fields: {
                    allowAlias: {
                      type: "bool",
                      id: 2
                    },
                    deprecated: {
                      type: "bool",
                      id: 3
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ]
                },
                EnumValueOptions: {
                  fields: {
                    deprecated: {
                      type: "bool",
                      id: 1
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ]
                },
                ServiceOptions: {
                  fields: {
                    deprecated: {
                      type: "bool",
                      id: 33
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ]
                },
                MethodOptions: {
                  fields: {
                    deprecated: {
                      type: "bool",
                      id: 33
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ]
                },
                UninterpretedOption: {
                  fields: {
                    name: {
                      rule: "repeated",
                      type: "NamePart",
                      id: 2
                    },
                    identifierValue: {
                      type: "string",
                      id: 3
                    },
                    positiveIntValue: {
                      type: "uint64",
                      id: 4
                    },
                    negativeIntValue: {
                      type: "int64",
                      id: 5
                    },
                    doubleValue: {
                      type: "double",
                      id: 6
                    },
                    stringValue: {
                      type: "bytes",
                      id: 7
                    },
                    aggregateValue: {
                      type: "string",
                      id: 8
                    }
                  },
                  nested: {
                    NamePart: {
                      fields: {
                        namePart: {
                          rule: "required",
                          type: "string",
                          id: 1
                        },
                        isExtension: {
                          rule: "required",
                          type: "bool",
                          id: 2
                        }
                      }
                    }
                  }
                },
                SourceCodeInfo: {
                  fields: {
                    location: {
                      rule: "repeated",
                      type: "Location",
                      id: 1
                    }
                  },
                  nested: {
                    Location: {
                      fields: {
                        path: {
                          rule: "repeated",
                          type: "int32",
                          id: 1
                        },
                        span: {
                          rule: "repeated",
                          type: "int32",
                          id: 2
                        },
                        leadingComments: {
                          type: "string",
                          id: 3
                        },
                        trailingComments: {
                          type: "string",
                          id: 4
                        },
                        leadingDetachedComments: {
                          rule: "repeated",
                          type: "string",
                          id: 6
                        }
                      }
                    }
                  }
                },
                GeneratedCodeInfo: {
                  fields: {
                    annotation: {
                      rule: "repeated",
                      type: "Annotation",
                      id: 1
                    }
                  },
                  nested: {
                    Annotation: {
                      fields: {
                        path: {
                          rule: "repeated",
                          type: "int32",
                          id: 1
                        },
                        sourceFile: {
                          type: "string",
                          id: 2
                        },
                        begin: {
                          type: "int32",
                          id: 3
                        },
                        end: {
                          type: "int32",
                          id: 4
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
  }
});

// node_modules/protobufjs/ext/descriptor/index.js
var require_descriptor2 = __commonJS({
  "node_modules/protobufjs/ext/descriptor/index.js"(exports2, module2) {
    "use strict";
    var $protobuf = require_protobufjs();
    module2.exports = exports2 = $protobuf.descriptor = $protobuf.Root.fromJSON(require_descriptor()).lookup(".google.protobuf");
    var Namespace = $protobuf.Namespace;
    var Root2 = $protobuf.Root;
    var Enum = $protobuf.Enum;
    var Type = $protobuf.Type;
    var Field = $protobuf.Field;
    var MapField = $protobuf.MapField;
    var OneOf = $protobuf.OneOf;
    var Service = $protobuf.Service;
    var Method = $protobuf.Method;
    Root2.fromDescriptor = function fromDescriptor(descriptor) {
      if (typeof descriptor.length === "number")
        descriptor = exports2.FileDescriptorSet.decode(descriptor);
      var root = new Root2();
      if (descriptor.file) {
        var fileDescriptor, filePackage;
        for (var j = 0, i; j < descriptor.file.length; ++j) {
          filePackage = root;
          if ((fileDescriptor = descriptor.file[j])["package"] && fileDescriptor["package"].length)
            filePackage = root.define(fileDescriptor["package"]);
          if (fileDescriptor.name && fileDescriptor.name.length)
            root.files.push(filePackage.filename = fileDescriptor.name);
          if (fileDescriptor.messageType)
            for (i = 0; i < fileDescriptor.messageType.length; ++i)
              filePackage.add(Type.fromDescriptor(fileDescriptor.messageType[i], fileDescriptor.syntax));
          if (fileDescriptor.enumType)
            for (i = 0; i < fileDescriptor.enumType.length; ++i)
              filePackage.add(Enum.fromDescriptor(fileDescriptor.enumType[i]));
          if (fileDescriptor.extension)
            for (i = 0; i < fileDescriptor.extension.length; ++i)
              filePackage.add(Field.fromDescriptor(fileDescriptor.extension[i]));
          if (fileDescriptor.service)
            for (i = 0; i < fileDescriptor.service.length; ++i)
              filePackage.add(Service.fromDescriptor(fileDescriptor.service[i]));
          var opts = fromDescriptorOptions(fileDescriptor.options, exports2.FileOptions);
          if (opts) {
            var ks = Object.keys(opts);
            for (i = 0; i < ks.length; ++i)
              filePackage.setOption(ks[i], opts[ks[i]]);
          }
        }
      }
      return root;
    };
    Root2.prototype.toDescriptor = function toDescriptor(syntax) {
      var set = exports2.FileDescriptorSet.create();
      Root_toDescriptorRecursive(this, set.file, syntax);
      return set;
    };
    function Root_toDescriptorRecursive(ns, files, syntax) {
      var file = exports2.FileDescriptorProto.create({name: ns.filename || (ns.fullName.substring(1).replace(/\./g, "_") || "root") + ".proto"});
      if (syntax)
        file.syntax = syntax;
      if (!(ns instanceof Root2))
        file["package"] = ns.fullName.substring(1);
      for (var i = 0, nested; i < ns.nestedArray.length; ++i)
        if ((nested = ns._nestedArray[i]) instanceof Type)
          file.messageType.push(nested.toDescriptor(syntax));
        else if (nested instanceof Enum)
          file.enumType.push(nested.toDescriptor());
        else if (nested instanceof Field)
          file.extension.push(nested.toDescriptor(syntax));
        else if (nested instanceof Service)
          file.service.push(nested.toDescriptor());
        else if (nested instanceof Namespace)
          Root_toDescriptorRecursive(nested, files, syntax);
      file.options = toDescriptorOptions(ns.options, exports2.FileOptions);
      if (file.messageType.length + file.enumType.length + file.extension.length + file.service.length)
        files.push(file);
    }
    var unnamedMessageIndex = 0;
    Type.fromDescriptor = function fromDescriptor(descriptor, syntax) {
      if (typeof descriptor.length === "number")
        descriptor = exports2.DescriptorProto.decode(descriptor);
      var type = new Type(descriptor.name.length ? descriptor.name : "Type" + unnamedMessageIndex++, fromDescriptorOptions(descriptor.options, exports2.MessageOptions)), i;
      if (descriptor.oneofDecl)
        for (i = 0; i < descriptor.oneofDecl.length; ++i)
          type.add(OneOf.fromDescriptor(descriptor.oneofDecl[i]));
      if (descriptor.field)
        for (i = 0; i < descriptor.field.length; ++i) {
          var field = Field.fromDescriptor(descriptor.field[i], syntax);
          type.add(field);
          if (descriptor.field[i].hasOwnProperty("oneofIndex"))
            type.oneofsArray[descriptor.field[i].oneofIndex].add(field);
        }
      if (descriptor.extension)
        for (i = 0; i < descriptor.extension.length; ++i)
          type.add(Field.fromDescriptor(descriptor.extension[i], syntax));
      if (descriptor.nestedType)
        for (i = 0; i < descriptor.nestedType.length; ++i) {
          type.add(Type.fromDescriptor(descriptor.nestedType[i], syntax));
          if (descriptor.nestedType[i].options && descriptor.nestedType[i].options.mapEntry)
            type.setOption("map_entry", true);
        }
      if (descriptor.enumType)
        for (i = 0; i < descriptor.enumType.length; ++i)
          type.add(Enum.fromDescriptor(descriptor.enumType[i]));
      if (descriptor.extensionRange && descriptor.extensionRange.length) {
        type.extensions = [];
        for (i = 0; i < descriptor.extensionRange.length; ++i)
          type.extensions.push([descriptor.extensionRange[i].start, descriptor.extensionRange[i].end]);
      }
      if (descriptor.reservedRange && descriptor.reservedRange.length || descriptor.reservedName && descriptor.reservedName.length) {
        type.reserved = [];
        if (descriptor.reservedRange)
          for (i = 0; i < descriptor.reservedRange.length; ++i)
            type.reserved.push([descriptor.reservedRange[i].start, descriptor.reservedRange[i].end]);
        if (descriptor.reservedName)
          for (i = 0; i < descriptor.reservedName.length; ++i)
            type.reserved.push(descriptor.reservedName[i]);
      }
      return type;
    };
    Type.prototype.toDescriptor = function toDescriptor(syntax) {
      var descriptor = exports2.DescriptorProto.create({name: this.name}), i;
      for (i = 0; i < this.fieldsArray.length; ++i) {
        var fieldDescriptor;
        descriptor.field.push(fieldDescriptor = this._fieldsArray[i].toDescriptor(syntax));
        if (this._fieldsArray[i] instanceof MapField) {
          var keyType = toDescriptorType(this._fieldsArray[i].keyType, this._fieldsArray[i].resolvedKeyType), valueType = toDescriptorType(this._fieldsArray[i].type, this._fieldsArray[i].resolvedType), valueTypeName = valueType === 11 || valueType === 14 ? this._fieldsArray[i].resolvedType && shortname(this.parent, this._fieldsArray[i].resolvedType) || this._fieldsArray[i].type : void 0;
          descriptor.nestedType.push(exports2.DescriptorProto.create({
            name: fieldDescriptor.typeName,
            field: [
              exports2.FieldDescriptorProto.create({name: "key", number: 1, label: 1, type: keyType}),
              exports2.FieldDescriptorProto.create({name: "value", number: 2, label: 1, type: valueType, typeName: valueTypeName})
            ],
            options: exports2.MessageOptions.create({mapEntry: true})
          }));
        }
      }
      for (i = 0; i < this.oneofsArray.length; ++i)
        descriptor.oneofDecl.push(this._oneofsArray[i].toDescriptor());
      for (i = 0; i < this.nestedArray.length; ++i) {
        if (this._nestedArray[i] instanceof Field)
          descriptor.field.push(this._nestedArray[i].toDescriptor(syntax));
        else if (this._nestedArray[i] instanceof Type)
          descriptor.nestedType.push(this._nestedArray[i].toDescriptor(syntax));
        else if (this._nestedArray[i] instanceof Enum)
          descriptor.enumType.push(this._nestedArray[i].toDescriptor());
      }
      if (this.extensions)
        for (i = 0; i < this.extensions.length; ++i)
          descriptor.extensionRange.push(exports2.DescriptorProto.ExtensionRange.create({start: this.extensions[i][0], end: this.extensions[i][1]}));
      if (this.reserved)
        for (i = 0; i < this.reserved.length; ++i)
          if (typeof this.reserved[i] === "string")
            descriptor.reservedName.push(this.reserved[i]);
          else
            descriptor.reservedRange.push(exports2.DescriptorProto.ReservedRange.create({start: this.reserved[i][0], end: this.reserved[i][1]}));
      descriptor.options = toDescriptorOptions(this.options, exports2.MessageOptions);
      return descriptor;
    };
    var numberRe = /^(?![eE])[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/;
    Field.fromDescriptor = function fromDescriptor(descriptor, syntax) {
      if (typeof descriptor.length === "number")
        descriptor = exports2.DescriptorProto.decode(descriptor);
      if (typeof descriptor.number !== "number")
        throw Error("missing field id");
      var fieldType;
      if (descriptor.typeName && descriptor.typeName.length)
        fieldType = descriptor.typeName;
      else
        fieldType = fromDescriptorType(descriptor.type);
      var fieldRule;
      switch (descriptor.label) {
        case 1:
          fieldRule = void 0;
          break;
        case 2:
          fieldRule = "required";
          break;
        case 3:
          fieldRule = "repeated";
          break;
        default:
          throw Error("illegal label: " + descriptor.label);
      }
      var extendee = descriptor.extendee;
      if (descriptor.extendee !== void 0) {
        extendee = extendee.length ? extendee : void 0;
      }
      var field = new Field(descriptor.name.length ? descriptor.name : "field" + descriptor.number, descriptor.number, fieldType, fieldRule, extendee);
      field.options = fromDescriptorOptions(descriptor.options, exports2.FieldOptions);
      if (descriptor.defaultValue && descriptor.defaultValue.length) {
        var defaultValue = descriptor.defaultValue;
        switch (defaultValue) {
          case "true":
          case "TRUE":
            defaultValue = true;
            break;
          case "false":
          case "FALSE":
            defaultValue = false;
            break;
          default:
            var match = numberRe.exec(defaultValue);
            if (match)
              defaultValue = parseInt(defaultValue);
            break;
        }
        field.setOption("default", defaultValue);
      }
      if (packableDescriptorType(descriptor.type)) {
        if (syntax === "proto3") {
          if (descriptor.options && !descriptor.options.packed)
            field.setOption("packed", false);
        } else if (!(descriptor.options && descriptor.options.packed))
          field.setOption("packed", false);
      }
      return field;
    };
    Field.prototype.toDescriptor = function toDescriptor(syntax) {
      var descriptor = exports2.FieldDescriptorProto.create({name: this.name, number: this.id});
      if (this.map) {
        descriptor.type = 11;
        descriptor.typeName = $protobuf.util.ucFirst(this.name);
        descriptor.label = 3;
      } else {
        switch (descriptor.type = toDescriptorType(this.type, this.resolve().resolvedType)) {
          case 10:
          case 11:
          case 14:
            descriptor.typeName = this.resolvedType ? shortname(this.parent, this.resolvedType) : this.type;
            break;
        }
        switch (this.rule) {
          case "repeated":
            descriptor.label = 3;
            break;
          case "required":
            descriptor.label = 2;
            break;
          default:
            descriptor.label = 1;
            break;
        }
      }
      descriptor.extendee = this.extensionField ? this.extensionField.parent.fullName : this.extend;
      if (this.partOf) {
        if ((descriptor.oneofIndex = this.parent.oneofsArray.indexOf(this.partOf)) < 0)
          throw Error("missing oneof");
      }
      if (this.options) {
        descriptor.options = toDescriptorOptions(this.options, exports2.FieldOptions);
        if (this.options["default"] != null)
          descriptor.defaultValue = String(this.options["default"]);
      }
      if (syntax === "proto3") {
        if (!this.packed)
          (descriptor.options || (descriptor.options = exports2.FieldOptions.create())).packed = false;
      } else if (this.packed)
        (descriptor.options || (descriptor.options = exports2.FieldOptions.create())).packed = true;
      return descriptor;
    };
    var unnamedEnumIndex = 0;
    Enum.fromDescriptor = function fromDescriptor(descriptor) {
      if (typeof descriptor.length === "number")
        descriptor = exports2.EnumDescriptorProto.decode(descriptor);
      var values = {};
      if (descriptor.value)
        for (var i = 0; i < descriptor.value.length; ++i) {
          var name = descriptor.value[i].name, value = descriptor.value[i].number || 0;
          values[name && name.length ? name : "NAME" + value] = value;
        }
      return new Enum(descriptor.name && descriptor.name.length ? descriptor.name : "Enum" + unnamedEnumIndex++, values, fromDescriptorOptions(descriptor.options, exports2.EnumOptions));
    };
    Enum.prototype.toDescriptor = function toDescriptor() {
      var values = [];
      for (var i = 0, ks = Object.keys(this.values); i < ks.length; ++i)
        values.push(exports2.EnumValueDescriptorProto.create({name: ks[i], number: this.values[ks[i]]}));
      return exports2.EnumDescriptorProto.create({
        name: this.name,
        value: values,
        options: toDescriptorOptions(this.options, exports2.EnumOptions)
      });
    };
    var unnamedOneofIndex = 0;
    OneOf.fromDescriptor = function fromDescriptor(descriptor) {
      if (typeof descriptor.length === "number")
        descriptor = exports2.OneofDescriptorProto.decode(descriptor);
      return new OneOf(descriptor.name && descriptor.name.length ? descriptor.name : "oneof" + unnamedOneofIndex++);
    };
    OneOf.prototype.toDescriptor = function toDescriptor() {
      return exports2.OneofDescriptorProto.create({
        name: this.name
      });
    };
    var unnamedServiceIndex = 0;
    Service.fromDescriptor = function fromDescriptor(descriptor) {
      if (typeof descriptor.length === "number")
        descriptor = exports2.ServiceDescriptorProto.decode(descriptor);
      var service = new Service(descriptor.name && descriptor.name.length ? descriptor.name : "Service" + unnamedServiceIndex++, fromDescriptorOptions(descriptor.options, exports2.ServiceOptions));
      if (descriptor.method)
        for (var i = 0; i < descriptor.method.length; ++i)
          service.add(Method.fromDescriptor(descriptor.method[i]));
      return service;
    };
    Service.prototype.toDescriptor = function toDescriptor() {
      var methods = [];
      for (var i = 0; i < this.methodsArray.length; ++i)
        methods.push(this._methodsArray[i].toDescriptor());
      return exports2.ServiceDescriptorProto.create({
        name: this.name,
        method: methods,
        options: toDescriptorOptions(this.options, exports2.ServiceOptions)
      });
    };
    var unnamedMethodIndex = 0;
    Method.fromDescriptor = function fromDescriptor(descriptor) {
      if (typeof descriptor.length === "number")
        descriptor = exports2.MethodDescriptorProto.decode(descriptor);
      return new Method(descriptor.name && descriptor.name.length ? descriptor.name : "Method" + unnamedMethodIndex++, "rpc", descriptor.inputType, descriptor.outputType, Boolean(descriptor.clientStreaming), Boolean(descriptor.serverStreaming), fromDescriptorOptions(descriptor.options, exports2.MethodOptions));
    };
    Method.prototype.toDescriptor = function toDescriptor() {
      return exports2.MethodDescriptorProto.create({
        name: this.name,
        inputType: this.resolvedRequestType ? this.resolvedRequestType.fullName : this.requestType,
        outputType: this.resolvedResponseType ? this.resolvedResponseType.fullName : this.responseType,
        clientStreaming: this.requestStream,
        serverStreaming: this.responseStream,
        options: toDescriptorOptions(this.options, exports2.MethodOptions)
      });
    };
    function fromDescriptorType(type) {
      switch (type) {
        case 1:
          return "double";
        case 2:
          return "float";
        case 3:
          return "int64";
        case 4:
          return "uint64";
        case 5:
          return "int32";
        case 6:
          return "fixed64";
        case 7:
          return "fixed32";
        case 8:
          return "bool";
        case 9:
          return "string";
        case 12:
          return "bytes";
        case 13:
          return "uint32";
        case 15:
          return "sfixed32";
        case 16:
          return "sfixed64";
        case 17:
          return "sint32";
        case 18:
          return "sint64";
      }
      throw Error("illegal type: " + type);
    }
    function packableDescriptorType(type) {
      switch (type) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
          return true;
      }
      return false;
    }
    function toDescriptorType(type, resolvedType) {
      switch (type) {
        case "double":
          return 1;
        case "float":
          return 2;
        case "int64":
          return 3;
        case "uint64":
          return 4;
        case "int32":
          return 5;
        case "fixed64":
          return 6;
        case "fixed32":
          return 7;
        case "bool":
          return 8;
        case "string":
          return 9;
        case "bytes":
          return 12;
        case "uint32":
          return 13;
        case "sfixed32":
          return 15;
        case "sfixed64":
          return 16;
        case "sint32":
          return 17;
        case "sint64":
          return 18;
      }
      if (resolvedType instanceof Enum)
        return 14;
      if (resolvedType instanceof Type)
        return resolvedType.group ? 10 : 11;
      throw Error("illegal type: " + type);
    }
    function fromDescriptorOptions(options2, type) {
      if (!options2)
        return void 0;
      var out = [];
      for (var i = 0, field, key, val; i < type.fieldsArray.length; ++i)
        if ((key = (field = type._fieldsArray[i]).name) !== "uninterpretedOption") {
          if (options2.hasOwnProperty(key)) {
            val = options2[key];
            if (field.resolvedType instanceof Enum && typeof val === "number" && field.resolvedType.valuesById[val] !== void 0)
              val = field.resolvedType.valuesById[val];
            out.push(underScore(key), val);
          }
        }
      return out.length ? $protobuf.util.toObject(out) : void 0;
    }
    function toDescriptorOptions(options2, type) {
      if (!options2)
        return void 0;
      var out = [];
      for (var i = 0, ks = Object.keys(options2), key, val; i < ks.length; ++i) {
        val = options2[key = ks[i]];
        if (key === "default")
          continue;
        var field = type.fields[key];
        if (!field && !(field = type.fields[key = $protobuf.util.camelCase(key)]))
          continue;
        out.push(key, val);
      }
      return out.length ? type.fromObject($protobuf.util.toObject(out)) : void 0;
    }
    function shortname(from, to) {
      var fromPath = from.fullName.split("."), toPath = to.fullName.split("."), i = 0, j = 0, k = toPath.length - 1;
      if (!(from instanceof Root2) && to instanceof Namespace)
        while (i < fromPath.length && j < k && fromPath[i] === toPath[j]) {
          var other = to.lookup(fromPath[i++], true);
          if (other !== null && other !== to)
            break;
          ++j;
        }
      else
        for (; i < fromPath.length && j < k && fromPath[i] === toPath[j]; ++i, ++j)
          ;
      return toPath.slice(j).join(".");
    }
    function underScore(str) {
      return str.substring(0, 1) + str.substring(1).replace(/([A-Z])(?=[a-z]|$)/g, function($0, $1) {
        return "_" + $1.toLowerCase();
      });
    }
  }
});

// node_modules/lodash.camelcase/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.camelcase/index.js"(exports2, module2) {
    var INFINITY = 1 / 0;
    var symbolTag = "[object Symbol]";
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f\\ufe20-\\ufe23";
    var rsComboSymbolsRange = "\\u20d0-\\u20f0";
    var rsDingbatRange = "\\u2700-\\u27bf";
    var rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff";
    var rsMathOpRange = "\\xac\\xb1\\xd7\\xf7";
    var rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf";
    var rsPunctuationRange = "\\u2000-\\u206f";
    var rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000";
    var rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde";
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    var rsApos = "['\u2019]";
    var rsAstral = "[" + rsAstralRange + "]";
    var rsBreak = "[" + rsBreakRange + "]";
    var rsCombo = "[" + rsComboMarksRange + rsComboSymbolsRange + "]";
    var rsDigits = "\\d+";
    var rsDingbat = "[" + rsDingbatRange + "]";
    var rsLower = "[" + rsLowerRange + "]";
    var rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]";
    var rsFitz = "\\ud83c[\\udffb-\\udfff]";
    var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
    var rsNonAstral = "[^" + rsAstralRange + "]";
    var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
    var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
    var rsUpper = "[" + rsUpperRange + "]";
    var rsZWJ = "\\u200d";
    var rsLowerMisc = "(?:" + rsLower + "|" + rsMisc + ")";
    var rsUpperMisc = "(?:" + rsUpper + "|" + rsMisc + ")";
    var rsOptLowerContr = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?";
    var rsOptUpperContr = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?";
    var reOptMod = rsModifier + "?";
    var rsOptVar = "[" + rsVarRange + "]?";
    var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
    var rsSeq = rsOptVar + reOptMod + rsOptJoin;
    var rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq;
    var rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
    var reApos = RegExp(rsApos, "g");
    var reComboMark = RegExp(rsCombo, "g");
    var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
    var reUnicodeWord = RegExp([
      rsUpper + "?" + rsLower + "+" + rsOptLowerContr + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
      rsUpperMisc + "+" + rsOptUpperContr + "(?=" + [rsBreak, rsUpper + rsLowerMisc, "$"].join("|") + ")",
      rsUpper + "?" + rsLowerMisc + "+" + rsOptLowerContr,
      rsUpper + "+" + rsOptUpperContr,
      rsDigits,
      rsEmoji
    ].join("|"), "g");
    var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + "]");
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    var deburredLetters = {
      "\xC0": "A",
      "\xC1": "A",
      "\xC2": "A",
      "\xC3": "A",
      "\xC4": "A",
      "\xC5": "A",
      "\xE0": "a",
      "\xE1": "a",
      "\xE2": "a",
      "\xE3": "a",
      "\xE4": "a",
      "\xE5": "a",
      "\xC7": "C",
      "\xE7": "c",
      "\xD0": "D",
      "\xF0": "d",
      "\xC8": "E",
      "\xC9": "E",
      "\xCA": "E",
      "\xCB": "E",
      "\xE8": "e",
      "\xE9": "e",
      "\xEA": "e",
      "\xEB": "e",
      "\xCC": "I",
      "\xCD": "I",
      "\xCE": "I",
      "\xCF": "I",
      "\xEC": "i",
      "\xED": "i",
      "\xEE": "i",
      "\xEF": "i",
      "\xD1": "N",
      "\xF1": "n",
      "\xD2": "O",
      "\xD3": "O",
      "\xD4": "O",
      "\xD5": "O",
      "\xD6": "O",
      "\xD8": "O",
      "\xF2": "o",
      "\xF3": "o",
      "\xF4": "o",
      "\xF5": "o",
      "\xF6": "o",
      "\xF8": "o",
      "\xD9": "U",
      "\xDA": "U",
      "\xDB": "U",
      "\xDC": "U",
      "\xF9": "u",
      "\xFA": "u",
      "\xFB": "u",
      "\xFC": "u",
      "\xDD": "Y",
      "\xFD": "y",
      "\xFF": "y",
      "\xC6": "Ae",
      "\xE6": "ae",
      "\xDE": "Th",
      "\xFE": "th",
      "\xDF": "ss",
      "\u0100": "A",
      "\u0102": "A",
      "\u0104": "A",
      "\u0101": "a",
      "\u0103": "a",
      "\u0105": "a",
      "\u0106": "C",
      "\u0108": "C",
      "\u010A": "C",
      "\u010C": "C",
      "\u0107": "c",
      "\u0109": "c",
      "\u010B": "c",
      "\u010D": "c",
      "\u010E": "D",
      "\u0110": "D",
      "\u010F": "d",
      "\u0111": "d",
      "\u0112": "E",
      "\u0114": "E",
      "\u0116": "E",
      "\u0118": "E",
      "\u011A": "E",
      "\u0113": "e",
      "\u0115": "e",
      "\u0117": "e",
      "\u0119": "e",
      "\u011B": "e",
      "\u011C": "G",
      "\u011E": "G",
      "\u0120": "G",
      "\u0122": "G",
      "\u011D": "g",
      "\u011F": "g",
      "\u0121": "g",
      "\u0123": "g",
      "\u0124": "H",
      "\u0126": "H",
      "\u0125": "h",
      "\u0127": "h",
      "\u0128": "I",
      "\u012A": "I",
      "\u012C": "I",
      "\u012E": "I",
      "\u0130": "I",
      "\u0129": "i",
      "\u012B": "i",
      "\u012D": "i",
      "\u012F": "i",
      "\u0131": "i",
      "\u0134": "J",
      "\u0135": "j",
      "\u0136": "K",
      "\u0137": "k",
      "\u0138": "k",
      "\u0139": "L",
      "\u013B": "L",
      "\u013D": "L",
      "\u013F": "L",
      "\u0141": "L",
      "\u013A": "l",
      "\u013C": "l",
      "\u013E": "l",
      "\u0140": "l",
      "\u0142": "l",
      "\u0143": "N",
      "\u0145": "N",
      "\u0147": "N",
      "\u014A": "N",
      "\u0144": "n",
      "\u0146": "n",
      "\u0148": "n",
      "\u014B": "n",
      "\u014C": "O",
      "\u014E": "O",
      "\u0150": "O",
      "\u014D": "o",
      "\u014F": "o",
      "\u0151": "o",
      "\u0154": "R",
      "\u0156": "R",
      "\u0158": "R",
      "\u0155": "r",
      "\u0157": "r",
      "\u0159": "r",
      "\u015A": "S",
      "\u015C": "S",
      "\u015E": "S",
      "\u0160": "S",
      "\u015B": "s",
      "\u015D": "s",
      "\u015F": "s",
      "\u0161": "s",
      "\u0162": "T",
      "\u0164": "T",
      "\u0166": "T",
      "\u0163": "t",
      "\u0165": "t",
      "\u0167": "t",
      "\u0168": "U",
      "\u016A": "U",
      "\u016C": "U",
      "\u016E": "U",
      "\u0170": "U",
      "\u0172": "U",
      "\u0169": "u",
      "\u016B": "u",
      "\u016D": "u",
      "\u016F": "u",
      "\u0171": "u",
      "\u0173": "u",
      "\u0174": "W",
      "\u0175": "w",
      "\u0176": "Y",
      "\u0177": "y",
      "\u0178": "Y",
      "\u0179": "Z",
      "\u017B": "Z",
      "\u017D": "Z",
      "\u017A": "z",
      "\u017C": "z",
      "\u017E": "z",
      "\u0132": "IJ",
      "\u0133": "ij",
      "\u0152": "Oe",
      "\u0153": "oe",
      "\u0149": "'n",
      "\u017F": "ss"
    };
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index2 = -1, length = array ? array.length : 0;
      if (initAccum && length) {
        accumulator = array[++index2];
      }
      while (++index2 < length) {
        accumulator = iteratee(accumulator, array[index2], index2, array);
      }
      return accumulator;
    }
    function asciiToArray(string) {
      return string.split("");
    }
    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? void 0 : object[key];
      };
    }
    var deburrLetter = basePropertyOf(deburredLetters);
    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }
    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }
    function stringToArray(string) {
      return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }
    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }
    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var Symbol2 = root.Symbol;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseSlice(array, start, end) {
      var index2 = -1, length = array.length;
      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : end - start >>> 0;
      start >>>= 0;
      var result = Array(length);
      while (++index2 < length) {
        result[index2] = array[index2 + start];
      }
      return result;
    }
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === void 0 ? length : end;
      return !start && end >= length ? array : baseSlice(array, start, end);
    }
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);
        var strSymbols = hasUnicode(string) ? stringToArray(string) : void 0;
        var chr = strSymbols ? strSymbols[0] : string.charAt(0);
        var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
        return chr[methodName]() + trailing;
      };
    }
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
      };
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    var camelCase = createCompounder(function(result, word, index2) {
      word = word.toLowerCase();
      return result + (index2 ? capitalize(word) : word);
    });
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
    }
    var upperFirst = createCaseFirst("toUpperCase");
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? void 0 : pattern;
      if (pattern === void 0) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }
    module2.exports = camelCase;
  }
});

// node_modules/protobufjs/google/protobuf/api.json
var require_api = __commonJS({
  "node_modules/protobufjs/google/protobuf/api.json"(exports2, module2) {
    module2.exports = {
      nested: {
        google: {
          nested: {
            protobuf: {
              nested: {
                Api: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    methods: {
                      rule: "repeated",
                      type: "Method",
                      id: 2
                    },
                    options: {
                      rule: "repeated",
                      type: "Option",
                      id: 3
                    },
                    version: {
                      type: "string",
                      id: 4
                    },
                    sourceContext: {
                      type: "SourceContext",
                      id: 5
                    },
                    mixins: {
                      rule: "repeated",
                      type: "Mixin",
                      id: 6
                    },
                    syntax: {
                      type: "Syntax",
                      id: 7
                    }
                  }
                },
                Method: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    requestTypeUrl: {
                      type: "string",
                      id: 2
                    },
                    requestStreaming: {
                      type: "bool",
                      id: 3
                    },
                    responseTypeUrl: {
                      type: "string",
                      id: 4
                    },
                    responseStreaming: {
                      type: "bool",
                      id: 5
                    },
                    options: {
                      rule: "repeated",
                      type: "Option",
                      id: 6
                    },
                    syntax: {
                      type: "Syntax",
                      id: 7
                    }
                  }
                },
                Mixin: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    root: {
                      type: "string",
                      id: 2
                    }
                  }
                },
                SourceContext: {
                  fields: {
                    fileName: {
                      type: "string",
                      id: 1
                    }
                  }
                },
                Option: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    value: {
                      type: "Any",
                      id: 2
                    }
                  }
                },
                Syntax: {
                  values: {
                    SYNTAX_PROTO2: 0,
                    SYNTAX_PROTO3: 1
                  }
                }
              }
            }
          }
        }
      }
    };
  }
});

// node_modules/protobufjs/google/protobuf/source_context.json
var require_source_context = __commonJS({
  "node_modules/protobufjs/google/protobuf/source_context.json"(exports2, module2) {
    module2.exports = {
      nested: {
        google: {
          nested: {
            protobuf: {
              nested: {
                SourceContext: {
                  fields: {
                    fileName: {
                      type: "string",
                      id: 1
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
  }
});

// node_modules/protobufjs/google/protobuf/type.json
var require_type2 = __commonJS({
  "node_modules/protobufjs/google/protobuf/type.json"(exports2, module2) {
    module2.exports = {
      nested: {
        google: {
          nested: {
            protobuf: {
              nested: {
                Type: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    fields: {
                      rule: "repeated",
                      type: "Field",
                      id: 2
                    },
                    oneofs: {
                      rule: "repeated",
                      type: "string",
                      id: 3
                    },
                    options: {
                      rule: "repeated",
                      type: "Option",
                      id: 4
                    },
                    sourceContext: {
                      type: "SourceContext",
                      id: 5
                    },
                    syntax: {
                      type: "Syntax",
                      id: 6
                    }
                  }
                },
                Field: {
                  fields: {
                    kind: {
                      type: "Kind",
                      id: 1
                    },
                    cardinality: {
                      type: "Cardinality",
                      id: 2
                    },
                    number: {
                      type: "int32",
                      id: 3
                    },
                    name: {
                      type: "string",
                      id: 4
                    },
                    typeUrl: {
                      type: "string",
                      id: 6
                    },
                    oneofIndex: {
                      type: "int32",
                      id: 7
                    },
                    packed: {
                      type: "bool",
                      id: 8
                    },
                    options: {
                      rule: "repeated",
                      type: "Option",
                      id: 9
                    },
                    jsonName: {
                      type: "string",
                      id: 10
                    },
                    defaultValue: {
                      type: "string",
                      id: 11
                    }
                  },
                  nested: {
                    Kind: {
                      values: {
                        TYPE_UNKNOWN: 0,
                        TYPE_DOUBLE: 1,
                        TYPE_FLOAT: 2,
                        TYPE_INT64: 3,
                        TYPE_UINT64: 4,
                        TYPE_INT32: 5,
                        TYPE_FIXED64: 6,
                        TYPE_FIXED32: 7,
                        TYPE_BOOL: 8,
                        TYPE_STRING: 9,
                        TYPE_GROUP: 10,
                        TYPE_MESSAGE: 11,
                        TYPE_BYTES: 12,
                        TYPE_UINT32: 13,
                        TYPE_ENUM: 14,
                        TYPE_SFIXED32: 15,
                        TYPE_SFIXED64: 16,
                        TYPE_SINT32: 17,
                        TYPE_SINT64: 18
                      }
                    },
                    Cardinality: {
                      values: {
                        CARDINALITY_UNKNOWN: 0,
                        CARDINALITY_OPTIONAL: 1,
                        CARDINALITY_REQUIRED: 2,
                        CARDINALITY_REPEATED: 3
                      }
                    }
                  }
                },
                Enum: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    enumvalue: {
                      rule: "repeated",
                      type: "EnumValue",
                      id: 2
                    },
                    options: {
                      rule: "repeated",
                      type: "Option",
                      id: 3
                    },
                    sourceContext: {
                      type: "SourceContext",
                      id: 4
                    },
                    syntax: {
                      type: "Syntax",
                      id: 5
                    }
                  }
                },
                EnumValue: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    number: {
                      type: "int32",
                      id: 2
                    },
                    options: {
                      rule: "repeated",
                      type: "Option",
                      id: 3
                    }
                  }
                },
                Option: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    value: {
                      type: "Any",
                      id: 2
                    }
                  }
                },
                Syntax: {
                  values: {
                    SYNTAX_PROTO2: 0,
                    SYNTAX_PROTO3: 1
                  }
                },
                Any: {
                  fields: {
                    type_url: {
                      type: "string",
                      id: 1
                    },
                    value: {
                      type: "bytes",
                      id: 2
                    }
                  }
                },
                SourceContext: {
                  fields: {
                    fileName: {
                      type: "string",
                      id: 1
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
  }
});

// node_modules/@grpc/proto-loader/build/src/index.js
var require_src3 = __commonJS({
  "node_modules/@grpc/proto-loader/build/src/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    var fs = require("fs");
    var path = require("path");
    var Protobuf = require_protobufjs();
    var descriptor = require_descriptor2();
    var camelCase = require_lodash();
    var descriptorOptions = {
      longs: String,
      enums: String,
      bytes: String,
      defaults: true,
      oneofs: true,
      json: true
    };
    function joinName(baseName, name) {
      if (baseName === "") {
        return name;
      } else {
        return baseName + "." + name;
      }
    }
    function isHandledReflectionObject(obj) {
      return obj instanceof Protobuf.Service || obj instanceof Protobuf.Type || obj instanceof Protobuf.Enum;
    }
    function isNamespaceBase(obj) {
      return obj instanceof Protobuf.Namespace || obj instanceof Protobuf.Root;
    }
    function getAllHandledReflectionObjects(obj, parentName) {
      const objName = joinName(parentName, obj.name);
      if (isHandledReflectionObject(obj)) {
        return [[objName, obj]];
      } else {
        if (isNamespaceBase(obj) && typeof obj.nested !== "undefined") {
          return Object.keys(obj.nested).map((name) => {
            return getAllHandledReflectionObjects(obj.nested[name], objName);
          }).reduce((accumulator, currentValue) => accumulator.concat(currentValue), []);
        }
      }
      return [];
    }
    function createDeserializer(cls, options2) {
      return function deserialize(argBuf) {
        return cls.toObject(cls.decode(argBuf), options2);
      };
    }
    function createSerializer(cls) {
      return function serialize(arg) {
        const message = cls.fromObject(arg);
        return cls.encode(message).finish();
      };
    }
    function createMethodDefinition(method, serviceName, options2, fileDescriptors) {
      const requestType = method.resolvedRequestType;
      const responseType = method.resolvedResponseType;
      return {
        path: "/" + serviceName + "/" + method.name,
        requestStream: !!method.requestStream,
        responseStream: !!method.responseStream,
        requestSerialize: createSerializer(requestType),
        requestDeserialize: createDeserializer(requestType, options2),
        responseSerialize: createSerializer(responseType),
        responseDeserialize: createDeserializer(responseType, options2),
        originalName: camelCase(method.name),
        requestType: createMessageDefinition(requestType, fileDescriptors),
        responseType: createMessageDefinition(responseType, fileDescriptors)
      };
    }
    function createServiceDefinition(service, name, options2, fileDescriptors) {
      const def = {};
      for (const method of service.methodsArray) {
        def[method.name] = createMethodDefinition(method, name, options2, fileDescriptors);
      }
      return def;
    }
    function createMessageDefinition(message, fileDescriptors) {
      const messageDescriptor = message.toDescriptor("proto3");
      return {
        format: "Protocol Buffer 3 DescriptorProto",
        type: messageDescriptor.$type.toObject(messageDescriptor, descriptorOptions),
        fileDescriptorProtos: fileDescriptors
      };
    }
    function createEnumDefinition(enumType, fileDescriptors) {
      const enumDescriptor = enumType.toDescriptor("proto3");
      return {
        format: "Protocol Buffer 3 EnumDescriptorProto",
        type: enumDescriptor.$type.toObject(enumDescriptor, descriptorOptions),
        fileDescriptorProtos: fileDescriptors
      };
    }
    function createDefinition(obj, name, options2, fileDescriptors) {
      if (obj instanceof Protobuf.Service) {
        return createServiceDefinition(obj, name, options2, fileDescriptors);
      } else if (obj instanceof Protobuf.Type) {
        return createMessageDefinition(obj, fileDescriptors);
      } else if (obj instanceof Protobuf.Enum) {
        return createEnumDefinition(obj, fileDescriptors);
      } else {
        throw new Error("Type mismatch in reflection object handling");
      }
    }
    function createPackageDefinition(root, options2) {
      const def = {};
      root.resolveAll();
      const descriptorList = root.toDescriptor("proto3").file;
      const bufferList = descriptorList.map((value) => Buffer.from(descriptor.FileDescriptorProto.encode(value).finish()));
      for (const [name, obj] of getAllHandledReflectionObjects(root, "")) {
        def[name] = createDefinition(obj, name, options2, bufferList);
      }
      return def;
    }
    function addIncludePathResolver(root, includePaths) {
      const originalResolvePath = root.resolvePath;
      root.resolvePath = (origin, target) => {
        if (path.isAbsolute(target)) {
          return target;
        }
        for (const directory of includePaths) {
          const fullPath = path.join(directory, target);
          try {
            fs.accessSync(fullPath, fs.constants.R_OK);
            return fullPath;
          } catch (err) {
            continue;
          }
        }
        process.emitWarning(`${target} not found in any of the include paths ${includePaths}`);
        return originalResolvePath(origin, target);
      };
    }
    function createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options2) {
      options2 = options2 || {};
      const root = Protobuf.Root.fromDescriptor(decodedDescriptorSet);
      root.resolveAll();
      return createPackageDefinition(root, options2);
    }
    function load2(filename, options2) {
      const root = new Protobuf.Root();
      options2 = options2 || {};
      if (!!options2.includeDirs) {
        if (!Array.isArray(options2.includeDirs)) {
          return Promise.reject(new Error("The includeDirs option must be an array"));
        }
        addIncludePathResolver(root, options2.includeDirs);
      }
      return root.load(filename, options2).then((loadedRoot) => {
        loadedRoot.resolveAll();
        return createPackageDefinition(root, options2);
      });
    }
    exports2.load = load2;
    function loadSync(filename, options2) {
      const root = new Protobuf.Root();
      options2 = options2 || {};
      if (!!options2.includeDirs) {
        if (!Array.isArray(options2.includeDirs)) {
          throw new Error("The includeDirs option must be an array");
        }
        addIncludePathResolver(root, options2.includeDirs);
      }
      const loadedRoot = root.loadSync(filename, options2);
      loadedRoot.resolveAll();
      return createPackageDefinition(root, options2);
    }
    exports2.loadSync = loadSync;
    function loadFileDescriptorSetFromBuffer(descriptorSet, options2) {
      const decodedDescriptorSet = descriptor.FileDescriptorSet.decode(descriptorSet);
      return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options2);
    }
    exports2.loadFileDescriptorSetFromBuffer = loadFileDescriptorSetFromBuffer;
    function loadFileDescriptorSetFromObject(descriptorSet, options2) {
      const decodedDescriptorSet = descriptor.FileDescriptorSet.fromObject(descriptorSet);
      return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options2);
    }
    exports2.loadFileDescriptorSetFromObject = loadFileDescriptorSetFromObject;
    var apiDescriptor = require_api();
    var descriptorDescriptor = require_descriptor();
    var sourceContextDescriptor = require_source_context();
    var typeDescriptor = require_type2();
    Protobuf.common("api", apiDescriptor.nested.google.nested.protobuf.nested);
    Protobuf.common("descriptor", descriptorDescriptor.nested.google.nested.protobuf.nested);
    Protobuf.common("source_context", sourceContextDescriptor.nested.google.nested.protobuf.nested);
    Protobuf.common("type", typeDescriptor.nested.google.nested.protobuf.nested);
  }
});

// node_modules/@firebase/firestore/dist/exp/index.node.umd.js
var require_index_node_umd = __commonJS({
  "node_modules/@firebase/firestore/dist/exp/index.node.umd.js"(exports2, module2) {
    (function(global2, factory) {
      typeof exports2 === "object" && typeof module2 !== "undefined" ? factory(exports2, require_tslib(), require_index_cjs3(), require_index_cjs(), require_index_cjs2(), require("util"), require_index_node_cjs(), require("crypto"), require_src(), require_package(), require("path"), require_src3()) : typeof define === "function" && define.amd ? define(["exports", "tslib", "@firebase/app", "@firebase/component", "@firebase/logger", "util", "@firebase/util", "crypto", "@grpc/grpc-js", "@grpc/grpc-js/package.json", "path", "@grpc/proto-loader"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory((global2.firebase = global2.firebase || {}, global2.firebase.firestore = {}), global2.tslib, global2.app, global2.component, global2.logger, global2.util$1, global2.util, global2.crypto, global2.grpcJs, global2.package_json, global2.path, global2.protoLoader));
    })(exports2, function(exports3, tslib, app, component, logger, util$1, util, crypto, grpcJs, package_json, path, protoLoader) {
      "use strict";
      var name = "@firebase/firestore";
      var version = "0.0.900-exp.894b5da5a";
      var ListenSequence = function() {
        function ListenSequence2(previousValue, sequenceNumberSyncer) {
          var _this = this;
          this.previousValue = previousValue;
          if (sequenceNumberSyncer) {
            sequenceNumberSyncer.sequenceNumberHandler = function(sequenceNumber) {
              return _this.setPreviousValue(sequenceNumber);
            };
            this.writeNewSequenceNumber = function(sequenceNumber) {
              return sequenceNumberSyncer.writeSequenceNumber(sequenceNumber);
            };
          }
        }
        ListenSequence2.prototype.setPreviousValue = function(externalPreviousValue) {
          this.previousValue = Math.max(externalPreviousValue, this.previousValue);
          return this.previousValue;
        };
        ListenSequence2.prototype.next = function() {
          var nextValue = ++this.previousValue;
          if (this.writeNewSequenceNumber) {
            this.writeNewSequenceNumber(nextValue);
          }
          return nextValue;
        };
        return ListenSequence2;
      }();
      ListenSequence.INVALID = -1;
      var version$1 = "8.4.1";
      function formatJSON(value) {
        return util$1.inspect(value, {depth: 100});
      }
      var logClient = new logger.Logger("@firebase/firestore");
      function getLogLevel() {
        return logClient.logLevel;
      }
      function setLogLevel(logLevel) {
        logClient.setLogLevel(logLevel);
      }
      function logDebug(msg) {
        var obj = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          obj[_i - 1] = arguments[_i];
        }
        if (logClient.logLevel <= logger.LogLevel.DEBUG) {
          var args = obj.map(argToString);
          logClient.debug.apply(logClient, tslib.__spreadArray(["Firestore (" + version$1 + "): " + msg], args));
        }
      }
      function logError(msg) {
        var obj = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          obj[_i - 1] = arguments[_i];
        }
        if (logClient.logLevel <= logger.LogLevel.ERROR) {
          var args = obj.map(argToString);
          logClient.error.apply(logClient, tslib.__spreadArray(["Firestore (" + version$1 + "): " + msg], args));
        }
      }
      function logWarn(msg) {
        var obj = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          obj[_i - 1] = arguments[_i];
        }
        if (logClient.logLevel <= logger.LogLevel.WARN) {
          var args = obj.map(argToString);
          logClient.warn.apply(logClient, tslib.__spreadArray(["Firestore (" + version$1 + "): " + msg], args));
        }
      }
      function argToString(obj) {
        if (typeof obj === "string") {
          return obj;
        } else {
          try {
            return formatJSON(obj);
          } catch (e) {
            return obj;
          }
        }
      }
      function fail(failure) {
        if (failure === void 0) {
          failure = "Unexpected state";
        }
        var message = "FIRESTORE (" + version$1 + ") INTERNAL ASSERTION FAILED: " + failure;
        logError(message);
        throw new Error(message);
      }
      function hardAssert(assertion, message) {
        if (!assertion) {
          fail();
        }
      }
      function debugCast(obj, constructor) {
        return obj;
      }
      var Code = {
        OK: "ok",
        CANCELLED: "cancelled",
        UNKNOWN: "unknown",
        INVALID_ARGUMENT: "invalid-argument",
        DEADLINE_EXCEEDED: "deadline-exceeded",
        NOT_FOUND: "not-found",
        ALREADY_EXISTS: "already-exists",
        PERMISSION_DENIED: "permission-denied",
        UNAUTHENTICATED: "unauthenticated",
        RESOURCE_EXHAUSTED: "resource-exhausted",
        FAILED_PRECONDITION: "failed-precondition",
        ABORTED: "aborted",
        OUT_OF_RANGE: "out-of-range",
        UNIMPLEMENTED: "unimplemented",
        INTERNAL: "internal",
        UNAVAILABLE: "unavailable",
        DATA_LOSS: "data-loss"
      };
      var FirestoreError = function(_super) {
        tslib.__extends(FirestoreError2, _super);
        function FirestoreError2(code, message) {
          var _this = _super.call(this, message) || this;
          _this.code = code;
          _this.message = message;
          _this.name = "FirebaseError";
          _this.toString = function() {
            return _this.name + ": [code=" + _this.code + "]: " + _this.message;
          };
          return _this;
        }
        return FirestoreError2;
      }(Error);
      var DOCUMENT_KEY_NAME = "__name__";
      var BasePath = function() {
        function BasePath2(segments, offset, length) {
          if (offset === void 0) {
            offset = 0;
          } else if (offset > segments.length) {
            fail();
          }
          if (length === void 0) {
            length = segments.length - offset;
          } else if (length > segments.length - offset) {
            fail();
          }
          this.segments = segments;
          this.offset = offset;
          this.len = length;
        }
        Object.defineProperty(BasePath2.prototype, "length", {
          get: function() {
            return this.len;
          },
          enumerable: false,
          configurable: true
        });
        BasePath2.prototype.isEqual = function(other) {
          return BasePath2.comparator(this, other) === 0;
        };
        BasePath2.prototype.child = function(nameOrPath) {
          var segments = this.segments.slice(this.offset, this.limit());
          if (nameOrPath instanceof BasePath2) {
            nameOrPath.forEach(function(segment) {
              segments.push(segment);
            });
          } else {
            segments.push(nameOrPath);
          }
          return this.construct(segments);
        };
        BasePath2.prototype.limit = function() {
          return this.offset + this.length;
        };
        BasePath2.prototype.popFirst = function(size) {
          size = size === void 0 ? 1 : size;
          return this.construct(this.segments, this.offset + size, this.length - size);
        };
        BasePath2.prototype.popLast = function() {
          return this.construct(this.segments, this.offset, this.length - 1);
        };
        BasePath2.prototype.firstSegment = function() {
          return this.segments[this.offset];
        };
        BasePath2.prototype.lastSegment = function() {
          return this.get(this.length - 1);
        };
        BasePath2.prototype.get = function(index2) {
          return this.segments[this.offset + index2];
        };
        BasePath2.prototype.isEmpty = function() {
          return this.length === 0;
        };
        BasePath2.prototype.isPrefixOf = function(other) {
          if (other.length < this.length) {
            return false;
          }
          for (var i = 0; i < this.length; i++) {
            if (this.get(i) !== other.get(i)) {
              return false;
            }
          }
          return true;
        };
        BasePath2.prototype.isImmediateParentOf = function(potentialChild) {
          if (this.length + 1 !== potentialChild.length) {
            return false;
          }
          for (var i = 0; i < this.length; i++) {
            if (this.get(i) !== potentialChild.get(i)) {
              return false;
            }
          }
          return true;
        };
        BasePath2.prototype.forEach = function(fn) {
          for (var i = this.offset, end = this.limit(); i < end; i++) {
            fn(this.segments[i]);
          }
        };
        BasePath2.prototype.toArray = function() {
          return this.segments.slice(this.offset, this.limit());
        };
        BasePath2.comparator = function(p1, p2) {
          var len = Math.min(p1.length, p2.length);
          for (var i = 0; i < len; i++) {
            var left = p1.get(i);
            var right = p2.get(i);
            if (left < right) {
              return -1;
            }
            if (left > right) {
              return 1;
            }
          }
          if (p1.length < p2.length) {
            return -1;
          }
          if (p1.length > p2.length) {
            return 1;
          }
          return 0;
        };
        return BasePath2;
      }();
      var ResourcePath = function(_super) {
        tslib.__extends(ResourcePath2, _super);
        function ResourcePath2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ResourcePath2.prototype.construct = function(segments, offset, length) {
          return new ResourcePath2(segments, offset, length);
        };
        ResourcePath2.prototype.canonicalString = function() {
          return this.toArray().join("/");
        };
        ResourcePath2.prototype.toString = function() {
          return this.canonicalString();
        };
        ResourcePath2.fromString = function() {
          var pathComponents = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            pathComponents[_i] = arguments[_i];
          }
          var segments = [];
          for (var _d = 0, pathComponents_1 = pathComponents; _d < pathComponents_1.length; _d++) {
            var path2 = pathComponents_1[_d];
            if (path2.indexOf("//") >= 0) {
              throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid segment (" + path2 + "). Paths must not contain // in them.");
            }
            segments.push.apply(segments, path2.split("/").filter(function(segment) {
              return segment.length > 0;
            }));
          }
          return new ResourcePath2(segments);
        };
        ResourcePath2.emptyPath = function() {
          return new ResourcePath2([]);
        };
        return ResourcePath2;
      }(BasePath);
      var identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
      var FieldPath = function(_super) {
        tslib.__extends(FieldPath2, _super);
        function FieldPath2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        FieldPath2.prototype.construct = function(segments, offset, length) {
          return new FieldPath2(segments, offset, length);
        };
        FieldPath2.isValidIdentifier = function(segment) {
          return identifierRegExp.test(segment);
        };
        FieldPath2.prototype.canonicalString = function() {
          return this.toArray().map(function(str) {
            str = str.replace(/\\/g, "\\\\").replace(/`/g, "\\`");
            if (!FieldPath2.isValidIdentifier(str)) {
              str = "`" + str + "`";
            }
            return str;
          }).join(".");
        };
        FieldPath2.prototype.toString = function() {
          return this.canonicalString();
        };
        FieldPath2.prototype.isKeyField = function() {
          return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;
        };
        FieldPath2.keyField = function() {
          return new FieldPath2([DOCUMENT_KEY_NAME]);
        };
        FieldPath2.fromServerFormat = function(path2) {
          var segments = [];
          var current = "";
          var i = 0;
          var addCurrentSegment = function() {
            if (current.length === 0) {
              throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid field path (" + path2 + "). Paths must not be empty, begin with '.', end with '.', or contain '..'");
            }
            segments.push(current);
            current = "";
          };
          var inBackticks = false;
          while (i < path2.length) {
            var c = path2[i];
            if (c === "\\") {
              if (i + 1 === path2.length) {
                throw new FirestoreError(Code.INVALID_ARGUMENT, "Path has trailing escape character: " + path2);
              }
              var next = path2[i + 1];
              if (!(next === "\\" || next === "." || next === "`")) {
                throw new FirestoreError(Code.INVALID_ARGUMENT, "Path has invalid escape sequence: " + path2);
              }
              current += next;
              i += 2;
            } else if (c === "`") {
              inBackticks = !inBackticks;
              i++;
            } else if (c === "." && !inBackticks) {
              addCurrentSegment();
              i++;
            } else {
              current += c;
              i++;
            }
          }
          addCurrentSegment();
          if (inBackticks) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Unterminated ` in path: " + path2);
          }
          return new FieldPath2(segments);
        };
        FieldPath2.emptyPath = function() {
          return new FieldPath2([]);
        };
        return FieldPath2;
      }(BasePath);
      var escapeChar = "";
      var encodedSeparatorChar = "";
      var encodedNul = "";
      var encodedEscape = "";
      function encodeResourcePath(path2) {
        var result = "";
        for (var i = 0; i < path2.length; i++) {
          if (result.length > 0) {
            result = encodeSeparator(result);
          }
          result = encodeSegment(path2.get(i), result);
        }
        return encodeSeparator(result);
      }
      function encodeSegment(segment, resultBuf) {
        var result = resultBuf;
        var length = segment.length;
        for (var i = 0; i < length; i++) {
          var c = segment.charAt(i);
          switch (c) {
            case "\0":
              result += escapeChar + encodedNul;
              break;
            case escapeChar:
              result += escapeChar + encodedEscape;
              break;
            default:
              result += c;
          }
        }
        return result;
      }
      function encodeSeparator(result) {
        return result + escapeChar + encodedSeparatorChar;
      }
      function decodeResourcePath(path2) {
        var length = path2.length;
        hardAssert(length >= 2);
        if (length === 2) {
          hardAssert(path2.charAt(0) === escapeChar && path2.charAt(1) === encodedSeparatorChar);
          return ResourcePath.emptyPath();
        }
        var lastReasonableEscapeIndex = length - 2;
        var segments = [];
        var segmentBuilder = "";
        for (var start = 0; start < length; ) {
          var end = path2.indexOf(escapeChar, start);
          if (end < 0 || end > lastReasonableEscapeIndex) {
            fail();
          }
          var next = path2.charAt(end + 1);
          switch (next) {
            case encodedSeparatorChar:
              var currentPiece = path2.substring(start, end);
              var segment = void 0;
              if (segmentBuilder.length === 0) {
                segment = currentPiece;
              } else {
                segmentBuilder += currentPiece;
                segment = segmentBuilder;
                segmentBuilder = "";
              }
              segments.push(segment);
              break;
            case encodedNul:
              segmentBuilder += path2.substring(start, end);
              segmentBuilder += "\0";
              break;
            case encodedEscape:
              segmentBuilder += path2.substring(start, end + 1);
              break;
            default:
              fail();
          }
          start = end + 2;
        }
        return new ResourcePath(segments);
      }
      var SCHEMA_VERSION = 11;
      var DbTimestamp = function() {
        function DbTimestamp2(seconds, nanoseconds) {
          this.seconds = seconds;
          this.nanoseconds = nanoseconds;
        }
        return DbTimestamp2;
      }();
      var DbPrimaryClient = function() {
        function DbPrimaryClient2(ownerId, allowTabSynchronization, leaseTimestampMs) {
          this.ownerId = ownerId;
          this.allowTabSynchronization = allowTabSynchronization;
          this.leaseTimestampMs = leaseTimestampMs;
        }
        return DbPrimaryClient2;
      }();
      DbPrimaryClient.store = "owner";
      DbPrimaryClient.key = "owner";
      var DbMutationQueue = function() {
        function DbMutationQueue2(userId, lastAcknowledgedBatchId, lastStreamToken) {
          this.userId = userId;
          this.lastAcknowledgedBatchId = lastAcknowledgedBatchId;
          this.lastStreamToken = lastStreamToken;
        }
        return DbMutationQueue2;
      }();
      DbMutationQueue.store = "mutationQueues";
      DbMutationQueue.keyPath = "userId";
      var DbMutationBatch = function() {
        function DbMutationBatch2(userId, batchId, localWriteTimeMs, baseMutations, mutations) {
          this.userId = userId;
          this.batchId = batchId;
          this.localWriteTimeMs = localWriteTimeMs;
          this.baseMutations = baseMutations;
          this.mutations = mutations;
        }
        return DbMutationBatch2;
      }();
      DbMutationBatch.store = "mutations";
      DbMutationBatch.keyPath = "batchId";
      DbMutationBatch.userMutationsIndex = "userMutationsIndex";
      DbMutationBatch.userMutationsKeyPath = ["userId", "batchId"];
      var DbDocumentMutation = function() {
        function DbDocumentMutation2() {
        }
        DbDocumentMutation2.prefixForUser = function(userId) {
          return [userId];
        };
        DbDocumentMutation2.prefixForPath = function(userId, path2) {
          return [userId, encodeResourcePath(path2)];
        };
        DbDocumentMutation2.key = function(userId, path2, batchId) {
          return [userId, encodeResourcePath(path2), batchId];
        };
        return DbDocumentMutation2;
      }();
      DbDocumentMutation.store = "documentMutations";
      DbDocumentMutation.PLACEHOLDER = new DbDocumentMutation();
      var DbNoDocument = function() {
        function DbNoDocument2(path2, readTime) {
          this.path = path2;
          this.readTime = readTime;
        }
        return DbNoDocument2;
      }();
      var DbUnknownDocument = function() {
        function DbUnknownDocument2(path2, version2) {
          this.path = path2;
          this.version = version2;
        }
        return DbUnknownDocument2;
      }();
      var DbRemoteDocument = function() {
        function DbRemoteDocument2(unknownDocument, noDocument, document2, hasCommittedMutations, readTime, parentPath) {
          this.unknownDocument = unknownDocument;
          this.noDocument = noDocument;
          this.document = document2;
          this.hasCommittedMutations = hasCommittedMutations;
          this.readTime = readTime;
          this.parentPath = parentPath;
        }
        return DbRemoteDocument2;
      }();
      DbRemoteDocument.store = "remoteDocuments";
      DbRemoteDocument.readTimeIndex = "readTimeIndex";
      DbRemoteDocument.readTimeIndexPath = "readTime";
      DbRemoteDocument.collectionReadTimeIndex = "collectionReadTimeIndex";
      DbRemoteDocument.collectionReadTimeIndexPath = ["parentPath", "readTime"];
      var DbRemoteDocumentGlobal = function() {
        function DbRemoteDocumentGlobal2(byteSize) {
          this.byteSize = byteSize;
        }
        return DbRemoteDocumentGlobal2;
      }();
      DbRemoteDocumentGlobal.store = "remoteDocumentGlobal";
      DbRemoteDocumentGlobal.key = "remoteDocumentGlobalKey";
      var DbTarget = function() {
        function DbTarget2(targetId, canonicalId2, readTime, resumeToken, lastListenSequenceNumber, lastLimboFreeSnapshotVersion, query3) {
          this.targetId = targetId;
          this.canonicalId = canonicalId2;
          this.readTime = readTime;
          this.resumeToken = resumeToken;
          this.lastListenSequenceNumber = lastListenSequenceNumber;
          this.lastLimboFreeSnapshotVersion = lastLimboFreeSnapshotVersion;
          this.query = query3;
        }
        return DbTarget2;
      }();
      DbTarget.store = "targets";
      DbTarget.keyPath = "targetId";
      DbTarget.queryTargetsIndexName = "queryTargetsIndex";
      DbTarget.queryTargetsKeyPath = ["canonicalId", "targetId"];
      var DbTargetDocument = function() {
        function DbTargetDocument2(targetId, path2, sequenceNumber) {
          this.targetId = targetId;
          this.path = path2;
          this.sequenceNumber = sequenceNumber;
        }
        return DbTargetDocument2;
      }();
      DbTargetDocument.store = "targetDocuments";
      DbTargetDocument.keyPath = ["targetId", "path"];
      DbTargetDocument.documentTargetsIndex = "documentTargetsIndex";
      DbTargetDocument.documentTargetsKeyPath = ["path", "targetId"];
      var DbTargetGlobal = function() {
        function DbTargetGlobal2(highestTargetId, highestListenSequenceNumber, lastRemoteSnapshotVersion, targetCount) {
          this.highestTargetId = highestTargetId;
          this.highestListenSequenceNumber = highestListenSequenceNumber;
          this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;
          this.targetCount = targetCount;
        }
        return DbTargetGlobal2;
      }();
      DbTargetGlobal.key = "targetGlobalKey";
      DbTargetGlobal.store = "targetGlobal";
      var DbCollectionParent = function() {
        function DbCollectionParent2(collectionId, parent) {
          this.collectionId = collectionId;
          this.parent = parent;
        }
        return DbCollectionParent2;
      }();
      DbCollectionParent.store = "collectionParents";
      DbCollectionParent.keyPath = ["collectionId", "parent"];
      var DbClientMetadata = function() {
        function DbClientMetadata2(clientId, updateTimeMs, networkEnabled, inForeground) {
          this.clientId = clientId;
          this.updateTimeMs = updateTimeMs;
          this.networkEnabled = networkEnabled;
          this.inForeground = inForeground;
        }
        return DbClientMetadata2;
      }();
      DbClientMetadata.store = "clientMetadata";
      DbClientMetadata.keyPath = "clientId";
      var DbBundle = function() {
        function DbBundle2(bundleId, createTime, version2) {
          this.bundleId = bundleId;
          this.createTime = createTime;
          this.version = version2;
        }
        return DbBundle2;
      }();
      DbBundle.store = "bundles";
      DbBundle.keyPath = "bundleId";
      var DbNamedQuery = function() {
        function DbNamedQuery2(name2, readTime, bundledQuery) {
          this.name = name2;
          this.readTime = readTime;
          this.bundledQuery = bundledQuery;
        }
        return DbNamedQuery2;
      }();
      DbNamedQuery.store = "namedQueries";
      DbNamedQuery.keyPath = "name";
      var V1_STORES = [
        DbMutationQueue.store,
        DbMutationBatch.store,
        DbDocumentMutation.store,
        DbRemoteDocument.store,
        DbTarget.store,
        DbPrimaryClient.store,
        DbTargetGlobal.store,
        DbTargetDocument.store
      ];
      var V3_STORES = V1_STORES;
      var V4_STORES = tslib.__spreadArray(tslib.__spreadArray([], V3_STORES), [DbClientMetadata.store]);
      var V6_STORES = tslib.__spreadArray(tslib.__spreadArray([], V4_STORES), [DbRemoteDocumentGlobal.store]);
      var V8_STORES = tslib.__spreadArray(tslib.__spreadArray([], V6_STORES), [DbCollectionParent.store]);
      var V11_STORES = tslib.__spreadArray(tslib.__spreadArray([], V8_STORES), [DbBundle.store, DbNamedQuery.store]);
      var ALL_STORES = V11_STORES;
      var PRIMARY_LEASE_LOST_ERROR_MSG = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";
      var PersistenceTransaction = function() {
        function PersistenceTransaction2() {
          this.onCommittedListeners = [];
        }
        PersistenceTransaction2.prototype.addOnCommittedListener = function(listener) {
          this.onCommittedListeners.push(listener);
        };
        PersistenceTransaction2.prototype.raiseOnCommittedEvent = function() {
          this.onCommittedListeners.forEach(function(listener) {
            return listener();
          });
        };
        return PersistenceTransaction2;
      }();
      var Deferred = function() {
        function Deferred2() {
          var _this = this;
          this.promise = new Promise(function(resolve2, reject) {
            _this.resolve = resolve2;
            _this.reject = reject;
          });
        }
        return Deferred2;
      }();
      var PersistencePromise = function() {
        function PersistencePromise2(callback) {
          var _this = this;
          this.nextCallback = null;
          this.catchCallback = null;
          this.result = void 0;
          this.error = void 0;
          this.isDone = false;
          this.callbackAttached = false;
          callback(function(value) {
            _this.isDone = true;
            _this.result = value;
            if (_this.nextCallback) {
              _this.nextCallback(value);
            }
          }, function(error3) {
            _this.isDone = true;
            _this.error = error3;
            if (_this.catchCallback) {
              _this.catchCallback(error3);
            }
          });
        }
        PersistencePromise2.prototype.catch = function(fn) {
          return this.next(void 0, fn);
        };
        PersistencePromise2.prototype.next = function(nextFn, catchFn) {
          var _this = this;
          if (this.callbackAttached) {
            fail();
          }
          this.callbackAttached = true;
          if (this.isDone) {
            if (!this.error) {
              return this.wrapSuccess(nextFn, this.result);
            } else {
              return this.wrapFailure(catchFn, this.error);
            }
          } else {
            return new PersistencePromise2(function(resolve2, reject) {
              _this.nextCallback = function(value) {
                _this.wrapSuccess(nextFn, value).next(resolve2, reject);
              };
              _this.catchCallback = function(error3) {
                _this.wrapFailure(catchFn, error3).next(resolve2, reject);
              };
            });
          }
        };
        PersistencePromise2.prototype.toPromise = function() {
          var _this = this;
          return new Promise(function(resolve2, reject) {
            _this.next(resolve2, reject);
          });
        };
        PersistencePromise2.prototype.wrapUserFunction = function(fn) {
          try {
            var result = fn();
            if (result instanceof PersistencePromise2) {
              return result;
            } else {
              return PersistencePromise2.resolve(result);
            }
          } catch (e) {
            return PersistencePromise2.reject(e);
          }
        };
        PersistencePromise2.prototype.wrapSuccess = function(nextFn, value) {
          if (nextFn) {
            return this.wrapUserFunction(function() {
              return nextFn(value);
            });
          } else {
            return PersistencePromise2.resolve(value);
          }
        };
        PersistencePromise2.prototype.wrapFailure = function(catchFn, error3) {
          if (catchFn) {
            return this.wrapUserFunction(function() {
              return catchFn(error3);
            });
          } else {
            return PersistencePromise2.reject(error3);
          }
        };
        PersistencePromise2.resolve = function(result) {
          return new PersistencePromise2(function(resolve2, reject) {
            resolve2(result);
          });
        };
        PersistencePromise2.reject = function(error3) {
          return new PersistencePromise2(function(resolve2, reject) {
            reject(error3);
          });
        };
        PersistencePromise2.waitFor = function(all) {
          return new PersistencePromise2(function(resolve2, reject) {
            var expectedCount = 0;
            var resolvedCount = 0;
            var done = false;
            all.forEach(function(element) {
              ++expectedCount;
              element.next(function() {
                ++resolvedCount;
                if (done && resolvedCount === expectedCount) {
                  resolve2();
                }
              }, function(err) {
                return reject(err);
              });
            });
            done = true;
            if (resolvedCount === expectedCount) {
              resolve2();
            }
          });
        };
        PersistencePromise2.or = function(predicates) {
          var p = PersistencePromise2.resolve(false);
          var _loop_1 = function(predicate2) {
            p = p.next(function(isTrue) {
              if (isTrue) {
                return PersistencePromise2.resolve(isTrue);
              } else {
                return predicate2();
              }
            });
          };
          for (var _i = 0, predicates_1 = predicates; _i < predicates_1.length; _i++) {
            var predicate = predicates_1[_i];
            _loop_1(predicate);
          }
          return p;
        };
        PersistencePromise2.forEach = function(collection3, f) {
          var _this = this;
          var promises = [];
          collection3.forEach(function(r, s2) {
            promises.push(f.call(_this, r, s2));
          });
          return this.waitFor(promises);
        };
        return PersistencePromise2;
      }();
      var LOG_TAG = "SimpleDb";
      var TRANSACTION_RETRY_COUNT = 3;
      var SimpleDbTransaction = function() {
        function SimpleDbTransaction2(action, transaction) {
          var _this = this;
          this.action = action;
          this.transaction = transaction;
          this.aborted = false;
          this.completionDeferred = new Deferred();
          this.transaction.oncomplete = function() {
            _this.completionDeferred.resolve();
          };
          this.transaction.onabort = function() {
            if (transaction.error) {
              _this.completionDeferred.reject(new IndexedDbTransactionError(action, transaction.error));
            } else {
              _this.completionDeferred.resolve();
            }
          };
          this.transaction.onerror = function(event) {
            var error3 = checkForAndReportiOSError(event.target.error);
            _this.completionDeferred.reject(new IndexedDbTransactionError(action, error3));
          };
        }
        SimpleDbTransaction2.open = function(db, action, mode, objectStoreNames) {
          try {
            return new SimpleDbTransaction2(action, db.transaction(objectStoreNames, mode));
          } catch (e) {
            throw new IndexedDbTransactionError(action, e);
          }
        };
        Object.defineProperty(SimpleDbTransaction2.prototype, "completionPromise", {
          get: function() {
            return this.completionDeferred.promise;
          },
          enumerable: false,
          configurable: true
        });
        SimpleDbTransaction2.prototype.abort = function(error3) {
          if (error3) {
            this.completionDeferred.reject(error3);
          }
          if (!this.aborted) {
            logDebug(LOG_TAG, "Aborting transaction:", error3 ? error3.message : "Client-initiated abort");
            this.aborted = true;
            this.transaction.abort();
          }
        };
        SimpleDbTransaction2.prototype.store = function(storeName) {
          var store = this.transaction.objectStore(storeName);
          return new SimpleDbStore(store);
        };
        return SimpleDbTransaction2;
      }();
      var SimpleDb = function() {
        function SimpleDb2(name2, version2, schemaConverter) {
          this.name = name2;
          this.version = version2;
          this.schemaConverter = schemaConverter;
          var iOSVersion = SimpleDb2.getIOSVersion(util.getUA());
          if (iOSVersion === 12.2) {
            logError("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
          }
        }
        SimpleDb2.delete = function(name2) {
          logDebug(LOG_TAG, "Removing database:", name2);
          return wrapRequest(window.indexedDB.deleteDatabase(name2)).toPromise();
        };
        SimpleDb2.isAvailable = function() {
          if (typeof indexedDB === "undefined") {
            return false;
          }
          if (SimpleDb2.isMockPersistence()) {
            return true;
          }
          var ua = util.getUA();
          var iOSVersion = SimpleDb2.getIOSVersion(ua);
          var isUnsupportedIOS = 0 < iOSVersion && iOSVersion < 10;
          var androidVersion = SimpleDb2.getAndroidVersion(ua);
          var isUnsupportedAndroid = 0 < androidVersion && androidVersion < 4.5;
          if (ua.indexOf("MSIE ") > 0 || ua.indexOf("Trident/") > 0 || ua.indexOf("Edge/") > 0 || isUnsupportedIOS || isUnsupportedAndroid) {
            return false;
          } else {
            return true;
          }
        };
        SimpleDb2.isMockPersistence = function() {
          var _a;
          return typeof process !== "undefined" && ((_a = process.env) === null || _a === void 0 ? void 0 : _a.USE_MOCK_PERSISTENCE) === "YES";
        };
        SimpleDb2.getStore = function(txn, store) {
          return txn.store(store);
        };
        SimpleDb2.getIOSVersion = function(ua) {
          var iOSVersionRegex = ua.match(/i(?:phone|pad|pod) os ([\d_]+)/i);
          var version2 = iOSVersionRegex ? iOSVersionRegex[1].split("_").slice(0, 2).join(".") : "-1";
          return Number(version2);
        };
        SimpleDb2.getAndroidVersion = function(ua) {
          var androidVersionRegex = ua.match(/Android ([\d.]+)/i);
          var version2 = androidVersionRegex ? androidVersionRegex[1].split(".").slice(0, 2).join(".") : "-1";
          return Number(version2);
        };
        SimpleDb2.prototype.ensureDb = function(action) {
          return tslib.__awaiter(this, void 0, void 0, function() {
            var _d;
            var _this = this;
            return tslib.__generator(this, function(_e) {
              switch (_e.label) {
                case 0:
                  if (!!this.db)
                    return [3, 2];
                  logDebug(LOG_TAG, "Opening database:", this.name);
                  _d = this;
                  return [4, new Promise(function(resolve2, reject) {
                    var request = indexedDB.open(_this.name, _this.version);
                    request.onsuccess = function(event) {
                      var db = event.target.result;
                      resolve2(db);
                    };
                    request.onblocked = function() {
                      reject(new IndexedDbTransactionError(action, "Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));
                    };
                    request.onerror = function(event) {
                      var error3 = event.target.error;
                      if (error3.name === "VersionError") {
                        reject(new FirestoreError(Code.FAILED_PRECONDITION, "A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh."));
                      } else {
                        reject(new IndexedDbTransactionError(action, error3));
                      }
                    };
                    request.onupgradeneeded = function(event) {
                      logDebug(LOG_TAG, 'Database "' + _this.name + '" requires upgrade from version:', event.oldVersion);
                      var db = event.target.result;
                      _this.schemaConverter.createOrUpgrade(db, request.transaction, event.oldVersion, _this.version).next(function() {
                        logDebug(LOG_TAG, "Database upgrade to version " + _this.version + " complete");
                      });
                    };
                  })];
                case 1:
                  _d.db = _e.sent();
                  _e.label = 2;
                case 2:
                  if (this.versionchangelistener) {
                    this.db.onversionchange = function(event) {
                      return _this.versionchangelistener(event);
                    };
                  }
                  return [2, this.db];
              }
            });
          });
        };
        SimpleDb2.prototype.setVersionChangeListener = function(versionChangeListener) {
          this.versionchangelistener = versionChangeListener;
          if (this.db) {
            this.db.onversionchange = function(event) {
              return versionChangeListener(event);
            };
          }
        };
        SimpleDb2.prototype.runTransaction = function(action, mode, objectStores, transactionFn) {
          return tslib.__awaiter(this, void 0, void 0, function() {
            var readonly, attemptNumber, _loop_2, this_1, state_1;
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  readonly = mode === "readonly";
                  attemptNumber = 0;
                  _loop_2 = function() {
                    var transaction_1, transactionFnResult, error_1, retryable;
                    return tslib.__generator(this, function(_e) {
                      switch (_e.label) {
                        case 0:
                          ++attemptNumber;
                          _e.label = 1;
                        case 1:
                          _e.trys.push([1, 4, , 5]);
                          return [4, this_1.ensureDb(action)];
                        case 2:
                          this_1.db = _e.sent();
                          transaction_1 = SimpleDbTransaction.open(this_1.db, action, readonly ? "readonly" : "readwrite", objectStores);
                          transactionFnResult = transactionFn(transaction_1).catch(function(error3) {
                            transaction_1.abort(error3);
                            return PersistencePromise.reject(error3);
                          }).toPromise();
                          transactionFnResult.catch(function() {
                          });
                          return [4, transaction_1.completionPromise];
                        case 3:
                          _e.sent();
                          return [2, {value: transactionFnResult}];
                        case 4:
                          error_1 = _e.sent();
                          retryable = error_1.name !== "FirebaseError" && attemptNumber < TRANSACTION_RETRY_COUNT;
                          logDebug(LOG_TAG, "Transaction failed with error:", error_1.message, "Retrying:", retryable);
                          this_1.close();
                          if (!retryable) {
                            return [2, {value: Promise.reject(error_1)}];
                          }
                          return [3, 5];
                        case 5:
                          return [2];
                      }
                    });
                  };
                  this_1 = this;
                  _d.label = 1;
                case 1:
                  return [5, _loop_2()];
                case 2:
                  state_1 = _d.sent();
                  if (typeof state_1 === "object")
                    return [2, state_1.value];
                  return [3, 1];
                case 3:
                  return [2];
              }
            });
          });
        };
        SimpleDb2.prototype.close = function() {
          if (this.db) {
            this.db.close();
          }
          this.db = void 0;
        };
        return SimpleDb2;
      }();
      var IterationController = function() {
        function IterationController2(dbCursor) {
          this.dbCursor = dbCursor;
          this.shouldStop = false;
          this.nextKey = null;
        }
        Object.defineProperty(IterationController2.prototype, "isDone", {
          get: function() {
            return this.shouldStop;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(IterationController2.prototype, "skipToKey", {
          get: function() {
            return this.nextKey;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(IterationController2.prototype, "cursor", {
          set: function(value) {
            this.dbCursor = value;
          },
          enumerable: false,
          configurable: true
        });
        IterationController2.prototype.done = function() {
          this.shouldStop = true;
        };
        IterationController2.prototype.skip = function(key) {
          this.nextKey = key;
        };
        IterationController2.prototype.delete = function() {
          return wrapRequest(this.dbCursor.delete());
        };
        return IterationController2;
      }();
      var IndexedDbTransactionError = function(_super) {
        tslib.__extends(IndexedDbTransactionError2, _super);
        function IndexedDbTransactionError2(actionName, cause) {
          var _this = _super.call(this, Code.UNAVAILABLE, "IndexedDB transaction '" + actionName + "' failed: " + cause) || this;
          _this.name = "IndexedDbTransactionError";
          return _this;
        }
        return IndexedDbTransactionError2;
      }(FirestoreError);
      function isIndexedDbTransactionError(e) {
        return e.name === "IndexedDbTransactionError";
      }
      var SimpleDbStore = function() {
        function SimpleDbStore2(store) {
          this.store = store;
        }
        SimpleDbStore2.prototype.put = function(keyOrValue, value) {
          var request;
          if (value !== void 0) {
            logDebug(LOG_TAG, "PUT", this.store.name, keyOrValue, value);
            request = this.store.put(value, keyOrValue);
          } else {
            logDebug(LOG_TAG, "PUT", this.store.name, "<auto-key>", keyOrValue);
            request = this.store.put(keyOrValue);
          }
          return wrapRequest(request);
        };
        SimpleDbStore2.prototype.add = function(value) {
          logDebug(LOG_TAG, "ADD", this.store.name, value, value);
          var request = this.store.add(value);
          return wrapRequest(request);
        };
        SimpleDbStore2.prototype.get = function(key) {
          var _this = this;
          var request = this.store.get(key);
          return wrapRequest(request).next(function(result) {
            if (result === void 0) {
              result = null;
            }
            logDebug(LOG_TAG, "GET", _this.store.name, key, result);
            return result;
          });
        };
        SimpleDbStore2.prototype.delete = function(key) {
          logDebug(LOG_TAG, "DELETE", this.store.name, key);
          var request = this.store.delete(key);
          return wrapRequest(request);
        };
        SimpleDbStore2.prototype.count = function() {
          logDebug(LOG_TAG, "COUNT", this.store.name);
          var request = this.store.count();
          return wrapRequest(request);
        };
        SimpleDbStore2.prototype.loadAll = function(indexOrRange, range) {
          var cursor = this.cursor(this.options(indexOrRange, range));
          var results = [];
          return this.iterateCursor(cursor, function(key, value) {
            results.push(value);
          }).next(function() {
            return results;
          });
        };
        SimpleDbStore2.prototype.deleteAll = function(indexOrRange, range) {
          logDebug(LOG_TAG, "DELETE ALL", this.store.name);
          var options2 = this.options(indexOrRange, range);
          options2.keysOnly = false;
          var cursor = this.cursor(options2);
          return this.iterateCursor(cursor, function(key, value, control) {
            return control.delete();
          });
        };
        SimpleDbStore2.prototype.iterate = function(optionsOrCallback, callback) {
          var options2;
          if (!callback) {
            options2 = {};
            callback = optionsOrCallback;
          } else {
            options2 = optionsOrCallback;
          }
          var cursor = this.cursor(options2);
          return this.iterateCursor(cursor, callback);
        };
        SimpleDbStore2.prototype.iterateSerial = function(callback) {
          var cursorRequest = this.cursor({});
          return new PersistencePromise(function(resolve2, reject) {
            cursorRequest.onerror = function(event) {
              var error3 = checkForAndReportiOSError(event.target.error);
              reject(error3);
            };
            cursorRequest.onsuccess = function(event) {
              var cursor = event.target.result;
              if (!cursor) {
                resolve2();
                return;
              }
              callback(cursor.primaryKey, cursor.value).next(function(shouldContinue) {
                if (shouldContinue) {
                  cursor.continue();
                } else {
                  resolve2();
                }
              });
            };
          });
        };
        SimpleDbStore2.prototype.iterateCursor = function(cursorRequest, fn) {
          var results = [];
          return new PersistencePromise(function(resolve2, reject) {
            cursorRequest.onerror = function(event) {
              reject(event.target.error);
            };
            cursorRequest.onsuccess = function(event) {
              var cursor = event.target.result;
              if (!cursor) {
                resolve2();
                return;
              }
              var controller = new IterationController(cursor);
              var userResult = fn(cursor.primaryKey, cursor.value, controller);
              if (userResult instanceof PersistencePromise) {
                var userPromise = userResult.catch(function(err) {
                  controller.done();
                  return PersistencePromise.reject(err);
                });
                results.push(userPromise);
              }
              if (controller.isDone) {
                resolve2();
              } else if (controller.skipToKey === null) {
                cursor.continue();
              } else {
                cursor.continue(controller.skipToKey);
              }
            };
          }).next(function() {
            return PersistencePromise.waitFor(results);
          });
        };
        SimpleDbStore2.prototype.options = function(indexOrRange, range) {
          var indexName = void 0;
          if (indexOrRange !== void 0) {
            if (typeof indexOrRange === "string") {
              indexName = indexOrRange;
            } else {
              range = indexOrRange;
            }
          }
          return {index: indexName, range};
        };
        SimpleDbStore2.prototype.cursor = function(options2) {
          var direction = "next";
          if (options2.reverse) {
            direction = "prev";
          }
          if (options2.index) {
            var index2 = this.store.index(options2.index);
            if (options2.keysOnly) {
              return index2.openKeyCursor(options2.range, direction);
            } else {
              return index2.openCursor(options2.range, direction);
            }
          } else {
            return this.store.openCursor(options2.range, direction);
          }
        };
        return SimpleDbStore2;
      }();
      function wrapRequest(request) {
        return new PersistencePromise(function(resolve2, reject) {
          request.onsuccess = function(event) {
            var result = event.target.result;
            resolve2(result);
          };
          request.onerror = function(event) {
            var error3 = checkForAndReportiOSError(event.target.error);
            reject(error3);
          };
        });
      }
      var reportedIOSError = false;
      function checkForAndReportiOSError(error3) {
        var iOSVersion = SimpleDb.getIOSVersion(util.getUA());
        if (iOSVersion >= 12.2 && iOSVersion < 13) {
          var IOS_ERROR = "An internal error was encountered in the Indexed Database server";
          if (error3.message.indexOf(IOS_ERROR) >= 0) {
            var newError_1 = new FirestoreError("internal", "IOS_INDEXEDDB_BUG1: IndexedDb has thrown '" + IOS_ERROR + "'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
            if (!reportedIOSError) {
              reportedIOSError = true;
              setTimeout(function() {
                throw newError_1;
              }, 0);
            }
            return newError_1;
          }
        }
        return error3;
      }
      var IndexedDbTransaction = function(_super) {
        tslib.__extends(IndexedDbTransaction2, _super);
        function IndexedDbTransaction2(simpleDbTransaction, currentSequenceNumber) {
          var _this = _super.call(this) || this;
          _this.simpleDbTransaction = simpleDbTransaction;
          _this.currentSequenceNumber = currentSequenceNumber;
          return _this;
        }
        return IndexedDbTransaction2;
      }(PersistenceTransaction);
      function getStore(txn, store) {
        var indexedDbTransaction = debugCast(txn);
        return SimpleDb.getStore(indexedDbTransaction.simpleDbTransaction, store);
      }
      function randomBytes2(nBytes) {
        return crypto.randomBytes(nBytes);
      }
      var AutoId = function() {
        function AutoId2() {
        }
        AutoId2.newId = function() {
          var chars2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
          var maxMultiple = Math.floor(256 / chars2.length) * chars2.length;
          var autoId = "";
          var targetLength = 20;
          while (autoId.length < targetLength) {
            var bytes = randomBytes2(40);
            for (var i = 0; i < bytes.length; ++i) {
              if (autoId.length < targetLength && bytes[i] < maxMultiple) {
                autoId += chars2.charAt(bytes[i] % chars2.length);
              }
            }
          }
          return autoId;
        };
        return AutoId2;
      }();
      function primitiveComparator(left, right) {
        if (left < right) {
          return -1;
        }
        if (left > right) {
          return 1;
        }
        return 0;
      }
      function arrayEquals(left, right, comparator) {
        if (left.length !== right.length) {
          return false;
        }
        return left.every(function(value, index2) {
          return comparator(value, right[index2]);
        });
      }
      function immediateSuccessor(s2) {
        return s2 + "\0";
      }
      var MIN_SECONDS = -62135596800;
      var MS_TO_NANOS = 1e6;
      var Timestamp = function() {
        function Timestamp2(seconds, nanoseconds) {
          this.seconds = seconds;
          this.nanoseconds = nanoseconds;
          if (nanoseconds < 0) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + nanoseconds);
          }
          if (nanoseconds >= 1e9) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + nanoseconds);
          }
          if (seconds < MIN_SECONDS) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Timestamp seconds out of range: " + seconds);
          }
          if (seconds >= 253402300800) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Timestamp seconds out of range: " + seconds);
          }
        }
        Timestamp2.now = function() {
          return Timestamp2.fromMillis(Date.now());
        };
        Timestamp2.fromDate = function(date) {
          return Timestamp2.fromMillis(date.getTime());
        };
        Timestamp2.fromMillis = function(milliseconds) {
          var seconds = Math.floor(milliseconds / 1e3);
          var nanos = Math.floor((milliseconds - seconds * 1e3) * MS_TO_NANOS);
          return new Timestamp2(seconds, nanos);
        };
        Timestamp2.prototype.toDate = function() {
          return new Date(this.toMillis());
        };
        Timestamp2.prototype.toMillis = function() {
          return this.seconds * 1e3 + this.nanoseconds / MS_TO_NANOS;
        };
        Timestamp2.prototype._compareTo = function(other) {
          if (this.seconds === other.seconds) {
            return primitiveComparator(this.nanoseconds, other.nanoseconds);
          }
          return primitiveComparator(this.seconds, other.seconds);
        };
        Timestamp2.prototype.isEqual = function(other) {
          return other.seconds === this.seconds && other.nanoseconds === this.nanoseconds;
        };
        Timestamp2.prototype.toString = function() {
          return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
        };
        Timestamp2.prototype.toJSON = function() {
          return {seconds: this.seconds, nanoseconds: this.nanoseconds};
        };
        Timestamp2.prototype.valueOf = function() {
          var adjustedSeconds = this.seconds - MIN_SECONDS;
          var formattedSeconds = String(adjustedSeconds).padStart(12, "0");
          var formattedNanoseconds = String(this.nanoseconds).padStart(9, "0");
          return formattedSeconds + "." + formattedNanoseconds;
        };
        return Timestamp2;
      }();
      var SnapshotVersion = function() {
        function SnapshotVersion2(timestamp) {
          this.timestamp = timestamp;
        }
        SnapshotVersion2.fromTimestamp = function(value) {
          return new SnapshotVersion2(value);
        };
        SnapshotVersion2.min = function() {
          return new SnapshotVersion2(new Timestamp(0, 0));
        };
        SnapshotVersion2.prototype.compareTo = function(other) {
          return this.timestamp._compareTo(other.timestamp);
        };
        SnapshotVersion2.prototype.isEqual = function(other) {
          return this.timestamp.isEqual(other.timestamp);
        };
        SnapshotVersion2.prototype.toMicroseconds = function() {
          return this.timestamp.seconds * 1e6 + this.timestamp.nanoseconds / 1e3;
        };
        SnapshotVersion2.prototype.toString = function() {
          return "SnapshotVersion(" + this.timestamp.toString() + ")";
        };
        SnapshotVersion2.prototype.toTimestamp = function() {
          return this.timestamp;
        };
        return SnapshotVersion2;
      }();
      function objectSize(obj) {
        var count = 0;
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            count++;
          }
        }
        return count;
      }
      function forEach(obj, fn) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn(key, obj[key]);
          }
        }
      }
      function isEmpty(obj) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            return false;
          }
        }
        return true;
      }
      var FieldMask = function() {
        function FieldMask2(fields) {
          this.fields = fields;
          fields.sort(FieldPath.comparator);
        }
        FieldMask2.prototype.covers = function(fieldPath) {
          for (var _i = 0, _d = this.fields; _i < _d.length; _i++) {
            var fieldMaskPath = _d[_i];
            if (fieldMaskPath.isPrefixOf(fieldPath)) {
              return true;
            }
          }
          return false;
        };
        FieldMask2.prototype.isEqual = function(other) {
          return arrayEquals(this.fields, other.fields, function(l, r) {
            return l.isEqual(r);
          });
        };
        return FieldMask2;
      }();
      function decodeBase64(encoded) {
        if (/[^-A-Za-z0-9+/=]/.test(encoded)) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Not a valid Base64 string: " + encoded);
        }
        return new Buffer(encoded, "base64").toString("binary");
      }
      function encodeBase64(raw) {
        return new Buffer(raw, "binary").toString("base64");
      }
      var ByteString = function() {
        function ByteString2(binaryString) {
          this.binaryString = binaryString;
        }
        ByteString2.fromBase64String = function(base64) {
          var binaryString = decodeBase64(base64);
          return new ByteString2(binaryString);
        };
        ByteString2.fromUint8Array = function(array) {
          var binaryString = binaryStringFromUint8Array(array);
          return new ByteString2(binaryString);
        };
        ByteString2.prototype.toBase64 = function() {
          return encodeBase64(this.binaryString);
        };
        ByteString2.prototype.toUint8Array = function() {
          return uint8ArrayFromBinaryString(this.binaryString);
        };
        ByteString2.prototype.approximateByteSize = function() {
          return this.binaryString.length * 2;
        };
        ByteString2.prototype.compareTo = function(other) {
          return primitiveComparator(this.binaryString, other.binaryString);
        };
        ByteString2.prototype.isEqual = function(other) {
          return this.binaryString === other.binaryString;
        };
        return ByteString2;
      }();
      ByteString.EMPTY_BYTE_STRING = new ByteString("");
      function binaryStringFromUint8Array(array) {
        var binaryString = "";
        for (var i = 0; i < array.length; ++i) {
          binaryString += String.fromCharCode(array[i]);
        }
        return binaryString;
      }
      function uint8ArrayFromBinaryString(binaryString) {
        var buffer = new Uint8Array(binaryString.length);
        for (var i = 0; i < binaryString.length; i++) {
          buffer[i] = binaryString.charCodeAt(i);
        }
        return buffer;
      }
      var ISO_TIMESTAMP_REG_EXP = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);
      function normalizeTimestamp(date) {
        hardAssert(!!date);
        if (typeof date === "string") {
          var nanos = 0;
          var fraction = ISO_TIMESTAMP_REG_EXP.exec(date);
          hardAssert(!!fraction);
          if (fraction[1]) {
            var nanoStr = fraction[1];
            nanoStr = (nanoStr + "000000000").substr(0, 9);
            nanos = Number(nanoStr);
          }
          var parsedDate = new Date(date);
          var seconds = Math.floor(parsedDate.getTime() / 1e3);
          return {seconds, nanos};
        } else {
          var seconds = normalizeNumber(date.seconds);
          var nanos = normalizeNumber(date.nanos);
          return {seconds, nanos};
        }
      }
      function normalizeNumber(value) {
        if (typeof value === "number") {
          return value;
        } else if (typeof value === "string") {
          return Number(value);
        } else {
          return 0;
        }
      }
      function normalizeByteString(blob) {
        if (typeof blob === "string") {
          return ByteString.fromBase64String(blob);
        } else {
          return ByteString.fromUint8Array(blob);
        }
      }
      var SERVER_TIMESTAMP_SENTINEL = "server_timestamp";
      var TYPE_KEY = "__type__";
      var PREVIOUS_VALUE_KEY = "__previous_value__";
      var LOCAL_WRITE_TIME_KEY = "__local_write_time__";
      function isServerTimestamp(value) {
        var _a, _b;
        var type = (_b = (((_a = value === null || value === void 0 ? void 0 : value.mapValue) === null || _a === void 0 ? void 0 : _a.fields) || {})[TYPE_KEY]) === null || _b === void 0 ? void 0 : _b.stringValue;
        return type === SERVER_TIMESTAMP_SENTINEL;
      }
      function serverTimestamp(localWriteTime, previousValue) {
        var _d;
        var mapValue = {
          fields: (_d = {}, _d[TYPE_KEY] = {
            stringValue: SERVER_TIMESTAMP_SENTINEL
          }, _d[LOCAL_WRITE_TIME_KEY] = {
            timestampValue: {
              seconds: localWriteTime.seconds,
              nanos: localWriteTime.nanoseconds
            }
          }, _d)
        };
        if (previousValue) {
          mapValue.fields[PREVIOUS_VALUE_KEY] = previousValue;
        }
        return {mapValue};
      }
      function getPreviousValue(value) {
        var previousValue = value.mapValue.fields[PREVIOUS_VALUE_KEY];
        if (isServerTimestamp(previousValue)) {
          return getPreviousValue(previousValue);
        }
        return previousValue;
      }
      function getLocalWriteTime(value) {
        var localWriteTime = normalizeTimestamp(value.mapValue.fields[LOCAL_WRITE_TIME_KEY].timestampValue);
        return new Timestamp(localWriteTime.seconds, localWriteTime.nanos);
      }
      var BATCHID_UNKNOWN = -1;
      function isNullOrUndefined(value) {
        return value === null || value === void 0;
      }
      function isNegativeZero(value) {
        return value === 0 && 1 / value === 1 / -0;
      }
      function isSafeInteger(value) {
        return typeof value === "number" && Number.isInteger(value) && !isNegativeZero(value) && value <= Number.MAX_SAFE_INTEGER && value >= Number.MIN_SAFE_INTEGER;
      }
      var DocumentKey = function() {
        function DocumentKey2(path2) {
          this.path = path2;
        }
        DocumentKey2.fromPath = function(path2) {
          return new DocumentKey2(ResourcePath.fromString(path2));
        };
        DocumentKey2.fromName = function(name2) {
          return new DocumentKey2(ResourcePath.fromString(name2).popFirst(5));
        };
        DocumentKey2.prototype.hasCollectionId = function(collectionId) {
          return this.path.length >= 2 && this.path.get(this.path.length - 2) === collectionId;
        };
        DocumentKey2.prototype.isEqual = function(other) {
          return other !== null && ResourcePath.comparator(this.path, other.path) === 0;
        };
        DocumentKey2.prototype.toString = function() {
          return this.path.toString();
        };
        DocumentKey2.comparator = function(k1, k2) {
          return ResourcePath.comparator(k1.path, k2.path);
        };
        DocumentKey2.isDocumentKey = function(path2) {
          return path2.length % 2 === 0;
        };
        DocumentKey2.fromSegments = function(segments) {
          return new DocumentKey2(new ResourcePath(segments.slice()));
        };
        return DocumentKey2;
      }();
      function typeOrder(value) {
        if ("nullValue" in value) {
          return 0;
        } else if ("booleanValue" in value) {
          return 1;
        } else if ("integerValue" in value || "doubleValue" in value) {
          return 2;
        } else if ("timestampValue" in value) {
          return 3;
        } else if ("stringValue" in value) {
          return 5;
        } else if ("bytesValue" in value) {
          return 6;
        } else if ("referenceValue" in value) {
          return 7;
        } else if ("geoPointValue" in value) {
          return 8;
        } else if ("arrayValue" in value) {
          return 9;
        } else if ("mapValue" in value) {
          if (isServerTimestamp(value)) {
            return 4;
          }
          return 10;
        } else {
          return fail();
        }
      }
      function valueEquals(left, right) {
        var leftType = typeOrder(left);
        var rightType = typeOrder(right);
        if (leftType !== rightType) {
          return false;
        }
        switch (leftType) {
          case 0:
            return true;
          case 1:
            return left.booleanValue === right.booleanValue;
          case 4:
            return getLocalWriteTime(left).isEqual(getLocalWriteTime(right));
          case 3:
            return timestampEquals(left, right);
          case 5:
            return left.stringValue === right.stringValue;
          case 6:
            return blobEquals(left, right);
          case 7:
            return left.referenceValue === right.referenceValue;
          case 8:
            return geoPointEquals(left, right);
          case 2:
            return numberEquals(left, right);
          case 9:
            return arrayEquals(left.arrayValue.values || [], right.arrayValue.values || [], valueEquals);
          case 10:
            return objectEquals(left, right);
          default:
            return fail();
        }
      }
      function timestampEquals(left, right) {
        if (typeof left.timestampValue === "string" && typeof right.timestampValue === "string" && left.timestampValue.length === right.timestampValue.length) {
          return left.timestampValue === right.timestampValue;
        }
        var leftTimestamp = normalizeTimestamp(left.timestampValue);
        var rightTimestamp = normalizeTimestamp(right.timestampValue);
        return leftTimestamp.seconds === rightTimestamp.seconds && leftTimestamp.nanos === rightTimestamp.nanos;
      }
      function geoPointEquals(left, right) {
        return normalizeNumber(left.geoPointValue.latitude) === normalizeNumber(right.geoPointValue.latitude) && normalizeNumber(left.geoPointValue.longitude) === normalizeNumber(right.geoPointValue.longitude);
      }
      function blobEquals(left, right) {
        return normalizeByteString(left.bytesValue).isEqual(normalizeByteString(right.bytesValue));
      }
      function numberEquals(left, right) {
        if ("integerValue" in left && "integerValue" in right) {
          return normalizeNumber(left.integerValue) === normalizeNumber(right.integerValue);
        } else if ("doubleValue" in left && "doubleValue" in right) {
          var n1 = normalizeNumber(left.doubleValue);
          var n2 = normalizeNumber(right.doubleValue);
          if (n1 === n2) {
            return isNegativeZero(n1) === isNegativeZero(n2);
          } else {
            return isNaN(n1) && isNaN(n2);
          }
        }
        return false;
      }
      function objectEquals(left, right) {
        var leftMap = left.mapValue.fields || {};
        var rightMap = right.mapValue.fields || {};
        if (objectSize(leftMap) !== objectSize(rightMap)) {
          return false;
        }
        for (var key in leftMap) {
          if (leftMap.hasOwnProperty(key)) {
            if (rightMap[key] === void 0 || !valueEquals(leftMap[key], rightMap[key])) {
              return false;
            }
          }
        }
        return true;
      }
      function arrayValueContains(haystack, needle) {
        return (haystack.values || []).find(function(v) {
          return valueEquals(v, needle);
        }) !== void 0;
      }
      function valueCompare(left, right) {
        var leftType = typeOrder(left);
        var rightType = typeOrder(right);
        if (leftType !== rightType) {
          return primitiveComparator(leftType, rightType);
        }
        switch (leftType) {
          case 0:
            return 0;
          case 1:
            return primitiveComparator(left.booleanValue, right.booleanValue);
          case 2:
            return compareNumbers(left, right);
          case 3:
            return compareTimestamps(left.timestampValue, right.timestampValue);
          case 4:
            return compareTimestamps(getLocalWriteTime(left), getLocalWriteTime(right));
          case 5:
            return primitiveComparator(left.stringValue, right.stringValue);
          case 6:
            return compareBlobs(left.bytesValue, right.bytesValue);
          case 7:
            return compareReferences(left.referenceValue, right.referenceValue);
          case 8:
            return compareGeoPoints(left.geoPointValue, right.geoPointValue);
          case 9:
            return compareArrays(left.arrayValue, right.arrayValue);
          case 10:
            return compareMaps(left.mapValue, right.mapValue);
          default:
            throw fail();
        }
      }
      function compareNumbers(left, right) {
        var leftNumber = normalizeNumber(left.integerValue || left.doubleValue);
        var rightNumber = normalizeNumber(right.integerValue || right.doubleValue);
        if (leftNumber < rightNumber) {
          return -1;
        } else if (leftNumber > rightNumber) {
          return 1;
        } else if (leftNumber === rightNumber) {
          return 0;
        } else {
          if (isNaN(leftNumber)) {
            return isNaN(rightNumber) ? 0 : -1;
          } else {
            return 1;
          }
        }
      }
      function compareTimestamps(left, right) {
        if (typeof left === "string" && typeof right === "string" && left.length === right.length) {
          return primitiveComparator(left, right);
        }
        var leftTimestamp = normalizeTimestamp(left);
        var rightTimestamp = normalizeTimestamp(right);
        var comparison = primitiveComparator(leftTimestamp.seconds, rightTimestamp.seconds);
        if (comparison !== 0) {
          return comparison;
        }
        return primitiveComparator(leftTimestamp.nanos, rightTimestamp.nanos);
      }
      function compareReferences(leftPath, rightPath) {
        var leftSegments = leftPath.split("/");
        var rightSegments = rightPath.split("/");
        for (var i = 0; i < leftSegments.length && i < rightSegments.length; i++) {
          var comparison = primitiveComparator(leftSegments[i], rightSegments[i]);
          if (comparison !== 0) {
            return comparison;
          }
        }
        return primitiveComparator(leftSegments.length, rightSegments.length);
      }
      function compareGeoPoints(left, right) {
        var comparison = primitiveComparator(normalizeNumber(left.latitude), normalizeNumber(right.latitude));
        if (comparison !== 0) {
          return comparison;
        }
        return primitiveComparator(normalizeNumber(left.longitude), normalizeNumber(right.longitude));
      }
      function compareBlobs(left, right) {
        var leftBytes = normalizeByteString(left);
        var rightBytes = normalizeByteString(right);
        return leftBytes.compareTo(rightBytes);
      }
      function compareArrays(left, right) {
        var leftArray = left.values || [];
        var rightArray = right.values || [];
        for (var i = 0; i < leftArray.length && i < rightArray.length; ++i) {
          var compare = valueCompare(leftArray[i], rightArray[i]);
          if (compare) {
            return compare;
          }
        }
        return primitiveComparator(leftArray.length, rightArray.length);
      }
      function compareMaps(left, right) {
        var leftMap = left.fields || {};
        var leftKeys = Object.keys(leftMap);
        var rightMap = right.fields || {};
        var rightKeys = Object.keys(rightMap);
        leftKeys.sort();
        rightKeys.sort();
        for (var i = 0; i < leftKeys.length && i < rightKeys.length; ++i) {
          var keyCompare = primitiveComparator(leftKeys[i], rightKeys[i]);
          if (keyCompare !== 0) {
            return keyCompare;
          }
          var compare = valueCompare(leftMap[leftKeys[i]], rightMap[rightKeys[i]]);
          if (compare !== 0) {
            return compare;
          }
        }
        return primitiveComparator(leftKeys.length, rightKeys.length);
      }
      function canonicalId(value) {
        return canonifyValue(value);
      }
      function canonifyValue(value) {
        if ("nullValue" in value) {
          return "null";
        } else if ("booleanValue" in value) {
          return "" + value.booleanValue;
        } else if ("integerValue" in value) {
          return "" + value.integerValue;
        } else if ("doubleValue" in value) {
          return "" + value.doubleValue;
        } else if ("timestampValue" in value) {
          return canonifyTimestamp(value.timestampValue);
        } else if ("stringValue" in value) {
          return value.stringValue;
        } else if ("bytesValue" in value) {
          return canonifyByteString(value.bytesValue);
        } else if ("referenceValue" in value) {
          return canonifyReference(value.referenceValue);
        } else if ("geoPointValue" in value) {
          return canonifyGeoPoint(value.geoPointValue);
        } else if ("arrayValue" in value) {
          return canonifyArray(value.arrayValue);
        } else if ("mapValue" in value) {
          return canonifyMap(value.mapValue);
        } else {
          return fail();
        }
      }
      function canonifyByteString(byteString) {
        return normalizeByteString(byteString).toBase64();
      }
      function canonifyTimestamp(timestamp) {
        var normalizedTimestamp = normalizeTimestamp(timestamp);
        return "time(" + normalizedTimestamp.seconds + "," + normalizedTimestamp.nanos + ")";
      }
      function canonifyGeoPoint(geoPoint) {
        return "geo(" + geoPoint.latitude + "," + geoPoint.longitude + ")";
      }
      function canonifyReference(referenceValue) {
        return DocumentKey.fromName(referenceValue).toString();
      }
      function canonifyMap(mapValue) {
        var sortedKeys = Object.keys(mapValue.fields || {}).sort();
        var result = "{";
        var first = true;
        for (var _i = 0, sortedKeys_1 = sortedKeys; _i < sortedKeys_1.length; _i++) {
          var key = sortedKeys_1[_i];
          if (!first) {
            result += ",";
          } else {
            first = false;
          }
          result += key + ":" + canonifyValue(mapValue.fields[key]);
        }
        return result + "}";
      }
      function canonifyArray(arrayValue) {
        var result = "[";
        var first = true;
        for (var _i = 0, _d = arrayValue.values || []; _i < _d.length; _i++) {
          var value = _d[_i];
          if (!first) {
            result += ",";
          } else {
            first = false;
          }
          result += canonifyValue(value);
        }
        return result + "]";
      }
      function refValue(databaseId, key) {
        return {
          referenceValue: "projects/" + databaseId.projectId + "/databases/" + databaseId.database + "/documents/" + key.path.canonicalString()
        };
      }
      function isInteger(value) {
        return !!value && "integerValue" in value;
      }
      function isDouble(value) {
        return !!value && "doubleValue" in value;
      }
      function isNumber(value) {
        return isInteger(value) || isDouble(value);
      }
      function isArray(value) {
        return !!value && "arrayValue" in value;
      }
      function isNullValue(value) {
        return !!value && "nullValue" in value;
      }
      function isNanValue(value) {
        return !!value && "doubleValue" in value && isNaN(Number(value.doubleValue));
      }
      function isMapValue(value) {
        return !!value && "mapValue" in value;
      }
      var ObjectValue = function() {
        function ObjectValue2(proto) {
          this.overlayMap = new Map();
          this.partialValue = proto;
        }
        ObjectValue2.empty = function() {
          return new ObjectValue2({mapValue: {}});
        };
        ObjectValue2.prototype.field = function(path2) {
          return ObjectValue2.extractNestedValue(this.buildProto(), path2);
        };
        ObjectValue2.prototype.toProto = function() {
          return this.field(FieldPath.emptyPath());
        };
        ObjectValue2.prototype.set = function(path2, value) {
          this.setOverlay(path2, value);
        };
        ObjectValue2.prototype.setAll = function(data) {
          var _this = this;
          data.forEach(function(value, fieldPath) {
            if (value) {
              _this.set(fieldPath, value);
            } else {
              _this.delete(fieldPath);
            }
          });
        };
        ObjectValue2.prototype.delete = function(path2) {
          this.setOverlay(path2, null);
        };
        ObjectValue2.prototype.isEqual = function(other) {
          return valueEquals(this.buildProto(), other.buildProto());
        };
        ObjectValue2.prototype.setOverlay = function(path2, value) {
          var currentLevel = this.overlayMap;
          for (var i = 0; i < path2.length - 1; ++i) {
            var currentSegment = path2.get(i);
            var currentValue = currentLevel.get(currentSegment);
            if (currentValue instanceof Map) {
              currentLevel = currentValue;
            } else if (currentValue && typeOrder(currentValue) === 10) {
              currentValue = new Map(Object.entries(currentValue.mapValue.fields || {}));
              currentLevel.set(currentSegment, currentValue);
              currentLevel = currentValue;
            } else {
              currentValue = new Map();
              currentLevel.set(currentSegment, currentValue);
              currentLevel = currentValue;
            }
          }
          currentLevel.set(path2.lastSegment(), value);
        };
        ObjectValue2.prototype.applyOverlay = function(currentPath, currentOverlays) {
          var _this = this;
          var modified = false;
          var existingValue = ObjectValue2.extractNestedValue(this.partialValue, currentPath);
          var resultAtPath = isMapValue(existingValue) ? Object.assign({}, existingValue.mapValue.fields) : {};
          currentOverlays.forEach(function(value, pathSegment) {
            if (value instanceof Map) {
              var nested = _this.applyOverlay(currentPath.child(pathSegment), value);
              if (nested != null) {
                resultAtPath[pathSegment] = nested;
                modified = true;
              }
            } else if (value !== null) {
              resultAtPath[pathSegment] = value;
              modified = true;
            } else if (resultAtPath.hasOwnProperty(pathSegment)) {
              delete resultAtPath[pathSegment];
              modified = true;
            }
          });
          return modified ? {mapValue: {fields: resultAtPath}} : null;
        };
        ObjectValue2.prototype.buildProto = function() {
          var mergedResult = this.applyOverlay(FieldPath.emptyPath(), this.overlayMap);
          if (mergedResult != null) {
            this.partialValue = mergedResult;
            this.overlayMap.clear();
          }
          return this.partialValue;
        };
        ObjectValue2.extractNestedValue = function(proto, path2) {
          if (path2.isEmpty()) {
            return proto;
          } else {
            var value = proto;
            for (var i = 0; i < path2.length - 1; ++i) {
              if (!value.mapValue.fields) {
                return null;
              }
              value = value.mapValue.fields[path2.get(i)];
              if (!isMapValue(value)) {
                return null;
              }
            }
            value = (value.mapValue.fields || {})[path2.lastSegment()];
            return value || null;
          }
        };
        ObjectValue2.prototype.clone = function() {
          return new ObjectValue2(this.buildProto());
        };
        return ObjectValue2;
      }();
      function extractFieldMask(value) {
        var fields = [];
        forEach(value.fields || {}, function(key, value2) {
          var currentPath = new FieldPath([key]);
          if (isMapValue(value2)) {
            var nestedMask = extractFieldMask(value2.mapValue);
            var nestedFields = nestedMask.fields;
            if (nestedFields.length === 0) {
              fields.push(currentPath);
            } else {
              for (var _i = 0, nestedFields_1 = nestedFields; _i < nestedFields_1.length; _i++) {
                var nestedPath = nestedFields_1[_i];
                fields.push(currentPath.child(nestedPath));
              }
            }
          } else {
            fields.push(currentPath);
          }
        });
        return new FieldMask(fields);
      }
      var MutableDocument = function() {
        function MutableDocument2(key, documentType, version2, data, documentState) {
          this.key = key;
          this.documentType = documentType;
          this.version = version2;
          this.data = data;
          this.documentState = documentState;
        }
        MutableDocument2.newInvalidDocument = function(documentKey) {
          return new MutableDocument2(documentKey, 0, SnapshotVersion.min(), ObjectValue.empty(), 0);
        };
        MutableDocument2.newFoundDocument = function(documentKey, version2, value) {
          return new MutableDocument2(documentKey, 1, version2, value, 0);
        };
        MutableDocument2.newNoDocument = function(documentKey, version2) {
          return new MutableDocument2(documentKey, 2, version2, ObjectValue.empty(), 0);
        };
        MutableDocument2.newUnknownDocument = function(documentKey, version2) {
          return new MutableDocument2(documentKey, 3, version2, ObjectValue.empty(), 2);
        };
        MutableDocument2.prototype.convertToFoundDocument = function(version2, value) {
          this.version = version2;
          this.documentType = 1;
          this.data = value;
          this.documentState = 0;
          return this;
        };
        MutableDocument2.prototype.convertToNoDocument = function(version2) {
          this.version = version2;
          this.documentType = 2;
          this.data = ObjectValue.empty();
          this.documentState = 0;
          return this;
        };
        MutableDocument2.prototype.convertToUnknownDocument = function(version2) {
          this.version = version2;
          this.documentType = 3;
          this.data = ObjectValue.empty();
          this.documentState = 2;
          return this;
        };
        MutableDocument2.prototype.setHasCommittedMutations = function() {
          this.documentState = 2;
          return this;
        };
        MutableDocument2.prototype.setHasLocalMutations = function() {
          this.documentState = 1;
          return this;
        };
        Object.defineProperty(MutableDocument2.prototype, "hasLocalMutations", {
          get: function() {
            return this.documentState === 1;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(MutableDocument2.prototype, "hasCommittedMutations", {
          get: function() {
            return this.documentState === 2;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(MutableDocument2.prototype, "hasPendingWrites", {
          get: function() {
            return this.hasLocalMutations || this.hasCommittedMutations;
          },
          enumerable: false,
          configurable: true
        });
        MutableDocument2.prototype.isValidDocument = function() {
          return this.documentType !== 0;
        };
        MutableDocument2.prototype.isFoundDocument = function() {
          return this.documentType === 1;
        };
        MutableDocument2.prototype.isNoDocument = function() {
          return this.documentType === 2;
        };
        MutableDocument2.prototype.isUnknownDocument = function() {
          return this.documentType === 3;
        };
        MutableDocument2.prototype.isEqual = function(other) {
          return other instanceof MutableDocument2 && this.key.isEqual(other.key) && this.version.isEqual(other.version) && this.documentType === other.documentType && this.documentState === other.documentState && this.data.isEqual(other.data);
        };
        MutableDocument2.prototype.clone = function() {
          return new MutableDocument2(this.key, this.documentType, this.version, this.data.clone(), this.documentState);
        };
        MutableDocument2.prototype.toString = function() {
          return "Document(" + this.key + ", " + this.version + ", " + JSON.stringify(this.data.toProto()) + ", " + ("{documentType: " + this.documentType + "}), ") + ("{documentState: " + this.documentState + "})");
        };
        return MutableDocument2;
      }();
      function compareDocumentsByField(field, d1, d2) {
        var v1 = d1.data.field(field);
        var v2 = d2.data.field(field);
        if (v1 !== null && v2 !== null) {
          return valueCompare(v1, v2);
        } else {
          return fail();
        }
      }
      var TargetImpl = function() {
        function TargetImpl2(path2, collectionGroup2, orderBy2, filters, limit2, startAt2, endAt2) {
          if (collectionGroup2 === void 0) {
            collectionGroup2 = null;
          }
          if (orderBy2 === void 0) {
            orderBy2 = [];
          }
          if (filters === void 0) {
            filters = [];
          }
          if (limit2 === void 0) {
            limit2 = null;
          }
          if (startAt2 === void 0) {
            startAt2 = null;
          }
          if (endAt2 === void 0) {
            endAt2 = null;
          }
          this.path = path2;
          this.collectionGroup = collectionGroup2;
          this.orderBy = orderBy2;
          this.filters = filters;
          this.limit = limit2;
          this.startAt = startAt2;
          this.endAt = endAt2;
          this.memoizedCanonicalId = null;
        }
        return TargetImpl2;
      }();
      function newTarget(path2, collectionGroup2, orderBy2, filters, limit2, startAt2, endAt2) {
        if (collectionGroup2 === void 0) {
          collectionGroup2 = null;
        }
        if (orderBy2 === void 0) {
          orderBy2 = [];
        }
        if (filters === void 0) {
          filters = [];
        }
        if (limit2 === void 0) {
          limit2 = null;
        }
        if (startAt2 === void 0) {
          startAt2 = null;
        }
        if (endAt2 === void 0) {
          endAt2 = null;
        }
        return new TargetImpl(path2, collectionGroup2, orderBy2, filters, limit2, startAt2, endAt2);
      }
      function canonifyTarget(target) {
        var targetImpl = debugCast(target);
        if (targetImpl.memoizedCanonicalId === null) {
          var canonicalId_1 = targetImpl.path.canonicalString();
          if (targetImpl.collectionGroup !== null) {
            canonicalId_1 += "|cg:" + targetImpl.collectionGroup;
          }
          canonicalId_1 += "|f:";
          canonicalId_1 += targetImpl.filters.map(function(f) {
            return canonifyFilter(f);
          }).join(",");
          canonicalId_1 += "|ob:";
          canonicalId_1 += targetImpl.orderBy.map(function(o) {
            return canonifyOrderBy(o);
          }).join(",");
          if (!isNullOrUndefined(targetImpl.limit)) {
            canonicalId_1 += "|l:";
            canonicalId_1 += targetImpl.limit;
          }
          if (targetImpl.startAt) {
            canonicalId_1 += "|lb:";
            canonicalId_1 += canonifyBound(targetImpl.startAt);
          }
          if (targetImpl.endAt) {
            canonicalId_1 += "|ub:";
            canonicalId_1 += canonifyBound(targetImpl.endAt);
          }
          targetImpl.memoizedCanonicalId = canonicalId_1;
        }
        return targetImpl.memoizedCanonicalId;
      }
      function stringifyTarget(target) {
        var str = target.path.canonicalString();
        if (target.collectionGroup !== null) {
          str += " collectionGroup=" + target.collectionGroup;
        }
        if (target.filters.length > 0) {
          str += ", filters: [" + target.filters.map(function(f) {
            return stringifyFilter(f);
          }).join(", ") + "]";
        }
        if (!isNullOrUndefined(target.limit)) {
          str += ", limit: " + target.limit;
        }
        if (target.orderBy.length > 0) {
          str += ", orderBy: [" + target.orderBy.map(function(o) {
            return stringifyOrderBy(o);
          }).join(", ") + "]";
        }
        if (target.startAt) {
          str += ", startAt: " + canonifyBound(target.startAt);
        }
        if (target.endAt) {
          str += ", endAt: " + canonifyBound(target.endAt);
        }
        return "Target(" + str + ")";
      }
      function targetEquals(left, right) {
        if (left.limit !== right.limit) {
          return false;
        }
        if (left.orderBy.length !== right.orderBy.length) {
          return false;
        }
        for (var i = 0; i < left.orderBy.length; i++) {
          if (!orderByEquals(left.orderBy[i], right.orderBy[i])) {
            return false;
          }
        }
        if (left.filters.length !== right.filters.length) {
          return false;
        }
        for (var i = 0; i < left.filters.length; i++) {
          if (!filterEquals(left.filters[i], right.filters[i])) {
            return false;
          }
        }
        if (left.collectionGroup !== right.collectionGroup) {
          return false;
        }
        if (!left.path.isEqual(right.path)) {
          return false;
        }
        if (!boundEquals(left.startAt, right.startAt)) {
          return false;
        }
        return boundEquals(left.endAt, right.endAt);
      }
      function isDocumentTarget(target) {
        return DocumentKey.isDocumentKey(target.path) && target.collectionGroup === null && target.filters.length === 0;
      }
      var Filter = function() {
        function Filter2() {
        }
        return Filter2;
      }();
      var FieldFilter = function(_super) {
        tslib.__extends(FieldFilter2, _super);
        function FieldFilter2(field, op, value) {
          var _this = _super.call(this) || this;
          _this.field = field;
          _this.op = op;
          _this.value = value;
          return _this;
        }
        FieldFilter2.create = function(field, op, value) {
          if (field.isKeyField()) {
            if (op === "in" || op === "not-in") {
              return this.createKeyFieldInFilter(field, op, value);
            } else {
              return new KeyFieldFilter(field, op, value);
            }
          } else if (op === "array-contains") {
            return new ArrayContainsFilter(field, value);
          } else if (op === "in") {
            return new InFilter(field, value);
          } else if (op === "not-in") {
            return new NotInFilter(field, value);
          } else if (op === "array-contains-any") {
            return new ArrayContainsAnyFilter(field, value);
          } else {
            return new FieldFilter2(field, op, value);
          }
        };
        FieldFilter2.createKeyFieldInFilter = function(field, op, value) {
          return op === "in" ? new KeyFieldInFilter(field, value) : new KeyFieldNotInFilter(field, value);
        };
        FieldFilter2.prototype.matches = function(doc2) {
          var other = doc2.data.field(this.field);
          if (this.op === "!=") {
            return other !== null && this.matchesComparison(valueCompare(other, this.value));
          }
          return other !== null && typeOrder(this.value) === typeOrder(other) && this.matchesComparison(valueCompare(other, this.value));
        };
        FieldFilter2.prototype.matchesComparison = function(comparison) {
          switch (this.op) {
            case "<":
              return comparison < 0;
            case "<=":
              return comparison <= 0;
            case "==":
              return comparison === 0;
            case "!=":
              return comparison !== 0;
            case ">":
              return comparison > 0;
            case ">=":
              return comparison >= 0;
            default:
              return fail();
          }
        };
        FieldFilter2.prototype.isInequality = function() {
          return [
            "<",
            "<=",
            ">",
            ">=",
            "!=",
            "not-in"
          ].indexOf(this.op) >= 0;
        };
        return FieldFilter2;
      }(Filter);
      function canonifyFilter(filter) {
        return filter.field.canonicalString() + filter.op.toString() + canonicalId(filter.value);
      }
      function filterEquals(f1, f2) {
        return f1.op === f2.op && f1.field.isEqual(f2.field) && valueEquals(f1.value, f2.value);
      }
      function stringifyFilter(filter) {
        return filter.field.canonicalString() + " " + filter.op + " " + canonicalId(filter.value);
      }
      var KeyFieldFilter = function(_super) {
        tslib.__extends(KeyFieldFilter2, _super);
        function KeyFieldFilter2(field, op, value) {
          var _this = _super.call(this, field, op, value) || this;
          _this.key = DocumentKey.fromName(value.referenceValue);
          return _this;
        }
        KeyFieldFilter2.prototype.matches = function(doc2) {
          var comparison = DocumentKey.comparator(doc2.key, this.key);
          return this.matchesComparison(comparison);
        };
        return KeyFieldFilter2;
      }(FieldFilter);
      var KeyFieldInFilter = function(_super) {
        tslib.__extends(KeyFieldInFilter2, _super);
        function KeyFieldInFilter2(field, value) {
          var _this = _super.call(this, field, "in", value) || this;
          _this.keys = extractDocumentKeysFromArrayValue("in", value);
          return _this;
        }
        KeyFieldInFilter2.prototype.matches = function(doc2) {
          return this.keys.some(function(key) {
            return key.isEqual(doc2.key);
          });
        };
        return KeyFieldInFilter2;
      }(FieldFilter);
      var KeyFieldNotInFilter = function(_super) {
        tslib.__extends(KeyFieldNotInFilter2, _super);
        function KeyFieldNotInFilter2(field, value) {
          var _this = _super.call(this, field, "not-in", value) || this;
          _this.keys = extractDocumentKeysFromArrayValue("not-in", value);
          return _this;
        }
        KeyFieldNotInFilter2.prototype.matches = function(doc2) {
          return !this.keys.some(function(key) {
            return key.isEqual(doc2.key);
          });
        };
        return KeyFieldNotInFilter2;
      }(FieldFilter);
      function extractDocumentKeysFromArrayValue(op, value) {
        var _a;
        return (((_a = value.arrayValue) === null || _a === void 0 ? void 0 : _a.values) || []).map(function(v) {
          return DocumentKey.fromName(v.referenceValue);
        });
      }
      var ArrayContainsFilter = function(_super) {
        tslib.__extends(ArrayContainsFilter2, _super);
        function ArrayContainsFilter2(field, value) {
          return _super.call(this, field, "array-contains", value) || this;
        }
        ArrayContainsFilter2.prototype.matches = function(doc2) {
          var other = doc2.data.field(this.field);
          return isArray(other) && arrayValueContains(other.arrayValue, this.value);
        };
        return ArrayContainsFilter2;
      }(FieldFilter);
      var InFilter = function(_super) {
        tslib.__extends(InFilter2, _super);
        function InFilter2(field, value) {
          return _super.call(this, field, "in", value) || this;
        }
        InFilter2.prototype.matches = function(doc2) {
          var other = doc2.data.field(this.field);
          return other !== null && arrayValueContains(this.value.arrayValue, other);
        };
        return InFilter2;
      }(FieldFilter);
      var NotInFilter = function(_super) {
        tslib.__extends(NotInFilter2, _super);
        function NotInFilter2(field, value) {
          return _super.call(this, field, "not-in", value) || this;
        }
        NotInFilter2.prototype.matches = function(doc2) {
          if (arrayValueContains(this.value.arrayValue, {nullValue: "NULL_VALUE"})) {
            return false;
          }
          var other = doc2.data.field(this.field);
          return other !== null && !arrayValueContains(this.value.arrayValue, other);
        };
        return NotInFilter2;
      }(FieldFilter);
      var ArrayContainsAnyFilter = function(_super) {
        tslib.__extends(ArrayContainsAnyFilter2, _super);
        function ArrayContainsAnyFilter2(field, value) {
          return _super.call(this, field, "array-contains-any", value) || this;
        }
        ArrayContainsAnyFilter2.prototype.matches = function(doc2) {
          var _this = this;
          var other = doc2.data.field(this.field);
          if (!isArray(other) || !other.arrayValue.values) {
            return false;
          }
          return other.arrayValue.values.some(function(val) {
            return arrayValueContains(_this.value.arrayValue, val);
          });
        };
        return ArrayContainsAnyFilter2;
      }(FieldFilter);
      var Bound = function() {
        function Bound2(position, before) {
          this.position = position;
          this.before = before;
        }
        return Bound2;
      }();
      function canonifyBound(bound) {
        return (bound.before ? "b" : "a") + ":" + bound.position.map(function(p) {
          return canonicalId(p);
        }).join(",");
      }
      var OrderBy = function() {
        function OrderBy2(field, dir) {
          if (dir === void 0) {
            dir = "asc";
          }
          this.field = field;
          this.dir = dir;
        }
        return OrderBy2;
      }();
      function canonifyOrderBy(orderBy2) {
        return orderBy2.field.canonicalString() + orderBy2.dir;
      }
      function stringifyOrderBy(orderBy2) {
        return orderBy2.field.canonicalString() + " (" + orderBy2.dir + ")";
      }
      function orderByEquals(left, right) {
        return left.dir === right.dir && left.field.isEqual(right.field);
      }
      function sortsBeforeDocument(bound, orderBy2, doc2) {
        var comparison = 0;
        for (var i = 0; i < bound.position.length; i++) {
          var orderByComponent = orderBy2[i];
          var component2 = bound.position[i];
          if (orderByComponent.field.isKeyField()) {
            comparison = DocumentKey.comparator(DocumentKey.fromName(component2.referenceValue), doc2.key);
          } else {
            var docValue = doc2.data.field(orderByComponent.field);
            comparison = valueCompare(component2, docValue);
          }
          if (orderByComponent.dir === "desc") {
            comparison = comparison * -1;
          }
          if (comparison !== 0) {
            break;
          }
        }
        return bound.before ? comparison <= 0 : comparison < 0;
      }
      function boundEquals(left, right) {
        if (left === null) {
          return right === null;
        } else if (right === null) {
          return false;
        }
        if (left.before !== right.before || left.position.length !== right.position.length) {
          return false;
        }
        for (var i = 0; i < left.position.length; i++) {
          var leftPosition = left.position[i];
          var rightPosition = right.position[i];
          if (!valueEquals(leftPosition, rightPosition)) {
            return false;
          }
        }
        return true;
      }
      var QueryImpl = function() {
        function QueryImpl2(path2, collectionGroup2, explicitOrderBy, filters, limit2, limitType, startAt2, endAt2) {
          if (collectionGroup2 === void 0) {
            collectionGroup2 = null;
          }
          if (explicitOrderBy === void 0) {
            explicitOrderBy = [];
          }
          if (filters === void 0) {
            filters = [];
          }
          if (limit2 === void 0) {
            limit2 = null;
          }
          if (limitType === void 0) {
            limitType = "F";
          }
          if (startAt2 === void 0) {
            startAt2 = null;
          }
          if (endAt2 === void 0) {
            endAt2 = null;
          }
          this.path = path2;
          this.collectionGroup = collectionGroup2;
          this.explicitOrderBy = explicitOrderBy;
          this.filters = filters;
          this.limit = limit2;
          this.limitType = limitType;
          this.startAt = startAt2;
          this.endAt = endAt2;
          this.memoizedOrderBy = null;
          this.memoizedTarget = null;
          if (this.startAt)
            ;
          if (this.endAt)
            ;
        }
        return QueryImpl2;
      }();
      function newQuery(path2, collectionGroup2, explicitOrderBy, filters, limit2, limitType, startAt2, endAt2) {
        return new QueryImpl(path2, collectionGroup2, explicitOrderBy, filters, limit2, limitType, startAt2, endAt2);
      }
      function newQueryForPath(path2) {
        return new QueryImpl(path2);
      }
      function asCollectionQueryAtPath(query3, path2) {
        return new QueryImpl(path2, null, query3.explicitOrderBy.slice(), query3.filters.slice(), query3.limit, query3.limitType, query3.startAt, query3.endAt);
      }
      function matchesAllDocuments(query3) {
        return query3.filters.length === 0 && query3.limit === null && query3.startAt == null && query3.endAt == null && (query3.explicitOrderBy.length === 0 || query3.explicitOrderBy.length === 1 && query3.explicitOrderBy[0].field.isKeyField());
      }
      function hasLimitToFirst(query3) {
        return !isNullOrUndefined(query3.limit) && query3.limitType === "F";
      }
      function hasLimitToLast(query3) {
        return !isNullOrUndefined(query3.limit) && query3.limitType === "L";
      }
      function getFirstOrderByField(query3) {
        return query3.explicitOrderBy.length > 0 ? query3.explicitOrderBy[0].field : null;
      }
      function getInequalityFilterField(query3) {
        for (var _i = 0, _d = query3.filters; _i < _d.length; _i++) {
          var filter = _d[_i];
          if (filter.isInequality()) {
            return filter.field;
          }
        }
        return null;
      }
      function findFilterOperator(query3, operators) {
        for (var _i = 0, _d = query3.filters; _i < _d.length; _i++) {
          var filter = _d[_i];
          if (operators.indexOf(filter.op) >= 0) {
            return filter.op;
          }
        }
        return null;
      }
      function newQueryForCollectionGroup(collectionId) {
        return new QueryImpl(ResourcePath.emptyPath(), collectionId);
      }
      function isDocumentQuery(query3) {
        return DocumentKey.isDocumentKey(query3.path) && query3.collectionGroup === null && query3.filters.length === 0;
      }
      function isCollectionGroupQuery(query3) {
        return query3.collectionGroup !== null;
      }
      function queryOrderBy(query3) {
        var queryImpl = debugCast(query3);
        if (queryImpl.memoizedOrderBy === null) {
          queryImpl.memoizedOrderBy = [];
          var inequalityField = getInequalityFilterField(queryImpl);
          var firstOrderByField = getFirstOrderByField(queryImpl);
          if (inequalityField !== null && firstOrderByField === null) {
            if (!inequalityField.isKeyField()) {
              queryImpl.memoizedOrderBy.push(new OrderBy(inequalityField));
            }
            queryImpl.memoizedOrderBy.push(new OrderBy(FieldPath.keyField(), "asc"));
          } else {
            var foundKeyOrdering = false;
            for (var _i = 0, _d = queryImpl.explicitOrderBy; _i < _d.length; _i++) {
              var orderBy_1 = _d[_i];
              queryImpl.memoizedOrderBy.push(orderBy_1);
              if (orderBy_1.field.isKeyField()) {
                foundKeyOrdering = true;
              }
            }
            if (!foundKeyOrdering) {
              var lastDirection = queryImpl.explicitOrderBy.length > 0 ? queryImpl.explicitOrderBy[queryImpl.explicitOrderBy.length - 1].dir : "asc";
              queryImpl.memoizedOrderBy.push(new OrderBy(FieldPath.keyField(), lastDirection));
            }
          }
        }
        return queryImpl.memoizedOrderBy;
      }
      function queryToTarget(query3) {
        var queryImpl = debugCast(query3);
        if (!queryImpl.memoizedTarget) {
          if (queryImpl.limitType === "F") {
            queryImpl.memoizedTarget = newTarget(queryImpl.path, queryImpl.collectionGroup, queryOrderBy(queryImpl), queryImpl.filters, queryImpl.limit, queryImpl.startAt, queryImpl.endAt);
          } else {
            var orderBys = [];
            for (var _i = 0, _d = queryOrderBy(queryImpl); _i < _d.length; _i++) {
              var orderBy_2 = _d[_i];
              var dir = orderBy_2.dir === "desc" ? "asc" : "desc";
              orderBys.push(new OrderBy(orderBy_2.field, dir));
            }
            var startAt_1 = queryImpl.endAt ? new Bound(queryImpl.endAt.position, !queryImpl.endAt.before) : null;
            var endAt_1 = queryImpl.startAt ? new Bound(queryImpl.startAt.position, !queryImpl.startAt.before) : null;
            queryImpl.memoizedTarget = newTarget(queryImpl.path, queryImpl.collectionGroup, orderBys, queryImpl.filters, queryImpl.limit, startAt_1, endAt_1);
          }
        }
        return queryImpl.memoizedTarget;
      }
      function queryWithAddedFilter(query3, filter) {
        var newFilters = query3.filters.concat([filter]);
        return new QueryImpl(query3.path, query3.collectionGroup, query3.explicitOrderBy.slice(), newFilters, query3.limit, query3.limitType, query3.startAt, query3.endAt);
      }
      function queryWithAddedOrderBy(query3, orderBy2) {
        var newOrderBy = query3.explicitOrderBy.concat([orderBy2]);
        return new QueryImpl(query3.path, query3.collectionGroup, newOrderBy, query3.filters.slice(), query3.limit, query3.limitType, query3.startAt, query3.endAt);
      }
      function queryWithLimit(query3, limit2, limitType) {
        return new QueryImpl(query3.path, query3.collectionGroup, query3.explicitOrderBy.slice(), query3.filters.slice(), limit2, limitType, query3.startAt, query3.endAt);
      }
      function queryWithStartAt(query3, bound) {
        return new QueryImpl(query3.path, query3.collectionGroup, query3.explicitOrderBy.slice(), query3.filters.slice(), query3.limit, query3.limitType, bound, query3.endAt);
      }
      function queryWithEndAt(query3, bound) {
        return new QueryImpl(query3.path, query3.collectionGroup, query3.explicitOrderBy.slice(), query3.filters.slice(), query3.limit, query3.limitType, query3.startAt, bound);
      }
      function queryEquals(left, right) {
        return targetEquals(queryToTarget(left), queryToTarget(right)) && left.limitType === right.limitType;
      }
      function canonifyQuery(query3) {
        return canonifyTarget(queryToTarget(query3)) + "|lt:" + query3.limitType;
      }
      function stringifyQuery(query3) {
        return "Query(target=" + stringifyTarget(queryToTarget(query3)) + "; limitType=" + query3.limitType + ")";
      }
      function queryMatches(query3, doc2) {
        return doc2.isFoundDocument() && queryMatchesPathAndCollectionGroup(query3, doc2) && queryMatchesOrderBy(query3, doc2) && queryMatchesFilters(query3, doc2) && queryMatchesBounds(query3, doc2);
      }
      function queryMatchesPathAndCollectionGroup(query3, doc2) {
        var docPath = doc2.key.path;
        if (query3.collectionGroup !== null) {
          return doc2.key.hasCollectionId(query3.collectionGroup) && query3.path.isPrefixOf(docPath);
        } else if (DocumentKey.isDocumentKey(query3.path)) {
          return query3.path.isEqual(docPath);
        } else {
          return query3.path.isImmediateParentOf(docPath);
        }
      }
      function queryMatchesOrderBy(query3, doc2) {
        for (var _i = 0, _d = query3.explicitOrderBy; _i < _d.length; _i++) {
          var orderBy_3 = _d[_i];
          if (!orderBy_3.field.isKeyField() && doc2.data.field(orderBy_3.field) === null) {
            return false;
          }
        }
        return true;
      }
      function queryMatchesFilters(query3, doc2) {
        for (var _i = 0, _d = query3.filters; _i < _d.length; _i++) {
          var filter = _d[_i];
          if (!filter.matches(doc2)) {
            return false;
          }
        }
        return true;
      }
      function queryMatchesBounds(query3, doc2) {
        if (query3.startAt && !sortsBeforeDocument(query3.startAt, queryOrderBy(query3), doc2)) {
          return false;
        }
        if (query3.endAt && sortsBeforeDocument(query3.endAt, queryOrderBy(query3), doc2)) {
          return false;
        }
        return true;
      }
      function newQueryComparator(query3) {
        return function(d1, d2) {
          var comparedOnKeyField = false;
          for (var _i = 0, _d = queryOrderBy(query3); _i < _d.length; _i++) {
            var orderBy_4 = _d[_i];
            var comp = compareDocs(orderBy_4, d1, d2);
            if (comp !== 0) {
              return comp;
            }
            comparedOnKeyField = comparedOnKeyField || orderBy_4.field.isKeyField();
          }
          return 0;
        };
      }
      function compareDocs(orderBy2, d1, d2) {
        var comparison = orderBy2.field.isKeyField() ? DocumentKey.comparator(d1.key, d2.key) : compareDocumentsByField(orderBy2.field, d1, d2);
        switch (orderBy2.dir) {
          case "asc":
            return comparison;
          case "desc":
            return -1 * comparison;
          default:
            return fail();
        }
      }
      var SortedMap = function() {
        function SortedMap2(comparator, root) {
          this.comparator = comparator;
          this.root = root ? root : LLRBNode.EMPTY;
        }
        SortedMap2.prototype.insert = function(key, value) {
          return new SortedMap2(this.comparator, this.root.insert(key, value, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));
        };
        SortedMap2.prototype.remove = function(key) {
          return new SortedMap2(this.comparator, this.root.remove(key, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));
        };
        SortedMap2.prototype.get = function(key) {
          var node = this.root;
          while (!node.isEmpty()) {
            var cmp = this.comparator(key, node.key);
            if (cmp === 0) {
              return node.value;
            } else if (cmp < 0) {
              node = node.left;
            } else if (cmp > 0) {
              node = node.right;
            }
          }
          return null;
        };
        SortedMap2.prototype.indexOf = function(key) {
          var prunedNodes = 0;
          var node = this.root;
          while (!node.isEmpty()) {
            var cmp = this.comparator(key, node.key);
            if (cmp === 0) {
              return prunedNodes + node.left.size;
            } else if (cmp < 0) {
              node = node.left;
            } else {
              prunedNodes += node.left.size + 1;
              node = node.right;
            }
          }
          return -1;
        };
        SortedMap2.prototype.isEmpty = function() {
          return this.root.isEmpty();
        };
        Object.defineProperty(SortedMap2.prototype, "size", {
          get: function() {
            return this.root.size;
          },
          enumerable: false,
          configurable: true
        });
        SortedMap2.prototype.minKey = function() {
          return this.root.minKey();
        };
        SortedMap2.prototype.maxKey = function() {
          return this.root.maxKey();
        };
        SortedMap2.prototype.inorderTraversal = function(action) {
          return this.root.inorderTraversal(action);
        };
        SortedMap2.prototype.forEach = function(fn) {
          this.inorderTraversal(function(k, v) {
            fn(k, v);
            return false;
          });
        };
        SortedMap2.prototype.toString = function() {
          var descriptions = [];
          this.inorderTraversal(function(k, v) {
            descriptions.push(k + ":" + v);
            return false;
          });
          return "{" + descriptions.join(", ") + "}";
        };
        SortedMap2.prototype.reverseTraversal = function(action) {
          return this.root.reverseTraversal(action);
        };
        SortedMap2.prototype.getIterator = function() {
          return new SortedMapIterator(this.root, null, this.comparator, false);
        };
        SortedMap2.prototype.getIteratorFrom = function(key) {
          return new SortedMapIterator(this.root, key, this.comparator, false);
        };
        SortedMap2.prototype.getReverseIterator = function() {
          return new SortedMapIterator(this.root, null, this.comparator, true);
        };
        SortedMap2.prototype.getReverseIteratorFrom = function(key) {
          return new SortedMapIterator(this.root, key, this.comparator, true);
        };
        return SortedMap2;
      }();
      var SortedMapIterator = function() {
        function SortedMapIterator2(node, startKey, comparator, isReverse) {
          this.isReverse = isReverse;
          this.nodeStack = [];
          var cmp = 1;
          while (!node.isEmpty()) {
            cmp = startKey ? comparator(node.key, startKey) : 1;
            if (isReverse) {
              cmp *= -1;
            }
            if (cmp < 0) {
              if (this.isReverse) {
                node = node.left;
              } else {
                node = node.right;
              }
            } else if (cmp === 0) {
              this.nodeStack.push(node);
              break;
            } else {
              this.nodeStack.push(node);
              if (this.isReverse) {
                node = node.right;
              } else {
                node = node.left;
              }
            }
          }
        }
        SortedMapIterator2.prototype.getNext = function() {
          var node = this.nodeStack.pop();
          var result = {key: node.key, value: node.value};
          if (this.isReverse) {
            node = node.left;
            while (!node.isEmpty()) {
              this.nodeStack.push(node);
              node = node.right;
            }
          } else {
            node = node.right;
            while (!node.isEmpty()) {
              this.nodeStack.push(node);
              node = node.left;
            }
          }
          return result;
        };
        SortedMapIterator2.prototype.hasNext = function() {
          return this.nodeStack.length > 0;
        };
        SortedMapIterator2.prototype.peek = function() {
          if (this.nodeStack.length === 0) {
            return null;
          }
          var node = this.nodeStack[this.nodeStack.length - 1];
          return {key: node.key, value: node.value};
        };
        return SortedMapIterator2;
      }();
      var LLRBNode = function() {
        function LLRBNode2(key, value, color, left, right) {
          this.key = key;
          this.value = value;
          this.color = color != null ? color : LLRBNode2.RED;
          this.left = left != null ? left : LLRBNode2.EMPTY;
          this.right = right != null ? right : LLRBNode2.EMPTY;
          this.size = this.left.size + 1 + this.right.size;
        }
        LLRBNode2.prototype.copy = function(key, value, color, left, right) {
          return new LLRBNode2(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);
        };
        LLRBNode2.prototype.isEmpty = function() {
          return false;
        };
        LLRBNode2.prototype.inorderTraversal = function(action) {
          return this.left.inorderTraversal(action) || action(this.key, this.value) || this.right.inorderTraversal(action);
        };
        LLRBNode2.prototype.reverseTraversal = function(action) {
          return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);
        };
        LLRBNode2.prototype.min = function() {
          if (this.left.isEmpty()) {
            return this;
          } else {
            return this.left.min();
          }
        };
        LLRBNode2.prototype.minKey = function() {
          return this.min().key;
        };
        LLRBNode2.prototype.maxKey = function() {
          if (this.right.isEmpty()) {
            return this.key;
          } else {
            return this.right.maxKey();
          }
        };
        LLRBNode2.prototype.insert = function(key, value, comparator) {
          var n = this;
          var cmp = comparator(key, n.key);
          if (cmp < 0) {
            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);
          } else if (cmp === 0) {
            n = n.copy(null, value, null, null, null);
          } else {
            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));
          }
          return n.fixUp();
        };
        LLRBNode2.prototype.removeMin = function() {
          if (this.left.isEmpty()) {
            return LLRBNode2.EMPTY;
          }
          var n = this;
          if (!n.left.isRed() && !n.left.left.isRed()) {
            n = n.moveRedLeft();
          }
          n = n.copy(null, null, null, n.left.removeMin(), null);
          return n.fixUp();
        };
        LLRBNode2.prototype.remove = function(key, comparator) {
          var smallest;
          var n = this;
          if (comparator(key, n.key) < 0) {
            if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {
              n = n.moveRedLeft();
            }
            n = n.copy(null, null, null, n.left.remove(key, comparator), null);
          } else {
            if (n.left.isRed()) {
              n = n.rotateRight();
            }
            if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {
              n = n.moveRedRight();
            }
            if (comparator(key, n.key) === 0) {
              if (n.right.isEmpty()) {
                return LLRBNode2.EMPTY;
              } else {
                smallest = n.right.min();
                n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin());
              }
            }
            n = n.copy(null, null, null, null, n.right.remove(key, comparator));
          }
          return n.fixUp();
        };
        LLRBNode2.prototype.isRed = function() {
          return this.color;
        };
        LLRBNode2.prototype.fixUp = function() {
          var n = this;
          if (n.right.isRed() && !n.left.isRed()) {
            n = n.rotateLeft();
          }
          if (n.left.isRed() && n.left.left.isRed()) {
            n = n.rotateRight();
          }
          if (n.left.isRed() && n.right.isRed()) {
            n = n.colorFlip();
          }
          return n;
        };
        LLRBNode2.prototype.moveRedLeft = function() {
          var n = this.colorFlip();
          if (n.right.left.isRed()) {
            n = n.copy(null, null, null, null, n.right.rotateRight());
            n = n.rotateLeft();
            n = n.colorFlip();
          }
          return n;
        };
        LLRBNode2.prototype.moveRedRight = function() {
          var n = this.colorFlip();
          if (n.left.left.isRed()) {
            n = n.rotateRight();
            n = n.colorFlip();
          }
          return n;
        };
        LLRBNode2.prototype.rotateLeft = function() {
          var nl = this.copy(null, null, LLRBNode2.RED, null, this.right.left);
          return this.right.copy(null, null, this.color, nl, null);
        };
        LLRBNode2.prototype.rotateRight = function() {
          var nr = this.copy(null, null, LLRBNode2.RED, this.left.right, null);
          return this.left.copy(null, null, this.color, null, nr);
        };
        LLRBNode2.prototype.colorFlip = function() {
          var left = this.left.copy(null, null, !this.left.color, null, null);
          var right = this.right.copy(null, null, !this.right.color, null, null);
          return this.copy(null, null, !this.color, left, right);
        };
        LLRBNode2.prototype.checkMaxDepth = function() {
          var blackDepth = this.check();
          if (Math.pow(2, blackDepth) <= this.size + 1) {
            return true;
          } else {
            return false;
          }
        };
        LLRBNode2.prototype.check = function() {
          if (this.isRed() && this.left.isRed()) {
            throw fail();
          }
          if (this.right.isRed()) {
            throw fail();
          }
          var blackDepth = this.left.check();
          if (blackDepth !== this.right.check()) {
            throw fail();
          } else {
            return blackDepth + (this.isRed() ? 0 : 1);
          }
        };
        return LLRBNode2;
      }();
      LLRBNode.EMPTY = null;
      LLRBNode.RED = true;
      LLRBNode.BLACK = false;
      var LLRBEmptyNode = function() {
        function LLRBEmptyNode2() {
          this.size = 0;
        }
        Object.defineProperty(LLRBEmptyNode2.prototype, "key", {
          get: function() {
            throw fail();
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(LLRBEmptyNode2.prototype, "value", {
          get: function() {
            throw fail();
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(LLRBEmptyNode2.prototype, "color", {
          get: function() {
            throw fail();
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(LLRBEmptyNode2.prototype, "left", {
          get: function() {
            throw fail();
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(LLRBEmptyNode2.prototype, "right", {
          get: function() {
            throw fail();
          },
          enumerable: false,
          configurable: true
        });
        LLRBEmptyNode2.prototype.copy = function(key, value, color, left, right) {
          return this;
        };
        LLRBEmptyNode2.prototype.insert = function(key, value, comparator) {
          return new LLRBNode(key, value);
        };
        LLRBEmptyNode2.prototype.remove = function(key, comparator) {
          return this;
        };
        LLRBEmptyNode2.prototype.isEmpty = function() {
          return true;
        };
        LLRBEmptyNode2.prototype.inorderTraversal = function(action) {
          return false;
        };
        LLRBEmptyNode2.prototype.reverseTraversal = function(action) {
          return false;
        };
        LLRBEmptyNode2.prototype.minKey = function() {
          return null;
        };
        LLRBEmptyNode2.prototype.maxKey = function() {
          return null;
        };
        LLRBEmptyNode2.prototype.isRed = function() {
          return false;
        };
        LLRBEmptyNode2.prototype.checkMaxDepth = function() {
          return true;
        };
        LLRBEmptyNode2.prototype.check = function() {
          return 0;
        };
        return LLRBEmptyNode2;
      }();
      LLRBNode.EMPTY = new LLRBEmptyNode();
      var SortedSet = function() {
        function SortedSet2(comparator) {
          this.comparator = comparator;
          this.data = new SortedMap(this.comparator);
        }
        SortedSet2.prototype.has = function(elem) {
          return this.data.get(elem) !== null;
        };
        SortedSet2.prototype.first = function() {
          return this.data.minKey();
        };
        SortedSet2.prototype.last = function() {
          return this.data.maxKey();
        };
        Object.defineProperty(SortedSet2.prototype, "size", {
          get: function() {
            return this.data.size;
          },
          enumerable: false,
          configurable: true
        });
        SortedSet2.prototype.indexOf = function(elem) {
          return this.data.indexOf(elem);
        };
        SortedSet2.prototype.forEach = function(cb) {
          this.data.inorderTraversal(function(k, v) {
            cb(k);
            return false;
          });
        };
        SortedSet2.prototype.forEachInRange = function(range, cb) {
          var iter = this.data.getIteratorFrom(range[0]);
          while (iter.hasNext()) {
            var elem = iter.getNext();
            if (this.comparator(elem.key, range[1]) >= 0) {
              return;
            }
            cb(elem.key);
          }
        };
        SortedSet2.prototype.forEachWhile = function(cb, start) {
          var iter;
          if (start !== void 0) {
            iter = this.data.getIteratorFrom(start);
          } else {
            iter = this.data.getIterator();
          }
          while (iter.hasNext()) {
            var elem = iter.getNext();
            var result = cb(elem.key);
            if (!result) {
              return;
            }
          }
        };
        SortedSet2.prototype.firstAfterOrEqual = function(elem) {
          var iter = this.data.getIteratorFrom(elem);
          return iter.hasNext() ? iter.getNext().key : null;
        };
        SortedSet2.prototype.getIterator = function() {
          return new SortedSetIterator(this.data.getIterator());
        };
        SortedSet2.prototype.getIteratorFrom = function(key) {
          return new SortedSetIterator(this.data.getIteratorFrom(key));
        };
        SortedSet2.prototype.add = function(elem) {
          return this.copy(this.data.remove(elem).insert(elem, true));
        };
        SortedSet2.prototype.delete = function(elem) {
          if (!this.has(elem)) {
            return this;
          }
          return this.copy(this.data.remove(elem));
        };
        SortedSet2.prototype.isEmpty = function() {
          return this.data.isEmpty();
        };
        SortedSet2.prototype.unionWith = function(other) {
          var result = this;
          if (result.size < other.size) {
            result = other;
            other = this;
          }
          other.forEach(function(elem) {
            result = result.add(elem);
          });
          return result;
        };
        SortedSet2.prototype.isEqual = function(other) {
          if (!(other instanceof SortedSet2)) {
            return false;
          }
          if (this.size !== other.size) {
            return false;
          }
          var thisIt = this.data.getIterator();
          var otherIt = other.data.getIterator();
          while (thisIt.hasNext()) {
            var thisElem = thisIt.getNext().key;
            var otherElem = otherIt.getNext().key;
            if (this.comparator(thisElem, otherElem) !== 0) {
              return false;
            }
          }
          return true;
        };
        SortedSet2.prototype.toArray = function() {
          var res = [];
          this.forEach(function(targetId) {
            res.push(targetId);
          });
          return res;
        };
        SortedSet2.prototype.toString = function() {
          var result = [];
          this.forEach(function(elem) {
            return result.push(elem);
          });
          return "SortedSet(" + result.toString() + ")";
        };
        SortedSet2.prototype.copy = function(data) {
          var result = new SortedSet2(this.comparator);
          result.data = data;
          return result;
        };
        return SortedSet2;
      }();
      var SortedSetIterator = function() {
        function SortedSetIterator2(iter) {
          this.iter = iter;
        }
        SortedSetIterator2.prototype.getNext = function() {
          return this.iter.getNext().key;
        };
        SortedSetIterator2.prototype.hasNext = function() {
          return this.iter.hasNext();
        };
        return SortedSetIterator2;
      }();
      var EMPTY_MUTABLE_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);
      function mutableDocumentMap() {
        return EMPTY_MUTABLE_DOCUMENT_MAP;
      }
      var EMPTY_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);
      function documentMap() {
        return EMPTY_DOCUMENT_MAP;
      }
      var EMPTY_DOCUMENT_VERSION_MAP = new SortedMap(DocumentKey.comparator);
      function documentVersionMap() {
        return EMPTY_DOCUMENT_VERSION_MAP;
      }
      var EMPTY_DOCUMENT_KEY_SET = new SortedSet(DocumentKey.comparator);
      function documentKeySet() {
        var keys = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          keys[_i] = arguments[_i];
        }
        var set = EMPTY_DOCUMENT_KEY_SET;
        for (var _d = 0, keys_1 = keys; _d < keys_1.length; _d++) {
          var key = keys_1[_d];
          set = set.add(key);
        }
        return set;
      }
      var EMPTY_TARGET_ID_SET = new SortedSet(primitiveComparator);
      function targetIdSet() {
        return EMPTY_TARGET_ID_SET;
      }
      function toDouble(serializer, value) {
        if (serializer.useProto3Json) {
          if (isNaN(value)) {
            return {doubleValue: "NaN"};
          } else if (value === Infinity) {
            return {doubleValue: "Infinity"};
          } else if (value === -Infinity) {
            return {doubleValue: "-Infinity"};
          }
        }
        return {doubleValue: isNegativeZero(value) ? "-0" : value};
      }
      function toInteger(value) {
        return {integerValue: "" + value};
      }
      function toNumber(serializer, value) {
        return isSafeInteger(value) ? toInteger(value) : toDouble(serializer, value);
      }
      var TransformOperation = function() {
        function TransformOperation2() {
          this._ = void 0;
        }
        return TransformOperation2;
      }();
      function applyTransformOperationToLocalView(transform, previousValue, localWriteTime) {
        if (transform instanceof ServerTimestampTransform) {
          return serverTimestamp(localWriteTime, previousValue);
        } else if (transform instanceof ArrayUnionTransformOperation) {
          return applyArrayUnionTransformOperation(transform, previousValue);
        } else if (transform instanceof ArrayRemoveTransformOperation) {
          return applyArrayRemoveTransformOperation(transform, previousValue);
        } else {
          return applyNumericIncrementTransformOperationToLocalView(transform, previousValue);
        }
      }
      function applyTransformOperationToRemoteDocument(transform, previousValue, transformResult) {
        if (transform instanceof ArrayUnionTransformOperation) {
          return applyArrayUnionTransformOperation(transform, previousValue);
        } else if (transform instanceof ArrayRemoveTransformOperation) {
          return applyArrayRemoveTransformOperation(transform, previousValue);
        }
        return transformResult;
      }
      function computeTransformOperationBaseValue(transform, previousValue) {
        if (transform instanceof NumericIncrementTransformOperation) {
          return isNumber(previousValue) ? previousValue : {integerValue: 0};
        }
        return null;
      }
      function transformOperationEquals(left, right) {
        if (left instanceof ArrayUnionTransformOperation && right instanceof ArrayUnionTransformOperation) {
          return arrayEquals(left.elements, right.elements, valueEquals);
        } else if (left instanceof ArrayRemoveTransformOperation && right instanceof ArrayRemoveTransformOperation) {
          return arrayEquals(left.elements, right.elements, valueEquals);
        } else if (left instanceof NumericIncrementTransformOperation && right instanceof NumericIncrementTransformOperation) {
          return valueEquals(left.operand, right.operand);
        }
        return left instanceof ServerTimestampTransform && right instanceof ServerTimestampTransform;
      }
      var ServerTimestampTransform = function(_super) {
        tslib.__extends(ServerTimestampTransform2, _super);
        function ServerTimestampTransform2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        return ServerTimestampTransform2;
      }(TransformOperation);
      var ArrayUnionTransformOperation = function(_super) {
        tslib.__extends(ArrayUnionTransformOperation2, _super);
        function ArrayUnionTransformOperation2(elements) {
          var _this = _super.call(this) || this;
          _this.elements = elements;
          return _this;
        }
        return ArrayUnionTransformOperation2;
      }(TransformOperation);
      function applyArrayUnionTransformOperation(transform, previousValue) {
        var values = coercedFieldValuesArray(previousValue);
        var _loop_3 = function(toUnion2) {
          if (!values.some(function(element) {
            return valueEquals(element, toUnion2);
          })) {
            values.push(toUnion2);
          }
        };
        for (var _i = 0, _d = transform.elements; _i < _d.length; _i++) {
          var toUnion = _d[_i];
          _loop_3(toUnion);
        }
        return {arrayValue: {values}};
      }
      var ArrayRemoveTransformOperation = function(_super) {
        tslib.__extends(ArrayRemoveTransformOperation2, _super);
        function ArrayRemoveTransformOperation2(elements) {
          var _this = _super.call(this) || this;
          _this.elements = elements;
          return _this;
        }
        return ArrayRemoveTransformOperation2;
      }(TransformOperation);
      function applyArrayRemoveTransformOperation(transform, previousValue) {
        var values = coercedFieldValuesArray(previousValue);
        var _loop_4 = function(toRemove2) {
          values = values.filter(function(element) {
            return !valueEquals(element, toRemove2);
          });
        };
        for (var _i = 0, _d = transform.elements; _i < _d.length; _i++) {
          var toRemove = _d[_i];
          _loop_4(toRemove);
        }
        return {arrayValue: {values}};
      }
      var NumericIncrementTransformOperation = function(_super) {
        tslib.__extends(NumericIncrementTransformOperation2, _super);
        function NumericIncrementTransformOperation2(serializer, operand) {
          var _this = _super.call(this) || this;
          _this.serializer = serializer;
          _this.operand = operand;
          return _this;
        }
        return NumericIncrementTransformOperation2;
      }(TransformOperation);
      function applyNumericIncrementTransformOperationToLocalView(transform, previousValue) {
        var baseValue = computeTransformOperationBaseValue(transform, previousValue);
        var sum = asNumber(baseValue) + asNumber(transform.operand);
        if (isInteger(baseValue) && isInteger(transform.operand)) {
          return toInteger(sum);
        } else {
          return toDouble(transform.serializer, sum);
        }
      }
      function asNumber(value) {
        return normalizeNumber(value.integerValue || value.doubleValue);
      }
      function coercedFieldValuesArray(value) {
        return isArray(value) && value.arrayValue.values ? value.arrayValue.values.slice() : [];
      }
      var FieldTransform = function() {
        function FieldTransform2(field, transform) {
          this.field = field;
          this.transform = transform;
        }
        return FieldTransform2;
      }();
      function fieldTransformEquals(left, right) {
        return left.field.isEqual(right.field) && transformOperationEquals(left.transform, right.transform);
      }
      function fieldTransformsAreEqual(left, right) {
        if (left === void 0 && right === void 0) {
          return true;
        }
        if (left && right) {
          return arrayEquals(left, right, function(l, r) {
            return fieldTransformEquals(l, r);
          });
        }
        return false;
      }
      var MutationResult = function() {
        function MutationResult2(version2, transformResults) {
          this.version = version2;
          this.transformResults = transformResults;
        }
        return MutationResult2;
      }();
      var Precondition = function() {
        function Precondition2(updateTime, exists) {
          this.updateTime = updateTime;
          this.exists = exists;
        }
        Precondition2.none = function() {
          return new Precondition2();
        };
        Precondition2.exists = function(exists) {
          return new Precondition2(void 0, exists);
        };
        Precondition2.updateTime = function(version2) {
          return new Precondition2(version2);
        };
        Object.defineProperty(Precondition2.prototype, "isNone", {
          get: function() {
            return this.updateTime === void 0 && this.exists === void 0;
          },
          enumerable: false,
          configurable: true
        });
        Precondition2.prototype.isEqual = function(other) {
          return this.exists === other.exists && (this.updateTime ? !!other.updateTime && this.updateTime.isEqual(other.updateTime) : !other.updateTime);
        };
        return Precondition2;
      }();
      function preconditionIsValidForDocument(precondition, document2) {
        if (precondition.updateTime !== void 0) {
          return document2.isFoundDocument() && document2.version.isEqual(precondition.updateTime);
        } else if (precondition.exists !== void 0) {
          return precondition.exists === document2.isFoundDocument();
        } else {
          return true;
        }
      }
      var Mutation = function() {
        function Mutation2() {
        }
        return Mutation2;
      }();
      function applyMutationToRemoteDocument(mutation, document2, mutationResult) {
        if (mutation instanceof SetMutation) {
          applySetMutationToRemoteDocument(mutation, document2, mutationResult);
        } else if (mutation instanceof PatchMutation) {
          applyPatchMutationToRemoteDocument(mutation, document2, mutationResult);
        } else {
          applyDeleteMutationToRemoteDocument(mutation, document2, mutationResult);
        }
      }
      function applyMutationToLocalView(mutation, document2, localWriteTime) {
        if (mutation instanceof SetMutation) {
          applySetMutationToLocalView(mutation, document2, localWriteTime);
        } else if (mutation instanceof PatchMutation) {
          applyPatchMutationToLocalView(mutation, document2, localWriteTime);
        } else {
          applyDeleteMutationToLocalView(mutation, document2);
        }
      }
      function extractMutationBaseValue(mutation, document2) {
        var baseObject = null;
        for (var _i = 0, _d = mutation.fieldTransforms; _i < _d.length; _i++) {
          var fieldTransform = _d[_i];
          var existingValue = document2.data.field(fieldTransform.field);
          var coercedValue = computeTransformOperationBaseValue(fieldTransform.transform, existingValue || null);
          if (coercedValue != null) {
            if (baseObject == null) {
              baseObject = ObjectValue.empty();
            }
            baseObject.set(fieldTransform.field, coercedValue);
          }
        }
        return baseObject ? baseObject : null;
      }
      function mutationEquals(left, right) {
        if (left.type !== right.type) {
          return false;
        }
        if (!left.key.isEqual(right.key)) {
          return false;
        }
        if (!left.precondition.isEqual(right.precondition)) {
          return false;
        }
        if (!fieldTransformsAreEqual(left.fieldTransforms, right.fieldTransforms)) {
          return false;
        }
        if (left.type === 0) {
          return left.value.isEqual(right.value);
        }
        if (left.type === 1) {
          return left.data.isEqual(right.data) && left.fieldMask.isEqual(right.fieldMask);
        }
        return true;
      }
      function getPostMutationVersion(document2) {
        return document2.isFoundDocument() ? document2.version : SnapshotVersion.min();
      }
      var SetMutation = function(_super) {
        tslib.__extends(SetMutation2, _super);
        function SetMutation2(key, value, precondition, fieldTransforms) {
          if (fieldTransforms === void 0) {
            fieldTransforms = [];
          }
          var _this = _super.call(this) || this;
          _this.key = key;
          _this.value = value;
          _this.precondition = precondition;
          _this.fieldTransforms = fieldTransforms;
          _this.type = 0;
          return _this;
        }
        return SetMutation2;
      }(Mutation);
      function applySetMutationToRemoteDocument(mutation, document2, mutationResult) {
        var newData = mutation.value.clone();
        var transformResults = serverTransformResults(mutation.fieldTransforms, document2, mutationResult.transformResults);
        newData.setAll(transformResults);
        document2.convertToFoundDocument(mutationResult.version, newData).setHasCommittedMutations();
      }
      function applySetMutationToLocalView(mutation, document2, localWriteTime) {
        if (!preconditionIsValidForDocument(mutation.precondition, document2)) {
          return;
        }
        var newData = mutation.value.clone();
        var transformResults = localTransformResults(mutation.fieldTransforms, localWriteTime, document2);
        newData.setAll(transformResults);
        document2.convertToFoundDocument(getPostMutationVersion(document2), newData).setHasLocalMutations();
      }
      var PatchMutation = function(_super) {
        tslib.__extends(PatchMutation2, _super);
        function PatchMutation2(key, data, fieldMask, precondition, fieldTransforms) {
          if (fieldTransforms === void 0) {
            fieldTransforms = [];
          }
          var _this = _super.call(this) || this;
          _this.key = key;
          _this.data = data;
          _this.fieldMask = fieldMask;
          _this.precondition = precondition;
          _this.fieldTransforms = fieldTransforms;
          _this.type = 1;
          return _this;
        }
        return PatchMutation2;
      }(Mutation);
      function applyPatchMutationToRemoteDocument(mutation, document2, mutationResult) {
        if (!preconditionIsValidForDocument(mutation.precondition, document2)) {
          document2.convertToUnknownDocument(mutationResult.version);
          return;
        }
        var transformResults = serverTransformResults(mutation.fieldTransforms, document2, mutationResult.transformResults);
        var newData = document2.data;
        newData.setAll(getPatch(mutation));
        newData.setAll(transformResults);
        document2.convertToFoundDocument(mutationResult.version, newData).setHasCommittedMutations();
      }
      function applyPatchMutationToLocalView(mutation, document2, localWriteTime) {
        if (!preconditionIsValidForDocument(mutation.precondition, document2)) {
          return;
        }
        var transformResults = localTransformResults(mutation.fieldTransforms, localWriteTime, document2);
        var newData = document2.data;
        newData.setAll(getPatch(mutation));
        newData.setAll(transformResults);
        document2.convertToFoundDocument(getPostMutationVersion(document2), newData).setHasLocalMutations();
      }
      function getPatch(mutation) {
        var result = new Map();
        mutation.fieldMask.fields.forEach(function(fieldPath) {
          if (!fieldPath.isEmpty()) {
            var newValue = mutation.data.field(fieldPath);
            result.set(fieldPath, newValue);
          }
        });
        return result;
      }
      function serverTransformResults(fieldTransforms, mutableDocument, serverTransformResults2) {
        var transformResults = new Map();
        hardAssert(fieldTransforms.length === serverTransformResults2.length);
        for (var i = 0; i < serverTransformResults2.length; i++) {
          var fieldTransform = fieldTransforms[i];
          var transform = fieldTransform.transform;
          var previousValue = mutableDocument.data.field(fieldTransform.field);
          transformResults.set(fieldTransform.field, applyTransformOperationToRemoteDocument(transform, previousValue, serverTransformResults2[i]));
        }
        return transformResults;
      }
      function localTransformResults(fieldTransforms, localWriteTime, mutableDocument) {
        var transformResults = new Map();
        for (var _i = 0, fieldTransforms_1 = fieldTransforms; _i < fieldTransforms_1.length; _i++) {
          var fieldTransform = fieldTransforms_1[_i];
          var transform = fieldTransform.transform;
          var previousValue = mutableDocument.data.field(fieldTransform.field);
          transformResults.set(fieldTransform.field, applyTransformOperationToLocalView(transform, previousValue, localWriteTime));
        }
        return transformResults;
      }
      var DeleteMutation = function(_super) {
        tslib.__extends(DeleteMutation2, _super);
        function DeleteMutation2(key, precondition) {
          var _this = _super.call(this) || this;
          _this.key = key;
          _this.precondition = precondition;
          _this.type = 2;
          _this.fieldTransforms = [];
          return _this;
        }
        return DeleteMutation2;
      }(Mutation);
      function applyDeleteMutationToRemoteDocument(mutation, document2, mutationResult) {
        document2.convertToNoDocument(mutationResult.version).setHasCommittedMutations();
      }
      function applyDeleteMutationToLocalView(mutation, document2) {
        if (preconditionIsValidForDocument(mutation.precondition, document2)) {
          document2.convertToNoDocument(SnapshotVersion.min());
        }
      }
      var VerifyMutation = function(_super) {
        tslib.__extends(VerifyMutation2, _super);
        function VerifyMutation2(key, precondition) {
          var _this = _super.call(this) || this;
          _this.key = key;
          _this.precondition = precondition;
          _this.type = 3;
          _this.fieldTransforms = [];
          return _this;
        }
        return VerifyMutation2;
      }(Mutation);
      var MutationBatch = function() {
        function MutationBatch2(batchId, localWriteTime, baseMutations, mutations) {
          this.batchId = batchId;
          this.localWriteTime = localWriteTime;
          this.baseMutations = baseMutations;
          this.mutations = mutations;
        }
        MutationBatch2.prototype.applyToRemoteDocument = function(document2, batchResult) {
          var mutationResults = batchResult.mutationResults;
          for (var i = 0; i < this.mutations.length; i++) {
            var mutation = this.mutations[i];
            if (mutation.key.isEqual(document2.key)) {
              var mutationResult = mutationResults[i];
              applyMutationToRemoteDocument(mutation, document2, mutationResult);
            }
          }
        };
        MutationBatch2.prototype.applyToLocalView = function(document2) {
          for (var _i = 0, _d = this.baseMutations; _i < _d.length; _i++) {
            var mutation = _d[_i];
            if (mutation.key.isEqual(document2.key)) {
              applyMutationToLocalView(mutation, document2, this.localWriteTime);
            }
          }
          for (var _e = 0, _f = this.mutations; _e < _f.length; _e++) {
            var mutation = _f[_e];
            if (mutation.key.isEqual(document2.key)) {
              applyMutationToLocalView(mutation, document2, this.localWriteTime);
            }
          }
        };
        MutationBatch2.prototype.applyToLocalDocumentSet = function(documentMap2) {
          var _this = this;
          this.mutations.forEach(function(m) {
            var document2 = documentMap2.get(m.key);
            var mutableDocument = document2;
            _this.applyToLocalView(mutableDocument);
            if (!document2.isValidDocument()) {
              mutableDocument.convertToNoDocument(SnapshotVersion.min());
            }
          });
        };
        MutationBatch2.prototype.keys = function() {
          return this.mutations.reduce(function(keys, m) {
            return keys.add(m.key);
          }, documentKeySet());
        };
        MutationBatch2.prototype.isEqual = function(other) {
          return this.batchId === other.batchId && arrayEquals(this.mutations, other.mutations, function(l, r) {
            return mutationEquals(l, r);
          }) && arrayEquals(this.baseMutations, other.baseMutations, function(l, r) {
            return mutationEquals(l, r);
          });
        };
        return MutationBatch2;
      }();
      var MutationBatchResult = function() {
        function MutationBatchResult2(batch, commitVersion, mutationResults, docVersions) {
          this.batch = batch;
          this.commitVersion = commitVersion;
          this.mutationResults = mutationResults;
          this.docVersions = docVersions;
        }
        MutationBatchResult2.from = function(batch, commitVersion, results) {
          hardAssert(batch.mutations.length === results.length);
          var versionMap = documentVersionMap();
          var mutations = batch.mutations;
          for (var i = 0; i < mutations.length; i++) {
            versionMap = versionMap.insert(mutations[i].key, results[i].version);
          }
          return new MutationBatchResult2(batch, commitVersion, results, versionMap);
        };
        return MutationBatchResult2;
      }();
      var ExistenceFilter = function() {
        function ExistenceFilter2(count) {
          this.count = count;
        }
        return ExistenceFilter2;
      }();
      var RpcCode;
      (function(RpcCode2) {
        RpcCode2[RpcCode2["OK"] = 0] = "OK";
        RpcCode2[RpcCode2["CANCELLED"] = 1] = "CANCELLED";
        RpcCode2[RpcCode2["UNKNOWN"] = 2] = "UNKNOWN";
        RpcCode2[RpcCode2["INVALID_ARGUMENT"] = 3] = "INVALID_ARGUMENT";
        RpcCode2[RpcCode2["DEADLINE_EXCEEDED"] = 4] = "DEADLINE_EXCEEDED";
        RpcCode2[RpcCode2["NOT_FOUND"] = 5] = "NOT_FOUND";
        RpcCode2[RpcCode2["ALREADY_EXISTS"] = 6] = "ALREADY_EXISTS";
        RpcCode2[RpcCode2["PERMISSION_DENIED"] = 7] = "PERMISSION_DENIED";
        RpcCode2[RpcCode2["UNAUTHENTICATED"] = 16] = "UNAUTHENTICATED";
        RpcCode2[RpcCode2["RESOURCE_EXHAUSTED"] = 8] = "RESOURCE_EXHAUSTED";
        RpcCode2[RpcCode2["FAILED_PRECONDITION"] = 9] = "FAILED_PRECONDITION";
        RpcCode2[RpcCode2["ABORTED"] = 10] = "ABORTED";
        RpcCode2[RpcCode2["OUT_OF_RANGE"] = 11] = "OUT_OF_RANGE";
        RpcCode2[RpcCode2["UNIMPLEMENTED"] = 12] = "UNIMPLEMENTED";
        RpcCode2[RpcCode2["INTERNAL"] = 13] = "INTERNAL";
        RpcCode2[RpcCode2["UNAVAILABLE"] = 14] = "UNAVAILABLE";
        RpcCode2[RpcCode2["DATA_LOSS"] = 15] = "DATA_LOSS";
      })(RpcCode || (RpcCode = {}));
      function isPermanentError(code) {
        switch (code) {
          case Code.OK:
            return fail();
          case Code.CANCELLED:
          case Code.UNKNOWN:
          case Code.DEADLINE_EXCEEDED:
          case Code.RESOURCE_EXHAUSTED:
          case Code.INTERNAL:
          case Code.UNAVAILABLE:
          case Code.UNAUTHENTICATED:
            return false;
          case Code.INVALID_ARGUMENT:
          case Code.NOT_FOUND:
          case Code.ALREADY_EXISTS:
          case Code.PERMISSION_DENIED:
          case Code.FAILED_PRECONDITION:
          case Code.ABORTED:
          case Code.OUT_OF_RANGE:
          case Code.UNIMPLEMENTED:
          case Code.DATA_LOSS:
            return true;
          default:
            return fail();
        }
      }
      function isPermanentWriteError(code) {
        return isPermanentError(code) && code !== Code.ABORTED;
      }
      function mapCodeFromRpcCode(code) {
        if (code === void 0) {
          logError("GRPC error has no .code");
          return Code.UNKNOWN;
        }
        switch (code) {
          case RpcCode.OK:
            return Code.OK;
          case RpcCode.CANCELLED:
            return Code.CANCELLED;
          case RpcCode.UNKNOWN:
            return Code.UNKNOWN;
          case RpcCode.DEADLINE_EXCEEDED:
            return Code.DEADLINE_EXCEEDED;
          case RpcCode.RESOURCE_EXHAUSTED:
            return Code.RESOURCE_EXHAUSTED;
          case RpcCode.INTERNAL:
            return Code.INTERNAL;
          case RpcCode.UNAVAILABLE:
            return Code.UNAVAILABLE;
          case RpcCode.UNAUTHENTICATED:
            return Code.UNAUTHENTICATED;
          case RpcCode.INVALID_ARGUMENT:
            return Code.INVALID_ARGUMENT;
          case RpcCode.NOT_FOUND:
            return Code.NOT_FOUND;
          case RpcCode.ALREADY_EXISTS:
            return Code.ALREADY_EXISTS;
          case RpcCode.PERMISSION_DENIED:
            return Code.PERMISSION_DENIED;
          case RpcCode.FAILED_PRECONDITION:
            return Code.FAILED_PRECONDITION;
          case RpcCode.ABORTED:
            return Code.ABORTED;
          case RpcCode.OUT_OF_RANGE:
            return Code.OUT_OF_RANGE;
          case RpcCode.UNIMPLEMENTED:
            return Code.UNIMPLEMENTED;
          case RpcCode.DATA_LOSS:
            return Code.DATA_LOSS;
          default:
            return fail();
        }
      }
      var RemoteEvent = function() {
        function RemoteEvent2(snapshotVersion, targetChanges, targetMismatches, documentUpdates, resolvedLimboDocuments) {
          this.snapshotVersion = snapshotVersion;
          this.targetChanges = targetChanges;
          this.targetMismatches = targetMismatches;
          this.documentUpdates = documentUpdates;
          this.resolvedLimboDocuments = resolvedLimboDocuments;
        }
        RemoteEvent2.createSynthesizedRemoteEventForCurrentChange = function(targetId, current) {
          var targetChanges = new Map();
          targetChanges.set(targetId, TargetChange.createSynthesizedTargetChangeForCurrentChange(targetId, current));
          return new RemoteEvent2(SnapshotVersion.min(), targetChanges, targetIdSet(), mutableDocumentMap(), documentKeySet());
        };
        return RemoteEvent2;
      }();
      var TargetChange = function() {
        function TargetChange2(resumeToken, current, addedDocuments, modifiedDocuments, removedDocuments) {
          this.resumeToken = resumeToken;
          this.current = current;
          this.addedDocuments = addedDocuments;
          this.modifiedDocuments = modifiedDocuments;
          this.removedDocuments = removedDocuments;
        }
        TargetChange2.createSynthesizedTargetChangeForCurrentChange = function(targetId, current) {
          return new TargetChange2(ByteString.EMPTY_BYTE_STRING, current, documentKeySet(), documentKeySet(), documentKeySet());
        };
        return TargetChange2;
      }();
      var DocumentWatchChange = function() {
        function DocumentWatchChange2(updatedTargetIds, removedTargetIds, key, newDoc) {
          this.updatedTargetIds = updatedTargetIds;
          this.removedTargetIds = removedTargetIds;
          this.key = key;
          this.newDoc = newDoc;
        }
        return DocumentWatchChange2;
      }();
      var ExistenceFilterChange = function() {
        function ExistenceFilterChange2(targetId, existenceFilter) {
          this.targetId = targetId;
          this.existenceFilter = existenceFilter;
        }
        return ExistenceFilterChange2;
      }();
      var WatchTargetChange = function() {
        function WatchTargetChange2(state, targetIds, resumeToken, cause) {
          if (resumeToken === void 0) {
            resumeToken = ByteString.EMPTY_BYTE_STRING;
          }
          if (cause === void 0) {
            cause = null;
          }
          this.state = state;
          this.targetIds = targetIds;
          this.resumeToken = resumeToken;
          this.cause = cause;
        }
        return WatchTargetChange2;
      }();
      var TargetState = function() {
        function TargetState2() {
          this.pendingResponses = 0;
          this.documentChanges = snapshotChangesMap();
          this._resumeToken = ByteString.EMPTY_BYTE_STRING;
          this._current = false;
          this._hasPendingChanges = true;
        }
        Object.defineProperty(TargetState2.prototype, "current", {
          get: function() {
            return this._current;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(TargetState2.prototype, "resumeToken", {
          get: function() {
            return this._resumeToken;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(TargetState2.prototype, "isPending", {
          get: function() {
            return this.pendingResponses !== 0;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(TargetState2.prototype, "hasPendingChanges", {
          get: function() {
            return this._hasPendingChanges;
          },
          enumerable: false,
          configurable: true
        });
        TargetState2.prototype.updateResumeToken = function(resumeToken) {
          if (resumeToken.approximateByteSize() > 0) {
            this._hasPendingChanges = true;
            this._resumeToken = resumeToken;
          }
        };
        TargetState2.prototype.toTargetChange = function() {
          var addedDocuments = documentKeySet();
          var modifiedDocuments = documentKeySet();
          var removedDocuments = documentKeySet();
          this.documentChanges.forEach(function(key, changeType) {
            switch (changeType) {
              case 0:
                addedDocuments = addedDocuments.add(key);
                break;
              case 2:
                modifiedDocuments = modifiedDocuments.add(key);
                break;
              case 1:
                removedDocuments = removedDocuments.add(key);
                break;
              default:
                fail();
            }
          });
          return new TargetChange(this._resumeToken, this._current, addedDocuments, modifiedDocuments, removedDocuments);
        };
        TargetState2.prototype.clearPendingChanges = function() {
          this._hasPendingChanges = false;
          this.documentChanges = snapshotChangesMap();
        };
        TargetState2.prototype.addDocumentChange = function(key, changeType) {
          this._hasPendingChanges = true;
          this.documentChanges = this.documentChanges.insert(key, changeType);
        };
        TargetState2.prototype.removeDocumentChange = function(key) {
          this._hasPendingChanges = true;
          this.documentChanges = this.documentChanges.remove(key);
        };
        TargetState2.prototype.recordPendingTargetRequest = function() {
          this.pendingResponses += 1;
        };
        TargetState2.prototype.recordTargetResponse = function() {
          this.pendingResponses -= 1;
        };
        TargetState2.prototype.markCurrent = function() {
          this._hasPendingChanges = true;
          this._current = true;
        };
        return TargetState2;
      }();
      var LOG_TAG$1 = "WatchChangeAggregator";
      var WatchChangeAggregator = function() {
        function WatchChangeAggregator2(metadataProvider) {
          this.metadataProvider = metadataProvider;
          this.targetStates = new Map();
          this.pendingDocumentUpdates = mutableDocumentMap();
          this.pendingDocumentTargetMapping = documentTargetMap();
          this.pendingTargetResets = new SortedSet(primitiveComparator);
        }
        WatchChangeAggregator2.prototype.handleDocumentChange = function(docChange) {
          for (var _i = 0, _d = docChange.updatedTargetIds; _i < _d.length; _i++) {
            var targetId = _d[_i];
            if (docChange.newDoc && docChange.newDoc.isFoundDocument()) {
              this.addDocumentToTarget(targetId, docChange.newDoc);
            } else {
              this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);
            }
          }
          for (var _e = 0, _f = docChange.removedTargetIds; _e < _f.length; _e++) {
            var targetId = _f[_e];
            this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);
          }
        };
        WatchChangeAggregator2.prototype.handleTargetChange = function(targetChange) {
          var _this = this;
          this.forEachTarget(targetChange, function(targetId) {
            var targetState = _this.ensureTargetState(targetId);
            switch (targetChange.state) {
              case 0:
                if (_this.isActiveTarget(targetId)) {
                  targetState.updateResumeToken(targetChange.resumeToken);
                }
                break;
              case 1:
                targetState.recordTargetResponse();
                if (!targetState.isPending) {
                  targetState.clearPendingChanges();
                }
                targetState.updateResumeToken(targetChange.resumeToken);
                break;
              case 2:
                targetState.recordTargetResponse();
                if (!targetState.isPending) {
                  _this.removeTarget(targetId);
                }
                break;
              case 3:
                if (_this.isActiveTarget(targetId)) {
                  targetState.markCurrent();
                  targetState.updateResumeToken(targetChange.resumeToken);
                }
                break;
              case 4:
                if (_this.isActiveTarget(targetId)) {
                  _this.resetTarget(targetId);
                  targetState.updateResumeToken(targetChange.resumeToken);
                }
                break;
              default:
                fail();
            }
          });
        };
        WatchChangeAggregator2.prototype.forEachTarget = function(targetChange, fn) {
          var _this = this;
          if (targetChange.targetIds.length > 0) {
            targetChange.targetIds.forEach(fn);
          } else {
            this.targetStates.forEach(function(_, targetId) {
              if (_this.isActiveTarget(targetId)) {
                fn(targetId);
              }
            });
          }
        };
        WatchChangeAggregator2.prototype.handleExistenceFilter = function(watchChange) {
          var targetId = watchChange.targetId;
          var expectedCount = watchChange.existenceFilter.count;
          var targetData = this.targetDataForActiveTarget(targetId);
          if (targetData) {
            var target = targetData.target;
            if (isDocumentTarget(target)) {
              if (expectedCount === 0) {
                var key = new DocumentKey(target.path);
                this.removeDocumentFromTarget(targetId, key, MutableDocument.newNoDocument(key, SnapshotVersion.min()));
              } else {
                hardAssert(expectedCount === 1);
              }
            } else {
              var currentSize = this.getCurrentDocumentCountForTarget(targetId);
              if (currentSize !== expectedCount) {
                this.resetTarget(targetId);
                this.pendingTargetResets = this.pendingTargetResets.add(targetId);
              }
            }
          }
        };
        WatchChangeAggregator2.prototype.createRemoteEvent = function(snapshotVersion) {
          var _this = this;
          var targetChanges = new Map();
          this.targetStates.forEach(function(targetState, targetId) {
            var targetData = _this.targetDataForActiveTarget(targetId);
            if (targetData) {
              if (targetState.current && isDocumentTarget(targetData.target)) {
                var key = new DocumentKey(targetData.target.path);
                if (_this.pendingDocumentUpdates.get(key) === null && !_this.targetContainsDocument(targetId, key)) {
                  _this.removeDocumentFromTarget(targetId, key, MutableDocument.newNoDocument(key, snapshotVersion));
                }
              }
              if (targetState.hasPendingChanges) {
                targetChanges.set(targetId, targetState.toTargetChange());
                targetState.clearPendingChanges();
              }
            }
          });
          var resolvedLimboDocuments = documentKeySet();
          this.pendingDocumentTargetMapping.forEach(function(key, targets) {
            var isOnlyLimboTarget = true;
            targets.forEachWhile(function(targetId) {
              var targetData = _this.targetDataForActiveTarget(targetId);
              if (targetData && targetData.purpose !== 2) {
                isOnlyLimboTarget = false;
                return false;
              }
              return true;
            });
            if (isOnlyLimboTarget) {
              resolvedLimboDocuments = resolvedLimboDocuments.add(key);
            }
          });
          var remoteEvent = new RemoteEvent(snapshotVersion, targetChanges, this.pendingTargetResets, this.pendingDocumentUpdates, resolvedLimboDocuments);
          this.pendingDocumentUpdates = mutableDocumentMap();
          this.pendingDocumentTargetMapping = documentTargetMap();
          this.pendingTargetResets = new SortedSet(primitiveComparator);
          return remoteEvent;
        };
        WatchChangeAggregator2.prototype.addDocumentToTarget = function(targetId, document2) {
          if (!this.isActiveTarget(targetId)) {
            return;
          }
          var changeType = this.targetContainsDocument(targetId, document2.key) ? 2 : 0;
          var targetState = this.ensureTargetState(targetId);
          targetState.addDocumentChange(document2.key, changeType);
          this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(document2.key, document2);
          this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(document2.key, this.ensureDocumentTargetMapping(document2.key).add(targetId));
        };
        WatchChangeAggregator2.prototype.removeDocumentFromTarget = function(targetId, key, updatedDocument) {
          if (!this.isActiveTarget(targetId)) {
            return;
          }
          var targetState = this.ensureTargetState(targetId);
          if (this.targetContainsDocument(targetId, key)) {
            targetState.addDocumentChange(key, 1);
          } else {
            targetState.removeDocumentChange(key);
          }
          this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(key, this.ensureDocumentTargetMapping(key).delete(targetId));
          if (updatedDocument) {
            this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(key, updatedDocument);
          }
        };
        WatchChangeAggregator2.prototype.removeTarget = function(targetId) {
          this.targetStates.delete(targetId);
        };
        WatchChangeAggregator2.prototype.getCurrentDocumentCountForTarget = function(targetId) {
          var targetState = this.ensureTargetState(targetId);
          var targetChange = targetState.toTargetChange();
          return this.metadataProvider.getRemoteKeysForTarget(targetId).size + targetChange.addedDocuments.size - targetChange.removedDocuments.size;
        };
        WatchChangeAggregator2.prototype.recordPendingTargetRequest = function(targetId) {
          var targetState = this.ensureTargetState(targetId);
          targetState.recordPendingTargetRequest();
        };
        WatchChangeAggregator2.prototype.ensureTargetState = function(targetId) {
          var result = this.targetStates.get(targetId);
          if (!result) {
            result = new TargetState();
            this.targetStates.set(targetId, result);
          }
          return result;
        };
        WatchChangeAggregator2.prototype.ensureDocumentTargetMapping = function(key) {
          var targetMapping = this.pendingDocumentTargetMapping.get(key);
          if (!targetMapping) {
            targetMapping = new SortedSet(primitiveComparator);
            this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(key, targetMapping);
          }
          return targetMapping;
        };
        WatchChangeAggregator2.prototype.isActiveTarget = function(targetId) {
          var targetActive = this.targetDataForActiveTarget(targetId) !== null;
          if (!targetActive) {
            logDebug(LOG_TAG$1, "Detected inactive target", targetId);
          }
          return targetActive;
        };
        WatchChangeAggregator2.prototype.targetDataForActiveTarget = function(targetId) {
          var targetState = this.targetStates.get(targetId);
          return targetState && targetState.isPending ? null : this.metadataProvider.getTargetDataForTarget(targetId);
        };
        WatchChangeAggregator2.prototype.resetTarget = function(targetId) {
          var _this = this;
          this.targetStates.set(targetId, new TargetState());
          var existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);
          existingKeys.forEach(function(key) {
            _this.removeDocumentFromTarget(targetId, key, null);
          });
        };
        WatchChangeAggregator2.prototype.targetContainsDocument = function(targetId, key) {
          var existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);
          return existingKeys.has(key);
        };
        return WatchChangeAggregator2;
      }();
      function documentTargetMap() {
        return new SortedMap(DocumentKey.comparator);
      }
      function snapshotChangesMap() {
        return new SortedMap(DocumentKey.comparator);
      }
      var DIRECTIONS = function() {
        var dirs = {};
        dirs["asc"] = "ASCENDING";
        dirs["desc"] = "DESCENDING";
        return dirs;
      }();
      var OPERATORS = function() {
        var ops = {};
        ops["<"] = "LESS_THAN";
        ops["<="] = "LESS_THAN_OR_EQUAL";
        ops[">"] = "GREATER_THAN";
        ops[">="] = "GREATER_THAN_OR_EQUAL";
        ops["=="] = "EQUAL";
        ops["!="] = "NOT_EQUAL";
        ops["array-contains"] = "ARRAY_CONTAINS";
        ops["in"] = "IN";
        ops["not-in"] = "NOT_IN";
        ops["array-contains-any"] = "ARRAY_CONTAINS_ANY";
        return ops;
      }();
      function assertPresent(value, description) {
      }
      var JsonProtoSerializer = function() {
        function JsonProtoSerializer2(databaseId, useProto3Json) {
          this.databaseId = databaseId;
          this.useProto3Json = useProto3Json;
        }
        return JsonProtoSerializer2;
      }();
      function fromRpcStatus(status) {
        var code = status.code === void 0 ? Code.UNKNOWN : mapCodeFromRpcCode(status.code);
        return new FirestoreError(code, status.message || "");
      }
      function toInt32Proto(serializer, val) {
        if (serializer.useProto3Json || isNullOrUndefined(val)) {
          return val;
        } else {
          return {value: val};
        }
      }
      function fromInt32Proto(val) {
        var result;
        if (typeof val === "object") {
          result = val.value;
        } else {
          result = val;
        }
        return isNullOrUndefined(result) ? null : result;
      }
      function toTimestamp(serializer, timestamp) {
        if (serializer.useProto3Json) {
          var jsDateStr = new Date(timestamp.seconds * 1e3).toISOString();
          var strUntilSeconds = jsDateStr.replace(/\.\d*/, "").replace("Z", "");
          var nanoStr = ("000000000" + timestamp.nanoseconds).slice(-9);
          return strUntilSeconds + "." + nanoStr + "Z";
        } else {
          return {
            seconds: "" + timestamp.seconds,
            nanos: timestamp.nanoseconds
          };
        }
      }
      function fromTimestamp(date) {
        var timestamp = normalizeTimestamp(date);
        return new Timestamp(timestamp.seconds, timestamp.nanos);
      }
      function toBytes(serializer, bytes) {
        if (serializer.useProto3Json) {
          return bytes.toBase64();
        } else {
          return bytes.toUint8Array();
        }
      }
      function fromBytes(serializer, value) {
        if (serializer.useProto3Json) {
          hardAssert(value === void 0 || typeof value === "string");
          return ByteString.fromBase64String(value ? value : "");
        } else {
          hardAssert(value === void 0 || value instanceof Uint8Array);
          return ByteString.fromUint8Array(value ? value : new Uint8Array());
        }
      }
      function toVersion(serializer, version2) {
        return toTimestamp(serializer, version2.toTimestamp());
      }
      function fromVersion(version2) {
        hardAssert(!!version2);
        return SnapshotVersion.fromTimestamp(fromTimestamp(version2));
      }
      function toResourceName(databaseId, path2) {
        return fullyQualifiedPrefixPath(databaseId).child("documents").child(path2).canonicalString();
      }
      function fromResourceName(name2) {
        var resource = ResourcePath.fromString(name2);
        hardAssert(isValidResourceName(resource));
        return resource;
      }
      function toName(serializer, key) {
        return toResourceName(serializer.databaseId, key.path);
      }
      function fromName(serializer, name2) {
        var resource = fromResourceName(name2);
        if (resource.get(1) !== serializer.databaseId.projectId) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + resource.get(1) + " vs " + serializer.databaseId.projectId);
        }
        if (resource.get(3) !== serializer.databaseId.database) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + resource.get(3) + " vs " + serializer.databaseId.database);
        }
        return new DocumentKey(extractLocalPathFromResourceName(resource));
      }
      function toQueryPath(serializer, path2) {
        return toResourceName(serializer.databaseId, path2);
      }
      function fromQueryPath(name2) {
        var resourceName = fromResourceName(name2);
        if (resourceName.length === 4) {
          return ResourcePath.emptyPath();
        }
        return extractLocalPathFromResourceName(resourceName);
      }
      function getEncodedDatabaseId(serializer) {
        var path2 = new ResourcePath([
          "projects",
          serializer.databaseId.projectId,
          "databases",
          serializer.databaseId.database
        ]);
        return path2.canonicalString();
      }
      function fullyQualifiedPrefixPath(databaseId) {
        return new ResourcePath([
          "projects",
          databaseId.projectId,
          "databases",
          databaseId.database
        ]);
      }
      function extractLocalPathFromResourceName(resourceName) {
        hardAssert(resourceName.length > 4 && resourceName.get(4) === "documents");
        return resourceName.popFirst(5);
      }
      function toMutationDocument(serializer, key, fields) {
        return {
          name: toName(serializer, key),
          fields: fields.toProto().mapValue.fields
        };
      }
      function toDocument(serializer, document2) {
        return {
          name: toName(serializer, document2.key),
          fields: document2.data.toProto().mapValue.fields,
          updateTime: toTimestamp(serializer, document2.version.toTimestamp())
        };
      }
      function fromDocument(serializer, document2, hasCommittedMutations) {
        var key = fromName(serializer, document2.name);
        var version2 = fromVersion(document2.updateTime);
        var data = new ObjectValue({mapValue: {fields: document2.fields}});
        var result = MutableDocument.newFoundDocument(key, version2, data);
        if (hasCommittedMutations) {
          result.setHasCommittedMutations();
        }
        return hasCommittedMutations ? result.setHasCommittedMutations() : result;
      }
      function fromFound(serializer, doc2) {
        hardAssert(!!doc2.found);
        assertPresent(doc2.found.name);
        assertPresent(doc2.found.updateTime);
        var key = fromName(serializer, doc2.found.name);
        var version2 = fromVersion(doc2.found.updateTime);
        var data = new ObjectValue({mapValue: {fields: doc2.found.fields}});
        return MutableDocument.newFoundDocument(key, version2, data);
      }
      function fromMissing(serializer, result) {
        hardAssert(!!result.missing);
        hardAssert(!!result.readTime);
        var key = fromName(serializer, result.missing);
        var version2 = fromVersion(result.readTime);
        return MutableDocument.newNoDocument(key, version2);
      }
      function fromBatchGetDocumentsResponse(serializer, result) {
        if ("found" in result) {
          return fromFound(serializer, result);
        } else if ("missing" in result) {
          return fromMissing(serializer, result);
        }
        return fail();
      }
      function fromWatchChange(serializer, change) {
        var watchChange;
        if ("targetChange" in change) {
          assertPresent(change.targetChange);
          var state = fromWatchTargetChangeState(change.targetChange.targetChangeType || "NO_CHANGE");
          var targetIds = change.targetChange.targetIds || [];
          var resumeToken = fromBytes(serializer, change.targetChange.resumeToken);
          var causeProto = change.targetChange.cause;
          var cause = causeProto && fromRpcStatus(causeProto);
          watchChange = new WatchTargetChange(state, targetIds, resumeToken, cause || null);
        } else if ("documentChange" in change) {
          assertPresent(change.documentChange);
          var entityChange = change.documentChange;
          assertPresent(entityChange.document);
          assertPresent(entityChange.document.name);
          assertPresent(entityChange.document.updateTime);
          var key = fromName(serializer, entityChange.document.name);
          var version_1 = fromVersion(entityChange.document.updateTime);
          var data = new ObjectValue({
            mapValue: {fields: entityChange.document.fields}
          });
          var doc_1 = MutableDocument.newFoundDocument(key, version_1, data);
          var updatedTargetIds = entityChange.targetIds || [];
          var removedTargetIds = entityChange.removedTargetIds || [];
          watchChange = new DocumentWatchChange(updatedTargetIds, removedTargetIds, doc_1.key, doc_1);
        } else if ("documentDelete" in change) {
          assertPresent(change.documentDelete);
          var docDelete = change.documentDelete;
          assertPresent(docDelete.document);
          var key = fromName(serializer, docDelete.document);
          var version_2 = docDelete.readTime ? fromVersion(docDelete.readTime) : SnapshotVersion.min();
          var doc_2 = MutableDocument.newNoDocument(key, version_2);
          var removedTargetIds = docDelete.removedTargetIds || [];
          watchChange = new DocumentWatchChange([], removedTargetIds, doc_2.key, doc_2);
        } else if ("documentRemove" in change) {
          assertPresent(change.documentRemove);
          var docRemove = change.documentRemove;
          assertPresent(docRemove.document);
          var key = fromName(serializer, docRemove.document);
          var removedTargetIds = docRemove.removedTargetIds || [];
          watchChange = new DocumentWatchChange([], removedTargetIds, key, null);
        } else if ("filter" in change) {
          assertPresent(change.filter);
          var filter = change.filter;
          assertPresent(filter.targetId);
          var count = filter.count || 0;
          var existenceFilter = new ExistenceFilter(count);
          var targetId = filter.targetId;
          watchChange = new ExistenceFilterChange(targetId, existenceFilter);
        } else {
          return fail();
        }
        return watchChange;
      }
      function fromWatchTargetChangeState(state) {
        if (state === "NO_CHANGE") {
          return 0;
        } else if (state === "ADD") {
          return 1;
        } else if (state === "REMOVE") {
          return 2;
        } else if (state === "CURRENT") {
          return 3;
        } else if (state === "RESET") {
          return 4;
        } else {
          return fail();
        }
      }
      function versionFromListenResponse(change) {
        if (!("targetChange" in change)) {
          return SnapshotVersion.min();
        }
        var targetChange = change.targetChange;
        if (targetChange.targetIds && targetChange.targetIds.length) {
          return SnapshotVersion.min();
        }
        if (!targetChange.readTime) {
          return SnapshotVersion.min();
        }
        return fromVersion(targetChange.readTime);
      }
      function toMutation(serializer, mutation) {
        var result;
        if (mutation instanceof SetMutation) {
          result = {
            update: toMutationDocument(serializer, mutation.key, mutation.value)
          };
        } else if (mutation instanceof DeleteMutation) {
          result = {delete: toName(serializer, mutation.key)};
        } else if (mutation instanceof PatchMutation) {
          result = {
            update: toMutationDocument(serializer, mutation.key, mutation.data),
            updateMask: toDocumentMask(mutation.fieldMask)
          };
        } else if (mutation instanceof VerifyMutation) {
          result = {
            verify: toName(serializer, mutation.key)
          };
        } else {
          return fail();
        }
        if (mutation.fieldTransforms.length > 0) {
          result.updateTransforms = mutation.fieldTransforms.map(function(transform) {
            return toFieldTransform(serializer, transform);
          });
        }
        if (!mutation.precondition.isNone) {
          result.currentDocument = toPrecondition(serializer, mutation.precondition);
        }
        return result;
      }
      function fromMutation(serializer, proto) {
        var precondition = proto.currentDocument ? fromPrecondition(proto.currentDocument) : Precondition.none();
        var fieldTransforms = proto.updateTransforms ? proto.updateTransforms.map(function(transform) {
          return fromFieldTransform(serializer, transform);
        }) : [];
        if (proto.update) {
          assertPresent(proto.update.name);
          var key = fromName(serializer, proto.update.name);
          var value = new ObjectValue({
            mapValue: {fields: proto.update.fields}
          });
          if (proto.updateMask) {
            var fieldMask = fromDocumentMask(proto.updateMask);
            return new PatchMutation(key, value, fieldMask, precondition, fieldTransforms);
          } else {
            return new SetMutation(key, value, precondition, fieldTransforms);
          }
        } else if (proto.delete) {
          var key = fromName(serializer, proto.delete);
          return new DeleteMutation(key, precondition);
        } else if (proto.verify) {
          var key = fromName(serializer, proto.verify);
          return new VerifyMutation(key, precondition);
        } else {
          return fail();
        }
      }
      function toPrecondition(serializer, precondition) {
        if (precondition.updateTime !== void 0) {
          return {
            updateTime: toVersion(serializer, precondition.updateTime)
          };
        } else if (precondition.exists !== void 0) {
          return {exists: precondition.exists};
        } else {
          return fail();
        }
      }
      function fromPrecondition(precondition) {
        if (precondition.updateTime !== void 0) {
          return Precondition.updateTime(fromVersion(precondition.updateTime));
        } else if (precondition.exists !== void 0) {
          return Precondition.exists(precondition.exists);
        } else {
          return Precondition.none();
        }
      }
      function fromWriteResult(proto, commitTime) {
        var version2 = proto.updateTime ? fromVersion(proto.updateTime) : fromVersion(commitTime);
        if (version2.isEqual(SnapshotVersion.min())) {
          version2 = fromVersion(commitTime);
        }
        return new MutationResult(version2, proto.transformResults || []);
      }
      function fromWriteResults(protos, commitTime) {
        if (protos && protos.length > 0) {
          hardAssert(commitTime !== void 0);
          return protos.map(function(proto) {
            return fromWriteResult(proto, commitTime);
          });
        } else {
          return [];
        }
      }
      function toFieldTransform(serializer, fieldTransform) {
        var transform = fieldTransform.transform;
        if (transform instanceof ServerTimestampTransform) {
          return {
            fieldPath: fieldTransform.field.canonicalString(),
            setToServerValue: "REQUEST_TIME"
          };
        } else if (transform instanceof ArrayUnionTransformOperation) {
          return {
            fieldPath: fieldTransform.field.canonicalString(),
            appendMissingElements: {
              values: transform.elements
            }
          };
        } else if (transform instanceof ArrayRemoveTransformOperation) {
          return {
            fieldPath: fieldTransform.field.canonicalString(),
            removeAllFromArray: {
              values: transform.elements
            }
          };
        } else if (transform instanceof NumericIncrementTransformOperation) {
          return {
            fieldPath: fieldTransform.field.canonicalString(),
            increment: transform.operand
          };
        } else {
          throw fail();
        }
      }
      function fromFieldTransform(serializer, proto) {
        var transform = null;
        if ("setToServerValue" in proto) {
          hardAssert(proto.setToServerValue === "REQUEST_TIME");
          transform = new ServerTimestampTransform();
        } else if ("appendMissingElements" in proto) {
          var values = proto.appendMissingElements.values || [];
          transform = new ArrayUnionTransformOperation(values);
        } else if ("removeAllFromArray" in proto) {
          var values = proto.removeAllFromArray.values || [];
          transform = new ArrayRemoveTransformOperation(values);
        } else if ("increment" in proto) {
          transform = new NumericIncrementTransformOperation(serializer, proto.increment);
        } else {
          fail();
        }
        var fieldPath = FieldPath.fromServerFormat(proto.fieldPath);
        return new FieldTransform(fieldPath, transform);
      }
      function toDocumentsTarget(serializer, target) {
        return {documents: [toQueryPath(serializer, target.path)]};
      }
      function fromDocumentsTarget(documentsTarget) {
        var count = documentsTarget.documents.length;
        hardAssert(count === 1);
        var name2 = documentsTarget.documents[0];
        return queryToTarget(newQueryForPath(fromQueryPath(name2)));
      }
      function toQueryTarget(serializer, target) {
        var result = {structuredQuery: {}};
        var path2 = target.path;
        if (target.collectionGroup !== null) {
          result.parent = toQueryPath(serializer, path2);
          result.structuredQuery.from = [
            {
              collectionId: target.collectionGroup,
              allDescendants: true
            }
          ];
        } else {
          result.parent = toQueryPath(serializer, path2.popLast());
          result.structuredQuery.from = [{collectionId: path2.lastSegment()}];
        }
        var where3 = toFilter(target.filters);
        if (where3) {
          result.structuredQuery.where = where3;
        }
        var orderBy2 = toOrder(target.orderBy);
        if (orderBy2) {
          result.structuredQuery.orderBy = orderBy2;
        }
        var limit2 = toInt32Proto(serializer, target.limit);
        if (limit2 !== null) {
          result.structuredQuery.limit = limit2;
        }
        if (target.startAt) {
          result.structuredQuery.startAt = toCursor(target.startAt);
        }
        if (target.endAt) {
          result.structuredQuery.endAt = toCursor(target.endAt);
        }
        return result;
      }
      function convertQueryTargetToQuery(target) {
        var path2 = fromQueryPath(target.parent);
        var query3 = target.structuredQuery;
        var fromCount = query3.from ? query3.from.length : 0;
        var collectionGroup2 = null;
        if (fromCount > 0) {
          hardAssert(fromCount === 1);
          var from = query3.from[0];
          if (from.allDescendants) {
            collectionGroup2 = from.collectionId;
          } else {
            path2 = path2.child(from.collectionId);
          }
        }
        var filterBy = [];
        if (query3.where) {
          filterBy = fromFilter(query3.where);
        }
        var orderBy2 = [];
        if (query3.orderBy) {
          orderBy2 = fromOrder(query3.orderBy);
        }
        var limit2 = null;
        if (query3.limit) {
          limit2 = fromInt32Proto(query3.limit);
        }
        var startAt2 = null;
        if (query3.startAt) {
          startAt2 = fromCursor(query3.startAt);
        }
        var endAt2 = null;
        if (query3.endAt) {
          endAt2 = fromCursor(query3.endAt);
        }
        return newQuery(path2, collectionGroup2, orderBy2, filterBy, limit2, "F", startAt2, endAt2);
      }
      function fromQueryTarget(target) {
        return queryToTarget(convertQueryTargetToQuery(target));
      }
      function toListenRequestLabels(serializer, targetData) {
        var value = toLabel(serializer, targetData.purpose);
        if (value == null) {
          return null;
        } else {
          return {
            "goog-listen-tags": value
          };
        }
      }
      function toLabel(serializer, purpose) {
        switch (purpose) {
          case 0:
            return null;
          case 1:
            return "existence-filter-mismatch";
          case 2:
            return "limbo-document";
          default:
            return fail();
        }
      }
      function toTarget(serializer, targetData) {
        var result;
        var target = targetData.target;
        if (isDocumentTarget(target)) {
          result = {documents: toDocumentsTarget(serializer, target)};
        } else {
          result = {query: toQueryTarget(serializer, target)};
        }
        result.targetId = targetData.targetId;
        if (targetData.resumeToken.approximateByteSize() > 0) {
          result.resumeToken = toBytes(serializer, targetData.resumeToken);
        } else if (targetData.snapshotVersion.compareTo(SnapshotVersion.min()) > 0) {
          result.readTime = toTimestamp(serializer, targetData.snapshotVersion.toTimestamp());
        }
        return result;
      }
      function toFilter(filters) {
        if (filters.length === 0) {
          return;
        }
        var protos = filters.map(function(filter) {
          return toUnaryOrFieldFilter(filter);
        });
        if (protos.length === 1) {
          return protos[0];
        }
        return {compositeFilter: {op: "AND", filters: protos}};
      }
      function fromFilter(filter) {
        if (!filter) {
          return [];
        } else if (filter.unaryFilter !== void 0) {
          return [fromUnaryFilter(filter)];
        } else if (filter.fieldFilter !== void 0) {
          return [fromFieldFilter(filter)];
        } else if (filter.compositeFilter !== void 0) {
          return filter.compositeFilter.filters.map(function(f) {
            return fromFilter(f);
          }).reduce(function(accum, current) {
            return accum.concat(current);
          });
        } else {
          return fail();
        }
      }
      function toOrder(orderBys) {
        if (orderBys.length === 0) {
          return;
        }
        return orderBys.map(function(order) {
          return toPropertyOrder(order);
        });
      }
      function fromOrder(orderBys) {
        return orderBys.map(function(order) {
          return fromPropertyOrder(order);
        });
      }
      function toCursor(cursor) {
        return {
          before: cursor.before,
          values: cursor.position
        };
      }
      function fromCursor(cursor) {
        var before = !!cursor.before;
        var position = cursor.values || [];
        return new Bound(position, before);
      }
      function toDirection(dir) {
        return DIRECTIONS[dir];
      }
      function fromDirection(dir) {
        switch (dir) {
          case "ASCENDING":
            return "asc";
          case "DESCENDING":
            return "desc";
          default:
            return void 0;
        }
      }
      function toOperatorName(op) {
        return OPERATORS[op];
      }
      function fromOperatorName(op) {
        switch (op) {
          case "EQUAL":
            return "==";
          case "NOT_EQUAL":
            return "!=";
          case "GREATER_THAN":
            return ">";
          case "GREATER_THAN_OR_EQUAL":
            return ">=";
          case "LESS_THAN":
            return "<";
          case "LESS_THAN_OR_EQUAL":
            return "<=";
          case "ARRAY_CONTAINS":
            return "array-contains";
          case "IN":
            return "in";
          case "NOT_IN":
            return "not-in";
          case "ARRAY_CONTAINS_ANY":
            return "array-contains-any";
          case "OPERATOR_UNSPECIFIED":
            return fail();
          default:
            return fail();
        }
      }
      function toFieldPathReference(path2) {
        return {fieldPath: path2.canonicalString()};
      }
      function fromFieldPathReference(fieldReference) {
        return FieldPath.fromServerFormat(fieldReference.fieldPath);
      }
      function toPropertyOrder(orderBy2) {
        return {
          field: toFieldPathReference(orderBy2.field),
          direction: toDirection(orderBy2.dir)
        };
      }
      function fromPropertyOrder(orderBy2) {
        return new OrderBy(fromFieldPathReference(orderBy2.field), fromDirection(orderBy2.direction));
      }
      function fromFieldFilter(filter) {
        return FieldFilter.create(fromFieldPathReference(filter.fieldFilter.field), fromOperatorName(filter.fieldFilter.op), filter.fieldFilter.value);
      }
      function toUnaryOrFieldFilter(filter) {
        if (filter.op === "==") {
          if (isNanValue(filter.value)) {
            return {
              unaryFilter: {
                field: toFieldPathReference(filter.field),
                op: "IS_NAN"
              }
            };
          } else if (isNullValue(filter.value)) {
            return {
              unaryFilter: {
                field: toFieldPathReference(filter.field),
                op: "IS_NULL"
              }
            };
          }
        } else if (filter.op === "!=") {
          if (isNanValue(filter.value)) {
            return {
              unaryFilter: {
                field: toFieldPathReference(filter.field),
                op: "IS_NOT_NAN"
              }
            };
          } else if (isNullValue(filter.value)) {
            return {
              unaryFilter: {
                field: toFieldPathReference(filter.field),
                op: "IS_NOT_NULL"
              }
            };
          }
        }
        return {
          fieldFilter: {
            field: toFieldPathReference(filter.field),
            op: toOperatorName(filter.op),
            value: filter.value
          }
        };
      }
      function fromUnaryFilter(filter) {
        switch (filter.unaryFilter.op) {
          case "IS_NAN":
            var nanField = fromFieldPathReference(filter.unaryFilter.field);
            return FieldFilter.create(nanField, "==", {
              doubleValue: NaN
            });
          case "IS_NULL":
            var nullField = fromFieldPathReference(filter.unaryFilter.field);
            return FieldFilter.create(nullField, "==", {
              nullValue: "NULL_VALUE"
            });
          case "IS_NOT_NAN":
            var notNanField = fromFieldPathReference(filter.unaryFilter.field);
            return FieldFilter.create(notNanField, "!=", {
              doubleValue: NaN
            });
          case "IS_NOT_NULL":
            var notNullField = fromFieldPathReference(filter.unaryFilter.field);
            return FieldFilter.create(notNullField, "!=", {
              nullValue: "NULL_VALUE"
            });
          case "OPERATOR_UNSPECIFIED":
            return fail();
          default:
            return fail();
        }
      }
      function toDocumentMask(fieldMask) {
        var canonicalFields = [];
        fieldMask.fields.forEach(function(field) {
          return canonicalFields.push(field.canonicalString());
        });
        return {
          fieldPaths: canonicalFields
        };
      }
      function fromDocumentMask(proto) {
        var paths = proto.fieldPaths || [];
        return new FieldMask(paths.map(function(path2) {
          return FieldPath.fromServerFormat(path2);
        }));
      }
      function isValidResourceName(path2) {
        return path2.length >= 4 && path2.get(0) === "projects" && path2.get(2) === "databases";
      }
      var TargetData = function() {
        function TargetData2(target, targetId, purpose, sequenceNumber, snapshotVersion, lastLimboFreeSnapshotVersion, resumeToken) {
          if (snapshotVersion === void 0) {
            snapshotVersion = SnapshotVersion.min();
          }
          if (lastLimboFreeSnapshotVersion === void 0) {
            lastLimboFreeSnapshotVersion = SnapshotVersion.min();
          }
          if (resumeToken === void 0) {
            resumeToken = ByteString.EMPTY_BYTE_STRING;
          }
          this.target = target;
          this.targetId = targetId;
          this.purpose = purpose;
          this.sequenceNumber = sequenceNumber;
          this.snapshotVersion = snapshotVersion;
          this.lastLimboFreeSnapshotVersion = lastLimboFreeSnapshotVersion;
          this.resumeToken = resumeToken;
        }
        TargetData2.prototype.withSequenceNumber = function(sequenceNumber) {
          return new TargetData2(this.target, this.targetId, this.purpose, sequenceNumber, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken);
        };
        TargetData2.prototype.withResumeToken = function(resumeToken, snapshotVersion) {
          return new TargetData2(this.target, this.targetId, this.purpose, this.sequenceNumber, snapshotVersion, this.lastLimboFreeSnapshotVersion, resumeToken);
        };
        TargetData2.prototype.withLastLimboFreeSnapshotVersion = function(lastLimboFreeSnapshotVersion) {
          return new TargetData2(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, lastLimboFreeSnapshotVersion, this.resumeToken);
        };
        return TargetData2;
      }();
      var LocalSerializer = function() {
        function LocalSerializer2(remoteSerializer) {
          this.remoteSerializer = remoteSerializer;
        }
        return LocalSerializer2;
      }();
      function fromDbRemoteDocument(localSerializer, remoteDoc) {
        if (remoteDoc.document) {
          return fromDocument(localSerializer.remoteSerializer, remoteDoc.document, !!remoteDoc.hasCommittedMutations);
        } else if (remoteDoc.noDocument) {
          var key = DocumentKey.fromSegments(remoteDoc.noDocument.path);
          var version_3 = fromDbTimestamp(remoteDoc.noDocument.readTime);
          var document_1 = MutableDocument.newNoDocument(key, version_3);
          return remoteDoc.hasCommittedMutations ? document_1.setHasCommittedMutations() : document_1;
        } else if (remoteDoc.unknownDocument) {
          var key = DocumentKey.fromSegments(remoteDoc.unknownDocument.path);
          var version_4 = fromDbTimestamp(remoteDoc.unknownDocument.version);
          return MutableDocument.newUnknownDocument(key, version_4);
        } else {
          return fail();
        }
      }
      function toDbRemoteDocument(localSerializer, document2, readTime) {
        var dbReadTime = toDbTimestampKey(readTime);
        var parentPath = document2.key.path.popLast().toArray();
        if (document2.isFoundDocument()) {
          var doc_3 = toDocument(localSerializer.remoteSerializer, document2);
          var hasCommittedMutations = document2.hasCommittedMutations;
          return new DbRemoteDocument(null, null, doc_3, hasCommittedMutations, dbReadTime, parentPath);
        } else if (document2.isNoDocument()) {
          var path2 = document2.key.path.toArray();
          var readTime_1 = toDbTimestamp(document2.version);
          var hasCommittedMutations = document2.hasCommittedMutations;
          return new DbRemoteDocument(null, new DbNoDocument(path2, readTime_1), null, hasCommittedMutations, dbReadTime, parentPath);
        } else if (document2.isUnknownDocument()) {
          var path2 = document2.key.path.toArray();
          var readTime_2 = toDbTimestamp(document2.version);
          return new DbRemoteDocument(new DbUnknownDocument(path2, readTime_2), null, null, true, dbReadTime, parentPath);
        } else {
          return fail();
        }
      }
      function toDbTimestampKey(snapshotVersion) {
        var timestamp = snapshotVersion.toTimestamp();
        return [timestamp.seconds, timestamp.nanoseconds];
      }
      function fromDbTimestampKey(dbTimestampKey) {
        var timestamp = new Timestamp(dbTimestampKey[0], dbTimestampKey[1]);
        return SnapshotVersion.fromTimestamp(timestamp);
      }
      function toDbTimestamp(snapshotVersion) {
        var timestamp = snapshotVersion.toTimestamp();
        return new DbTimestamp(timestamp.seconds, timestamp.nanoseconds);
      }
      function fromDbTimestamp(dbTimestamp) {
        var timestamp = new Timestamp(dbTimestamp.seconds, dbTimestamp.nanoseconds);
        return SnapshotVersion.fromTimestamp(timestamp);
      }
      function toDbMutationBatch(localSerializer, userId, batch) {
        var serializedBaseMutations = batch.baseMutations.map(function(m) {
          return toMutation(localSerializer.remoteSerializer, m);
        });
        var serializedMutations = batch.mutations.map(function(m) {
          return toMutation(localSerializer.remoteSerializer, m);
        });
        return new DbMutationBatch(userId, batch.batchId, batch.localWriteTime.toMillis(), serializedBaseMutations, serializedMutations);
      }
      function fromDbMutationBatch(localSerializer, dbBatch) {
        var baseMutations = (dbBatch.baseMutations || []).map(function(m) {
          return fromMutation(localSerializer.remoteSerializer, m);
        });
        for (var i = 0; i < dbBatch.mutations.length - 1; ++i) {
          var currentMutation = dbBatch.mutations[i];
          var hasTransform = i + 1 < dbBatch.mutations.length && dbBatch.mutations[i + 1].transform !== void 0;
          if (hasTransform) {
            var transformMutation = dbBatch.mutations[i + 1];
            currentMutation.updateTransforms = transformMutation.transform.fieldTransforms;
            dbBatch.mutations.splice(i + 1, 1);
            ++i;
          }
        }
        var mutations = dbBatch.mutations.map(function(m) {
          return fromMutation(localSerializer.remoteSerializer, m);
        });
        var timestamp = Timestamp.fromMillis(dbBatch.localWriteTimeMs);
        return new MutationBatch(dbBatch.batchId, timestamp, baseMutations, mutations);
      }
      function fromDbTarget(dbTarget) {
        var version2 = fromDbTimestamp(dbTarget.readTime);
        var lastLimboFreeSnapshotVersion = dbTarget.lastLimboFreeSnapshotVersion !== void 0 ? fromDbTimestamp(dbTarget.lastLimboFreeSnapshotVersion) : SnapshotVersion.min();
        var target;
        if (isDocumentQuery$1(dbTarget.query)) {
          target = fromDocumentsTarget(dbTarget.query);
        } else {
          target = fromQueryTarget(dbTarget.query);
        }
        return new TargetData(target, dbTarget.targetId, 0, dbTarget.lastListenSequenceNumber, version2, lastLimboFreeSnapshotVersion, ByteString.fromBase64String(dbTarget.resumeToken));
      }
      function toDbTarget(localSerializer, targetData) {
        var dbTimestamp = toDbTimestamp(targetData.snapshotVersion);
        var dbLastLimboFreeTimestamp = toDbTimestamp(targetData.lastLimboFreeSnapshotVersion);
        var queryProto;
        if (isDocumentTarget(targetData.target)) {
          queryProto = toDocumentsTarget(localSerializer.remoteSerializer, targetData.target);
        } else {
          queryProto = toQueryTarget(localSerializer.remoteSerializer, targetData.target);
        }
        var resumeToken = targetData.resumeToken.toBase64();
        return new DbTarget(targetData.targetId, canonifyTarget(targetData.target), dbTimestamp, resumeToken, targetData.sequenceNumber, dbLastLimboFreeTimestamp, queryProto);
      }
      function isDocumentQuery$1(dbQuery) {
        return dbQuery.documents !== void 0;
      }
      function fromDbBundle(dbBundle) {
        return {
          id: dbBundle.bundleId,
          createTime: fromDbTimestamp(dbBundle.createTime),
          version: dbBundle.version
        };
      }
      function toDbBundle(metadata) {
        return {
          bundleId: metadata.id,
          createTime: toDbTimestamp(fromVersion(metadata.createTime)),
          version: metadata.version
        };
      }
      function fromDbNamedQuery(dbNamedQuery) {
        return {
          name: dbNamedQuery.name,
          query: fromBundledQuery(dbNamedQuery.bundledQuery),
          readTime: fromDbTimestamp(dbNamedQuery.readTime)
        };
      }
      function toDbNamedQuery(query3) {
        return {
          name: query3.name,
          readTime: toDbTimestamp(fromVersion(query3.readTime)),
          bundledQuery: query3.bundledQuery
        };
      }
      function fromBundledQuery(bundledQuery) {
        var query3 = convertQueryTargetToQuery({
          parent: bundledQuery.parent,
          structuredQuery: bundledQuery.structuredQuery
        });
        if (bundledQuery.limitType === "LAST") {
          return queryWithLimit(query3, query3.limit, "L");
        }
        return query3;
      }
      function fromProtoNamedQuery(namedQuery2) {
        return {
          name: namedQuery2.name,
          query: fromBundledQuery(namedQuery2.bundledQuery),
          readTime: fromVersion(namedQuery2.readTime)
        };
      }
      function fromBundleMetadata(metadata) {
        return {
          id: metadata.id,
          version: metadata.version,
          createTime: fromVersion(metadata.createTime)
        };
      }
      var IndexedDbBundleCache = function() {
        function IndexedDbBundleCache2() {
        }
        IndexedDbBundleCache2.prototype.getBundleMetadata = function(transaction, bundleId) {
          return bundlesStore(transaction).get(bundleId).next(function(bundle) {
            if (bundle) {
              return fromDbBundle(bundle);
            }
            return void 0;
          });
        };
        IndexedDbBundleCache2.prototype.saveBundleMetadata = function(transaction, bundleMetadata) {
          return bundlesStore(transaction).put(toDbBundle(bundleMetadata));
        };
        IndexedDbBundleCache2.prototype.getNamedQuery = function(transaction, queryName) {
          return namedQueriesStore(transaction).get(queryName).next(function(query3) {
            if (query3) {
              return fromDbNamedQuery(query3);
            }
            return void 0;
          });
        };
        IndexedDbBundleCache2.prototype.saveNamedQuery = function(transaction, query3) {
          return namedQueriesStore(transaction).put(toDbNamedQuery(query3));
        };
        return IndexedDbBundleCache2;
      }();
      function bundlesStore(txn) {
        return getStore(txn, DbBundle.store);
      }
      function namedQueriesStore(txn) {
        return getStore(txn, DbNamedQuery.store);
      }
      var MemoryIndexManager = function() {
        function MemoryIndexManager2() {
          this.collectionParentIndex = new MemoryCollectionParentIndex();
        }
        MemoryIndexManager2.prototype.addToCollectionParentIndex = function(transaction, collectionPath) {
          this.collectionParentIndex.add(collectionPath);
          return PersistencePromise.resolve();
        };
        MemoryIndexManager2.prototype.getCollectionParents = function(transaction, collectionId) {
          return PersistencePromise.resolve(this.collectionParentIndex.getEntries(collectionId));
        };
        return MemoryIndexManager2;
      }();
      var MemoryCollectionParentIndex = function() {
        function MemoryCollectionParentIndex2() {
          this.index = {};
        }
        MemoryCollectionParentIndex2.prototype.add = function(collectionPath) {
          var collectionId = collectionPath.lastSegment();
          var parentPath = collectionPath.popLast();
          var existingParents = this.index[collectionId] || new SortedSet(ResourcePath.comparator);
          var added = !existingParents.has(parentPath);
          this.index[collectionId] = existingParents.add(parentPath);
          return added;
        };
        MemoryCollectionParentIndex2.prototype.has = function(collectionPath) {
          var collectionId = collectionPath.lastSegment();
          var parentPath = collectionPath.popLast();
          var existingParents = this.index[collectionId];
          return existingParents && existingParents.has(parentPath);
        };
        MemoryCollectionParentIndex2.prototype.getEntries = function(collectionId) {
          var parentPaths = this.index[collectionId] || new SortedSet(ResourcePath.comparator);
          return parentPaths.toArray();
        };
        return MemoryCollectionParentIndex2;
      }();
      var IndexedDbIndexManager = function() {
        function IndexedDbIndexManager2() {
          this.collectionParentsCache = new MemoryCollectionParentIndex();
        }
        IndexedDbIndexManager2.prototype.addToCollectionParentIndex = function(transaction, collectionPath) {
          var _this = this;
          if (!this.collectionParentsCache.has(collectionPath)) {
            var collectionId = collectionPath.lastSegment();
            var parentPath = collectionPath.popLast();
            transaction.addOnCommittedListener(function() {
              _this.collectionParentsCache.add(collectionPath);
            });
            var collectionParent = {
              collectionId,
              parent: encodeResourcePath(parentPath)
            };
            return collectionParentsStore(transaction).put(collectionParent);
          }
          return PersistencePromise.resolve();
        };
        IndexedDbIndexManager2.prototype.getCollectionParents = function(transaction, collectionId) {
          var parentPaths = [];
          var range = IDBKeyRange.bound([collectionId, ""], [immediateSuccessor(collectionId), ""], false, true);
          return collectionParentsStore(transaction).loadAll(range).next(function(entries) {
            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
              var entry = entries_1[_i];
              if (entry.collectionId !== collectionId) {
                break;
              }
              parentPaths.push(decodeResourcePath(entry.parent));
            }
            return parentPaths;
          });
        };
        return IndexedDbIndexManager2;
      }();
      function collectionParentsStore(txn) {
        return getStore(txn, DbCollectionParent.store);
      }
      function removeMutationBatch(txn, userId, batch) {
        var mutationStore = txn.store(DbMutationBatch.store);
        var indexTxn = txn.store(DbDocumentMutation.store);
        var promises = [];
        var range = IDBKeyRange.only(batch.batchId);
        var numDeleted = 0;
        var removePromise = mutationStore.iterate({range}, function(key, value, control) {
          numDeleted++;
          return control.delete();
        });
        promises.push(removePromise.next(function() {
          hardAssert(numDeleted === 1);
        }));
        var removedDocuments = [];
        for (var _i = 0, _d = batch.mutations; _i < _d.length; _i++) {
          var mutation = _d[_i];
          var indexKey = DbDocumentMutation.key(userId, mutation.key.path, batch.batchId);
          promises.push(indexTxn.delete(indexKey));
          removedDocuments.push(mutation.key);
        }
        return PersistencePromise.waitFor(promises).next(function() {
          return removedDocuments;
        });
      }
      function dbDocumentSize(doc2) {
        if (!doc2) {
          return 0;
        }
        var value;
        if (doc2.document) {
          value = doc2.document;
        } else if (doc2.unknownDocument) {
          value = doc2.unknownDocument;
        } else if (doc2.noDocument) {
          value = doc2.noDocument;
        } else {
          throw fail();
        }
        return JSON.stringify(value).length;
      }
      var IndexedDbMutationQueue = function() {
        function IndexedDbMutationQueue2(userId, serializer, indexManager, referenceDelegate) {
          this.userId = userId;
          this.serializer = serializer;
          this.indexManager = indexManager;
          this.referenceDelegate = referenceDelegate;
          this.documentKeysByBatchId = {};
        }
        IndexedDbMutationQueue2.forUser = function(user, serializer, indexManager, referenceDelegate) {
          hardAssert(user.uid !== "");
          var userId = user.isAuthenticated() ? user.uid : "";
          return new IndexedDbMutationQueue2(userId, serializer, indexManager, referenceDelegate);
        };
        IndexedDbMutationQueue2.prototype.checkEmpty = function(transaction) {
          var empty2 = true;
          var range = IDBKeyRange.bound([this.userId, Number.NEGATIVE_INFINITY], [this.userId, Number.POSITIVE_INFINITY]);
          return mutationsStore(transaction).iterate({index: DbMutationBatch.userMutationsIndex, range}, function(key, value, control) {
            empty2 = false;
            control.done();
          }).next(function() {
            return empty2;
          });
        };
        IndexedDbMutationQueue2.prototype.addMutationBatch = function(transaction, localWriteTime, baseMutations, mutations) {
          var _this = this;
          var documentStore = documentMutationsStore(transaction);
          var mutationStore = mutationsStore(transaction);
          return mutationStore.add({}).next(function(batchId) {
            hardAssert(typeof batchId === "number");
            var batch = new MutationBatch(batchId, localWriteTime, baseMutations, mutations);
            var dbBatch = toDbMutationBatch(_this.serializer, _this.userId, batch);
            var promises = [];
            var collectionParents = new SortedSet(function(l, r) {
              return primitiveComparator(l.canonicalString(), r.canonicalString());
            });
            for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {
              var mutation = mutations_1[_i];
              var indexKey = DbDocumentMutation.key(_this.userId, mutation.key.path, batchId);
              collectionParents = collectionParents.add(mutation.key.path.popLast());
              promises.push(mutationStore.put(dbBatch));
              promises.push(documentStore.put(indexKey, DbDocumentMutation.PLACEHOLDER));
            }
            collectionParents.forEach(function(parent) {
              promises.push(_this.indexManager.addToCollectionParentIndex(transaction, parent));
            });
            transaction.addOnCommittedListener(function() {
              _this.documentKeysByBatchId[batchId] = batch.keys();
            });
            return PersistencePromise.waitFor(promises).next(function() {
              return batch;
            });
          });
        };
        IndexedDbMutationQueue2.prototype.lookupMutationBatch = function(transaction, batchId) {
          var _this = this;
          return mutationsStore(transaction).get(batchId).next(function(dbBatch) {
            if (dbBatch) {
              hardAssert(dbBatch.userId === _this.userId);
              return fromDbMutationBatch(_this.serializer, dbBatch);
            }
            return null;
          });
        };
        IndexedDbMutationQueue2.prototype.lookupMutationKeys = function(transaction, batchId) {
          var _this = this;
          if (this.documentKeysByBatchId[batchId]) {
            return PersistencePromise.resolve(this.documentKeysByBatchId[batchId]);
          } else {
            return this.lookupMutationBatch(transaction, batchId).next(function(batch) {
              if (batch) {
                var keys = batch.keys();
                _this.documentKeysByBatchId[batchId] = keys;
                return keys;
              } else {
                return null;
              }
            });
          }
        };
        IndexedDbMutationQueue2.prototype.getNextMutationBatchAfterBatchId = function(transaction, batchId) {
          var _this = this;
          var nextBatchId = batchId + 1;
          var range = IDBKeyRange.lowerBound([this.userId, nextBatchId]);
          var foundBatch = null;
          return mutationsStore(transaction).iterate({index: DbMutationBatch.userMutationsIndex, range}, function(key, dbBatch, control) {
            if (dbBatch.userId === _this.userId) {
              hardAssert(dbBatch.batchId >= nextBatchId);
              foundBatch = fromDbMutationBatch(_this.serializer, dbBatch);
            }
            control.done();
          }).next(function() {
            return foundBatch;
          });
        };
        IndexedDbMutationQueue2.prototype.getHighestUnacknowledgedBatchId = function(transaction) {
          var range = IDBKeyRange.upperBound([
            this.userId,
            Number.POSITIVE_INFINITY
          ]);
          var batchId = BATCHID_UNKNOWN;
          return mutationsStore(transaction).iterate({index: DbMutationBatch.userMutationsIndex, range, reverse: true}, function(key, dbBatch, control) {
            batchId = dbBatch.batchId;
            control.done();
          }).next(function() {
            return batchId;
          });
        };
        IndexedDbMutationQueue2.prototype.getAllMutationBatches = function(transaction) {
          var _this = this;
          var range = IDBKeyRange.bound([this.userId, BATCHID_UNKNOWN], [this.userId, Number.POSITIVE_INFINITY]);
          return mutationsStore(transaction).loadAll(DbMutationBatch.userMutationsIndex, range).next(function(dbBatches) {
            return dbBatches.map(function(dbBatch) {
              return fromDbMutationBatch(_this.serializer, dbBatch);
            });
          });
        };
        IndexedDbMutationQueue2.prototype.getAllMutationBatchesAffectingDocumentKey = function(transaction, documentKey) {
          var _this = this;
          var indexPrefix = DbDocumentMutation.prefixForPath(this.userId, documentKey.path);
          var indexStart = IDBKeyRange.lowerBound(indexPrefix);
          var results = [];
          return documentMutationsStore(transaction).iterate({range: indexStart}, function(indexKey, _, control) {
            var userID = indexKey[0], encodedPath = indexKey[1], batchId = indexKey[2];
            var path2 = decodeResourcePath(encodedPath);
            if (userID !== _this.userId || !documentKey.path.isEqual(path2)) {
              control.done();
              return;
            }
            return mutationsStore(transaction).get(batchId).next(function(mutation) {
              if (!mutation) {
                throw fail();
              }
              hardAssert(mutation.userId === _this.userId);
              results.push(fromDbMutationBatch(_this.serializer, mutation));
            });
          }).next(function() {
            return results;
          });
        };
        IndexedDbMutationQueue2.prototype.getAllMutationBatchesAffectingDocumentKeys = function(transaction, documentKeys) {
          var _this = this;
          var uniqueBatchIDs = new SortedSet(primitiveComparator);
          var promises = [];
          documentKeys.forEach(function(documentKey) {
            var indexStart = DbDocumentMutation.prefixForPath(_this.userId, documentKey.path);
            var range = IDBKeyRange.lowerBound(indexStart);
            var promise = documentMutationsStore(transaction).iterate({range}, function(indexKey, _, control) {
              var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];
              var path2 = decodeResourcePath(encodedPath);
              if (userID !== _this.userId || !documentKey.path.isEqual(path2)) {
                control.done();
                return;
              }
              uniqueBatchIDs = uniqueBatchIDs.add(batchID);
            });
            promises.push(promise);
          });
          return PersistencePromise.waitFor(promises).next(function() {
            return _this.lookupMutationBatches(transaction, uniqueBatchIDs);
          });
        };
        IndexedDbMutationQueue2.prototype.getAllMutationBatchesAffectingQuery = function(transaction, query3) {
          var _this = this;
          var queryPath = query3.path;
          var immediateChildrenLength = queryPath.length + 1;
          var indexPrefix = DbDocumentMutation.prefixForPath(this.userId, queryPath);
          var indexStart = IDBKeyRange.lowerBound(indexPrefix);
          var uniqueBatchIDs = new SortedSet(primitiveComparator);
          return documentMutationsStore(transaction).iterate({range: indexStart}, function(indexKey, _, control) {
            var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];
            var path2 = decodeResourcePath(encodedPath);
            if (userID !== _this.userId || !queryPath.isPrefixOf(path2)) {
              control.done();
              return;
            }
            if (path2.length !== immediateChildrenLength) {
              return;
            }
            uniqueBatchIDs = uniqueBatchIDs.add(batchID);
          }).next(function() {
            return _this.lookupMutationBatches(transaction, uniqueBatchIDs);
          });
        };
        IndexedDbMutationQueue2.prototype.lookupMutationBatches = function(transaction, batchIDs) {
          var _this = this;
          var results = [];
          var promises = [];
          batchIDs.forEach(function(batchId) {
            promises.push(mutationsStore(transaction).get(batchId).next(function(mutation) {
              if (mutation === null) {
                throw fail();
              }
              hardAssert(mutation.userId === _this.userId);
              results.push(fromDbMutationBatch(_this.serializer, mutation));
            }));
          });
          return PersistencePromise.waitFor(promises).next(function() {
            return results;
          });
        };
        IndexedDbMutationQueue2.prototype.removeMutationBatch = function(transaction, batch) {
          var _this = this;
          return removeMutationBatch(transaction.simpleDbTransaction, this.userId, batch).next(function(removedDocuments) {
            transaction.addOnCommittedListener(function() {
              _this.removeCachedMutationKeys(batch.batchId);
            });
            return PersistencePromise.forEach(removedDocuments, function(key) {
              return _this.referenceDelegate.markPotentiallyOrphaned(transaction, key);
            });
          });
        };
        IndexedDbMutationQueue2.prototype.removeCachedMutationKeys = function(batchId) {
          delete this.documentKeysByBatchId[batchId];
        };
        IndexedDbMutationQueue2.prototype.performConsistencyCheck = function(txn) {
          var _this = this;
          return this.checkEmpty(txn).next(function(empty2) {
            if (!empty2) {
              return PersistencePromise.resolve();
            }
            var startRange = IDBKeyRange.lowerBound(DbDocumentMutation.prefixForUser(_this.userId));
            var danglingMutationReferences = [];
            return documentMutationsStore(txn).iterate({range: startRange}, function(key, _, control) {
              var userID = key[0];
              if (userID !== _this.userId) {
                control.done();
                return;
              } else {
                var path2 = decodeResourcePath(key[1]);
                danglingMutationReferences.push(path2);
              }
            }).next(function() {
              hardAssert(danglingMutationReferences.length === 0);
            });
          });
        };
        IndexedDbMutationQueue2.prototype.containsKey = function(txn, key) {
          return mutationQueueContainsKey(txn, this.userId, key);
        };
        IndexedDbMutationQueue2.prototype.getMutationQueueMetadata = function(transaction) {
          var _this = this;
          return mutationQueuesStore(transaction).get(this.userId).next(function(metadata) {
            return metadata || new DbMutationQueue(_this.userId, BATCHID_UNKNOWN, "");
          });
        };
        return IndexedDbMutationQueue2;
      }();
      function mutationQueueContainsKey(txn, userId, key) {
        var indexKey = DbDocumentMutation.prefixForPath(userId, key.path);
        var encodedPath = indexKey[1];
        var startRange = IDBKeyRange.lowerBound(indexKey);
        var containsKey = false;
        return documentMutationsStore(txn).iterate({range: startRange, keysOnly: true}, function(key2, value, control) {
          var userID = key2[0], keyPath = key2[1], _ = key2[2];
          if (userID === userId && keyPath === encodedPath) {
            containsKey = true;
          }
          control.done();
        }).next(function() {
          return containsKey;
        });
      }
      function mutationQueuesContainKey(txn, docKey) {
        var found = false;
        return mutationQueuesStore(txn).iterateSerial(function(userId) {
          return mutationQueueContainsKey(txn, userId, docKey).next(function(containsKey) {
            if (containsKey) {
              found = true;
            }
            return PersistencePromise.resolve(!containsKey);
          });
        }).next(function() {
          return found;
        });
      }
      function mutationsStore(txn) {
        return getStore(txn, DbMutationBatch.store);
      }
      function documentMutationsStore(txn) {
        return getStore(txn, DbDocumentMutation.store);
      }
      function mutationQueuesStore(txn) {
        return getStore(txn, DbMutationQueue.store);
      }
      var OFFSET = 2;
      var TargetIdGenerator = function() {
        function TargetIdGenerator2(lastId) {
          this.lastId = lastId;
        }
        TargetIdGenerator2.prototype.next = function() {
          this.lastId += OFFSET;
          return this.lastId;
        };
        TargetIdGenerator2.forTargetCache = function() {
          return new TargetIdGenerator2(2 - OFFSET);
        };
        TargetIdGenerator2.forSyncEngine = function() {
          return new TargetIdGenerator2(1 - OFFSET);
        };
        return TargetIdGenerator2;
      }();
      var IndexedDbTargetCache = function() {
        function IndexedDbTargetCache2(referenceDelegate, serializer) {
          this.referenceDelegate = referenceDelegate;
          this.serializer = serializer;
        }
        IndexedDbTargetCache2.prototype.allocateTargetId = function(transaction) {
          var _this = this;
          return this.retrieveMetadata(transaction).next(function(metadata) {
            var targetIdGenerator = new TargetIdGenerator(metadata.highestTargetId);
            metadata.highestTargetId = targetIdGenerator.next();
            return _this.saveMetadata(transaction, metadata).next(function() {
              return metadata.highestTargetId;
            });
          });
        };
        IndexedDbTargetCache2.prototype.getLastRemoteSnapshotVersion = function(transaction) {
          return this.retrieveMetadata(transaction).next(function(metadata) {
            return SnapshotVersion.fromTimestamp(new Timestamp(metadata.lastRemoteSnapshotVersion.seconds, metadata.lastRemoteSnapshotVersion.nanoseconds));
          });
        };
        IndexedDbTargetCache2.prototype.getHighestSequenceNumber = function(transaction) {
          return this.retrieveMetadata(transaction).next(function(targetGlobal) {
            return targetGlobal.highestListenSequenceNumber;
          });
        };
        IndexedDbTargetCache2.prototype.setTargetsMetadata = function(transaction, highestListenSequenceNumber, lastRemoteSnapshotVersion) {
          var _this = this;
          return this.retrieveMetadata(transaction).next(function(metadata) {
            metadata.highestListenSequenceNumber = highestListenSequenceNumber;
            if (lastRemoteSnapshotVersion) {
              metadata.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion.toTimestamp();
            }
            if (highestListenSequenceNumber > metadata.highestListenSequenceNumber) {
              metadata.highestListenSequenceNumber = highestListenSequenceNumber;
            }
            return _this.saveMetadata(transaction, metadata);
          });
        };
        IndexedDbTargetCache2.prototype.addTargetData = function(transaction, targetData) {
          var _this = this;
          return this.saveTargetData(transaction, targetData).next(function() {
            return _this.retrieveMetadata(transaction).next(function(metadata) {
              metadata.targetCount += 1;
              _this.updateMetadataFromTargetData(targetData, metadata);
              return _this.saveMetadata(transaction, metadata);
            });
          });
        };
        IndexedDbTargetCache2.prototype.updateTargetData = function(transaction, targetData) {
          return this.saveTargetData(transaction, targetData);
        };
        IndexedDbTargetCache2.prototype.removeTargetData = function(transaction, targetData) {
          var _this = this;
          return this.removeMatchingKeysForTargetId(transaction, targetData.targetId).next(function() {
            return targetsStore(transaction).delete(targetData.targetId);
          }).next(function() {
            return _this.retrieveMetadata(transaction);
          }).next(function(metadata) {
            hardAssert(metadata.targetCount > 0);
            metadata.targetCount -= 1;
            return _this.saveMetadata(transaction, metadata);
          });
        };
        IndexedDbTargetCache2.prototype.removeTargets = function(txn, upperBound, activeTargetIds) {
          var _this = this;
          var count = 0;
          var promises = [];
          return targetsStore(txn).iterate(function(key, value) {
            var targetData = fromDbTarget(value);
            if (targetData.sequenceNumber <= upperBound && activeTargetIds.get(targetData.targetId) === null) {
              count++;
              promises.push(_this.removeTargetData(txn, targetData));
            }
          }).next(function() {
            return PersistencePromise.waitFor(promises);
          }).next(function() {
            return count;
          });
        };
        IndexedDbTargetCache2.prototype.forEachTarget = function(txn, f) {
          return targetsStore(txn).iterate(function(key, value) {
            var targetData = fromDbTarget(value);
            f(targetData);
          });
        };
        IndexedDbTargetCache2.prototype.retrieveMetadata = function(transaction) {
          return globalTargetStore(transaction).get(DbTargetGlobal.key).next(function(metadata) {
            hardAssert(metadata !== null);
            return metadata;
          });
        };
        IndexedDbTargetCache2.prototype.saveMetadata = function(transaction, metadata) {
          return globalTargetStore(transaction).put(DbTargetGlobal.key, metadata);
        };
        IndexedDbTargetCache2.prototype.saveTargetData = function(transaction, targetData) {
          return targetsStore(transaction).put(toDbTarget(this.serializer, targetData));
        };
        IndexedDbTargetCache2.prototype.updateMetadataFromTargetData = function(targetData, metadata) {
          var updated = false;
          if (targetData.targetId > metadata.highestTargetId) {
            metadata.highestTargetId = targetData.targetId;
            updated = true;
          }
          if (targetData.sequenceNumber > metadata.highestListenSequenceNumber) {
            metadata.highestListenSequenceNumber = targetData.sequenceNumber;
            updated = true;
          }
          return updated;
        };
        IndexedDbTargetCache2.prototype.getTargetCount = function(transaction) {
          return this.retrieveMetadata(transaction).next(function(metadata) {
            return metadata.targetCount;
          });
        };
        IndexedDbTargetCache2.prototype.getTargetData = function(transaction, target) {
          var canonicalId2 = canonifyTarget(target);
          var range = IDBKeyRange.bound([canonicalId2, Number.NEGATIVE_INFINITY], [canonicalId2, Number.POSITIVE_INFINITY]);
          var result = null;
          return targetsStore(transaction).iterate({range, index: DbTarget.queryTargetsIndexName}, function(key, value, control) {
            var found = fromDbTarget(value);
            if (targetEquals(target, found.target)) {
              result = found;
              control.done();
            }
          }).next(function() {
            return result;
          });
        };
        IndexedDbTargetCache2.prototype.addMatchingKeys = function(txn, keys, targetId) {
          var _this = this;
          var promises = [];
          var store = documentTargetStore(txn);
          keys.forEach(function(key) {
            var path2 = encodeResourcePath(key.path);
            promises.push(store.put(new DbTargetDocument(targetId, path2)));
            promises.push(_this.referenceDelegate.addReference(txn, targetId, key));
          });
          return PersistencePromise.waitFor(promises);
        };
        IndexedDbTargetCache2.prototype.removeMatchingKeys = function(txn, keys, targetId) {
          var _this = this;
          var store = documentTargetStore(txn);
          return PersistencePromise.forEach(keys, function(key) {
            var path2 = encodeResourcePath(key.path);
            return PersistencePromise.waitFor([
              store.delete([targetId, path2]),
              _this.referenceDelegate.removeReference(txn, targetId, key)
            ]);
          });
        };
        IndexedDbTargetCache2.prototype.removeMatchingKeysForTargetId = function(txn, targetId) {
          var store = documentTargetStore(txn);
          var range = IDBKeyRange.bound([targetId], [targetId + 1], false, true);
          return store.delete(range);
        };
        IndexedDbTargetCache2.prototype.getMatchingKeysForTargetId = function(txn, targetId) {
          var range = IDBKeyRange.bound([targetId], [targetId + 1], false, true);
          var store = documentTargetStore(txn);
          var result = documentKeySet();
          return store.iterate({range, keysOnly: true}, function(key, _, control) {
            var path2 = decodeResourcePath(key[1]);
            var docKey = new DocumentKey(path2);
            result = result.add(docKey);
          }).next(function() {
            return result;
          });
        };
        IndexedDbTargetCache2.prototype.containsKey = function(txn, key) {
          var path2 = encodeResourcePath(key.path);
          var range = IDBKeyRange.bound([path2], [immediateSuccessor(path2)], false, true);
          var count = 0;
          return documentTargetStore(txn).iterate({
            index: DbTargetDocument.documentTargetsIndex,
            keysOnly: true,
            range
          }, function(_d, _, control) {
            var targetId = _d[0], path3 = _d[1];
            if (targetId !== 0) {
              count++;
              control.done();
            }
          }).next(function() {
            return count > 0;
          });
        };
        IndexedDbTargetCache2.prototype.getTargetDataForTarget = function(transaction, targetId) {
          return targetsStore(transaction).get(targetId).next(function(found) {
            if (found) {
              return fromDbTarget(found);
            } else {
              return null;
            }
          });
        };
        return IndexedDbTargetCache2;
      }();
      function targetsStore(txn) {
        return getStore(txn, DbTarget.store);
      }
      function globalTargetStore(txn) {
        return getStore(txn, DbTargetGlobal.store);
      }
      function documentTargetStore(txn) {
        return getStore(txn, DbTargetDocument.store);
      }
      function ignoreIfPrimaryLeaseLoss(err) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          return tslib.__generator(this, function(_d) {
            if (err.code === Code.FAILED_PRECONDITION && err.message === PRIMARY_LEASE_LOST_ERROR_MSG) {
              logDebug("LocalStore", "Unexpectedly lost primary lease");
            } else {
              throw err;
            }
            return [2];
          });
        });
      }
      var GC_DID_NOT_RUN = {
        didRun: false,
        sequenceNumbersCollected: 0,
        targetsRemoved: 0,
        documentsRemoved: 0
      };
      var LRU_COLLECTION_DISABLED = -1;
      var LRU_DEFAULT_CACHE_SIZE_BYTES = 40 * 1024 * 1024;
      var LruParams = function() {
        function LruParams2(cacheSizeCollectionThreshold, percentileToCollect, maximumSequenceNumbersToCollect) {
          this.cacheSizeCollectionThreshold = cacheSizeCollectionThreshold;
          this.percentileToCollect = percentileToCollect;
          this.maximumSequenceNumbersToCollect = maximumSequenceNumbersToCollect;
        }
        LruParams2.withCacheSize = function(cacheSize) {
          return new LruParams2(cacheSize, LruParams2.DEFAULT_COLLECTION_PERCENTILE, LruParams2.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);
        };
        return LruParams2;
      }();
      LruParams.DEFAULT_COLLECTION_PERCENTILE = 10;
      LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1e3;
      LruParams.DEFAULT = new LruParams(LRU_DEFAULT_CACHE_SIZE_BYTES, LruParams.DEFAULT_COLLECTION_PERCENTILE, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);
      LruParams.DISABLED = new LruParams(LRU_COLLECTION_DISABLED, 0, 0);
      var LOG_TAG$2 = "LruGarbageCollector";
      var LRU_MINIMUM_CACHE_SIZE_BYTES = 1 * 1024 * 1024;
      var INITIAL_GC_DELAY_MS = 1 * 60 * 1e3;
      var REGULAR_GC_DELAY_MS = 5 * 60 * 1e3;
      function bufferEntryComparator(_d, _e) {
        var aSequence = _d[0], aIndex = _d[1];
        var bSequence = _e[0], bIndex = _e[1];
        var seqCmp = primitiveComparator(aSequence, bSequence);
        if (seqCmp === 0) {
          return primitiveComparator(aIndex, bIndex);
        } else {
          return seqCmp;
        }
      }
      var RollingSequenceNumberBuffer = function() {
        function RollingSequenceNumberBuffer2(maxElements) {
          this.maxElements = maxElements;
          this.buffer = new SortedSet(bufferEntryComparator);
          this.previousIndex = 0;
        }
        RollingSequenceNumberBuffer2.prototype.nextIndex = function() {
          return ++this.previousIndex;
        };
        RollingSequenceNumberBuffer2.prototype.addElement = function(sequenceNumber) {
          var entry = [sequenceNumber, this.nextIndex()];
          if (this.buffer.size < this.maxElements) {
            this.buffer = this.buffer.add(entry);
          } else {
            var highestValue = this.buffer.last();
            if (bufferEntryComparator(entry, highestValue) < 0) {
              this.buffer = this.buffer.delete(highestValue).add(entry);
            }
          }
        };
        Object.defineProperty(RollingSequenceNumberBuffer2.prototype, "maxValue", {
          get: function() {
            return this.buffer.last()[0];
          },
          enumerable: false,
          configurable: true
        });
        return RollingSequenceNumberBuffer2;
      }();
      var LruScheduler = function() {
        function LruScheduler2(garbageCollector, asyncQueue) {
          this.garbageCollector = garbageCollector;
          this.asyncQueue = asyncQueue;
          this.hasRun = false;
          this.gcTask = null;
        }
        LruScheduler2.prototype.start = function(localStore) {
          if (this.garbageCollector.params.cacheSizeCollectionThreshold !== LRU_COLLECTION_DISABLED) {
            this.scheduleGC(localStore);
          }
        };
        LruScheduler2.prototype.stop = function() {
          if (this.gcTask) {
            this.gcTask.cancel();
            this.gcTask = null;
          }
        };
        Object.defineProperty(LruScheduler2.prototype, "started", {
          get: function() {
            return this.gcTask !== null;
          },
          enumerable: false,
          configurable: true
        });
        LruScheduler2.prototype.scheduleGC = function(localStore) {
          var _this = this;
          var delay = this.hasRun ? REGULAR_GC_DELAY_MS : INITIAL_GC_DELAY_MS;
          logDebug("LruGarbageCollector", "Garbage collection scheduled in " + delay + "ms");
          this.gcTask = this.asyncQueue.enqueueAfterDelay("lru_garbage_collection", delay, function() {
            return tslib.__awaiter(_this, void 0, void 0, function() {
              var e_1;
              return tslib.__generator(this, function(_d) {
                switch (_d.label) {
                  case 0:
                    this.gcTask = null;
                    this.hasRun = true;
                    _d.label = 1;
                  case 1:
                    _d.trys.push([1, 3, , 7]);
                    return [4, localStore.collectGarbage(this.garbageCollector)];
                  case 2:
                    _d.sent();
                    return [3, 7];
                  case 3:
                    e_1 = _d.sent();
                    if (!isIndexedDbTransactionError(e_1))
                      return [3, 4];
                    logDebug(LOG_TAG$2, "Ignoring IndexedDB error during garbage collection: ", e_1);
                    return [3, 6];
                  case 4:
                    return [4, ignoreIfPrimaryLeaseLoss(e_1)];
                  case 5:
                    _d.sent();
                    _d.label = 6;
                  case 6:
                    return [3, 7];
                  case 7:
                    return [4, this.scheduleGC(localStore)];
                  case 8:
                    _d.sent();
                    return [2];
                }
              });
            });
          });
        };
        return LruScheduler2;
      }();
      var LruGarbageCollectorImpl = function() {
        function LruGarbageCollectorImpl2(delegate, params) {
          this.delegate = delegate;
          this.params = params;
        }
        LruGarbageCollectorImpl2.prototype.calculateTargetCount = function(txn, percentile) {
          return this.delegate.getSequenceNumberCount(txn).next(function(targetCount) {
            return Math.floor(percentile / 100 * targetCount);
          });
        };
        LruGarbageCollectorImpl2.prototype.nthSequenceNumber = function(txn, n) {
          var _this = this;
          if (n === 0) {
            return PersistencePromise.resolve(ListenSequence.INVALID);
          }
          var buffer = new RollingSequenceNumberBuffer(n);
          return this.delegate.forEachTarget(txn, function(target) {
            return buffer.addElement(target.sequenceNumber);
          }).next(function() {
            return _this.delegate.forEachOrphanedDocumentSequenceNumber(txn, function(sequenceNumber) {
              return buffer.addElement(sequenceNumber);
            });
          }).next(function() {
            return buffer.maxValue;
          });
        };
        LruGarbageCollectorImpl2.prototype.removeTargets = function(txn, upperBound, activeTargetIds) {
          return this.delegate.removeTargets(txn, upperBound, activeTargetIds);
        };
        LruGarbageCollectorImpl2.prototype.removeOrphanedDocuments = function(txn, upperBound) {
          return this.delegate.removeOrphanedDocuments(txn, upperBound);
        };
        LruGarbageCollectorImpl2.prototype.collect = function(txn, activeTargetIds) {
          var _this = this;
          if (this.params.cacheSizeCollectionThreshold === LRU_COLLECTION_DISABLED) {
            logDebug("LruGarbageCollector", "Garbage collection skipped; disabled");
            return PersistencePromise.resolve(GC_DID_NOT_RUN);
          }
          return this.getCacheSize(txn).next(function(cacheSize) {
            if (cacheSize < _this.params.cacheSizeCollectionThreshold) {
              logDebug("LruGarbageCollector", "Garbage collection skipped; Cache size " + cacheSize + " " + ("is lower than threshold " + _this.params.cacheSizeCollectionThreshold));
              return GC_DID_NOT_RUN;
            } else {
              return _this.runGarbageCollection(txn, activeTargetIds);
            }
          });
        };
        LruGarbageCollectorImpl2.prototype.getCacheSize = function(txn) {
          return this.delegate.getCacheSize(txn);
        };
        LruGarbageCollectorImpl2.prototype.runGarbageCollection = function(txn, activeTargetIds) {
          var _this = this;
          var upperBoundSequenceNumber;
          var sequenceNumbersToCollect, targetsRemoved;
          var countedTargetsTs, foundUpperBoundTs, removedTargetsTs, removedDocumentsTs;
          var startTs = Date.now();
          return this.calculateTargetCount(txn, this.params.percentileToCollect).next(function(sequenceNumbers) {
            if (sequenceNumbers > _this.params.maximumSequenceNumbersToCollect) {
              logDebug("LruGarbageCollector", "Capping sequence numbers to collect down " + ("to the maximum of " + _this.params.maximumSequenceNumbersToCollect + " ") + ("from " + sequenceNumbers));
              sequenceNumbersToCollect = _this.params.maximumSequenceNumbersToCollect;
            } else {
              sequenceNumbersToCollect = sequenceNumbers;
            }
            countedTargetsTs = Date.now();
            return _this.nthSequenceNumber(txn, sequenceNumbersToCollect);
          }).next(function(upperBound) {
            upperBoundSequenceNumber = upperBound;
            foundUpperBoundTs = Date.now();
            return _this.removeTargets(txn, upperBoundSequenceNumber, activeTargetIds);
          }).next(function(numTargetsRemoved) {
            targetsRemoved = numTargetsRemoved;
            removedTargetsTs = Date.now();
            return _this.removeOrphanedDocuments(txn, upperBoundSequenceNumber);
          }).next(function(documentsRemoved) {
            removedDocumentsTs = Date.now();
            if (getLogLevel() <= logger.LogLevel.DEBUG) {
              var desc = "LRU Garbage Collection\n" + ("	Counted targets in " + (countedTargetsTs - startTs) + "ms\n") + ("	Determined least recently used " + sequenceNumbersToCollect + " in ") + (foundUpperBoundTs - countedTargetsTs + "ms\n") + ("	Removed " + targetsRemoved + " targets in ") + (removedTargetsTs - foundUpperBoundTs + "ms\n") + ("	Removed " + documentsRemoved + " documents in ") + (removedDocumentsTs - removedTargetsTs + "ms\n") + ("Total Duration: " + (removedDocumentsTs - startTs) + "ms");
              logDebug("LruGarbageCollector", desc);
            }
            return PersistencePromise.resolve({
              didRun: true,
              sequenceNumbersCollected: sequenceNumbersToCollect,
              targetsRemoved,
              documentsRemoved
            });
          });
        };
        return LruGarbageCollectorImpl2;
      }();
      function newLruGarbageCollector(delegate, params) {
        return new LruGarbageCollectorImpl(delegate, params);
      }
      var IndexedDbLruDelegateImpl = function() {
        function IndexedDbLruDelegateImpl2(db, params) {
          this.db = db;
          this.garbageCollector = newLruGarbageCollector(this, params);
        }
        IndexedDbLruDelegateImpl2.prototype.getSequenceNumberCount = function(txn) {
          var docCountPromise = this.orphanedDocumentCount(txn);
          var targetCountPromise = this.db.getTargetCache().getTargetCount(txn);
          return targetCountPromise.next(function(targetCount) {
            return docCountPromise.next(function(docCount) {
              return targetCount + docCount;
            });
          });
        };
        IndexedDbLruDelegateImpl2.prototype.orphanedDocumentCount = function(txn) {
          var orphanedCount = 0;
          return this.forEachOrphanedDocumentSequenceNumber(txn, function(_) {
            orphanedCount++;
          }).next(function() {
            return orphanedCount;
          });
        };
        IndexedDbLruDelegateImpl2.prototype.forEachTarget = function(txn, f) {
          return this.db.getTargetCache().forEachTarget(txn, f);
        };
        IndexedDbLruDelegateImpl2.prototype.forEachOrphanedDocumentSequenceNumber = function(txn, f) {
          return this.forEachOrphanedDocument(txn, function(docKey, sequenceNumber) {
            return f(sequenceNumber);
          });
        };
        IndexedDbLruDelegateImpl2.prototype.addReference = function(txn, targetId, key) {
          return writeSentinelKey(txn, key);
        };
        IndexedDbLruDelegateImpl2.prototype.removeReference = function(txn, targetId, key) {
          return writeSentinelKey(txn, key);
        };
        IndexedDbLruDelegateImpl2.prototype.removeTargets = function(txn, upperBound, activeTargetIds) {
          return this.db.getTargetCache().removeTargets(txn, upperBound, activeTargetIds);
        };
        IndexedDbLruDelegateImpl2.prototype.markPotentiallyOrphaned = function(txn, key) {
          return writeSentinelKey(txn, key);
        };
        IndexedDbLruDelegateImpl2.prototype.isPinned = function(txn, docKey) {
          return mutationQueuesContainKey(txn, docKey);
        };
        IndexedDbLruDelegateImpl2.prototype.removeOrphanedDocuments = function(txn, upperBound) {
          var _this = this;
          var documentCache = this.db.getRemoteDocumentCache();
          var changeBuffer = documentCache.newChangeBuffer();
          var promises = [];
          var documentCount = 0;
          var iteration = this.forEachOrphanedDocument(txn, function(docKey, sequenceNumber) {
            if (sequenceNumber <= upperBound) {
              var p = _this.isPinned(txn, docKey).next(function(isPinned) {
                if (!isPinned) {
                  documentCount++;
                  return changeBuffer.getEntry(txn, docKey).next(function() {
                    changeBuffer.removeEntry(docKey);
                    return documentTargetStore(txn).delete(sentinelKey(docKey));
                  });
                }
              });
              promises.push(p);
            }
          });
          return iteration.next(function() {
            return PersistencePromise.waitFor(promises);
          }).next(function() {
            return changeBuffer.apply(txn);
          }).next(function() {
            return documentCount;
          });
        };
        IndexedDbLruDelegateImpl2.prototype.removeTarget = function(txn, targetData) {
          var updated = targetData.withSequenceNumber(txn.currentSequenceNumber);
          return this.db.getTargetCache().updateTargetData(txn, updated);
        };
        IndexedDbLruDelegateImpl2.prototype.updateLimboDocument = function(txn, key) {
          return writeSentinelKey(txn, key);
        };
        IndexedDbLruDelegateImpl2.prototype.forEachOrphanedDocument = function(txn, f) {
          var store = documentTargetStore(txn);
          var nextToReport = ListenSequence.INVALID;
          var nextPath;
          return store.iterate({
            index: DbTargetDocument.documentTargetsIndex
          }, function(_d, _e) {
            var targetId = _d[0], docKey = _d[1];
            var path2 = _e.path, sequenceNumber = _e.sequenceNumber;
            if (targetId === 0) {
              if (nextToReport !== ListenSequence.INVALID) {
                f(new DocumentKey(decodeResourcePath(nextPath)), nextToReport);
              }
              nextToReport = sequenceNumber;
              nextPath = path2;
            } else {
              nextToReport = ListenSequence.INVALID;
            }
          }).next(function() {
            if (nextToReport !== ListenSequence.INVALID) {
              f(new DocumentKey(decodeResourcePath(nextPath)), nextToReport);
            }
          });
        };
        IndexedDbLruDelegateImpl2.prototype.getCacheSize = function(txn) {
          return this.db.getRemoteDocumentCache().getSize(txn);
        };
        return IndexedDbLruDelegateImpl2;
      }();
      function sentinelKey(key) {
        return [0, encodeResourcePath(key.path)];
      }
      function sentinelRow(key, sequenceNumber) {
        return new DbTargetDocument(0, encodeResourcePath(key.path), sequenceNumber);
      }
      function writeSentinelKey(txn, key) {
        return documentTargetStore(txn).put(sentinelRow(key, txn.currentSequenceNumber));
      }
      var ObjectMap = function() {
        function ObjectMap2(mapKeyFn, equalsFn) {
          this.mapKeyFn = mapKeyFn;
          this.equalsFn = equalsFn;
          this.inner = {};
        }
        ObjectMap2.prototype.get = function(key) {
          var id = this.mapKeyFn(key);
          var matches = this.inner[id];
          if (matches === void 0) {
            return void 0;
          }
          for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {
            var _d = matches_1[_i], otherKey = _d[0], value = _d[1];
            if (this.equalsFn(otherKey, key)) {
              return value;
            }
          }
          return void 0;
        };
        ObjectMap2.prototype.has = function(key) {
          return this.get(key) !== void 0;
        };
        ObjectMap2.prototype.set = function(key, value) {
          var id = this.mapKeyFn(key);
          var matches = this.inner[id];
          if (matches === void 0) {
            this.inner[id] = [[key, value]];
            return;
          }
          for (var i = 0; i < matches.length; i++) {
            if (this.equalsFn(matches[i][0], key)) {
              matches[i] = [key, value];
              return;
            }
          }
          matches.push([key, value]);
        };
        ObjectMap2.prototype.delete = function(key) {
          var id = this.mapKeyFn(key);
          var matches = this.inner[id];
          if (matches === void 0) {
            return false;
          }
          for (var i = 0; i < matches.length; i++) {
            if (this.equalsFn(matches[i][0], key)) {
              if (matches.length === 1) {
                delete this.inner[id];
              } else {
                matches.splice(i, 1);
              }
              return true;
            }
          }
          return false;
        };
        ObjectMap2.prototype.forEach = function(fn) {
          forEach(this.inner, function(_, entries) {
            for (var _i = 0, entries_2 = entries; _i < entries_2.length; _i++) {
              var _d = entries_2[_i], k = _d[0], v = _d[1];
              fn(k, v);
            }
          });
        };
        ObjectMap2.prototype.isEmpty = function() {
          return isEmpty(this.inner);
        };
        return ObjectMap2;
      }();
      var RemoteDocumentChangeBuffer = function() {
        function RemoteDocumentChangeBuffer2() {
          this.changes = new ObjectMap(function(key) {
            return key.toString();
          }, function(l, r) {
            return l.isEqual(r);
          });
          this.changesApplied = false;
        }
        RemoteDocumentChangeBuffer2.prototype.getReadTime = function(key) {
          var change = this.changes.get(key);
          if (change) {
            return change.readTime;
          }
          return SnapshotVersion.min();
        };
        RemoteDocumentChangeBuffer2.prototype.addEntry = function(document2, readTime) {
          this.assertNotApplied();
          this.changes.set(document2.key, {document: document2, readTime});
        };
        RemoteDocumentChangeBuffer2.prototype.removeEntry = function(key, readTime) {
          if (readTime === void 0) {
            readTime = null;
          }
          this.assertNotApplied();
          this.changes.set(key, {
            document: MutableDocument.newInvalidDocument(key),
            readTime
          });
        };
        RemoteDocumentChangeBuffer2.prototype.getEntry = function(transaction, documentKey) {
          this.assertNotApplied();
          var bufferedEntry = this.changes.get(documentKey);
          if (bufferedEntry !== void 0) {
            return PersistencePromise.resolve(bufferedEntry.document);
          } else {
            return this.getFromCache(transaction, documentKey);
          }
        };
        RemoteDocumentChangeBuffer2.prototype.getEntries = function(transaction, documentKeys) {
          return this.getAllFromCache(transaction, documentKeys);
        };
        RemoteDocumentChangeBuffer2.prototype.apply = function(transaction) {
          this.assertNotApplied();
          this.changesApplied = true;
          return this.applyChanges(transaction);
        };
        RemoteDocumentChangeBuffer2.prototype.assertNotApplied = function() {
        };
        return RemoteDocumentChangeBuffer2;
      }();
      var IndexedDbRemoteDocumentCacheImpl = function() {
        function IndexedDbRemoteDocumentCacheImpl2(serializer, indexManager) {
          this.serializer = serializer;
          this.indexManager = indexManager;
        }
        IndexedDbRemoteDocumentCacheImpl2.prototype.addEntry = function(transaction, key, doc2) {
          var documentStore = remoteDocumentsStore(transaction);
          return documentStore.put(dbKey(key), doc2);
        };
        IndexedDbRemoteDocumentCacheImpl2.prototype.removeEntry = function(transaction, documentKey) {
          var store = remoteDocumentsStore(transaction);
          var key = dbKey(documentKey);
          return store.delete(key);
        };
        IndexedDbRemoteDocumentCacheImpl2.prototype.updateMetadata = function(transaction, sizeDelta) {
          var _this = this;
          return this.getMetadata(transaction).next(function(metadata) {
            metadata.byteSize += sizeDelta;
            return _this.setMetadata(transaction, metadata);
          });
        };
        IndexedDbRemoteDocumentCacheImpl2.prototype.getEntry = function(transaction, documentKey) {
          var _this = this;
          return remoteDocumentsStore(transaction).get(dbKey(documentKey)).next(function(dbRemoteDoc) {
            return _this.maybeDecodeDocument(documentKey, dbRemoteDoc);
          });
        };
        IndexedDbRemoteDocumentCacheImpl2.prototype.getSizedEntry = function(transaction, documentKey) {
          var _this = this;
          return remoteDocumentsStore(transaction).get(dbKey(documentKey)).next(function(dbRemoteDoc) {
            var doc2 = _this.maybeDecodeDocument(documentKey, dbRemoteDoc);
            return {
              document: doc2,
              size: dbDocumentSize(dbRemoteDoc)
            };
          });
        };
        IndexedDbRemoteDocumentCacheImpl2.prototype.getEntries = function(transaction, documentKeys) {
          var _this = this;
          var results = mutableDocumentMap();
          return this.forEachDbEntry(transaction, documentKeys, function(key, dbRemoteDoc) {
            var doc2 = _this.maybeDecodeDocument(key, dbRemoteDoc);
            results = results.insert(key, doc2);
          }).next(function() {
            return results;
          });
        };
        IndexedDbRemoteDocumentCacheImpl2.prototype.getSizedEntries = function(transaction, documentKeys) {
          var _this = this;
          var results = mutableDocumentMap();
          var sizeMap = new SortedMap(DocumentKey.comparator);
          return this.forEachDbEntry(transaction, documentKeys, function(key, dbRemoteDoc) {
            var doc2 = _this.maybeDecodeDocument(key, dbRemoteDoc);
            results = results.insert(key, doc2);
            sizeMap = sizeMap.insert(key, dbDocumentSize(dbRemoteDoc));
          }).next(function() {
            return {documents: results, sizeMap};
          });
        };
        IndexedDbRemoteDocumentCacheImpl2.prototype.forEachDbEntry = function(transaction, documentKeys, callback) {
          if (documentKeys.isEmpty()) {
            return PersistencePromise.resolve();
          }
          var range = IDBKeyRange.bound(documentKeys.first().path.toArray(), documentKeys.last().path.toArray());
          var keyIter = documentKeys.getIterator();
          var nextKey = keyIter.getNext();
          return remoteDocumentsStore(transaction).iterate({range}, function(potentialKeyRaw, dbRemoteDoc, control) {
            var potentialKey = DocumentKey.fromSegments(potentialKeyRaw);
            while (nextKey && DocumentKey.comparator(nextKey, potentialKey) < 0) {
              callback(nextKey, null);
              nextKey = keyIter.getNext();
            }
            if (nextKey && nextKey.isEqual(potentialKey)) {
              callback(nextKey, dbRemoteDoc);
              nextKey = keyIter.hasNext() ? keyIter.getNext() : null;
            }
            if (nextKey) {
              control.skip(nextKey.path.toArray());
            } else {
              control.done();
            }
          }).next(function() {
            while (nextKey) {
              callback(nextKey, null);
              nextKey = keyIter.hasNext() ? keyIter.getNext() : null;
            }
          });
        };
        IndexedDbRemoteDocumentCacheImpl2.prototype.getDocumentsMatchingQuery = function(transaction, query3, sinceReadTime) {
          var _this = this;
          var results = mutableDocumentMap();
          var immediateChildrenPathLength = query3.path.length + 1;
          var iterationOptions = {};
          if (sinceReadTime.isEqual(SnapshotVersion.min())) {
            var startKey = query3.path.toArray();
            iterationOptions.range = IDBKeyRange.lowerBound(startKey);
          } else {
            var collectionKey = query3.path.toArray();
            var readTimeKey = toDbTimestampKey(sinceReadTime);
            iterationOptions.range = IDBKeyRange.lowerBound([collectionKey, readTimeKey], true);
            iterationOptions.index = DbRemoteDocument.collectionReadTimeIndex;
          }
          return remoteDocumentsStore(transaction).iterate(iterationOptions, function(key, dbRemoteDoc, control) {
            if (key.length !== immediateChildrenPathLength) {
              return;
            }
            var document2 = fromDbRemoteDocument(_this.serializer, dbRemoteDoc);
            if (!query3.path.isPrefixOf(document2.key.path)) {
              control.done();
            } else if (queryMatches(query3, document2)) {
              results = results.insert(document2.key, document2);
            }
          }).next(function() {
            return results;
          });
        };
        IndexedDbRemoteDocumentCacheImpl2.prototype.newChangeBuffer = function(options2) {
          return new IndexedDbRemoteDocumentChangeBuffer(this, !!options2 && options2.trackRemovals);
        };
        IndexedDbRemoteDocumentCacheImpl2.prototype.getSize = function(txn) {
          return this.getMetadata(txn).next(function(metadata) {
            return metadata.byteSize;
          });
        };
        IndexedDbRemoteDocumentCacheImpl2.prototype.getMetadata = function(txn) {
          return documentGlobalStore(txn).get(DbRemoteDocumentGlobal.key).next(function(metadata) {
            hardAssert(!!metadata);
            return metadata;
          });
        };
        IndexedDbRemoteDocumentCacheImpl2.prototype.setMetadata = function(txn, metadata) {
          return documentGlobalStore(txn).put(DbRemoteDocumentGlobal.key, metadata);
        };
        IndexedDbRemoteDocumentCacheImpl2.prototype.maybeDecodeDocument = function(documentKey, dbRemoteDoc) {
          if (dbRemoteDoc) {
            var doc_4 = fromDbRemoteDocument(this.serializer, dbRemoteDoc);
            var isSentinelRemoval = doc_4.isNoDocument() && doc_4.version.isEqual(SnapshotVersion.min());
            if (!isSentinelRemoval) {
              return doc_4;
            }
          }
          return MutableDocument.newInvalidDocument(documentKey);
        };
        return IndexedDbRemoteDocumentCacheImpl2;
      }();
      function newIndexedDbRemoteDocumentCache(serializer, indexManager) {
        return new IndexedDbRemoteDocumentCacheImpl(serializer, indexManager);
      }
      function remoteDocumentCacheGetNewDocumentChanges(remoteDocumentCache, transaction, sinceReadTime) {
        var remoteDocumentCacheImpl = debugCast(remoteDocumentCache);
        var changedDocs = mutableDocumentMap();
        var lastReadTime = toDbTimestampKey(sinceReadTime);
        var documentsStore = remoteDocumentsStore(transaction);
        var range = IDBKeyRange.lowerBound(lastReadTime, true);
        return documentsStore.iterate({index: DbRemoteDocument.readTimeIndex, range}, function(_, dbRemoteDoc) {
          var doc2 = fromDbRemoteDocument(remoteDocumentCacheImpl.serializer, dbRemoteDoc);
          changedDocs = changedDocs.insert(doc2.key, doc2);
          lastReadTime = dbRemoteDoc.readTime;
        }).next(function() {
          return {
            changedDocs,
            readTime: fromDbTimestampKey(lastReadTime)
          };
        });
      }
      function remoteDocumentCacheGetLastReadTime(transaction) {
        var documentsStore = remoteDocumentsStore(transaction);
        var readTime = SnapshotVersion.min();
        return documentsStore.iterate({index: DbRemoteDocument.readTimeIndex, reverse: true}, function(key, dbRemoteDoc, control) {
          if (dbRemoteDoc.readTime) {
            readTime = fromDbTimestampKey(dbRemoteDoc.readTime);
          }
          control.done();
        }).next(function() {
          return readTime;
        });
      }
      var IndexedDbRemoteDocumentChangeBuffer = function(_super) {
        tslib.__extends(IndexedDbRemoteDocumentChangeBuffer2, _super);
        function IndexedDbRemoteDocumentChangeBuffer2(documentCache, trackRemovals) {
          var _this = _super.call(this) || this;
          _this.documentCache = documentCache;
          _this.trackRemovals = trackRemovals;
          _this.documentSizes = new ObjectMap(function(key) {
            return key.toString();
          }, function(l, r) {
            return l.isEqual(r);
          });
          return _this;
        }
        IndexedDbRemoteDocumentChangeBuffer2.prototype.applyChanges = function(transaction) {
          var _this = this;
          var promises = [];
          var sizeDelta = 0;
          var collectionParents = new SortedSet(function(l, r) {
            return primitiveComparator(l.canonicalString(), r.canonicalString());
          });
          this.changes.forEach(function(key, documentChange) {
            var previousSize = _this.documentSizes.get(key);
            if (documentChange.document.isValidDocument()) {
              var doc_5 = toDbRemoteDocument(_this.documentCache.serializer, documentChange.document, _this.getReadTime(key));
              collectionParents = collectionParents.add(key.path.popLast());
              var size = dbDocumentSize(doc_5);
              sizeDelta += size - previousSize;
              promises.push(_this.documentCache.addEntry(transaction, key, doc_5));
            } else {
              sizeDelta -= previousSize;
              if (_this.trackRemovals) {
                var deletedDoc = toDbRemoteDocument(_this.documentCache.serializer, MutableDocument.newNoDocument(key, SnapshotVersion.min()), _this.getReadTime(key));
                promises.push(_this.documentCache.addEntry(transaction, key, deletedDoc));
              } else {
                promises.push(_this.documentCache.removeEntry(transaction, key));
              }
            }
          });
          collectionParents.forEach(function(parent) {
            promises.push(_this.documentCache.indexManager.addToCollectionParentIndex(transaction, parent));
          });
          promises.push(this.documentCache.updateMetadata(transaction, sizeDelta));
          return PersistencePromise.waitFor(promises);
        };
        IndexedDbRemoteDocumentChangeBuffer2.prototype.getFromCache = function(transaction, documentKey) {
          var _this = this;
          return this.documentCache.getSizedEntry(transaction, documentKey).next(function(getResult) {
            _this.documentSizes.set(documentKey, getResult.size);
            return getResult.document;
          });
        };
        IndexedDbRemoteDocumentChangeBuffer2.prototype.getAllFromCache = function(transaction, documentKeys) {
          var _this = this;
          return this.documentCache.getSizedEntries(transaction, documentKeys).next(function(_d) {
            var documents = _d.documents, sizeMap = _d.sizeMap;
            sizeMap.forEach(function(documentKey, size) {
              _this.documentSizes.set(documentKey, size);
            });
            return documents;
          });
        };
        return IndexedDbRemoteDocumentChangeBuffer2;
      }(RemoteDocumentChangeBuffer);
      function documentGlobalStore(txn) {
        return getStore(txn, DbRemoteDocumentGlobal.store);
      }
      function remoteDocumentsStore(txn) {
        return getStore(txn, DbRemoteDocument.store);
      }
      function dbKey(docKey) {
        return docKey.path.toArray();
      }
      var SchemaConverter = function() {
        function SchemaConverter2(serializer) {
          this.serializer = serializer;
        }
        SchemaConverter2.prototype.createOrUpgrade = function(db, txn, fromVersion2, toVersion2) {
          var _this = this;
          hardAssert(fromVersion2 < toVersion2 && fromVersion2 >= 0 && toVersion2 <= SCHEMA_VERSION);
          var simpleDbTransaction = new SimpleDbTransaction("createOrUpgrade", txn);
          if (fromVersion2 < 1 && toVersion2 >= 1) {
            createPrimaryClientStore(db);
            createMutationQueue(db);
            createQueryCache(db);
            createRemoteDocumentCache(db);
          }
          var p = PersistencePromise.resolve();
          if (fromVersion2 < 3 && toVersion2 >= 3) {
            if (fromVersion2 !== 0) {
              dropQueryCache(db);
              createQueryCache(db);
            }
            p = p.next(function() {
              return writeEmptyTargetGlobalEntry(simpleDbTransaction);
            });
          }
          if (fromVersion2 < 4 && toVersion2 >= 4) {
            if (fromVersion2 !== 0) {
              p = p.next(function() {
                return upgradeMutationBatchSchemaAndMigrateData(db, simpleDbTransaction);
              });
            }
            p = p.next(function() {
              createClientMetadataStore(db);
            });
          }
          if (fromVersion2 < 5 && toVersion2 >= 5) {
            p = p.next(function() {
              return _this.removeAcknowledgedMutations(simpleDbTransaction);
            });
          }
          if (fromVersion2 < 6 && toVersion2 >= 6) {
            p = p.next(function() {
              createDocumentGlobalStore(db);
              return _this.addDocumentGlobal(simpleDbTransaction);
            });
          }
          if (fromVersion2 < 7 && toVersion2 >= 7) {
            p = p.next(function() {
              return _this.ensureSequenceNumbers(simpleDbTransaction);
            });
          }
          if (fromVersion2 < 8 && toVersion2 >= 8) {
            p = p.next(function() {
              return _this.createCollectionParentIndex(db, simpleDbTransaction);
            });
          }
          if (fromVersion2 < 9 && toVersion2 >= 9) {
            p = p.next(function() {
              dropRemoteDocumentChangesStore(db);
              createRemoteDocumentReadTimeIndex(txn);
            });
          }
          if (fromVersion2 < 10 && toVersion2 >= 10) {
            p = p.next(function() {
              return _this.rewriteCanonicalIds(simpleDbTransaction);
            });
          }
          if (fromVersion2 < 11 && toVersion2 >= 11) {
            p = p.next(function() {
              createBundlesStore(db);
              createNamedQueriesStore(db);
            });
          }
          return p;
        };
        SchemaConverter2.prototype.addDocumentGlobal = function(txn) {
          var byteCount = 0;
          return txn.store(DbRemoteDocument.store).iterate(function(_, doc2) {
            byteCount += dbDocumentSize(doc2);
          }).next(function() {
            var metadata = new DbRemoteDocumentGlobal(byteCount);
            return txn.store(DbRemoteDocumentGlobal.store).put(DbRemoteDocumentGlobal.key, metadata);
          });
        };
        SchemaConverter2.prototype.removeAcknowledgedMutations = function(txn) {
          var _this = this;
          var queuesStore = txn.store(DbMutationQueue.store);
          var mutationsStore2 = txn.store(DbMutationBatch.store);
          return queuesStore.loadAll().next(function(queues) {
            return PersistencePromise.forEach(queues, function(queue) {
              var range = IDBKeyRange.bound([queue.userId, BATCHID_UNKNOWN], [queue.userId, queue.lastAcknowledgedBatchId]);
              return mutationsStore2.loadAll(DbMutationBatch.userMutationsIndex, range).next(function(dbBatches) {
                return PersistencePromise.forEach(dbBatches, function(dbBatch) {
                  hardAssert(dbBatch.userId === queue.userId);
                  var batch = fromDbMutationBatch(_this.serializer, dbBatch);
                  return removeMutationBatch(txn, queue.userId, batch).next(function() {
                  });
                });
              });
            });
          });
        };
        SchemaConverter2.prototype.ensureSequenceNumbers = function(txn) {
          var documentTargetStore2 = txn.store(DbTargetDocument.store);
          var documentsStore = txn.store(DbRemoteDocument.store);
          var globalTargetStore2 = txn.store(DbTargetGlobal.store);
          return globalTargetStore2.get(DbTargetGlobal.key).next(function(metadata) {
            var writeSentinelKey2 = function(path2) {
              return documentTargetStore2.put(new DbTargetDocument(0, encodeResourcePath(path2), metadata.highestListenSequenceNumber));
            };
            var promises = [];
            return documentsStore.iterate(function(key, doc2) {
              var path2 = new ResourcePath(key);
              var docSentinelKey = sentinelKey$1(path2);
              promises.push(documentTargetStore2.get(docSentinelKey).next(function(maybeSentinel) {
                if (!maybeSentinel) {
                  return writeSentinelKey2(path2);
                } else {
                  return PersistencePromise.resolve();
                }
              }));
            }).next(function() {
              return PersistencePromise.waitFor(promises);
            });
          });
        };
        SchemaConverter2.prototype.createCollectionParentIndex = function(db, txn) {
          db.createObjectStore(DbCollectionParent.store, {
            keyPath: DbCollectionParent.keyPath
          });
          var collectionParentsStore2 = txn.store(DbCollectionParent.store);
          var cache = new MemoryCollectionParentIndex();
          var addEntry = function(collectionPath) {
            if (cache.add(collectionPath)) {
              var collectionId = collectionPath.lastSegment();
              var parentPath = collectionPath.popLast();
              return collectionParentsStore2.put({
                collectionId,
                parent: encodeResourcePath(parentPath)
              });
            }
          };
          return txn.store(DbRemoteDocument.store).iterate({keysOnly: true}, function(pathSegments, _) {
            var path2 = new ResourcePath(pathSegments);
            return addEntry(path2.popLast());
          }).next(function() {
            return txn.store(DbDocumentMutation.store).iterate({keysOnly: true}, function(_d, _) {
              var userID = _d[0], encodedPath = _d[1], batchId = _d[2];
              var path2 = decodeResourcePath(encodedPath);
              return addEntry(path2.popLast());
            });
          });
        };
        SchemaConverter2.prototype.rewriteCanonicalIds = function(txn) {
          var _this = this;
          var targetStore = txn.store(DbTarget.store);
          return targetStore.iterate(function(key, originalDbTarget) {
            var originalTargetData = fromDbTarget(originalDbTarget);
            var updatedDbTarget = toDbTarget(_this.serializer, originalTargetData);
            return targetStore.put(updatedDbTarget);
          });
        };
        return SchemaConverter2;
      }();
      function sentinelKey$1(path2) {
        return [0, encodeResourcePath(path2)];
      }
      function createPrimaryClientStore(db) {
        db.createObjectStore(DbPrimaryClient.store);
      }
      function createMutationQueue(db) {
        db.createObjectStore(DbMutationQueue.store, {
          keyPath: DbMutationQueue.keyPath
        });
        var mutationBatchesStore = db.createObjectStore(DbMutationBatch.store, {
          keyPath: DbMutationBatch.keyPath,
          autoIncrement: true
        });
        mutationBatchesStore.createIndex(DbMutationBatch.userMutationsIndex, DbMutationBatch.userMutationsKeyPath, {unique: true});
        db.createObjectStore(DbDocumentMutation.store);
      }
      function upgradeMutationBatchSchemaAndMigrateData(db, txn) {
        var v1MutationsStore = txn.store(DbMutationBatch.store);
        return v1MutationsStore.loadAll().next(function(existingMutations) {
          db.deleteObjectStore(DbMutationBatch.store);
          var mutationsStore2 = db.createObjectStore(DbMutationBatch.store, {
            keyPath: DbMutationBatch.keyPath,
            autoIncrement: true
          });
          mutationsStore2.createIndex(DbMutationBatch.userMutationsIndex, DbMutationBatch.userMutationsKeyPath, {unique: true});
          var v3MutationsStore = txn.store(DbMutationBatch.store);
          var writeAll = existingMutations.map(function(mutation) {
            return v3MutationsStore.put(mutation);
          });
          return PersistencePromise.waitFor(writeAll);
        });
      }
      function createRemoteDocumentCache(db) {
        db.createObjectStore(DbRemoteDocument.store);
      }
      function createDocumentGlobalStore(db) {
        db.createObjectStore(DbRemoteDocumentGlobal.store);
      }
      function createQueryCache(db) {
        var targetDocumentsStore = db.createObjectStore(DbTargetDocument.store, {
          keyPath: DbTargetDocument.keyPath
        });
        targetDocumentsStore.createIndex(DbTargetDocument.documentTargetsIndex, DbTargetDocument.documentTargetsKeyPath, {unique: true});
        var targetStore = db.createObjectStore(DbTarget.store, {
          keyPath: DbTarget.keyPath
        });
        targetStore.createIndex(DbTarget.queryTargetsIndexName, DbTarget.queryTargetsKeyPath, {unique: true});
        db.createObjectStore(DbTargetGlobal.store);
      }
      function dropQueryCache(db) {
        db.deleteObjectStore(DbTargetDocument.store);
        db.deleteObjectStore(DbTarget.store);
        db.deleteObjectStore(DbTargetGlobal.store);
      }
      function dropRemoteDocumentChangesStore(db) {
        if (db.objectStoreNames.contains("remoteDocumentChanges")) {
          db.deleteObjectStore("remoteDocumentChanges");
        }
      }
      function writeEmptyTargetGlobalEntry(txn) {
        var globalStore = txn.store(DbTargetGlobal.store);
        var metadata = new DbTargetGlobal(0, 0, SnapshotVersion.min().toTimestamp(), 0);
        return globalStore.put(DbTargetGlobal.key, metadata);
      }
      function createRemoteDocumentReadTimeIndex(txn) {
        var remoteDocumentStore = txn.objectStore(DbRemoteDocument.store);
        remoteDocumentStore.createIndex(DbRemoteDocument.readTimeIndex, DbRemoteDocument.readTimeIndexPath, {unique: false});
        remoteDocumentStore.createIndex(DbRemoteDocument.collectionReadTimeIndex, DbRemoteDocument.collectionReadTimeIndexPath, {unique: false});
      }
      function createClientMetadataStore(db) {
        db.createObjectStore(DbClientMetadata.store, {
          keyPath: DbClientMetadata.keyPath
        });
      }
      function createBundlesStore(db) {
        db.createObjectStore(DbBundle.store, {
          keyPath: DbBundle.keyPath
        });
      }
      function createNamedQueriesStore(db) {
        db.createObjectStore(DbNamedQuery.store, {
          keyPath: DbNamedQuery.keyPath
        });
      }
      var LOG_TAG$3 = "IndexedDbPersistence";
      var MAX_CLIENT_AGE_MS = 30 * 60 * 1e3;
      var MAX_PRIMARY_ELIGIBLE_AGE_MS = 5e3;
      var CLIENT_METADATA_REFRESH_INTERVAL_MS = 4e3;
      var PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG = "Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.";
      var UNSUPPORTED_PLATFORM_ERROR_MSG = "This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.";
      var ZOMBIED_CLIENTS_KEY_PREFIX = "firestore_zombie";
      var MAIN_DATABASE = "main";
      var IndexedDbPersistence = function() {
        function IndexedDbPersistence2(allowTabSynchronization, persistenceKey, clientId, lruParams, queue, window2, document2, serializer, sequenceNumberSyncer, forceOwningTab) {
          this.allowTabSynchronization = allowTabSynchronization;
          this.persistenceKey = persistenceKey;
          this.clientId = clientId;
          this.queue = queue;
          this.window = window2;
          this.document = document2;
          this.sequenceNumberSyncer = sequenceNumberSyncer;
          this.forceOwningTab = forceOwningTab;
          this.listenSequence = null;
          this._started = false;
          this.isPrimary = false;
          this.networkEnabled = true;
          this.windowUnloadHandler = null;
          this.inForeground = false;
          this.documentVisibilityHandler = null;
          this.clientMetadataRefresher = null;
          this.lastGarbageCollectionTime = Number.NEGATIVE_INFINITY;
          this.primaryStateListener = function(_) {
            return Promise.resolve();
          };
          if (!IndexedDbPersistence2.isAvailable()) {
            throw new FirestoreError(Code.UNIMPLEMENTED, UNSUPPORTED_PLATFORM_ERROR_MSG);
          }
          this.referenceDelegate = new IndexedDbLruDelegateImpl(this, lruParams);
          this.dbName = persistenceKey + MAIN_DATABASE;
          this.serializer = new LocalSerializer(serializer);
          this.simpleDb = new SimpleDb(this.dbName, SCHEMA_VERSION, new SchemaConverter(this.serializer));
          this.targetCache = new IndexedDbTargetCache(this.referenceDelegate, this.serializer);
          this.indexManager = new IndexedDbIndexManager();
          this.remoteDocumentCache = newIndexedDbRemoteDocumentCache(this.serializer, this.indexManager);
          this.bundleCache = new IndexedDbBundleCache();
          if (this.window && this.window.localStorage) {
            this.webStorage = this.window.localStorage;
          } else {
            this.webStorage = null;
            if (forceOwningTab === false) {
              logError(LOG_TAG$3, "LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page.");
            }
          }
        }
        IndexedDbPersistence2.prototype.start = function() {
          var _this = this;
          return this.updateClientMetadataAndTryBecomePrimary().then(function() {
            if (!_this.isPrimary && !_this.allowTabSynchronization) {
              throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);
            }
            _this.attachVisibilityHandler();
            _this.attachWindowUnloadHook();
            _this.scheduleClientMetadataAndPrimaryLeaseRefreshes();
            return _this.runTransaction("getHighestListenSequenceNumber", "readonly", function(txn) {
              return _this.targetCache.getHighestSequenceNumber(txn);
            });
          }).then(function(highestListenSequenceNumber) {
            _this.listenSequence = new ListenSequence(highestListenSequenceNumber, _this.sequenceNumberSyncer);
          }).then(function() {
            _this._started = true;
          }).catch(function(reason) {
            _this.simpleDb && _this.simpleDb.close();
            return Promise.reject(reason);
          });
        };
        IndexedDbPersistence2.prototype.setPrimaryStateListener = function(primaryStateListener) {
          var _this = this;
          this.primaryStateListener = function(primaryState) {
            return tslib.__awaiter(_this, void 0, void 0, function() {
              return tslib.__generator(this, function(_d) {
                if (this.started) {
                  return [2, primaryStateListener(primaryState)];
                }
                return [2];
              });
            });
          };
          return primaryStateListener(this.isPrimary);
        };
        IndexedDbPersistence2.prototype.setDatabaseDeletedListener = function(databaseDeletedListener) {
          var _this = this;
          this.simpleDb.setVersionChangeListener(function(event) {
            return tslib.__awaiter(_this, void 0, void 0, function() {
              return tslib.__generator(this, function(_d) {
                switch (_d.label) {
                  case 0:
                    if (!(event.newVersion === null))
                      return [3, 2];
                    return [4, databaseDeletedListener()];
                  case 1:
                    _d.sent();
                    _d.label = 2;
                  case 2:
                    return [2];
                }
              });
            });
          });
        };
        IndexedDbPersistence2.prototype.setNetworkEnabled = function(networkEnabled) {
          var _this = this;
          if (this.networkEnabled !== networkEnabled) {
            this.networkEnabled = networkEnabled;
            this.queue.enqueueAndForget(function() {
              return tslib.__awaiter(_this, void 0, void 0, function() {
                return tslib.__generator(this, function(_d) {
                  switch (_d.label) {
                    case 0:
                      if (!this.started)
                        return [3, 2];
                      return [4, this.updateClientMetadataAndTryBecomePrimary()];
                    case 1:
                      _d.sent();
                      _d.label = 2;
                    case 2:
                      return [2];
                  }
                });
              });
            });
          }
        };
        IndexedDbPersistence2.prototype.updateClientMetadataAndTryBecomePrimary = function() {
          var _this = this;
          return this.runTransaction("updateClientMetadataAndTryBecomePrimary", "readwrite", function(txn) {
            var metadataStore = clientMetadataStore(txn);
            return metadataStore.put(new DbClientMetadata(_this.clientId, Date.now(), _this.networkEnabled, _this.inForeground)).next(function() {
              if (_this.isPrimary) {
                return _this.verifyPrimaryLease(txn).next(function(success) {
                  if (!success) {
                    _this.isPrimary = false;
                    _this.queue.enqueueRetryable(function() {
                      return _this.primaryStateListener(false);
                    });
                  }
                });
              }
            }).next(function() {
              return _this.canActAsPrimary(txn);
            }).next(function(canActAsPrimary) {
              if (_this.isPrimary && !canActAsPrimary) {
                return _this.releasePrimaryLeaseIfHeld(txn).next(function() {
                  return false;
                });
              } else if (canActAsPrimary) {
                return _this.acquireOrExtendPrimaryLease(txn).next(function() {
                  return true;
                });
              } else {
                return false;
              }
            });
          }).catch(function(e) {
            if (isIndexedDbTransactionError(e)) {
              logDebug(LOG_TAG$3, "Failed to extend owner lease: ", e);
              return _this.isPrimary;
            }
            if (!_this.allowTabSynchronization) {
              throw e;
            }
            logDebug(LOG_TAG$3, "Releasing owner lease after error during lease refresh", e);
            return false;
          }).then(function(isPrimary) {
            if (_this.isPrimary !== isPrimary) {
              _this.queue.enqueueRetryable(function() {
                return _this.primaryStateListener(isPrimary);
              });
            }
            _this.isPrimary = isPrimary;
          });
        };
        IndexedDbPersistence2.prototype.verifyPrimaryLease = function(txn) {
          var _this = this;
          var store = primaryClientStore(txn);
          return store.get(DbPrimaryClient.key).next(function(primaryClient) {
            return PersistencePromise.resolve(_this.isLocalClient(primaryClient));
          });
        };
        IndexedDbPersistence2.prototype.removeClientMetadata = function(txn) {
          var metadataStore = clientMetadataStore(txn);
          return metadataStore.delete(this.clientId);
        };
        IndexedDbPersistence2.prototype.maybeGarbageCollectMultiClientState = function() {
          return tslib.__awaiter(this, void 0, void 0, function() {
            var inactiveClients, _i, inactiveClients_1, inactiveClient;
            var _this = this;
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  if (!(this.isPrimary && !this.isWithinAge(this.lastGarbageCollectionTime, MAX_CLIENT_AGE_MS)))
                    return [3, 2];
                  this.lastGarbageCollectionTime = Date.now();
                  return [4, this.runTransaction("maybeGarbageCollectMultiClientState", "readwrite-primary", function(txn) {
                    var metadataStore = getStore(txn, DbClientMetadata.store);
                    return metadataStore.loadAll().next(function(existingClients) {
                      var active = _this.filterActiveClients(existingClients, MAX_CLIENT_AGE_MS);
                      var inactive = existingClients.filter(function(client) {
                        return active.indexOf(client) === -1;
                      });
                      return PersistencePromise.forEach(inactive, function(inactiveClient2) {
                        return metadataStore.delete(inactiveClient2.clientId);
                      }).next(function() {
                        return inactive;
                      });
                    });
                  }).catch(function() {
                    return [];
                  })];
                case 1:
                  inactiveClients = _d.sent();
                  if (this.webStorage) {
                    for (_i = 0, inactiveClients_1 = inactiveClients; _i < inactiveClients_1.length; _i++) {
                      inactiveClient = inactiveClients_1[_i];
                      this.webStorage.removeItem(this.zombiedClientLocalStorageKey(inactiveClient.clientId));
                    }
                  }
                  _d.label = 2;
                case 2:
                  return [2];
              }
            });
          });
        };
        IndexedDbPersistence2.prototype.scheduleClientMetadataAndPrimaryLeaseRefreshes = function() {
          var _this = this;
          this.clientMetadataRefresher = this.queue.enqueueAfterDelay("client_metadata_refresh", CLIENT_METADATA_REFRESH_INTERVAL_MS, function() {
            return _this.updateClientMetadataAndTryBecomePrimary().then(function() {
              return _this.maybeGarbageCollectMultiClientState();
            }).then(function() {
              return _this.scheduleClientMetadataAndPrimaryLeaseRefreshes();
            });
          });
        };
        IndexedDbPersistence2.prototype.isLocalClient = function(client) {
          return client ? client.ownerId === this.clientId : false;
        };
        IndexedDbPersistence2.prototype.canActAsPrimary = function(txn) {
          var _this = this;
          if (this.forceOwningTab) {
            return PersistencePromise.resolve(true);
          }
          var store = primaryClientStore(txn);
          return store.get(DbPrimaryClient.key).next(function(currentPrimary) {
            var currentLeaseIsValid = currentPrimary !== null && _this.isWithinAge(currentPrimary.leaseTimestampMs, MAX_PRIMARY_ELIGIBLE_AGE_MS) && !_this.isClientZombied(currentPrimary.ownerId);
            if (currentLeaseIsValid) {
              if (_this.isLocalClient(currentPrimary) && _this.networkEnabled) {
                return true;
              }
              if (!_this.isLocalClient(currentPrimary)) {
                if (!currentPrimary.allowTabSynchronization) {
                  throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);
                }
                return false;
              }
            }
            if (_this.networkEnabled && _this.inForeground) {
              return true;
            }
            return clientMetadataStore(txn).loadAll().next(function(existingClients) {
              var preferredCandidate = _this.filterActiveClients(existingClients, MAX_PRIMARY_ELIGIBLE_AGE_MS).find(function(otherClient) {
                if (_this.clientId !== otherClient.clientId) {
                  var otherClientHasBetterNetworkState = !_this.networkEnabled && otherClient.networkEnabled;
                  var otherClientHasBetterVisibility = !_this.inForeground && otherClient.inForeground;
                  var otherClientHasSameNetworkState = _this.networkEnabled === otherClient.networkEnabled;
                  if (otherClientHasBetterNetworkState || otherClientHasBetterVisibility && otherClientHasSameNetworkState) {
                    return true;
                  }
                }
                return false;
              });
              return preferredCandidate === void 0;
            });
          }).next(function(canActAsPrimary) {
            if (_this.isPrimary !== canActAsPrimary) {
              logDebug(LOG_TAG$3, "Client " + (canActAsPrimary ? "is" : "is not") + " eligible for a primary lease.");
            }
            return canActAsPrimary;
          });
        };
        IndexedDbPersistence2.prototype.shutdown = function() {
          return tslib.__awaiter(this, void 0, void 0, function() {
            var _this = this;
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  this._started = false;
                  this.markClientZombied();
                  if (this.clientMetadataRefresher) {
                    this.clientMetadataRefresher.cancel();
                    this.clientMetadataRefresher = null;
                  }
                  this.detachVisibilityHandler();
                  this.detachWindowUnloadHook();
                  return [4, this.simpleDb.runTransaction("shutdown", "readwrite", [DbPrimaryClient.store, DbClientMetadata.store], function(simpleDbTxn) {
                    var persistenceTransaction = new IndexedDbTransaction(simpleDbTxn, ListenSequence.INVALID);
                    return _this.releasePrimaryLeaseIfHeld(persistenceTransaction).next(function() {
                      return _this.removeClientMetadata(persistenceTransaction);
                    });
                  })];
                case 1:
                  _d.sent();
                  this.simpleDb.close();
                  this.removeClientZombiedEntry();
                  return [2];
              }
            });
          });
        };
        IndexedDbPersistence2.prototype.filterActiveClients = function(clients, activityThresholdMs) {
          var _this = this;
          return clients.filter(function(client) {
            return _this.isWithinAge(client.updateTimeMs, activityThresholdMs) && !_this.isClientZombied(client.clientId);
          });
        };
        IndexedDbPersistence2.prototype.getActiveClients = function() {
          var _this = this;
          return this.runTransaction("getActiveClients", "readonly", function(txn) {
            return clientMetadataStore(txn).loadAll().next(function(clients) {
              return _this.filterActiveClients(clients, MAX_CLIENT_AGE_MS).map(function(clientMetadata) {
                return clientMetadata.clientId;
              });
            });
          });
        };
        Object.defineProperty(IndexedDbPersistence2.prototype, "started", {
          get: function() {
            return this._started;
          },
          enumerable: false,
          configurable: true
        });
        IndexedDbPersistence2.prototype.getMutationQueue = function(user) {
          return IndexedDbMutationQueue.forUser(user, this.serializer, this.indexManager, this.referenceDelegate);
        };
        IndexedDbPersistence2.prototype.getTargetCache = function() {
          return this.targetCache;
        };
        IndexedDbPersistence2.prototype.getRemoteDocumentCache = function() {
          return this.remoteDocumentCache;
        };
        IndexedDbPersistence2.prototype.getIndexManager = function() {
          return this.indexManager;
        };
        IndexedDbPersistence2.prototype.getBundleCache = function() {
          return this.bundleCache;
        };
        IndexedDbPersistence2.prototype.runTransaction = function(action, mode, transactionOperation) {
          var _this = this;
          logDebug(LOG_TAG$3, "Starting transaction:", action);
          var simpleDbMode = mode === "readonly" ? "readonly" : "readwrite";
          var persistenceTransaction;
          return this.simpleDb.runTransaction(action, simpleDbMode, ALL_STORES, function(simpleDbTxn) {
            persistenceTransaction = new IndexedDbTransaction(simpleDbTxn, _this.listenSequence ? _this.listenSequence.next() : ListenSequence.INVALID);
            if (mode === "readwrite-primary") {
              return _this.verifyPrimaryLease(persistenceTransaction).next(function(holdsPrimaryLease) {
                if (holdsPrimaryLease) {
                  return true;
                }
                return _this.canActAsPrimary(persistenceTransaction);
              }).next(function(holdsPrimaryLease) {
                if (!holdsPrimaryLease) {
                  logError("Failed to obtain primary lease for action '" + action + "'.");
                  _this.isPrimary = false;
                  _this.queue.enqueueRetryable(function() {
                    return _this.primaryStateListener(false);
                  });
                  throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_LOST_ERROR_MSG);
                }
                return transactionOperation(persistenceTransaction);
              }).next(function(result) {
                return _this.acquireOrExtendPrimaryLease(persistenceTransaction).next(function() {
                  return result;
                });
              });
            } else {
              return _this.verifyAllowTabSynchronization(persistenceTransaction).next(function() {
                return transactionOperation(persistenceTransaction);
              });
            }
          }).then(function(result) {
            persistenceTransaction.raiseOnCommittedEvent();
            return result;
          });
        };
        IndexedDbPersistence2.prototype.verifyAllowTabSynchronization = function(txn) {
          var _this = this;
          var store = primaryClientStore(txn);
          return store.get(DbPrimaryClient.key).next(function(currentPrimary) {
            var currentLeaseIsValid = currentPrimary !== null && _this.isWithinAge(currentPrimary.leaseTimestampMs, MAX_PRIMARY_ELIGIBLE_AGE_MS) && !_this.isClientZombied(currentPrimary.ownerId);
            if (currentLeaseIsValid && !_this.isLocalClient(currentPrimary)) {
              if (!_this.forceOwningTab && (!_this.allowTabSynchronization || !currentPrimary.allowTabSynchronization)) {
                throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);
              }
            }
          });
        };
        IndexedDbPersistence2.prototype.acquireOrExtendPrimaryLease = function(txn) {
          var newPrimary = new DbPrimaryClient(this.clientId, this.allowTabSynchronization, Date.now());
          return primaryClientStore(txn).put(DbPrimaryClient.key, newPrimary);
        };
        IndexedDbPersistence2.isAvailable = function() {
          return SimpleDb.isAvailable();
        };
        IndexedDbPersistence2.prototype.releasePrimaryLeaseIfHeld = function(txn) {
          var _this = this;
          var store = primaryClientStore(txn);
          return store.get(DbPrimaryClient.key).next(function(primaryClient) {
            if (_this.isLocalClient(primaryClient)) {
              logDebug(LOG_TAG$3, "Releasing primary lease.");
              return store.delete(DbPrimaryClient.key);
            } else {
              return PersistencePromise.resolve();
            }
          });
        };
        IndexedDbPersistence2.prototype.isWithinAge = function(updateTimeMs, maxAgeMs) {
          var now = Date.now();
          var minAcceptable = now - maxAgeMs;
          var maxAcceptable = now;
          if (updateTimeMs < minAcceptable) {
            return false;
          } else if (updateTimeMs > maxAcceptable) {
            logError("Detected an update time that is in the future: " + updateTimeMs + " > " + maxAcceptable);
            return false;
          }
          return true;
        };
        IndexedDbPersistence2.prototype.attachVisibilityHandler = function() {
          var _this = this;
          if (this.document !== null && typeof this.document.addEventListener === "function") {
            this.documentVisibilityHandler = function() {
              _this.queue.enqueueAndForget(function() {
                _this.inForeground = _this.document.visibilityState === "visible";
                return _this.updateClientMetadataAndTryBecomePrimary();
              });
            };
            this.document.addEventListener("visibilitychange", this.documentVisibilityHandler);
            this.inForeground = this.document.visibilityState === "visible";
          }
        };
        IndexedDbPersistence2.prototype.detachVisibilityHandler = function() {
          if (this.documentVisibilityHandler) {
            this.document.removeEventListener("visibilitychange", this.documentVisibilityHandler);
            this.documentVisibilityHandler = null;
          }
        };
        IndexedDbPersistence2.prototype.attachWindowUnloadHook = function() {
          var _this = this;
          var _a;
          if (typeof ((_a = this.window) === null || _a === void 0 ? void 0 : _a.addEventListener) === "function") {
            this.windowUnloadHandler = function() {
              _this.markClientZombied();
              _this.queue.enqueueAndForget(function() {
                return _this.shutdown();
              });
            };
            this.window.addEventListener("unload", this.windowUnloadHandler);
          }
        };
        IndexedDbPersistence2.prototype.detachWindowUnloadHook = function() {
          if (this.windowUnloadHandler) {
            this.window.removeEventListener("unload", this.windowUnloadHandler);
            this.windowUnloadHandler = null;
          }
        };
        IndexedDbPersistence2.prototype.isClientZombied = function(clientId) {
          var _a;
          try {
            var isZombied = ((_a = this.webStorage) === null || _a === void 0 ? void 0 : _a.getItem(this.zombiedClientLocalStorageKey(clientId))) !== null;
            logDebug(LOG_TAG$3, "Client '" + clientId + "' " + (isZombied ? "is" : "is not") + " zombied in LocalStorage");
            return isZombied;
          } catch (e) {
            logError(LOG_TAG$3, "Failed to get zombied client id.", e);
            return false;
          }
        };
        IndexedDbPersistence2.prototype.markClientZombied = function() {
          if (!this.webStorage) {
            return;
          }
          try {
            this.webStorage.setItem(this.zombiedClientLocalStorageKey(this.clientId), String(Date.now()));
          } catch (e) {
            logError("Failed to set zombie client id.", e);
          }
        };
        IndexedDbPersistence2.prototype.removeClientZombiedEntry = function() {
          if (!this.webStorage) {
            return;
          }
          try {
            this.webStorage.removeItem(this.zombiedClientLocalStorageKey(this.clientId));
          } catch (e) {
          }
        };
        IndexedDbPersistence2.prototype.zombiedClientLocalStorageKey = function(clientId) {
          return ZOMBIED_CLIENTS_KEY_PREFIX + "_" + this.persistenceKey + "_" + clientId;
        };
        return IndexedDbPersistence2;
      }();
      function primaryClientStore(txn) {
        return getStore(txn, DbPrimaryClient.store);
      }
      function clientMetadataStore(txn) {
        return getStore(txn, DbClientMetadata.store);
      }
      function indexedDbStoragePrefix(databaseId, persistenceKey) {
        var database = databaseId.projectId;
        if (!databaseId.isDefaultDatabase) {
          database += "." + databaseId.database;
        }
        return "firestore/" + persistenceKey + "/" + database + "/";
      }
      function indexedDbClearPersistence(persistenceKey) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var dbName;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                if (!SimpleDb.isAvailable()) {
                  return [2, Promise.resolve()];
                }
                dbName = persistenceKey + MAIN_DATABASE;
                return [4, SimpleDb.delete(dbName)];
              case 1:
                _d.sent();
                return [2];
            }
          });
        });
      }
      var LocalDocumentsView = function() {
        function LocalDocumentsView2(remoteDocumentCache, mutationQueue, indexManager) {
          this.remoteDocumentCache = remoteDocumentCache;
          this.mutationQueue = mutationQueue;
          this.indexManager = indexManager;
        }
        LocalDocumentsView2.prototype.getDocument = function(transaction, key) {
          var _this = this;
          return this.mutationQueue.getAllMutationBatchesAffectingDocumentKey(transaction, key).next(function(batches) {
            return _this.getDocumentInternal(transaction, key, batches);
          });
        };
        LocalDocumentsView2.prototype.getDocumentInternal = function(transaction, key, inBatches) {
          return this.remoteDocumentCache.getEntry(transaction, key).next(function(doc2) {
            for (var _i = 0, inBatches_1 = inBatches; _i < inBatches_1.length; _i++) {
              var batch = inBatches_1[_i];
              batch.applyToLocalView(doc2);
            }
            return doc2;
          });
        };
        LocalDocumentsView2.prototype.applyLocalMutationsToDocuments = function(docs, batches) {
          docs.forEach(function(key, localView) {
            for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {
              var batch = batches_1[_i];
              batch.applyToLocalView(localView);
            }
          });
        };
        LocalDocumentsView2.prototype.getDocuments = function(transaction, keys) {
          var _this = this;
          return this.remoteDocumentCache.getEntries(transaction, keys).next(function(docs) {
            return _this.applyLocalViewToDocuments(transaction, docs).next(function() {
              return docs;
            });
          });
        };
        LocalDocumentsView2.prototype.applyLocalViewToDocuments = function(transaction, baseDocs) {
          var _this = this;
          return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(transaction, baseDocs).next(function(batches) {
            return _this.applyLocalMutationsToDocuments(baseDocs, batches);
          });
        };
        LocalDocumentsView2.prototype.getDocumentsMatchingQuery = function(transaction, query3, sinceReadTime) {
          if (isDocumentQuery(query3)) {
            return this.getDocumentsMatchingDocumentQuery(transaction, query3.path);
          } else if (isCollectionGroupQuery(query3)) {
            return this.getDocumentsMatchingCollectionGroupQuery(transaction, query3, sinceReadTime);
          } else {
            return this.getDocumentsMatchingCollectionQuery(transaction, query3, sinceReadTime);
          }
        };
        LocalDocumentsView2.prototype.getDocumentsMatchingDocumentQuery = function(transaction, docPath) {
          return this.getDocument(transaction, new DocumentKey(docPath)).next(function(document2) {
            var result = documentMap();
            if (document2.isFoundDocument()) {
              result = result.insert(document2.key, document2);
            }
            return result;
          });
        };
        LocalDocumentsView2.prototype.getDocumentsMatchingCollectionGroupQuery = function(transaction, query3, sinceReadTime) {
          var _this = this;
          var collectionId = query3.collectionGroup;
          var results = documentMap();
          return this.indexManager.getCollectionParents(transaction, collectionId).next(function(parents) {
            return PersistencePromise.forEach(parents, function(parent) {
              var collectionQuery = asCollectionQueryAtPath(query3, parent.child(collectionId));
              return _this.getDocumentsMatchingCollectionQuery(transaction, collectionQuery, sinceReadTime).next(function(r) {
                r.forEach(function(key, doc2) {
                  results = results.insert(key, doc2);
                });
              });
            }).next(function() {
              return results;
            });
          });
        };
        LocalDocumentsView2.prototype.getDocumentsMatchingCollectionQuery = function(transaction, query3, sinceReadTime) {
          var _this = this;
          var results;
          var mutationBatches;
          return this.remoteDocumentCache.getDocumentsMatchingQuery(transaction, query3, sinceReadTime).next(function(queryResults) {
            results = queryResults;
            return _this.mutationQueue.getAllMutationBatchesAffectingQuery(transaction, query3);
          }).next(function(matchingMutationBatches) {
            mutationBatches = matchingMutationBatches;
            return _this.addMissingBaseDocuments(transaction, mutationBatches, results).next(function(mergedDocuments) {
              results = mergedDocuments;
              for (var _i = 0, mutationBatches_1 = mutationBatches; _i < mutationBatches_1.length; _i++) {
                var batch = mutationBatches_1[_i];
                for (var _d = 0, _e = batch.mutations; _d < _e.length; _d++) {
                  var mutation = _e[_d];
                  var key = mutation.key;
                  var document_2 = results.get(key);
                  if (document_2 == null) {
                    document_2 = MutableDocument.newInvalidDocument(key);
                    results = results.insert(key, document_2);
                  }
                  applyMutationToLocalView(mutation, document_2, batch.localWriteTime);
                  if (!document_2.isFoundDocument()) {
                    results = results.remove(key);
                  }
                }
              }
            });
          }).next(function() {
            results.forEach(function(key, doc2) {
              if (!queryMatches(query3, doc2)) {
                results = results.remove(key);
              }
            });
            return results;
          });
        };
        LocalDocumentsView2.prototype.addMissingBaseDocuments = function(transaction, matchingMutationBatches, existingDocuments) {
          var missingBaseDocEntriesForPatching = documentKeySet();
          for (var _i = 0, matchingMutationBatches_1 = matchingMutationBatches; _i < matchingMutationBatches_1.length; _i++) {
            var batch = matchingMutationBatches_1[_i];
            for (var _d = 0, _e = batch.mutations; _d < _e.length; _d++) {
              var mutation = _e[_d];
              if (mutation instanceof PatchMutation && existingDocuments.get(mutation.key) === null) {
                missingBaseDocEntriesForPatching = missingBaseDocEntriesForPatching.add(mutation.key);
              }
            }
          }
          var mergedDocuments = existingDocuments;
          return this.remoteDocumentCache.getEntries(transaction, missingBaseDocEntriesForPatching).next(function(missingBaseDocs) {
            missingBaseDocs.forEach(function(key, doc2) {
              if (doc2.isFoundDocument()) {
                mergedDocuments = mergedDocuments.insert(key, doc2);
              }
            });
            return mergedDocuments;
          });
        };
        return LocalDocumentsView2;
      }();
      var LOG_TAG$4 = "LocalStore";
      var RESUME_TOKEN_MAX_AGE_MICROS = 5 * 60 * 1e6;
      var LocalStoreImpl = function() {
        function LocalStoreImpl2(persistence, queryEngine, initialUser, serializer) {
          this.persistence = persistence;
          this.queryEngine = queryEngine;
          this.serializer = serializer;
          this.targetDataByTarget = new SortedMap(primitiveComparator);
          this.targetIdByTarget = new ObjectMap(function(t) {
            return canonifyTarget(t);
          }, targetEquals);
          this.lastDocumentChangeReadTime = SnapshotVersion.min();
          this.mutationQueue = persistence.getMutationQueue(initialUser);
          this.remoteDocuments = persistence.getRemoteDocumentCache();
          this.targetCache = persistence.getTargetCache();
          this.localDocuments = new LocalDocumentsView(this.remoteDocuments, this.mutationQueue, this.persistence.getIndexManager());
          this.bundleCache = persistence.getBundleCache();
          this.queryEngine.setLocalDocumentsView(this.localDocuments);
        }
        LocalStoreImpl2.prototype.collectGarbage = function(garbageCollector) {
          var _this = this;
          return this.persistence.runTransaction("Collect garbage", "readwrite-primary", function(txn) {
            return garbageCollector.collect(txn, _this.targetDataByTarget);
          });
        };
        return LocalStoreImpl2;
      }();
      function newLocalStore(persistence, queryEngine, initialUser, serializer) {
        return new LocalStoreImpl(persistence, queryEngine, initialUser, serializer);
      }
      function localStoreHandleUserChange(localStore, user) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var localStoreImpl, newMutationQueue, newLocalDocuments, result;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                localStoreImpl = debugCast(localStore);
                newMutationQueue = localStoreImpl.mutationQueue;
                newLocalDocuments = localStoreImpl.localDocuments;
                return [4, localStoreImpl.persistence.runTransaction("Handle user change", "readonly", function(txn) {
                  var oldBatches;
                  return localStoreImpl.mutationQueue.getAllMutationBatches(txn).next(function(promisedOldBatches) {
                    oldBatches = promisedOldBatches;
                    newMutationQueue = localStoreImpl.persistence.getMutationQueue(user);
                    newLocalDocuments = new LocalDocumentsView(localStoreImpl.remoteDocuments, newMutationQueue, localStoreImpl.persistence.getIndexManager());
                    return newMutationQueue.getAllMutationBatches(txn);
                  }).next(function(newBatches) {
                    var removedBatchIds = [];
                    var addedBatchIds = [];
                    var changedKeys = documentKeySet();
                    for (var _i = 0, oldBatches_1 = oldBatches; _i < oldBatches_1.length; _i++) {
                      var batch = oldBatches_1[_i];
                      removedBatchIds.push(batch.batchId);
                      for (var _d2 = 0, _e = batch.mutations; _d2 < _e.length; _d2++) {
                        var mutation = _e[_d2];
                        changedKeys = changedKeys.add(mutation.key);
                      }
                    }
                    for (var _f = 0, newBatches_1 = newBatches; _f < newBatches_1.length; _f++) {
                      var batch = newBatches_1[_f];
                      addedBatchIds.push(batch.batchId);
                      for (var _g = 0, _h = batch.mutations; _g < _h.length; _g++) {
                        var mutation = _h[_g];
                        changedKeys = changedKeys.add(mutation.key);
                      }
                    }
                    return newLocalDocuments.getDocuments(txn, changedKeys).next(function(affectedDocuments) {
                      return {
                        affectedDocuments,
                        removedBatchIds,
                        addedBatchIds
                      };
                    });
                  });
                })];
              case 1:
                result = _d.sent();
                localStoreImpl.mutationQueue = newMutationQueue;
                localStoreImpl.localDocuments = newLocalDocuments;
                localStoreImpl.queryEngine.setLocalDocumentsView(localStoreImpl.localDocuments);
                return [2, result];
            }
          });
        });
      }
      function localStoreWriteLocally(localStore, mutations) {
        var localStoreImpl = debugCast(localStore);
        var localWriteTime = Timestamp.now();
        var keys = mutations.reduce(function(keys2, m) {
          return keys2.add(m.key);
        }, documentKeySet());
        var existingDocs;
        return localStoreImpl.persistence.runTransaction("Locally write mutations", "readwrite", function(txn) {
          return localStoreImpl.localDocuments.getDocuments(txn, keys).next(function(docs) {
            existingDocs = docs;
            var baseMutations = [];
            for (var _i = 0, mutations_2 = mutations; _i < mutations_2.length; _i++) {
              var mutation = mutations_2[_i];
              var baseValue = extractMutationBaseValue(mutation, existingDocs.get(mutation.key));
              if (baseValue != null) {
                baseMutations.push(new PatchMutation(mutation.key, baseValue, extractFieldMask(baseValue.toProto().mapValue), Precondition.exists(true)));
              }
            }
            return localStoreImpl.mutationQueue.addMutationBatch(txn, localWriteTime, baseMutations, mutations);
          });
        }).then(function(batch) {
          batch.applyToLocalDocumentSet(existingDocs);
          return {batchId: batch.batchId, changes: existingDocs};
        });
      }
      function localStoreAcknowledgeBatch(localStore, batchResult) {
        var localStoreImpl = debugCast(localStore);
        return localStoreImpl.persistence.runTransaction("Acknowledge batch", "readwrite-primary", function(txn) {
          var affected = batchResult.batch.keys();
          var documentBuffer = localStoreImpl.remoteDocuments.newChangeBuffer({
            trackRemovals: true
          });
          return applyWriteToRemoteDocuments(localStoreImpl, txn, batchResult, documentBuffer).next(function() {
            return documentBuffer.apply(txn);
          }).next(function() {
            return localStoreImpl.mutationQueue.performConsistencyCheck(txn);
          }).next(function() {
            return localStoreImpl.localDocuments.getDocuments(txn, affected);
          });
        });
      }
      function localStoreRejectBatch(localStore, batchId) {
        var localStoreImpl = debugCast(localStore);
        return localStoreImpl.persistence.runTransaction("Reject batch", "readwrite-primary", function(txn) {
          var affectedKeys;
          return localStoreImpl.mutationQueue.lookupMutationBatch(txn, batchId).next(function(batch) {
            hardAssert(batch !== null);
            affectedKeys = batch.keys();
            return localStoreImpl.mutationQueue.removeMutationBatch(txn, batch);
          }).next(function() {
            return localStoreImpl.mutationQueue.performConsistencyCheck(txn);
          }).next(function() {
            return localStoreImpl.localDocuments.getDocuments(txn, affectedKeys);
          });
        });
      }
      function localStoreGetHighestUnacknowledgedBatchId(localStore) {
        var localStoreImpl = debugCast(localStore);
        return localStoreImpl.persistence.runTransaction("Get highest unacknowledged batch id", "readonly", function(txn) {
          return localStoreImpl.mutationQueue.getHighestUnacknowledgedBatchId(txn);
        });
      }
      function localStoreGetLastRemoteSnapshotVersion(localStore) {
        var localStoreImpl = debugCast(localStore);
        return localStoreImpl.persistence.runTransaction("Get last remote snapshot version", "readonly", function(txn) {
          return localStoreImpl.targetCache.getLastRemoteSnapshotVersion(txn);
        });
      }
      function localStoreApplyRemoteEventToLocalCache(localStore, remoteEvent) {
        var localStoreImpl = debugCast(localStore);
        var remoteVersion = remoteEvent.snapshotVersion;
        var newTargetDataByTargetMap = localStoreImpl.targetDataByTarget;
        return localStoreImpl.persistence.runTransaction("Apply remote event", "readwrite-primary", function(txn) {
          var documentBuffer = localStoreImpl.remoteDocuments.newChangeBuffer({
            trackRemovals: true
          });
          newTargetDataByTargetMap = localStoreImpl.targetDataByTarget;
          var promises = [];
          remoteEvent.targetChanges.forEach(function(change, targetId) {
            var oldTargetData = newTargetDataByTargetMap.get(targetId);
            if (!oldTargetData) {
              return;
            }
            promises.push(localStoreImpl.targetCache.removeMatchingKeys(txn, change.removedDocuments, targetId).next(function() {
              return localStoreImpl.targetCache.addMatchingKeys(txn, change.addedDocuments, targetId);
            }));
            var resumeToken = change.resumeToken;
            if (resumeToken.approximateByteSize() > 0) {
              var newTargetData = oldTargetData.withResumeToken(resumeToken, remoteVersion).withSequenceNumber(txn.currentSequenceNumber);
              newTargetDataByTargetMap = newTargetDataByTargetMap.insert(targetId, newTargetData);
              if (shouldPersistTargetData(oldTargetData, newTargetData, change)) {
                promises.push(localStoreImpl.targetCache.updateTargetData(txn, newTargetData));
              }
            }
          });
          var changedDocs = mutableDocumentMap();
          remoteEvent.documentUpdates.forEach(function(key, doc2) {
            if (remoteEvent.resolvedLimboDocuments.has(key)) {
              promises.push(localStoreImpl.persistence.referenceDelegate.updateLimboDocument(txn, key));
            }
          });
          promises.push(populateDocumentChangeBuffer(txn, documentBuffer, remoteEvent.documentUpdates, remoteVersion, void 0).next(function(result) {
            changedDocs = result;
          }));
          if (!remoteVersion.isEqual(SnapshotVersion.min())) {
            var updateRemoteVersion = localStoreImpl.targetCache.getLastRemoteSnapshotVersion(txn).next(function(lastRemoteSnapshotVersion) {
              return localStoreImpl.targetCache.setTargetsMetadata(txn, txn.currentSequenceNumber, remoteVersion);
            });
            promises.push(updateRemoteVersion);
          }
          return PersistencePromise.waitFor(promises).next(function() {
            return documentBuffer.apply(txn);
          }).next(function() {
            return localStoreImpl.localDocuments.applyLocalViewToDocuments(txn, changedDocs);
          }).next(function() {
            return changedDocs;
          });
        }).then(function(changedDocs) {
          localStoreImpl.targetDataByTarget = newTargetDataByTargetMap;
          return changedDocs;
        });
      }
      function populateDocumentChangeBuffer(txn, documentBuffer, documents, globalVersion, documentVersions) {
        var updatedKeys = documentKeySet();
        documents.forEach(function(k) {
          return updatedKeys = updatedKeys.add(k);
        });
        return documentBuffer.getEntries(txn, updatedKeys).next(function(existingDocs) {
          var changedDocs = mutableDocumentMap();
          documents.forEach(function(key, doc2) {
            var existingDoc = existingDocs.get(key);
            var docReadTime = (documentVersions === null || documentVersions === void 0 ? void 0 : documentVersions.get(key)) || globalVersion;
            if (doc2.isNoDocument() && doc2.version.isEqual(SnapshotVersion.min())) {
              documentBuffer.removeEntry(key, docReadTime);
              changedDocs = changedDocs.insert(key, doc2);
            } else if (!existingDoc.isValidDocument() || doc2.version.compareTo(existingDoc.version) > 0 || doc2.version.compareTo(existingDoc.version) === 0 && existingDoc.hasPendingWrites) {
              documentBuffer.addEntry(doc2, docReadTime);
              changedDocs = changedDocs.insert(key, doc2);
            } else {
              logDebug(LOG_TAG$4, "Ignoring outdated watch update for ", key, ". Current version:", existingDoc.version, " Watch version:", doc2.version);
            }
          });
          return changedDocs;
        });
      }
      function shouldPersistTargetData(oldTargetData, newTargetData, change) {
        hardAssert(newTargetData.resumeToken.approximateByteSize() > 0);
        if (oldTargetData.resumeToken.approximateByteSize() === 0) {
          return true;
        }
        var timeDelta = newTargetData.snapshotVersion.toMicroseconds() - oldTargetData.snapshotVersion.toMicroseconds();
        if (timeDelta >= RESUME_TOKEN_MAX_AGE_MICROS) {
          return true;
        }
        var changes = change.addedDocuments.size + change.modifiedDocuments.size + change.removedDocuments.size;
        return changes > 0;
      }
      function localStoreNotifyLocalViewChanges(localStore, viewChanges) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var localStoreImpl, e_2, _i, viewChanges_1, viewChange, targetId, targetData, lastLimboFreeSnapshotVersion, updatedTargetData;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                localStoreImpl = debugCast(localStore);
                _d.label = 1;
              case 1:
                _d.trys.push([1, 3, , 4]);
                return [4, localStoreImpl.persistence.runTransaction("notifyLocalViewChanges", "readwrite", function(txn) {
                  return PersistencePromise.forEach(viewChanges, function(viewChange2) {
                    return PersistencePromise.forEach(viewChange2.addedKeys, function(key) {
                      return localStoreImpl.persistence.referenceDelegate.addReference(txn, viewChange2.targetId, key);
                    }).next(function() {
                      return PersistencePromise.forEach(viewChange2.removedKeys, function(key) {
                        return localStoreImpl.persistence.referenceDelegate.removeReference(txn, viewChange2.targetId, key);
                      });
                    });
                  });
                })];
              case 2:
                _d.sent();
                return [3, 4];
              case 3:
                e_2 = _d.sent();
                if (isIndexedDbTransactionError(e_2)) {
                  logDebug(LOG_TAG$4, "Failed to update sequence numbers: " + e_2);
                } else {
                  throw e_2;
                }
                return [3, 4];
              case 4:
                for (_i = 0, viewChanges_1 = viewChanges; _i < viewChanges_1.length; _i++) {
                  viewChange = viewChanges_1[_i];
                  targetId = viewChange.targetId;
                  if (!viewChange.fromCache) {
                    targetData = localStoreImpl.targetDataByTarget.get(targetId);
                    lastLimboFreeSnapshotVersion = targetData.snapshotVersion;
                    updatedTargetData = targetData.withLastLimboFreeSnapshotVersion(lastLimboFreeSnapshotVersion);
                    localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.insert(targetId, updatedTargetData);
                  }
                }
                return [2];
            }
          });
        });
      }
      function localStoreGetNextMutationBatch(localStore, afterBatchId) {
        var localStoreImpl = debugCast(localStore);
        return localStoreImpl.persistence.runTransaction("Get next mutation batch", "readonly", function(txn) {
          if (afterBatchId === void 0) {
            afterBatchId = BATCHID_UNKNOWN;
          }
          return localStoreImpl.mutationQueue.getNextMutationBatchAfterBatchId(txn, afterBatchId);
        });
      }
      function localStoreReadDocument(localStore, key) {
        var localStoreImpl = debugCast(localStore);
        return localStoreImpl.persistence.runTransaction("read document", "readonly", function(txn) {
          return localStoreImpl.localDocuments.getDocument(txn, key);
        });
      }
      function localStoreAllocateTarget(localStore, target) {
        var localStoreImpl = debugCast(localStore);
        return localStoreImpl.persistence.runTransaction("Allocate target", "readwrite", function(txn) {
          var targetData;
          return localStoreImpl.targetCache.getTargetData(txn, target).next(function(cached) {
            if (cached) {
              targetData = cached;
              return PersistencePromise.resolve(targetData);
            } else {
              return localStoreImpl.targetCache.allocateTargetId(txn).next(function(targetId) {
                targetData = new TargetData(target, targetId, 0, txn.currentSequenceNumber);
                return localStoreImpl.targetCache.addTargetData(txn, targetData).next(function() {
                  return targetData;
                });
              });
            }
          });
        }).then(function(targetData) {
          var cachedTargetData = localStoreImpl.targetDataByTarget.get(targetData.targetId);
          if (cachedTargetData === null || targetData.snapshotVersion.compareTo(cachedTargetData.snapshotVersion) > 0) {
            localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.insert(targetData.targetId, targetData);
            localStoreImpl.targetIdByTarget.set(target, targetData.targetId);
          }
          return targetData;
        });
      }
      function localStoreGetTargetData(localStore, transaction, target) {
        var localStoreImpl = debugCast(localStore);
        var targetId = localStoreImpl.targetIdByTarget.get(target);
        if (targetId !== void 0) {
          return PersistencePromise.resolve(localStoreImpl.targetDataByTarget.get(targetId));
        } else {
          return localStoreImpl.targetCache.getTargetData(transaction, target);
        }
      }
      function localStoreReleaseTarget(localStore, targetId, keepPersistedTargetData) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var localStoreImpl, targetData, mode, e_3;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                localStoreImpl = debugCast(localStore);
                targetData = localStoreImpl.targetDataByTarget.get(targetId);
                mode = keepPersistedTargetData ? "readwrite" : "readwrite-primary";
                _d.label = 1;
              case 1:
                _d.trys.push([1, 4, , 5]);
                if (!!keepPersistedTargetData)
                  return [3, 3];
                return [4, localStoreImpl.persistence.runTransaction("Release target", mode, function(txn) {
                  return localStoreImpl.persistence.referenceDelegate.removeTarget(txn, targetData);
                })];
              case 2:
                _d.sent();
                _d.label = 3;
              case 3:
                return [3, 5];
              case 4:
                e_3 = _d.sent();
                if (isIndexedDbTransactionError(e_3)) {
                  logDebug(LOG_TAG$4, "Failed to update sequence numbers for target " + targetId + ": " + e_3);
                } else {
                  throw e_3;
                }
                return [3, 5];
              case 5:
                localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.remove(targetId);
                localStoreImpl.targetIdByTarget.delete(targetData.target);
                return [2];
            }
          });
        });
      }
      function localStoreExecuteQuery(localStore, query3, usePreviousResults) {
        var localStoreImpl = debugCast(localStore);
        var lastLimboFreeSnapshotVersion = SnapshotVersion.min();
        var remoteKeys = documentKeySet();
        return localStoreImpl.persistence.runTransaction("Execute query", "readonly", function(txn) {
          return localStoreGetTargetData(localStoreImpl, txn, queryToTarget(query3)).next(function(targetData) {
            if (targetData) {
              lastLimboFreeSnapshotVersion = targetData.lastLimboFreeSnapshotVersion;
              return localStoreImpl.targetCache.getMatchingKeysForTargetId(txn, targetData.targetId).next(function(result) {
                remoteKeys = result;
              });
            }
          }).next(function() {
            return localStoreImpl.queryEngine.getDocumentsMatchingQuery(txn, query3, usePreviousResults ? lastLimboFreeSnapshotVersion : SnapshotVersion.min(), usePreviousResults ? remoteKeys : documentKeySet());
          }).next(function(documents) {
            return {documents, remoteKeys};
          });
        });
      }
      function applyWriteToRemoteDocuments(localStoreImpl, txn, batchResult, documentBuffer) {
        var batch = batchResult.batch;
        var docKeys = batch.keys();
        var promiseChain = PersistencePromise.resolve();
        docKeys.forEach(function(docKey) {
          promiseChain = promiseChain.next(function() {
            return documentBuffer.getEntry(txn, docKey);
          }).next(function(doc2) {
            var ackVersion = batchResult.docVersions.get(docKey);
            hardAssert(ackVersion !== null);
            if (doc2.version.compareTo(ackVersion) < 0) {
              batch.applyToRemoteDocument(doc2, batchResult);
              if (doc2.isValidDocument()) {
                documentBuffer.addEntry(doc2, batchResult.commitVersion);
              }
            }
          });
        });
        return promiseChain.next(function() {
          return localStoreImpl.mutationQueue.removeMutationBatch(txn, batch);
        });
      }
      function localStoreLookupMutationDocuments(localStore, batchId) {
        var localStoreImpl = debugCast(localStore);
        var mutationQueueImpl = debugCast(localStoreImpl.mutationQueue);
        return localStoreImpl.persistence.runTransaction("Lookup mutation documents", "readonly", function(txn) {
          return mutationQueueImpl.lookupMutationKeys(txn, batchId).next(function(keys) {
            if (keys) {
              return localStoreImpl.localDocuments.getDocuments(txn, keys);
            } else {
              return PersistencePromise.resolve(null);
            }
          });
        });
      }
      function localStoreRemoveCachedMutationBatchMetadata(localStore, batchId) {
        var mutationQueueImpl = debugCast(debugCast(localStore, LocalStoreImpl).mutationQueue);
        mutationQueueImpl.removeCachedMutationKeys(batchId);
      }
      function localStoreGetActiveClients(localStore) {
        var persistenceImpl = debugCast(debugCast(localStore, LocalStoreImpl).persistence);
        return persistenceImpl.getActiveClients();
      }
      function localStoreGetCachedTarget(localStore, targetId) {
        var localStoreImpl = debugCast(localStore);
        var targetCacheImpl = debugCast(localStoreImpl.targetCache);
        var cachedTargetData = localStoreImpl.targetDataByTarget.get(targetId);
        if (cachedTargetData) {
          return Promise.resolve(cachedTargetData.target);
        } else {
          return localStoreImpl.persistence.runTransaction("Get target data", "readonly", function(txn) {
            return targetCacheImpl.getTargetDataForTarget(txn, targetId).next(function(targetData) {
              return targetData ? targetData.target : null;
            });
          });
        }
      }
      function localStoreGetNewDocumentChanges(localStore) {
        var localStoreImpl = debugCast(localStore);
        return localStoreImpl.persistence.runTransaction("Get new document changes", "readonly", function(txn) {
          return remoteDocumentCacheGetNewDocumentChanges(localStoreImpl.remoteDocuments, txn, localStoreImpl.lastDocumentChangeReadTime);
        }).then(function(_d) {
          var changedDocs = _d.changedDocs, readTime = _d.readTime;
          localStoreImpl.lastDocumentChangeReadTime = readTime;
          return changedDocs;
        });
      }
      function localStoreSynchronizeLastDocumentChangeReadTime(localStore) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var localStoreImpl;
          return tslib.__generator(this, function(_d) {
            localStoreImpl = debugCast(localStore);
            return [2, localStoreImpl.persistence.runTransaction("Synchronize last document change read time", "readonly", function(txn) {
              return remoteDocumentCacheGetLastReadTime(txn);
            }).then(function(readTime) {
              localStoreImpl.lastDocumentChangeReadTime = readTime;
            })];
          });
        });
      }
      function umbrellaTarget(bundleName) {
        return queryToTarget(newQueryForPath(ResourcePath.fromString("__bundle__/docs/" + bundleName)));
      }
      function localStoreApplyBundledDocuments(localStore, bundleConverter, documents, bundleName) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var localStoreImpl, documentKeys, documentMap2, versionMap, _i, documents_1, bundleDoc, documentKey, documentBuffer, umbrellaTargetData;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                localStoreImpl = debugCast(localStore);
                documentKeys = documentKeySet();
                documentMap2 = mutableDocumentMap();
                versionMap = documentVersionMap();
                for (_i = 0, documents_1 = documents; _i < documents_1.length; _i++) {
                  bundleDoc = documents_1[_i];
                  documentKey = bundleConverter.toDocumentKey(bundleDoc.metadata.name);
                  if (bundleDoc.document) {
                    documentKeys = documentKeys.add(documentKey);
                  }
                  documentMap2 = documentMap2.insert(documentKey, bundleConverter.toMutableDocument(bundleDoc));
                  versionMap = versionMap.insert(documentKey, bundleConverter.toSnapshotVersion(bundleDoc.metadata.readTime));
                }
                documentBuffer = localStoreImpl.remoteDocuments.newChangeBuffer({
                  trackRemovals: true
                });
                return [4, localStoreAllocateTarget(localStoreImpl, umbrellaTarget(bundleName))];
              case 1:
                umbrellaTargetData = _d.sent();
                return [2, localStoreImpl.persistence.runTransaction("Apply bundle documents", "readwrite", function(txn) {
                  return populateDocumentChangeBuffer(txn, documentBuffer, documentMap2, SnapshotVersion.min(), versionMap).next(function(changedDocs) {
                    documentBuffer.apply(txn);
                    return changedDocs;
                  }).next(function(changedDocs) {
                    return localStoreImpl.targetCache.removeMatchingKeysForTargetId(txn, umbrellaTargetData.targetId).next(function() {
                      return localStoreImpl.targetCache.addMatchingKeys(txn, documentKeys, umbrellaTargetData.targetId);
                    }).next(function() {
                      return localStoreImpl.localDocuments.applyLocalViewToDocuments(txn, changedDocs);
                    }).next(function() {
                      return changedDocs;
                    });
                  });
                })];
            }
          });
        });
      }
      function localStoreHasNewerBundle(localStore, bundleMetadata) {
        var localStoreImpl = debugCast(localStore);
        var currentReadTime = fromVersion(bundleMetadata.createTime);
        return localStoreImpl.persistence.runTransaction("hasNewerBundle", "readonly", function(transaction) {
          return localStoreImpl.bundleCache.getBundleMetadata(transaction, bundleMetadata.id);
        }).then(function(cached) {
          return !!cached && cached.createTime.compareTo(currentReadTime) >= 0;
        });
      }
      function localStoreSaveBundle(localStore, bundleMetadata) {
        var localStoreImpl = debugCast(localStore);
        return localStoreImpl.persistence.runTransaction("Save bundle", "readwrite", function(transaction) {
          return localStoreImpl.bundleCache.saveBundleMetadata(transaction, bundleMetadata);
        });
      }
      function localStoreGetNamedQuery(localStore, queryName) {
        var localStoreImpl = debugCast(localStore);
        return localStoreImpl.persistence.runTransaction("Get named query", "readonly", function(transaction) {
          return localStoreImpl.bundleCache.getNamedQuery(transaction, queryName);
        });
      }
      function localStoreSaveNamedQuery(localStore, query3, documents) {
        if (documents === void 0) {
          documents = documentKeySet();
        }
        return tslib.__awaiter(this, void 0, void 0, function() {
          var allocated, localStoreImpl;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                return [4, localStoreAllocateTarget(localStore, queryToTarget(fromBundledQuery(query3.bundledQuery)))];
              case 1:
                allocated = _d.sent();
                localStoreImpl = debugCast(localStore);
                return [2, localStoreImpl.persistence.runTransaction("Save named query", "readwrite", function(transaction) {
                  var readTime = fromVersion(query3.readTime);
                  if (allocated.snapshotVersion.compareTo(readTime) >= 0) {
                    return localStoreImpl.bundleCache.saveNamedQuery(transaction, query3);
                  }
                  var newTargetData = allocated.withResumeToken(ByteString.EMPTY_BYTE_STRING, readTime);
                  localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.insert(newTargetData.targetId, newTargetData);
                  return localStoreImpl.targetCache.updateTargetData(transaction, newTargetData).next(function() {
                    return localStoreImpl.targetCache.removeMatchingKeysForTargetId(transaction, allocated.targetId);
                  }).next(function() {
                    return localStoreImpl.targetCache.addMatchingKeys(transaction, documents, allocated.targetId);
                  }).next(function() {
                    return localStoreImpl.bundleCache.saveNamedQuery(transaction, query3);
                  });
                })];
            }
          });
        });
      }
      var MemoryBundleCache = function() {
        function MemoryBundleCache2(serializer) {
          this.serializer = serializer;
          this.bundles = new Map();
          this.namedQueries = new Map();
        }
        MemoryBundleCache2.prototype.getBundleMetadata = function(transaction, bundleId) {
          return PersistencePromise.resolve(this.bundles.get(bundleId));
        };
        MemoryBundleCache2.prototype.saveBundleMetadata = function(transaction, bundleMetadata) {
          this.bundles.set(bundleMetadata.id, fromBundleMetadata(bundleMetadata));
          return PersistencePromise.resolve();
        };
        MemoryBundleCache2.prototype.getNamedQuery = function(transaction, queryName) {
          return PersistencePromise.resolve(this.namedQueries.get(queryName));
        };
        MemoryBundleCache2.prototype.saveNamedQuery = function(transaction, query3) {
          this.namedQueries.set(query3.name, fromProtoNamedQuery(query3));
          return PersistencePromise.resolve();
        };
        return MemoryBundleCache2;
      }();
      var ReferenceSet = function() {
        function ReferenceSet2() {
          this.refsByKey = new SortedSet(DocReference.compareByKey);
          this.refsByTarget = new SortedSet(DocReference.compareByTargetId);
        }
        ReferenceSet2.prototype.isEmpty = function() {
          return this.refsByKey.isEmpty();
        };
        ReferenceSet2.prototype.addReference = function(key, id) {
          var ref = new DocReference(key, id);
          this.refsByKey = this.refsByKey.add(ref);
          this.refsByTarget = this.refsByTarget.add(ref);
        };
        ReferenceSet2.prototype.addReferences = function(keys, id) {
          var _this = this;
          keys.forEach(function(key) {
            return _this.addReference(key, id);
          });
        };
        ReferenceSet2.prototype.removeReference = function(key, id) {
          this.removeRef(new DocReference(key, id));
        };
        ReferenceSet2.prototype.removeReferences = function(keys, id) {
          var _this = this;
          keys.forEach(function(key) {
            return _this.removeReference(key, id);
          });
        };
        ReferenceSet2.prototype.removeReferencesForId = function(id) {
          var _this = this;
          var emptyKey = new DocumentKey(new ResourcePath([]));
          var startRef = new DocReference(emptyKey, id);
          var endRef = new DocReference(emptyKey, id + 1);
          var keys = [];
          this.refsByTarget.forEachInRange([startRef, endRef], function(ref) {
            _this.removeRef(ref);
            keys.push(ref.key);
          });
          return keys;
        };
        ReferenceSet2.prototype.removeAllReferences = function() {
          var _this = this;
          this.refsByKey.forEach(function(ref) {
            return _this.removeRef(ref);
          });
        };
        ReferenceSet2.prototype.removeRef = function(ref) {
          this.refsByKey = this.refsByKey.delete(ref);
          this.refsByTarget = this.refsByTarget.delete(ref);
        };
        ReferenceSet2.prototype.referencesForId = function(id) {
          var emptyKey = new DocumentKey(new ResourcePath([]));
          var startRef = new DocReference(emptyKey, id);
          var endRef = new DocReference(emptyKey, id + 1);
          var keys = documentKeySet();
          this.refsByTarget.forEachInRange([startRef, endRef], function(ref) {
            keys = keys.add(ref.key);
          });
          return keys;
        };
        ReferenceSet2.prototype.containsKey = function(key) {
          var ref = new DocReference(key, 0);
          var firstRef = this.refsByKey.firstAfterOrEqual(ref);
          return firstRef !== null && key.isEqual(firstRef.key);
        };
        return ReferenceSet2;
      }();
      var DocReference = function() {
        function DocReference2(key, targetOrBatchId) {
          this.key = key;
          this.targetOrBatchId = targetOrBatchId;
        }
        DocReference2.compareByKey = function(left, right) {
          return DocumentKey.comparator(left.key, right.key) || primitiveComparator(left.targetOrBatchId, right.targetOrBatchId);
        };
        DocReference2.compareByTargetId = function(left, right) {
          return primitiveComparator(left.targetOrBatchId, right.targetOrBatchId) || DocumentKey.comparator(left.key, right.key);
        };
        return DocReference2;
      }();
      var MemoryMutationQueue = function() {
        function MemoryMutationQueue2(indexManager, referenceDelegate) {
          this.indexManager = indexManager;
          this.referenceDelegate = referenceDelegate;
          this.mutationQueue = [];
          this.nextBatchId = 1;
          this.batchesByDocumentKey = new SortedSet(DocReference.compareByKey);
        }
        MemoryMutationQueue2.prototype.checkEmpty = function(transaction) {
          return PersistencePromise.resolve(this.mutationQueue.length === 0);
        };
        MemoryMutationQueue2.prototype.addMutationBatch = function(transaction, localWriteTime, baseMutations, mutations) {
          var batchId = this.nextBatchId;
          this.nextBatchId++;
          if (this.mutationQueue.length > 0) {
            var prior = this.mutationQueue[this.mutationQueue.length - 1];
          }
          var batch = new MutationBatch(batchId, localWriteTime, baseMutations, mutations);
          this.mutationQueue.push(batch);
          for (var _i = 0, mutations_3 = mutations; _i < mutations_3.length; _i++) {
            var mutation = mutations_3[_i];
            this.batchesByDocumentKey = this.batchesByDocumentKey.add(new DocReference(mutation.key, batchId));
            this.indexManager.addToCollectionParentIndex(transaction, mutation.key.path.popLast());
          }
          return PersistencePromise.resolve(batch);
        };
        MemoryMutationQueue2.prototype.lookupMutationBatch = function(transaction, batchId) {
          return PersistencePromise.resolve(this.findMutationBatch(batchId));
        };
        MemoryMutationQueue2.prototype.getNextMutationBatchAfterBatchId = function(transaction, batchId) {
          var nextBatchId = batchId + 1;
          var rawIndex = this.indexOfBatchId(nextBatchId);
          var index2 = rawIndex < 0 ? 0 : rawIndex;
          return PersistencePromise.resolve(this.mutationQueue.length > index2 ? this.mutationQueue[index2] : null);
        };
        MemoryMutationQueue2.prototype.getHighestUnacknowledgedBatchId = function() {
          return PersistencePromise.resolve(this.mutationQueue.length === 0 ? BATCHID_UNKNOWN : this.nextBatchId - 1);
        };
        MemoryMutationQueue2.prototype.getAllMutationBatches = function(transaction) {
          return PersistencePromise.resolve(this.mutationQueue.slice());
        };
        MemoryMutationQueue2.prototype.getAllMutationBatchesAffectingDocumentKey = function(transaction, documentKey) {
          var _this = this;
          var start = new DocReference(documentKey, 0);
          var end = new DocReference(documentKey, Number.POSITIVE_INFINITY);
          var result = [];
          this.batchesByDocumentKey.forEachInRange([start, end], function(ref) {
            var batch = _this.findMutationBatch(ref.targetOrBatchId);
            result.push(batch);
          });
          return PersistencePromise.resolve(result);
        };
        MemoryMutationQueue2.prototype.getAllMutationBatchesAffectingDocumentKeys = function(transaction, documentKeys) {
          var _this = this;
          var uniqueBatchIDs = new SortedSet(primitiveComparator);
          documentKeys.forEach(function(documentKey) {
            var start = new DocReference(documentKey, 0);
            var end = new DocReference(documentKey, Number.POSITIVE_INFINITY);
            _this.batchesByDocumentKey.forEachInRange([start, end], function(ref) {
              uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);
            });
          });
          return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));
        };
        MemoryMutationQueue2.prototype.getAllMutationBatchesAffectingQuery = function(transaction, query3) {
          var prefix = query3.path;
          var immediateChildrenPathLength = prefix.length + 1;
          var startPath = prefix;
          if (!DocumentKey.isDocumentKey(startPath)) {
            startPath = startPath.child("");
          }
          var start = new DocReference(new DocumentKey(startPath), 0);
          var uniqueBatchIDs = new SortedSet(primitiveComparator);
          this.batchesByDocumentKey.forEachWhile(function(ref) {
            var rowKeyPath = ref.key.path;
            if (!prefix.isPrefixOf(rowKeyPath)) {
              return false;
            } else {
              if (rowKeyPath.length === immediateChildrenPathLength) {
                uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);
              }
              return true;
            }
          }, start);
          return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));
        };
        MemoryMutationQueue2.prototype.findMutationBatches = function(batchIDs) {
          var _this = this;
          var result = [];
          batchIDs.forEach(function(batchId) {
            var batch = _this.findMutationBatch(batchId);
            if (batch !== null) {
              result.push(batch);
            }
          });
          return result;
        };
        MemoryMutationQueue2.prototype.removeMutationBatch = function(transaction, batch) {
          var _this = this;
          var batchIndex = this.indexOfExistingBatchId(batch.batchId, "removed");
          hardAssert(batchIndex === 0);
          this.mutationQueue.shift();
          var references = this.batchesByDocumentKey;
          return PersistencePromise.forEach(batch.mutations, function(mutation) {
            var ref = new DocReference(mutation.key, batch.batchId);
            references = references.delete(ref);
            return _this.referenceDelegate.markPotentiallyOrphaned(transaction, mutation.key);
          }).next(function() {
            _this.batchesByDocumentKey = references;
          });
        };
        MemoryMutationQueue2.prototype.removeCachedMutationKeys = function(batchId) {
        };
        MemoryMutationQueue2.prototype.containsKey = function(txn, key) {
          var ref = new DocReference(key, 0);
          var firstRef = this.batchesByDocumentKey.firstAfterOrEqual(ref);
          return PersistencePromise.resolve(key.isEqual(firstRef && firstRef.key));
        };
        MemoryMutationQueue2.prototype.performConsistencyCheck = function(txn) {
          if (this.mutationQueue.length === 0)
            ;
          return PersistencePromise.resolve();
        };
        MemoryMutationQueue2.prototype.indexOfExistingBatchId = function(batchId, action) {
          var index2 = this.indexOfBatchId(batchId);
          return index2;
        };
        MemoryMutationQueue2.prototype.indexOfBatchId = function(batchId) {
          if (this.mutationQueue.length === 0) {
            return 0;
          }
          var firstBatchId = this.mutationQueue[0].batchId;
          return batchId - firstBatchId;
        };
        MemoryMutationQueue2.prototype.findMutationBatch = function(batchId) {
          var index2 = this.indexOfBatchId(batchId);
          if (index2 < 0 || index2 >= this.mutationQueue.length) {
            return null;
          }
          var batch = this.mutationQueue[index2];
          return batch;
        };
        return MemoryMutationQueue2;
      }();
      function documentEntryMap() {
        return new SortedMap(DocumentKey.comparator);
      }
      var MemoryRemoteDocumentCacheImpl = function() {
        function MemoryRemoteDocumentCacheImpl2(indexManager, sizer) {
          this.indexManager = indexManager;
          this.sizer = sizer;
          this.docs = documentEntryMap();
          this.size = 0;
        }
        MemoryRemoteDocumentCacheImpl2.prototype.addEntry = function(transaction, doc2, readTime) {
          var key = doc2.key;
          var entry = this.docs.get(key);
          var previousSize = entry ? entry.size : 0;
          var currentSize = this.sizer(doc2);
          this.docs = this.docs.insert(key, {
            document: doc2.clone(),
            size: currentSize,
            readTime
          });
          this.size += currentSize - previousSize;
          return this.indexManager.addToCollectionParentIndex(transaction, key.path.popLast());
        };
        MemoryRemoteDocumentCacheImpl2.prototype.removeEntry = function(documentKey) {
          var entry = this.docs.get(documentKey);
          if (entry) {
            this.docs = this.docs.remove(documentKey);
            this.size -= entry.size;
          }
        };
        MemoryRemoteDocumentCacheImpl2.prototype.getEntry = function(transaction, documentKey) {
          var entry = this.docs.get(documentKey);
          return PersistencePromise.resolve(entry ? entry.document.clone() : MutableDocument.newInvalidDocument(documentKey));
        };
        MemoryRemoteDocumentCacheImpl2.prototype.getEntries = function(transaction, documentKeys) {
          var _this = this;
          var results = mutableDocumentMap();
          documentKeys.forEach(function(documentKey) {
            var entry = _this.docs.get(documentKey);
            results = results.insert(documentKey, entry ? entry.document.clone() : MutableDocument.newInvalidDocument(documentKey));
          });
          return PersistencePromise.resolve(results);
        };
        MemoryRemoteDocumentCacheImpl2.prototype.getDocumentsMatchingQuery = function(transaction, query3, sinceReadTime) {
          var results = mutableDocumentMap();
          var prefix = new DocumentKey(query3.path.child(""));
          var iterator = this.docs.getIteratorFrom(prefix);
          while (iterator.hasNext()) {
            var _d = iterator.getNext(), key = _d.key, _e = _d.value, document_3 = _e.document, readTime = _e.readTime;
            if (!query3.path.isPrefixOf(key.path)) {
              break;
            }
            if (readTime.compareTo(sinceReadTime) <= 0) {
              continue;
            }
            if (!queryMatches(query3, document_3)) {
              continue;
            }
            results = results.insert(document_3.key, document_3.clone());
          }
          return PersistencePromise.resolve(results);
        };
        MemoryRemoteDocumentCacheImpl2.prototype.forEachDocumentKey = function(transaction, f) {
          return PersistencePromise.forEach(this.docs, function(key) {
            return f(key);
          });
        };
        MemoryRemoteDocumentCacheImpl2.prototype.newChangeBuffer = function(options2) {
          return new MemoryRemoteDocumentChangeBuffer(this);
        };
        MemoryRemoteDocumentCacheImpl2.prototype.getSize = function(txn) {
          return PersistencePromise.resolve(this.size);
        };
        return MemoryRemoteDocumentCacheImpl2;
      }();
      function newMemoryRemoteDocumentCache(indexManager, sizer) {
        return new MemoryRemoteDocumentCacheImpl(indexManager, sizer);
      }
      var MemoryRemoteDocumentChangeBuffer = function(_super) {
        tslib.__extends(MemoryRemoteDocumentChangeBuffer2, _super);
        function MemoryRemoteDocumentChangeBuffer2(documentCache) {
          var _this = _super.call(this) || this;
          _this.documentCache = documentCache;
          return _this;
        }
        MemoryRemoteDocumentChangeBuffer2.prototype.applyChanges = function(transaction) {
          var _this = this;
          var promises = [];
          this.changes.forEach(function(key, doc2) {
            if (doc2.document.isValidDocument()) {
              promises.push(_this.documentCache.addEntry(transaction, doc2.document, _this.getReadTime(key)));
            } else {
              _this.documentCache.removeEntry(key);
            }
          });
          return PersistencePromise.waitFor(promises);
        };
        MemoryRemoteDocumentChangeBuffer2.prototype.getFromCache = function(transaction, documentKey) {
          return this.documentCache.getEntry(transaction, documentKey);
        };
        MemoryRemoteDocumentChangeBuffer2.prototype.getAllFromCache = function(transaction, documentKeys) {
          return this.documentCache.getEntries(transaction, documentKeys);
        };
        return MemoryRemoteDocumentChangeBuffer2;
      }(RemoteDocumentChangeBuffer);
      var MemoryTargetCache = function() {
        function MemoryTargetCache2(persistence) {
          this.persistence = persistence;
          this.targets = new ObjectMap(function(t) {
            return canonifyTarget(t);
          }, targetEquals);
          this.lastRemoteSnapshotVersion = SnapshotVersion.min();
          this.highestTargetId = 0;
          this.highestSequenceNumber = 0;
          this.references = new ReferenceSet();
          this.targetCount = 0;
          this.targetIdGenerator = TargetIdGenerator.forTargetCache();
        }
        MemoryTargetCache2.prototype.forEachTarget = function(txn, f) {
          this.targets.forEach(function(_, targetData) {
            return f(targetData);
          });
          return PersistencePromise.resolve();
        };
        MemoryTargetCache2.prototype.getLastRemoteSnapshotVersion = function(transaction) {
          return PersistencePromise.resolve(this.lastRemoteSnapshotVersion);
        };
        MemoryTargetCache2.prototype.getHighestSequenceNumber = function(transaction) {
          return PersistencePromise.resolve(this.highestSequenceNumber);
        };
        MemoryTargetCache2.prototype.allocateTargetId = function(transaction) {
          this.highestTargetId = this.targetIdGenerator.next();
          return PersistencePromise.resolve(this.highestTargetId);
        };
        MemoryTargetCache2.prototype.setTargetsMetadata = function(transaction, highestListenSequenceNumber, lastRemoteSnapshotVersion) {
          if (lastRemoteSnapshotVersion) {
            this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;
          }
          if (highestListenSequenceNumber > this.highestSequenceNumber) {
            this.highestSequenceNumber = highestListenSequenceNumber;
          }
          return PersistencePromise.resolve();
        };
        MemoryTargetCache2.prototype.saveTargetData = function(targetData) {
          this.targets.set(targetData.target, targetData);
          var targetId = targetData.targetId;
          if (targetId > this.highestTargetId) {
            this.targetIdGenerator = new TargetIdGenerator(targetId);
            this.highestTargetId = targetId;
          }
          if (targetData.sequenceNumber > this.highestSequenceNumber) {
            this.highestSequenceNumber = targetData.sequenceNumber;
          }
        };
        MemoryTargetCache2.prototype.addTargetData = function(transaction, targetData) {
          this.saveTargetData(targetData);
          this.targetCount += 1;
          return PersistencePromise.resolve();
        };
        MemoryTargetCache2.prototype.updateTargetData = function(transaction, targetData) {
          this.saveTargetData(targetData);
          return PersistencePromise.resolve();
        };
        MemoryTargetCache2.prototype.removeTargetData = function(transaction, targetData) {
          this.targets.delete(targetData.target);
          this.references.removeReferencesForId(targetData.targetId);
          this.targetCount -= 1;
          return PersistencePromise.resolve();
        };
        MemoryTargetCache2.prototype.removeTargets = function(transaction, upperBound, activeTargetIds) {
          var _this = this;
          var count = 0;
          var removals = [];
          this.targets.forEach(function(key, targetData) {
            if (targetData.sequenceNumber <= upperBound && activeTargetIds.get(targetData.targetId) === null) {
              _this.targets.delete(key);
              removals.push(_this.removeMatchingKeysForTargetId(transaction, targetData.targetId));
              count++;
            }
          });
          return PersistencePromise.waitFor(removals).next(function() {
            return count;
          });
        };
        MemoryTargetCache2.prototype.getTargetCount = function(transaction) {
          return PersistencePromise.resolve(this.targetCount);
        };
        MemoryTargetCache2.prototype.getTargetData = function(transaction, target) {
          var targetData = this.targets.get(target) || null;
          return PersistencePromise.resolve(targetData);
        };
        MemoryTargetCache2.prototype.addMatchingKeys = function(txn, keys, targetId) {
          this.references.addReferences(keys, targetId);
          return PersistencePromise.resolve();
        };
        MemoryTargetCache2.prototype.removeMatchingKeys = function(txn, keys, targetId) {
          this.references.removeReferences(keys, targetId);
          var referenceDelegate = this.persistence.referenceDelegate;
          var promises = [];
          if (referenceDelegate) {
            keys.forEach(function(key) {
              promises.push(referenceDelegate.markPotentiallyOrphaned(txn, key));
            });
          }
          return PersistencePromise.waitFor(promises);
        };
        MemoryTargetCache2.prototype.removeMatchingKeysForTargetId = function(txn, targetId) {
          this.references.removeReferencesForId(targetId);
          return PersistencePromise.resolve();
        };
        MemoryTargetCache2.prototype.getMatchingKeysForTargetId = function(txn, targetId) {
          var matchingKeys = this.references.referencesForId(targetId);
          return PersistencePromise.resolve(matchingKeys);
        };
        MemoryTargetCache2.prototype.containsKey = function(txn, key) {
          return PersistencePromise.resolve(this.references.containsKey(key));
        };
        return MemoryTargetCache2;
      }();
      var LOG_TAG$5 = "MemoryPersistence";
      var MemoryPersistence = function() {
        function MemoryPersistence2(referenceDelegateFactory, serializer) {
          var _this = this;
          this.mutationQueues = {};
          this.listenSequence = new ListenSequence(0);
          this._started = false;
          this._started = true;
          this.referenceDelegate = referenceDelegateFactory(this);
          this.targetCache = new MemoryTargetCache(this);
          var sizer = function(doc2) {
            return _this.referenceDelegate.documentSize(doc2);
          };
          this.indexManager = new MemoryIndexManager();
          this.remoteDocumentCache = newMemoryRemoteDocumentCache(this.indexManager, sizer);
          this.serializer = new LocalSerializer(serializer);
          this.bundleCache = new MemoryBundleCache(this.serializer);
        }
        MemoryPersistence2.prototype.start = function() {
          return Promise.resolve();
        };
        MemoryPersistence2.prototype.shutdown = function() {
          this._started = false;
          return Promise.resolve();
        };
        Object.defineProperty(MemoryPersistence2.prototype, "started", {
          get: function() {
            return this._started;
          },
          enumerable: false,
          configurable: true
        });
        MemoryPersistence2.prototype.setDatabaseDeletedListener = function() {
        };
        MemoryPersistence2.prototype.setNetworkEnabled = function() {
        };
        MemoryPersistence2.prototype.getIndexManager = function() {
          return this.indexManager;
        };
        MemoryPersistence2.prototype.getMutationQueue = function(user) {
          var queue = this.mutationQueues[user.toKey()];
          if (!queue) {
            queue = new MemoryMutationQueue(this.indexManager, this.referenceDelegate);
            this.mutationQueues[user.toKey()] = queue;
          }
          return queue;
        };
        MemoryPersistence2.prototype.getTargetCache = function() {
          return this.targetCache;
        };
        MemoryPersistence2.prototype.getRemoteDocumentCache = function() {
          return this.remoteDocumentCache;
        };
        MemoryPersistence2.prototype.getBundleCache = function() {
          return this.bundleCache;
        };
        MemoryPersistence2.prototype.runTransaction = function(action, mode, transactionOperation) {
          var _this = this;
          logDebug(LOG_TAG$5, "Starting transaction:", action);
          var txn = new MemoryTransaction(this.listenSequence.next());
          this.referenceDelegate.onTransactionStarted();
          return transactionOperation(txn).next(function(result) {
            return _this.referenceDelegate.onTransactionCommitted(txn).next(function() {
              return result;
            });
          }).toPromise().then(function(result) {
            txn.raiseOnCommittedEvent();
            return result;
          });
        };
        MemoryPersistence2.prototype.mutationQueuesContainKey = function(transaction, key) {
          return PersistencePromise.or(Object.values(this.mutationQueues).map(function(queue) {
            return function() {
              return queue.containsKey(transaction, key);
            };
          }));
        };
        return MemoryPersistence2;
      }();
      var MemoryTransaction = function(_super) {
        tslib.__extends(MemoryTransaction2, _super);
        function MemoryTransaction2(currentSequenceNumber) {
          var _this = _super.call(this) || this;
          _this.currentSequenceNumber = currentSequenceNumber;
          return _this;
        }
        return MemoryTransaction2;
      }(PersistenceTransaction);
      var MemoryEagerDelegate = function() {
        function MemoryEagerDelegate2(persistence) {
          this.persistence = persistence;
          this.localViewReferences = new ReferenceSet();
          this._orphanedDocuments = null;
        }
        MemoryEagerDelegate2.factory = function(persistence) {
          return new MemoryEagerDelegate2(persistence);
        };
        Object.defineProperty(MemoryEagerDelegate2.prototype, "orphanedDocuments", {
          get: function() {
            if (!this._orphanedDocuments) {
              throw fail();
            } else {
              return this._orphanedDocuments;
            }
          },
          enumerable: false,
          configurable: true
        });
        MemoryEagerDelegate2.prototype.addReference = function(txn, targetId, key) {
          this.localViewReferences.addReference(key, targetId);
          this.orphanedDocuments.delete(key.toString());
          return PersistencePromise.resolve();
        };
        MemoryEagerDelegate2.prototype.removeReference = function(txn, targetId, key) {
          this.localViewReferences.removeReference(key, targetId);
          this.orphanedDocuments.add(key.toString());
          return PersistencePromise.resolve();
        };
        MemoryEagerDelegate2.prototype.markPotentiallyOrphaned = function(txn, key) {
          this.orphanedDocuments.add(key.toString());
          return PersistencePromise.resolve();
        };
        MemoryEagerDelegate2.prototype.removeTarget = function(txn, targetData) {
          var _this = this;
          var orphaned = this.localViewReferences.removeReferencesForId(targetData.targetId);
          orphaned.forEach(function(key) {
            return _this.orphanedDocuments.add(key.toString());
          });
          var cache = this.persistence.getTargetCache();
          return cache.getMatchingKeysForTargetId(txn, targetData.targetId).next(function(keys) {
            keys.forEach(function(key) {
              return _this.orphanedDocuments.add(key.toString());
            });
          }).next(function() {
            return cache.removeTargetData(txn, targetData);
          });
        };
        MemoryEagerDelegate2.prototype.onTransactionStarted = function() {
          this._orphanedDocuments = new Set();
        };
        MemoryEagerDelegate2.prototype.onTransactionCommitted = function(txn) {
          var _this = this;
          var cache = this.persistence.getRemoteDocumentCache();
          var changeBuffer = cache.newChangeBuffer();
          return PersistencePromise.forEach(this.orphanedDocuments, function(path2) {
            var key = DocumentKey.fromPath(path2);
            return _this.isReferenced(txn, key).next(function(isReferenced) {
              if (!isReferenced) {
                changeBuffer.removeEntry(key);
              }
            });
          }).next(function() {
            _this._orphanedDocuments = null;
            return changeBuffer.apply(txn);
          });
        };
        MemoryEagerDelegate2.prototype.updateLimboDocument = function(txn, key) {
          var _this = this;
          return this.isReferenced(txn, key).next(function(isReferenced) {
            if (isReferenced) {
              _this.orphanedDocuments.delete(key.toString());
            } else {
              _this.orphanedDocuments.add(key.toString());
            }
          });
        };
        MemoryEagerDelegate2.prototype.documentSize = function(doc2) {
          return 0;
        };
        MemoryEagerDelegate2.prototype.isReferenced = function(txn, key) {
          var _this = this;
          return PersistencePromise.or([
            function() {
              return PersistencePromise.resolve(_this.localViewReferences.containsKey(key));
            },
            function() {
              return _this.persistence.getTargetCache().containsKey(txn, key);
            },
            function() {
              return _this.persistence.mutationQueuesContainKey(txn, key);
            }
          ]);
        };
        return MemoryEagerDelegate2;
      }();
      var QueryEngine = function() {
        function QueryEngine2() {
        }
        QueryEngine2.prototype.setLocalDocumentsView = function(localDocuments) {
          this.localDocumentsView = localDocuments;
        };
        QueryEngine2.prototype.getDocumentsMatchingQuery = function(transaction, query3, lastLimboFreeSnapshotVersion, remoteKeys) {
          var _this = this;
          if (matchesAllDocuments(query3)) {
            return this.executeFullCollectionScan(transaction, query3);
          }
          if (lastLimboFreeSnapshotVersion.isEqual(SnapshotVersion.min())) {
            return this.executeFullCollectionScan(transaction, query3);
          }
          return this.localDocumentsView.getDocuments(transaction, remoteKeys).next(function(documents) {
            var previousResults = _this.applyQuery(query3, documents);
            if ((hasLimitToFirst(query3) || hasLimitToLast(query3)) && _this.needsRefill(query3.limitType, previousResults, remoteKeys, lastLimboFreeSnapshotVersion)) {
              return _this.executeFullCollectionScan(transaction, query3);
            }
            if (getLogLevel() <= logger.LogLevel.DEBUG) {
              logDebug("QueryEngine", "Re-using previous result from %s to execute query: %s", lastLimboFreeSnapshotVersion.toString(), stringifyQuery(query3));
            }
            return _this.localDocumentsView.getDocumentsMatchingQuery(transaction, query3, lastLimboFreeSnapshotVersion).next(function(updatedResults) {
              previousResults.forEach(function(doc2) {
                updatedResults = updatedResults.insert(doc2.key, doc2);
              });
              return updatedResults;
            });
          });
        };
        QueryEngine2.prototype.applyQuery = function(query3, documents) {
          var queryResults = new SortedSet(newQueryComparator(query3));
          documents.forEach(function(_, maybeDoc) {
            if (queryMatches(query3, maybeDoc)) {
              queryResults = queryResults.add(maybeDoc);
            }
          });
          return queryResults;
        };
        QueryEngine2.prototype.needsRefill = function(limitType, sortedPreviousResults, remoteKeys, limboFreeSnapshotVersion) {
          if (remoteKeys.size !== sortedPreviousResults.size) {
            return true;
          }
          var docAtLimitEdge = limitType === "F" ? sortedPreviousResults.last() : sortedPreviousResults.first();
          if (!docAtLimitEdge) {
            return false;
          }
          return docAtLimitEdge.hasPendingWrites || docAtLimitEdge.version.compareTo(limboFreeSnapshotVersion) > 0;
        };
        QueryEngine2.prototype.executeFullCollectionScan = function(transaction, query3) {
          if (getLogLevel() <= logger.LogLevel.DEBUG) {
            logDebug("QueryEngine", "Using full collection scan to execute query:", stringifyQuery(query3));
          }
          return this.localDocumentsView.getDocumentsMatchingQuery(transaction, query3, SnapshotVersion.min());
        };
        return QueryEngine2;
      }();
      var User = function() {
        function User2(uid) {
          this.uid = uid;
        }
        User2.prototype.isAuthenticated = function() {
          return this.uid != null;
        };
        User2.prototype.toKey = function() {
          if (this.isAuthenticated()) {
            return "uid:" + this.uid;
          } else {
            return "anonymous-user";
          }
        };
        User2.prototype.isEqual = function(otherUser) {
          return otherUser.uid === this.uid;
        };
        return User2;
      }();
      User.UNAUTHENTICATED = new User(null);
      User.GOOGLE_CREDENTIALS = new User("google-credentials-uid");
      User.FIRST_PARTY = new User("first-party-uid");
      var CLIENT_STATE_KEY_PREFIX = "firestore_clients";
      function createWebStorageClientStateKey(persistenceKey, clientId) {
        return CLIENT_STATE_KEY_PREFIX + "_" + persistenceKey + "_" + clientId;
      }
      var MUTATION_BATCH_KEY_PREFIX = "firestore_mutations";
      function createWebStorageMutationBatchKey(persistenceKey, user, batchId) {
        var mutationKey = MUTATION_BATCH_KEY_PREFIX + "_" + persistenceKey + "_" + batchId;
        if (user.isAuthenticated()) {
          mutationKey += "_" + user.uid;
        }
        return mutationKey;
      }
      var QUERY_TARGET_KEY_PREFIX = "firestore_targets";
      function createWebStorageQueryTargetMetadataKey(persistenceKey, targetId) {
        return QUERY_TARGET_KEY_PREFIX + "_" + persistenceKey + "_" + targetId;
      }
      var ONLINE_STATE_KEY_PREFIX = "firestore_online_state";
      function createWebStorageOnlineStateKey(persistenceKey) {
        return ONLINE_STATE_KEY_PREFIX + "_" + persistenceKey;
      }
      var BUNDLE_LOADED_KEY_PREFIX = "firestore_bundle_loaded";
      function createBundleLoadedKey(persistenceKey) {
        return BUNDLE_LOADED_KEY_PREFIX + "_" + persistenceKey;
      }
      var SEQUENCE_NUMBER_KEY_PREFIX = "firestore_sequence_number";
      function createWebStorageSequenceNumberKey(persistenceKey) {
        return SEQUENCE_NUMBER_KEY_PREFIX + "_" + persistenceKey;
      }
      var LOG_TAG$6 = "SharedClientState";
      var MutationMetadata = function() {
        function MutationMetadata2(user, batchId, state, error3) {
          this.user = user;
          this.batchId = batchId;
          this.state = state;
          this.error = error3;
        }
        MutationMetadata2.fromWebStorageEntry = function(user, batchId, value) {
          var mutationBatch = JSON.parse(value);
          var validData = typeof mutationBatch === "object" && ["pending", "acknowledged", "rejected"].indexOf(mutationBatch.state) !== -1 && (mutationBatch.error === void 0 || typeof mutationBatch.error === "object");
          var firestoreError = void 0;
          if (validData && mutationBatch.error) {
            validData = typeof mutationBatch.error.message === "string" && typeof mutationBatch.error.code === "string";
            if (validData) {
              firestoreError = new FirestoreError(mutationBatch.error.code, mutationBatch.error.message);
            }
          }
          if (validData) {
            return new MutationMetadata2(user, batchId, mutationBatch.state, firestoreError);
          } else {
            logError(LOG_TAG$6, "Failed to parse mutation state for ID '" + batchId + "': " + value);
            return null;
          }
        };
        MutationMetadata2.prototype.toWebStorageJSON = function() {
          var batchMetadata = {
            state: this.state,
            updateTimeMs: Date.now()
          };
          if (this.error) {
            batchMetadata.error = {
              code: this.error.code,
              message: this.error.message
            };
          }
          return JSON.stringify(batchMetadata);
        };
        return MutationMetadata2;
      }();
      var QueryTargetMetadata = function() {
        function QueryTargetMetadata2(targetId, state, error3) {
          this.targetId = targetId;
          this.state = state;
          this.error = error3;
        }
        QueryTargetMetadata2.fromWebStorageEntry = function(targetId, value) {
          var targetState = JSON.parse(value);
          var validData = typeof targetState === "object" && ["not-current", "current", "rejected"].indexOf(targetState.state) !== -1 && (targetState.error === void 0 || typeof targetState.error === "object");
          var firestoreError = void 0;
          if (validData && targetState.error) {
            validData = typeof targetState.error.message === "string" && typeof targetState.error.code === "string";
            if (validData) {
              firestoreError = new FirestoreError(targetState.error.code, targetState.error.message);
            }
          }
          if (validData) {
            return new QueryTargetMetadata2(targetId, targetState.state, firestoreError);
          } else {
            logError(LOG_TAG$6, "Failed to parse target state for ID '" + targetId + "': " + value);
            return null;
          }
        };
        QueryTargetMetadata2.prototype.toWebStorageJSON = function() {
          var targetState = {
            state: this.state,
            updateTimeMs: Date.now()
          };
          if (this.error) {
            targetState.error = {
              code: this.error.code,
              message: this.error.message
            };
          }
          return JSON.stringify(targetState);
        };
        return QueryTargetMetadata2;
      }();
      var RemoteClientState = function() {
        function RemoteClientState2(clientId, activeTargetIds) {
          this.clientId = clientId;
          this.activeTargetIds = activeTargetIds;
        }
        RemoteClientState2.fromWebStorageEntry = function(clientId, value) {
          var clientState = JSON.parse(value);
          var validData = typeof clientState === "object" && clientState.activeTargetIds instanceof Array;
          var activeTargetIdsSet = targetIdSet();
          for (var i = 0; validData && i < clientState.activeTargetIds.length; ++i) {
            validData = isSafeInteger(clientState.activeTargetIds[i]);
            activeTargetIdsSet = activeTargetIdsSet.add(clientState.activeTargetIds[i]);
          }
          if (validData) {
            return new RemoteClientState2(clientId, activeTargetIdsSet);
          } else {
            logError(LOG_TAG$6, "Failed to parse client data for instance '" + clientId + "': " + value);
            return null;
          }
        };
        return RemoteClientState2;
      }();
      var SharedOnlineState = function() {
        function SharedOnlineState2(clientId, onlineState) {
          this.clientId = clientId;
          this.onlineState = onlineState;
        }
        SharedOnlineState2.fromWebStorageEntry = function(value) {
          var onlineState = JSON.parse(value);
          var validData = typeof onlineState === "object" && ["Unknown", "Online", "Offline"].indexOf(onlineState.onlineState) !== -1 && typeof onlineState.clientId === "string";
          if (validData) {
            return new SharedOnlineState2(onlineState.clientId, onlineState.onlineState);
          } else {
            logError(LOG_TAG$6, "Failed to parse online state: " + value);
            return null;
          }
        };
        return SharedOnlineState2;
      }();
      var LocalClientState = function() {
        function LocalClientState2() {
          this.activeTargetIds = targetIdSet();
        }
        LocalClientState2.prototype.addQueryTarget = function(targetId) {
          this.activeTargetIds = this.activeTargetIds.add(targetId);
        };
        LocalClientState2.prototype.removeQueryTarget = function(targetId) {
          this.activeTargetIds = this.activeTargetIds.delete(targetId);
        };
        LocalClientState2.prototype.toWebStorageJSON = function() {
          var data = {
            activeTargetIds: this.activeTargetIds.toArray(),
            updateTimeMs: Date.now()
          };
          return JSON.stringify(data);
        };
        return LocalClientState2;
      }();
      var WebStorageSharedClientState = function() {
        function WebStorageSharedClientState2(window2, queue, persistenceKey, localClientId, initialUser) {
          this.window = window2;
          this.queue = queue;
          this.persistenceKey = persistenceKey;
          this.localClientId = localClientId;
          this.syncEngine = null;
          this.onlineStateHandler = null;
          this.sequenceNumberHandler = null;
          this.storageListener = this.handleWebStorageEvent.bind(this);
          this.activeClients = new SortedMap(primitiveComparator);
          this.started = false;
          this.earlyEvents = [];
          var escapedPersistenceKey = persistenceKey.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
          this.storage = this.window.localStorage;
          this.currentUser = initialUser;
          this.localClientStorageKey = createWebStorageClientStateKey(this.persistenceKey, this.localClientId);
          this.sequenceNumberKey = createWebStorageSequenceNumberKey(this.persistenceKey);
          this.activeClients = this.activeClients.insert(this.localClientId, new LocalClientState());
          this.clientStateKeyRe = new RegExp("^" + CLIENT_STATE_KEY_PREFIX + "_" + escapedPersistenceKey + "_([^_]*)$");
          this.mutationBatchKeyRe = new RegExp("^" + MUTATION_BATCH_KEY_PREFIX + "_" + escapedPersistenceKey + "_(\\d+)(?:_(.*))?$");
          this.queryTargetKeyRe = new RegExp("^" + QUERY_TARGET_KEY_PREFIX + "_" + escapedPersistenceKey + "_(\\d+)$");
          this.onlineStateKey = createWebStorageOnlineStateKey(this.persistenceKey);
          this.bundleLoadedKey = createBundleLoadedKey(this.persistenceKey);
          this.window.addEventListener("storage", this.storageListener);
        }
        WebStorageSharedClientState2.isAvailable = function(window2) {
          return !!(window2 && window2.localStorage);
        };
        WebStorageSharedClientState2.prototype.start = function() {
          return tslib.__awaiter(this, void 0, void 0, function() {
            var existingClients, _i, existingClients_1, clientId, storageItem, clientState, onlineStateJSON, onlineState, _d, _e, event_1;
            var _this = this;
            return tslib.__generator(this, function(_f) {
              switch (_f.label) {
                case 0:
                  return [4, this.syncEngine.getActiveClients()];
                case 1:
                  existingClients = _f.sent();
                  for (_i = 0, existingClients_1 = existingClients; _i < existingClients_1.length; _i++) {
                    clientId = existingClients_1[_i];
                    if (clientId === this.localClientId) {
                      continue;
                    }
                    storageItem = this.getItem(createWebStorageClientStateKey(this.persistenceKey, clientId));
                    if (storageItem) {
                      clientState = RemoteClientState.fromWebStorageEntry(clientId, storageItem);
                      if (clientState) {
                        this.activeClients = this.activeClients.insert(clientState.clientId, clientState);
                      }
                    }
                  }
                  this.persistClientState();
                  onlineStateJSON = this.storage.getItem(this.onlineStateKey);
                  if (onlineStateJSON) {
                    onlineState = this.fromWebStorageOnlineState(onlineStateJSON);
                    if (onlineState) {
                      this.handleOnlineStateEvent(onlineState);
                    }
                  }
                  for (_d = 0, _e = this.earlyEvents; _d < _e.length; _d++) {
                    event_1 = _e[_d];
                    this.handleWebStorageEvent(event_1);
                  }
                  this.earlyEvents = [];
                  this.window.addEventListener("unload", function() {
                    return _this.shutdown();
                  });
                  this.started = true;
                  return [2];
              }
            });
          });
        };
        WebStorageSharedClientState2.prototype.writeSequenceNumber = function(sequenceNumber) {
          this.setItem(this.sequenceNumberKey, JSON.stringify(sequenceNumber));
        };
        WebStorageSharedClientState2.prototype.getAllActiveQueryTargets = function() {
          return this.extractActiveQueryTargets(this.activeClients);
        };
        WebStorageSharedClientState2.prototype.isActiveQueryTarget = function(targetId) {
          var found = false;
          this.activeClients.forEach(function(key, value) {
            if (value.activeTargetIds.has(targetId)) {
              found = true;
            }
          });
          return found;
        };
        WebStorageSharedClientState2.prototype.addPendingMutation = function(batchId) {
          this.persistMutationState(batchId, "pending");
        };
        WebStorageSharedClientState2.prototype.updateMutationState = function(batchId, state, error3) {
          this.persistMutationState(batchId, state, error3);
          this.removeMutationState(batchId);
        };
        WebStorageSharedClientState2.prototype.addLocalQueryTarget = function(targetId) {
          var queryState = "not-current";
          if (this.isActiveQueryTarget(targetId)) {
            var storageItem = this.storage.getItem(createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId));
            if (storageItem) {
              var metadata = QueryTargetMetadata.fromWebStorageEntry(targetId, storageItem);
              if (metadata) {
                queryState = metadata.state;
              }
            }
          }
          this.localClientState.addQueryTarget(targetId);
          this.persistClientState();
          return queryState;
        };
        WebStorageSharedClientState2.prototype.removeLocalQueryTarget = function(targetId) {
          this.localClientState.removeQueryTarget(targetId);
          this.persistClientState();
        };
        WebStorageSharedClientState2.prototype.isLocalQueryTarget = function(targetId) {
          return this.localClientState.activeTargetIds.has(targetId);
        };
        WebStorageSharedClientState2.prototype.clearQueryState = function(targetId) {
          this.removeItem(createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId));
        };
        WebStorageSharedClientState2.prototype.updateQueryState = function(targetId, state, error3) {
          this.persistQueryTargetState(targetId, state, error3);
        };
        WebStorageSharedClientState2.prototype.handleUserChange = function(user, removedBatchIds, addedBatchIds) {
          var _this = this;
          removedBatchIds.forEach(function(batchId) {
            _this.removeMutationState(batchId);
          });
          this.currentUser = user;
          addedBatchIds.forEach(function(batchId) {
            _this.addPendingMutation(batchId);
          });
        };
        WebStorageSharedClientState2.prototype.setOnlineState = function(onlineState) {
          this.persistOnlineState(onlineState);
        };
        WebStorageSharedClientState2.prototype.notifyBundleLoaded = function() {
          this.persistBundleLoadedState();
        };
        WebStorageSharedClientState2.prototype.shutdown = function() {
          if (this.started) {
            this.window.removeEventListener("storage", this.storageListener);
            this.removeItem(this.localClientStorageKey);
            this.started = false;
          }
        };
        WebStorageSharedClientState2.prototype.getItem = function(key) {
          var value = this.storage.getItem(key);
          logDebug(LOG_TAG$6, "READ", key, value);
          return value;
        };
        WebStorageSharedClientState2.prototype.setItem = function(key, value) {
          logDebug(LOG_TAG$6, "SET", key, value);
          this.storage.setItem(key, value);
        };
        WebStorageSharedClientState2.prototype.removeItem = function(key) {
          logDebug(LOG_TAG$6, "REMOVE", key);
          this.storage.removeItem(key);
        };
        WebStorageSharedClientState2.prototype.handleWebStorageEvent = function(event) {
          var _this = this;
          var storageEvent = event;
          if (storageEvent.storageArea === this.storage) {
            logDebug(LOG_TAG$6, "EVENT", storageEvent.key, storageEvent.newValue);
            if (storageEvent.key === this.localClientStorageKey) {
              logError("Received WebStorage notification for local change. Another client might have garbage-collected our state");
              return;
            }
            this.queue.enqueueRetryable(function() {
              return tslib.__awaiter(_this, void 0, void 0, function() {
                var clientState, clientId, mutationMetadata, queryTargetMetadata, onlineState, sequenceNumber;
                return tslib.__generator(this, function(_d) {
                  if (!this.started) {
                    this.earlyEvents.push(storageEvent);
                    return [2];
                  }
                  if (storageEvent.key === null) {
                    return [2];
                  }
                  if (this.clientStateKeyRe.test(storageEvent.key)) {
                    if (storageEvent.newValue != null) {
                      clientState = this.fromWebStorageClientState(storageEvent.key, storageEvent.newValue);
                      if (clientState) {
                        return [2, this.handleClientStateEvent(clientState.clientId, clientState)];
                      }
                    } else {
                      clientId = this.fromWebStorageClientStateKey(storageEvent.key);
                      return [2, this.handleClientStateEvent(clientId, null)];
                    }
                  } else if (this.mutationBatchKeyRe.test(storageEvent.key)) {
                    if (storageEvent.newValue !== null) {
                      mutationMetadata = this.fromWebStorageMutationMetadata(storageEvent.key, storageEvent.newValue);
                      if (mutationMetadata) {
                        return [2, this.handleMutationBatchEvent(mutationMetadata)];
                      }
                    }
                  } else if (this.queryTargetKeyRe.test(storageEvent.key)) {
                    if (storageEvent.newValue !== null) {
                      queryTargetMetadata = this.fromWebStorageQueryTargetMetadata(storageEvent.key, storageEvent.newValue);
                      if (queryTargetMetadata) {
                        return [2, this.handleQueryTargetEvent(queryTargetMetadata)];
                      }
                    }
                  } else if (storageEvent.key === this.onlineStateKey) {
                    if (storageEvent.newValue !== null) {
                      onlineState = this.fromWebStorageOnlineState(storageEvent.newValue);
                      if (onlineState) {
                        return [2, this.handleOnlineStateEvent(onlineState)];
                      }
                    }
                  } else if (storageEvent.key === this.sequenceNumberKey) {
                    sequenceNumber = fromWebStorageSequenceNumber(storageEvent.newValue);
                    if (sequenceNumber !== ListenSequence.INVALID) {
                      this.sequenceNumberHandler(sequenceNumber);
                    }
                  } else if (storageEvent.key === this.bundleLoadedKey) {
                    return [2, this.syncEngine.synchronizeWithChangedDocuments()];
                  }
                  return [2];
                });
              });
            });
          }
        };
        Object.defineProperty(WebStorageSharedClientState2.prototype, "localClientState", {
          get: function() {
            return this.activeClients.get(this.localClientId);
          },
          enumerable: false,
          configurable: true
        });
        WebStorageSharedClientState2.prototype.persistClientState = function() {
          this.setItem(this.localClientStorageKey, this.localClientState.toWebStorageJSON());
        };
        WebStorageSharedClientState2.prototype.persistMutationState = function(batchId, state, error3) {
          var mutationState = new MutationMetadata(this.currentUser, batchId, state, error3);
          var mutationKey = createWebStorageMutationBatchKey(this.persistenceKey, this.currentUser, batchId);
          this.setItem(mutationKey, mutationState.toWebStorageJSON());
        };
        WebStorageSharedClientState2.prototype.removeMutationState = function(batchId) {
          var mutationKey = createWebStorageMutationBatchKey(this.persistenceKey, this.currentUser, batchId);
          this.removeItem(mutationKey);
        };
        WebStorageSharedClientState2.prototype.persistOnlineState = function(onlineState) {
          var entry = {
            clientId: this.localClientId,
            onlineState
          };
          this.storage.setItem(this.onlineStateKey, JSON.stringify(entry));
        };
        WebStorageSharedClientState2.prototype.persistQueryTargetState = function(targetId, state, error3) {
          var targetKey = createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId);
          var targetMetadata = new QueryTargetMetadata(targetId, state, error3);
          this.setItem(targetKey, targetMetadata.toWebStorageJSON());
        };
        WebStorageSharedClientState2.prototype.persistBundleLoadedState = function() {
          this.setItem(this.bundleLoadedKey, "value-not-used");
        };
        WebStorageSharedClientState2.prototype.fromWebStorageClientStateKey = function(key) {
          var match = this.clientStateKeyRe.exec(key);
          return match ? match[1] : null;
        };
        WebStorageSharedClientState2.prototype.fromWebStorageClientState = function(key, value) {
          var clientId = this.fromWebStorageClientStateKey(key);
          return RemoteClientState.fromWebStorageEntry(clientId, value);
        };
        WebStorageSharedClientState2.prototype.fromWebStorageMutationMetadata = function(key, value) {
          var match = this.mutationBatchKeyRe.exec(key);
          var batchId = Number(match[1]);
          var userId = match[2] !== void 0 ? match[2] : null;
          return MutationMetadata.fromWebStorageEntry(new User(userId), batchId, value);
        };
        WebStorageSharedClientState2.prototype.fromWebStorageQueryTargetMetadata = function(key, value) {
          var match = this.queryTargetKeyRe.exec(key);
          var targetId = Number(match[1]);
          return QueryTargetMetadata.fromWebStorageEntry(targetId, value);
        };
        WebStorageSharedClientState2.prototype.fromWebStorageOnlineState = function(value) {
          return SharedOnlineState.fromWebStorageEntry(value);
        };
        WebStorageSharedClientState2.prototype.handleMutationBatchEvent = function(mutationBatch) {
          return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(_d) {
              if (mutationBatch.user.uid !== this.currentUser.uid) {
                logDebug(LOG_TAG$6, "Ignoring mutation for non-active user " + mutationBatch.user.uid);
                return [2];
              }
              return [2, this.syncEngine.applyBatchState(mutationBatch.batchId, mutationBatch.state, mutationBatch.error)];
            });
          });
        };
        WebStorageSharedClientState2.prototype.handleQueryTargetEvent = function(targetMetadata) {
          return this.syncEngine.applyTargetState(targetMetadata.targetId, targetMetadata.state, targetMetadata.error);
        };
        WebStorageSharedClientState2.prototype.handleClientStateEvent = function(clientId, clientState) {
          var _this = this;
          var updatedClients = clientState ? this.activeClients.insert(clientId, clientState) : this.activeClients.remove(clientId);
          var existingTargets = this.extractActiveQueryTargets(this.activeClients);
          var newTargets = this.extractActiveQueryTargets(updatedClients);
          var addedTargets = [];
          var removedTargets = [];
          newTargets.forEach(function(targetId) {
            if (!existingTargets.has(targetId)) {
              addedTargets.push(targetId);
            }
          });
          existingTargets.forEach(function(targetId) {
            if (!newTargets.has(targetId)) {
              removedTargets.push(targetId);
            }
          });
          return this.syncEngine.applyActiveTargetsChange(addedTargets, removedTargets).then(function() {
            _this.activeClients = updatedClients;
          });
        };
        WebStorageSharedClientState2.prototype.handleOnlineStateEvent = function(onlineState) {
          if (this.activeClients.get(onlineState.clientId)) {
            this.onlineStateHandler(onlineState.onlineState);
          }
        };
        WebStorageSharedClientState2.prototype.extractActiveQueryTargets = function(clients) {
          var activeTargets = targetIdSet();
          clients.forEach(function(kev, value) {
            activeTargets = activeTargets.unionWith(value.activeTargetIds);
          });
          return activeTargets;
        };
        return WebStorageSharedClientState2;
      }();
      function fromWebStorageSequenceNumber(seqString) {
        var sequenceNumber = ListenSequence.INVALID;
        if (seqString != null) {
          try {
            var parsed = JSON.parse(seqString);
            hardAssert(typeof parsed === "number");
            sequenceNumber = parsed;
          } catch (e) {
            logError(LOG_TAG$6, "Failed to read sequence number from WebStorage", e);
          }
        }
        return sequenceNumber;
      }
      var MemorySharedClientState = function() {
        function MemorySharedClientState2() {
          this.localState = new LocalClientState();
          this.queryState = {};
          this.onlineStateHandler = null;
          this.sequenceNumberHandler = null;
        }
        MemorySharedClientState2.prototype.addPendingMutation = function(batchId) {
        };
        MemorySharedClientState2.prototype.updateMutationState = function(batchId, state, error3) {
        };
        MemorySharedClientState2.prototype.addLocalQueryTarget = function(targetId) {
          this.localState.addQueryTarget(targetId);
          return this.queryState[targetId] || "not-current";
        };
        MemorySharedClientState2.prototype.updateQueryState = function(targetId, state, error3) {
          this.queryState[targetId] = state;
        };
        MemorySharedClientState2.prototype.removeLocalQueryTarget = function(targetId) {
          this.localState.removeQueryTarget(targetId);
        };
        MemorySharedClientState2.prototype.isLocalQueryTarget = function(targetId) {
          return this.localState.activeTargetIds.has(targetId);
        };
        MemorySharedClientState2.prototype.clearQueryState = function(targetId) {
          delete this.queryState[targetId];
        };
        MemorySharedClientState2.prototype.getAllActiveQueryTargets = function() {
          return this.localState.activeTargetIds;
        };
        MemorySharedClientState2.prototype.isActiveQueryTarget = function(targetId) {
          return this.localState.activeTargetIds.has(targetId);
        };
        MemorySharedClientState2.prototype.start = function() {
          this.localState = new LocalClientState();
          return Promise.resolve();
        };
        MemorySharedClientState2.prototype.handleUserChange = function(user, removedBatchIds, addedBatchIds) {
        };
        MemorySharedClientState2.prototype.setOnlineState = function(onlineState) {
        };
        MemorySharedClientState2.prototype.shutdown = function() {
        };
        MemorySharedClientState2.prototype.writeSequenceNumber = function(sequenceNumber) {
        };
        MemorySharedClientState2.prototype.notifyBundleLoaded = function() {
        };
        return MemorySharedClientState2;
      }();
      var NoopConnectivityMonitor = function() {
        function NoopConnectivityMonitor2() {
        }
        NoopConnectivityMonitor2.prototype.addCallback = function(callback) {
        };
        NoopConnectivityMonitor2.prototype.shutdown = function() {
        };
        return NoopConnectivityMonitor2;
      }();
      var StreamBridge = function() {
        function StreamBridge2(args) {
          this.sendFn = args.sendFn;
          this.closeFn = args.closeFn;
        }
        StreamBridge2.prototype.onOpen = function(callback) {
          this.wrappedOnOpen = callback;
        };
        StreamBridge2.prototype.onClose = function(callback) {
          this.wrappedOnClose = callback;
        };
        StreamBridge2.prototype.onMessage = function(callback) {
          this.wrappedOnMessage = callback;
        };
        StreamBridge2.prototype.close = function() {
          this.closeFn();
        };
        StreamBridge2.prototype.send = function(msg) {
          this.sendFn(msg);
        };
        StreamBridge2.prototype.callOnOpen = function() {
          this.wrappedOnOpen();
        };
        StreamBridge2.prototype.callOnClose = function(err) {
          this.wrappedOnClose(err);
        };
        StreamBridge2.prototype.callOnMessage = function(msg) {
          this.wrappedOnMessage(msg);
        };
        return StreamBridge2;
      }();
      function nodePromise(action) {
        return new Promise(function(resolve2, reject) {
          action(function(error3, value) {
            if (error3) {
              reject(error3);
            } else {
              resolve2(value);
            }
          });
        });
      }
      var LOG_TAG$7 = "Connection";
      var X_GOOG_API_CLIENT_VALUE = "gl-node/" + process.versions.node + " fire/" + version$1 + " grpc/" + package_json.version;
      function createMetadata(databasePath, token, appId) {
        hardAssert(token === null || token.type === "OAuth");
        var metadata = new grpcJs.Metadata();
        if (token) {
          for (var header in token.authHeaders) {
            if (token.authHeaders.hasOwnProperty(header)) {
              metadata.set(header, token.authHeaders[header]);
            }
          }
        }
        metadata.set("X-Firebase-GMPID", appId);
        metadata.set("X-Goog-Api-Client", X_GOOG_API_CLIENT_VALUE);
        metadata.set("Google-Cloud-Resource-Prefix", databasePath);
        return metadata;
      }
      var GrpcConnection = function() {
        function GrpcConnection2(protos, databaseInfo) {
          this.databaseInfo = databaseInfo;
          this.cachedStub = null;
          this.firestore = protos["google"]["firestore"]["v1"];
          this.databasePath = "projects/" + databaseInfo.databaseId.projectId + "/databases/" + databaseInfo.databaseId.database;
        }
        GrpcConnection2.prototype.ensureActiveStub = function() {
          if (!this.cachedStub) {
            logDebug(LOG_TAG$7, "Creating Firestore stub.");
            var credentials$1 = this.databaseInfo.ssl ? grpcJs.credentials.createSsl() : grpcJs.credentials.createInsecure();
            this.cachedStub = new this.firestore.Firestore(this.databaseInfo.host, credentials$1);
          }
          return this.cachedStub;
        };
        GrpcConnection2.prototype.invokeRPC = function(rpcName, path2, request, token) {
          var stub = this.ensureActiveStub();
          var metadata = createMetadata(this.databasePath, token, this.databaseInfo.appId);
          var jsonRequest = Object.assign({database: this.databasePath}, request);
          return nodePromise(function(callback) {
            logDebug(LOG_TAG$7, "RPC '" + rpcName + "' invoked with request:", request);
            return stub[rpcName](jsonRequest, metadata, function(grpcError, value) {
              if (grpcError) {
                logDebug(LOG_TAG$7, "RPC '" + rpcName + "' failed with error:", grpcError);
                callback(new FirestoreError(mapCodeFromRpcCode(grpcError.code), grpcError.message));
              } else {
                logDebug(LOG_TAG$7, "RPC '" + rpcName + "' completed with response:", value);
                callback(void 0, value);
              }
            });
          });
        };
        GrpcConnection2.prototype.invokeStreamingRPC = function(rpcName, path2, request, token) {
          var results = [];
          var responseDeferred = new Deferred();
          logDebug(LOG_TAG$7, "RPC '" + rpcName + "' invoked (streaming) with request:", request);
          var stub = this.ensureActiveStub();
          var metadata = createMetadata(this.databasePath, token, this.databaseInfo.appId);
          var jsonRequest = Object.assign(Object.assign({}, request), {database: this.databasePath});
          var stream = stub[rpcName](jsonRequest, metadata);
          stream.on("data", function(response) {
            logDebug(LOG_TAG$7, "RPC " + rpcName + " received result:", response);
            results.push(response);
          });
          stream.on("end", function() {
            logDebug(LOG_TAG$7, "RPC '" + rpcName + "' completed.");
            responseDeferred.resolve(results);
          });
          stream.on("error", function(grpcError) {
            logDebug(LOG_TAG$7, "RPC '" + rpcName + "' failed with error:", grpcError);
            var code = mapCodeFromRpcCode(grpcError.code);
            responseDeferred.reject(new FirestoreError(code, grpcError.message));
          });
          return responseDeferred.promise;
        };
        GrpcConnection2.prototype.openStream = function(rpcName, token) {
          var stub = this.ensureActiveStub();
          var metadata = createMetadata(this.databasePath, token, this.databaseInfo.appId);
          var grpcStream = stub[rpcName](metadata);
          var closed = false;
          var close = function(err) {
            if (!closed) {
              closed = true;
              stream.callOnClose(err);
              grpcStream.end();
            }
          };
          var stream = new StreamBridge({
            sendFn: function(msg) {
              if (!closed) {
                logDebug(LOG_TAG$7, "GRPC stream sending:", msg);
                try {
                  grpcStream.write(msg);
                } catch (e) {
                  logError("Failure sending:", msg);
                  logError("Error:", e);
                  throw e;
                }
              } else {
                logDebug(LOG_TAG$7, "Not sending because gRPC stream is closed:", msg);
              }
            },
            closeFn: function() {
              logDebug(LOG_TAG$7, "GRPC stream closed locally via close().");
              close();
            }
          });
          grpcStream.on("data", function(msg) {
            if (!closed) {
              logDebug(LOG_TAG$7, "GRPC stream received:", msg);
              stream.callOnMessage(msg);
            }
          });
          grpcStream.on("end", function() {
            logDebug(LOG_TAG$7, "GRPC stream ended.");
            close();
          });
          grpcStream.on("error", function(grpcError) {
            if (!closed) {
              logWarn(LOG_TAG$7, "GRPC stream error. Code:", grpcError.code, "Message:", grpcError.message);
              var code = mapCodeFromRpcCode(grpcError.code);
              close(new FirestoreError(code, grpcError.message));
            }
          });
          logDebug(LOG_TAG$7, "Opening GRPC stream");
          setTimeout(function() {
            stream.callOnOpen();
          }, 0);
          return stream;
        };
        return GrpcConnection2;
      }();
      var protoLoaderOptions = {
        longs: String,
        enums: String,
        defaults: true,
        oneofs: false
      };
      function loadProtos() {
        var root = path.resolve(__dirname, "src/protos");
        var firestoreProtoFile = path.join(root, "google/firestore/v1/firestore.proto");
        var packageDefinition = protoLoader.loadSync(firestoreProtoFile, Object.assign(Object.assign({}, protoLoaderOptions), {includeDirs: [root]}));
        return grpcJs.loadPackageDefinition(packageDefinition);
      }
      function newConnection(databaseInfo) {
        var protos = loadProtos();
        return new GrpcConnection(protos, databaseInfo);
      }
      function newConnectivityMonitor() {
        return new NoopConnectivityMonitor();
      }
      function getWindow() {
        if (process.env.USE_MOCK_PERSISTENCE === "YES") {
          return window;
        }
        return null;
      }
      function getDocument() {
        return null;
      }
      function newSerializer(databaseId) {
        return new JsonProtoSerializer(databaseId, false);
      }
      function newTextEncoder() {
        return new util$1.TextEncoder();
      }
      function newTextDecoder() {
        return new util$1.TextDecoder("utf-8");
      }
      var LOG_TAG$8 = "ExponentialBackoff";
      var DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1e3;
      var DEFAULT_BACKOFF_FACTOR = 1.5;
      var DEFAULT_BACKOFF_MAX_DELAY_MS = 60 * 1e3;
      var ExponentialBackoff = function() {
        function ExponentialBackoff2(queue, timerId, initialDelayMs, backoffFactor, maxDelayMs) {
          if (initialDelayMs === void 0) {
            initialDelayMs = DEFAULT_BACKOFF_INITIAL_DELAY_MS;
          }
          if (backoffFactor === void 0) {
            backoffFactor = DEFAULT_BACKOFF_FACTOR;
          }
          if (maxDelayMs === void 0) {
            maxDelayMs = DEFAULT_BACKOFF_MAX_DELAY_MS;
          }
          this.queue = queue;
          this.timerId = timerId;
          this.initialDelayMs = initialDelayMs;
          this.backoffFactor = backoffFactor;
          this.maxDelayMs = maxDelayMs;
          this.currentBaseMs = 0;
          this.timerPromise = null;
          this.lastAttemptTime = Date.now();
          this.reset();
        }
        ExponentialBackoff2.prototype.reset = function() {
          this.currentBaseMs = 0;
        };
        ExponentialBackoff2.prototype.resetToMax = function() {
          this.currentBaseMs = this.maxDelayMs;
        };
        ExponentialBackoff2.prototype.backoffAndRun = function(op) {
          var _this = this;
          this.cancel();
          var desiredDelayWithJitterMs = Math.floor(this.currentBaseMs + this.jitterDelayMs());
          var delaySoFarMs = Math.max(0, Date.now() - this.lastAttemptTime);
          var remainingDelayMs = Math.max(0, desiredDelayWithJitterMs - delaySoFarMs);
          if (remainingDelayMs > 0) {
            logDebug(LOG_TAG$8, "Backing off for " + remainingDelayMs + " ms " + ("(base delay: " + this.currentBaseMs + " ms, ") + ("delay with jitter: " + desiredDelayWithJitterMs + " ms, ") + ("last attempt: " + delaySoFarMs + " ms ago)"));
          }
          this.timerPromise = this.queue.enqueueAfterDelay(this.timerId, remainingDelayMs, function() {
            _this.lastAttemptTime = Date.now();
            return op();
          });
          this.currentBaseMs *= this.backoffFactor;
          if (this.currentBaseMs < this.initialDelayMs) {
            this.currentBaseMs = this.initialDelayMs;
          }
          if (this.currentBaseMs > this.maxDelayMs) {
            this.currentBaseMs = this.maxDelayMs;
          }
        };
        ExponentialBackoff2.prototype.skipBackoff = function() {
          if (this.timerPromise !== null) {
            this.timerPromise.skipDelay();
            this.timerPromise = null;
          }
        };
        ExponentialBackoff2.prototype.cancel = function() {
          if (this.timerPromise !== null) {
            this.timerPromise.cancel();
            this.timerPromise = null;
          }
        };
        ExponentialBackoff2.prototype.jitterDelayMs = function() {
          return (Math.random() - 0.5) * this.currentBaseMs;
        };
        return ExponentialBackoff2;
      }();
      var LOG_TAG$9 = "PersistentStream";
      var IDLE_TIMEOUT_MS = 60 * 1e3;
      var PersistentStream = function() {
        function PersistentStream2(queue, connectionTimerId, idleTimerId, connection, credentialsProvider, listener) {
          this.queue = queue;
          this.idleTimerId = idleTimerId;
          this.connection = connection;
          this.credentialsProvider = credentialsProvider;
          this.listener = listener;
          this.state = 0;
          this.closeCount = 0;
          this.idleTimer = null;
          this.stream = null;
          this.backoff = new ExponentialBackoff(queue, connectionTimerId);
        }
        PersistentStream2.prototype.isStarted = function() {
          return this.state === 1 || this.state === 2 || this.state === 4;
        };
        PersistentStream2.prototype.isOpen = function() {
          return this.state === 2;
        };
        PersistentStream2.prototype.start = function() {
          if (this.state === 3) {
            this.performBackoff();
            return;
          }
          this.auth();
        };
        PersistentStream2.prototype.stop = function() {
          return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  if (!this.isStarted())
                    return [3, 2];
                  return [4, this.close(0)];
                case 1:
                  _d.sent();
                  _d.label = 2;
                case 2:
                  return [2];
              }
            });
          });
        };
        PersistentStream2.prototype.inhibitBackoff = function() {
          this.state = 0;
          this.backoff.reset();
        };
        PersistentStream2.prototype.markIdle = function() {
          var _this = this;
          if (this.isOpen() && this.idleTimer === null) {
            this.idleTimer = this.queue.enqueueAfterDelay(this.idleTimerId, IDLE_TIMEOUT_MS, function() {
              return _this.handleIdleCloseTimer();
            });
          }
        };
        PersistentStream2.prototype.sendRequest = function(msg) {
          this.cancelIdleCheck();
          this.stream.send(msg);
        };
        PersistentStream2.prototype.handleIdleCloseTimer = function() {
          return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(_d) {
              if (this.isOpen()) {
                return [2, this.close(0)];
              }
              return [2];
            });
          });
        };
        PersistentStream2.prototype.cancelIdleCheck = function() {
          if (this.idleTimer) {
            this.idleTimer.cancel();
            this.idleTimer = null;
          }
        };
        PersistentStream2.prototype.close = function(finalState, error3) {
          return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  this.cancelIdleCheck();
                  this.backoff.cancel();
                  this.closeCount++;
                  if (finalState !== 3) {
                    this.backoff.reset();
                  } else if (error3 && error3.code === Code.RESOURCE_EXHAUSTED) {
                    logError(error3.toString());
                    logError("Using maximum backoff delay to prevent overloading the backend.");
                    this.backoff.resetToMax();
                  } else if (error3 && error3.code === Code.UNAUTHENTICATED) {
                    this.credentialsProvider.invalidateToken();
                  }
                  if (this.stream !== null) {
                    this.tearDown();
                    this.stream.close();
                    this.stream = null;
                  }
                  this.state = finalState;
                  return [4, this.listener.onClose(error3)];
                case 1:
                  _d.sent();
                  return [2];
              }
            });
          });
        };
        PersistentStream2.prototype.tearDown = function() {
        };
        PersistentStream2.prototype.auth = function() {
          var _this = this;
          this.state = 1;
          var dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);
          var closeCount = this.closeCount;
          this.credentialsProvider.getToken().then(function(token) {
            if (_this.closeCount === closeCount) {
              _this.startStream(token);
            }
          }, function(error3) {
            dispatchIfNotClosed(function() {
              var rpcError = new FirestoreError(Code.UNKNOWN, "Fetching auth token failed: " + error3.message);
              return _this.handleStreamClose(rpcError);
            });
          });
        };
        PersistentStream2.prototype.startStream = function(token) {
          var _this = this;
          var dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);
          this.stream = this.startRpc(token);
          this.stream.onOpen(function() {
            dispatchIfNotClosed(function() {
              _this.state = 2;
              return _this.listener.onOpen();
            });
          });
          this.stream.onClose(function(error3) {
            dispatchIfNotClosed(function() {
              return _this.handleStreamClose(error3);
            });
          });
          this.stream.onMessage(function(msg) {
            dispatchIfNotClosed(function() {
              return _this.onMessage(msg);
            });
          });
        };
        PersistentStream2.prototype.performBackoff = function() {
          var _this = this;
          this.state = 4;
          this.backoff.backoffAndRun(function() {
            return tslib.__awaiter(_this, void 0, void 0, function() {
              return tslib.__generator(this, function(_d) {
                this.state = 0;
                this.start();
                return [2];
              });
            });
          });
        };
        PersistentStream2.prototype.handleStreamClose = function(error3) {
          logDebug(LOG_TAG$9, "close with error: " + error3);
          this.stream = null;
          return this.close(3, error3);
        };
        PersistentStream2.prototype.getCloseGuardedDispatcher = function(startCloseCount) {
          var _this = this;
          return function(fn) {
            _this.queue.enqueueAndForget(function() {
              if (_this.closeCount === startCloseCount) {
                return fn();
              } else {
                logDebug(LOG_TAG$9, "stream callback skipped by getCloseGuardedDispatcher.");
                return Promise.resolve();
              }
            });
          };
        };
        return PersistentStream2;
      }();
      var PersistentListenStream = function(_super) {
        tslib.__extends(PersistentListenStream2, _super);
        function PersistentListenStream2(queue, connection, credentials, serializer, listener) {
          var _this = _super.call(this, queue, "listen_stream_connection_backoff", "listen_stream_idle", connection, credentials, listener) || this;
          _this.serializer = serializer;
          return _this;
        }
        PersistentListenStream2.prototype.startRpc = function(token) {
          return this.connection.openStream("Listen", token);
        };
        PersistentListenStream2.prototype.onMessage = function(watchChangeProto) {
          this.backoff.reset();
          var watchChange = fromWatchChange(this.serializer, watchChangeProto);
          var snapshot = versionFromListenResponse(watchChangeProto);
          return this.listener.onWatchChange(watchChange, snapshot);
        };
        PersistentListenStream2.prototype.watch = function(targetData) {
          var request = {};
          request.database = getEncodedDatabaseId(this.serializer);
          request.addTarget = toTarget(this.serializer, targetData);
          var labels = toListenRequestLabels(this.serializer, targetData);
          if (labels) {
            request.labels = labels;
          }
          this.sendRequest(request);
        };
        PersistentListenStream2.prototype.unwatch = function(targetId) {
          var request = {};
          request.database = getEncodedDatabaseId(this.serializer);
          request.removeTarget = targetId;
          this.sendRequest(request);
        };
        return PersistentListenStream2;
      }(PersistentStream);
      var PersistentWriteStream = function(_super) {
        tslib.__extends(PersistentWriteStream2, _super);
        function PersistentWriteStream2(queue, connection, credentials, serializer, listener) {
          var _this = _super.call(this, queue, "write_stream_connection_backoff", "write_stream_idle", connection, credentials, listener) || this;
          _this.serializer = serializer;
          _this.handshakeComplete_ = false;
          return _this;
        }
        Object.defineProperty(PersistentWriteStream2.prototype, "handshakeComplete", {
          get: function() {
            return this.handshakeComplete_;
          },
          enumerable: false,
          configurable: true
        });
        PersistentWriteStream2.prototype.start = function() {
          this.handshakeComplete_ = false;
          this.lastStreamToken = void 0;
          _super.prototype.start.call(this);
        };
        PersistentWriteStream2.prototype.tearDown = function() {
          if (this.handshakeComplete_) {
            this.writeMutations([]);
          }
        };
        PersistentWriteStream2.prototype.startRpc = function(token) {
          return this.connection.openStream("Write", token);
        };
        PersistentWriteStream2.prototype.onMessage = function(responseProto) {
          hardAssert(!!responseProto.streamToken);
          this.lastStreamToken = responseProto.streamToken;
          if (!this.handshakeComplete_) {
            hardAssert(!responseProto.writeResults || responseProto.writeResults.length === 0);
            this.handshakeComplete_ = true;
            return this.listener.onHandshakeComplete();
          } else {
            this.backoff.reset();
            var results = fromWriteResults(responseProto.writeResults, responseProto.commitTime);
            var commitVersion = fromVersion(responseProto.commitTime);
            return this.listener.onMutationResult(commitVersion, results);
          }
        };
        PersistentWriteStream2.prototype.writeHandshake = function() {
          var request = {};
          request.database = getEncodedDatabaseId(this.serializer);
          this.sendRequest(request);
        };
        PersistentWriteStream2.prototype.writeMutations = function(mutations) {
          var _this = this;
          var request = {
            streamToken: this.lastStreamToken,
            writes: mutations.map(function(mutation) {
              return toMutation(_this.serializer, mutation);
            })
          };
          this.sendRequest(request);
        };
        return PersistentWriteStream2;
      }(PersistentStream);
      var Datastore = function() {
        function Datastore2() {
        }
        return Datastore2;
      }();
      var DatastoreImpl = function(_super) {
        tslib.__extends(DatastoreImpl2, _super);
        function DatastoreImpl2(credentials, connection, serializer) {
          var _this = _super.call(this) || this;
          _this.credentials = credentials;
          _this.connection = connection;
          _this.serializer = serializer;
          _this.terminated = false;
          return _this;
        }
        DatastoreImpl2.prototype.verifyInitialized = function() {
          if (this.terminated) {
            throw new FirestoreError(Code.FAILED_PRECONDITION, "The client has already been terminated.");
          }
        };
        DatastoreImpl2.prototype.invokeRPC = function(rpcName, path2, request) {
          var _this = this;
          this.verifyInitialized();
          return this.credentials.getToken().then(function(token) {
            return _this.connection.invokeRPC(rpcName, path2, request, token);
          }).catch(function(error3) {
            if (error3.code === Code.UNAUTHENTICATED) {
              _this.credentials.invalidateToken();
            }
            throw error3;
          });
        };
        DatastoreImpl2.prototype.invokeStreamingRPC = function(rpcName, path2, request) {
          var _this = this;
          this.verifyInitialized();
          return this.credentials.getToken().then(function(token) {
            return _this.connection.invokeStreamingRPC(rpcName, path2, request, token);
          }).catch(function(error3) {
            if (error3.code === Code.UNAUTHENTICATED) {
              _this.credentials.invalidateToken();
            }
            throw error3;
          });
        };
        DatastoreImpl2.prototype.terminate = function() {
          this.terminated = false;
        };
        return DatastoreImpl2;
      }(Datastore);
      function newDatastore(credentials, connection, serializer) {
        return new DatastoreImpl(credentials, connection, serializer);
      }
      function invokeCommitRpc(datastore, mutations) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var datastoreImpl, path2, request;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                datastoreImpl = debugCast(datastore);
                path2 = getEncodedDatabaseId(datastoreImpl.serializer) + "/documents";
                request = {
                  writes: mutations.map(function(m) {
                    return toMutation(datastoreImpl.serializer, m);
                  })
                };
                return [4, datastoreImpl.invokeRPC("Commit", path2, request)];
              case 1:
                _d.sent();
                return [2];
            }
          });
        });
      }
      function invokeBatchGetDocumentsRpc(datastore, keys) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var datastoreImpl, path2, request, response, docs, result;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                datastoreImpl = debugCast(datastore);
                path2 = getEncodedDatabaseId(datastoreImpl.serializer) + "/documents";
                request = {
                  documents: keys.map(function(k) {
                    return toName(datastoreImpl.serializer, k);
                  })
                };
                return [4, datastoreImpl.invokeStreamingRPC("BatchGetDocuments", path2, request)];
              case 1:
                response = _d.sent();
                docs = new Map();
                response.forEach(function(proto) {
                  var doc2 = fromBatchGetDocumentsResponse(datastoreImpl.serializer, proto);
                  docs.set(doc2.key.toString(), doc2);
                });
                result = [];
                keys.forEach(function(key) {
                  var doc2 = docs.get(key.toString());
                  hardAssert(!!doc2);
                  result.push(doc2);
                });
                return [2, result];
            }
          });
        });
      }
      function newPersistentWriteStream(datastore, queue, listener) {
        var datastoreImpl = debugCast(datastore);
        datastoreImpl.verifyInitialized();
        return new PersistentWriteStream(queue, datastoreImpl.connection, datastoreImpl.credentials, datastoreImpl.serializer, listener);
      }
      function newPersistentWatchStream(datastore, queue, listener) {
        var datastoreImpl = debugCast(datastore);
        datastoreImpl.verifyInitialized();
        return new PersistentListenStream(queue, datastoreImpl.connection, datastoreImpl.credentials, datastoreImpl.serializer, listener);
      }
      var LOG_TAG$a = "OnlineStateTracker";
      var MAX_WATCH_STREAM_FAILURES = 1;
      var ONLINE_STATE_TIMEOUT_MS = 10 * 1e3;
      var OnlineStateTracker = function() {
        function OnlineStateTracker2(asyncQueue, onlineStateHandler) {
          this.asyncQueue = asyncQueue;
          this.onlineStateHandler = onlineStateHandler;
          this.state = "Unknown";
          this.watchStreamFailures = 0;
          this.onlineStateTimer = null;
          this.shouldWarnClientIsOffline = true;
        }
        OnlineStateTracker2.prototype.handleWatchStreamStart = function() {
          var _this = this;
          if (this.watchStreamFailures === 0) {
            this.setAndBroadcast("Unknown");
            this.onlineStateTimer = this.asyncQueue.enqueueAfterDelay("online_state_timeout", ONLINE_STATE_TIMEOUT_MS, function() {
              _this.onlineStateTimer = null;
              _this.logClientOfflineWarningIfNecessary("Backend didn't respond within " + ONLINE_STATE_TIMEOUT_MS / 1e3 + " seconds.");
              _this.setAndBroadcast("Offline");
              return Promise.resolve();
            });
          }
        };
        OnlineStateTracker2.prototype.handleWatchStreamFailure = function(error3) {
          if (this.state === "Online") {
            this.setAndBroadcast("Unknown");
          } else {
            this.watchStreamFailures++;
            if (this.watchStreamFailures >= MAX_WATCH_STREAM_FAILURES) {
              this.clearOnlineStateTimer();
              this.logClientOfflineWarningIfNecessary("Connection failed " + MAX_WATCH_STREAM_FAILURES + " " + ("times. Most recent error: " + error3.toString()));
              this.setAndBroadcast("Offline");
            }
          }
        };
        OnlineStateTracker2.prototype.set = function(newState) {
          this.clearOnlineStateTimer();
          this.watchStreamFailures = 0;
          if (newState === "Online") {
            this.shouldWarnClientIsOffline = false;
          }
          this.setAndBroadcast(newState);
        };
        OnlineStateTracker2.prototype.setAndBroadcast = function(newState) {
          if (newState !== this.state) {
            this.state = newState;
            this.onlineStateHandler(newState);
          }
        };
        OnlineStateTracker2.prototype.logClientOfflineWarningIfNecessary = function(details) {
          var message = "Could not reach Cloud Firestore backend. " + details + "\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.";
          if (this.shouldWarnClientIsOffline) {
            logError(message);
            this.shouldWarnClientIsOffline = false;
          } else {
            logDebug(LOG_TAG$a, message);
          }
        };
        OnlineStateTracker2.prototype.clearOnlineStateTimer = function() {
          if (this.onlineStateTimer !== null) {
            this.onlineStateTimer.cancel();
            this.onlineStateTimer = null;
          }
        };
        return OnlineStateTracker2;
      }();
      var LOG_TAG$b = "RemoteStore";
      var MAX_PENDING_WRITES = 10;
      var RemoteStoreImpl = function() {
        function RemoteStoreImpl2(localStore, datastore, asyncQueue, onlineStateHandler, connectivityMonitor) {
          var _this = this;
          this.localStore = localStore;
          this.datastore = datastore;
          this.asyncQueue = asyncQueue;
          this.remoteSyncer = {};
          this.writePipeline = [];
          this.listenTargets = new Map();
          this.offlineCauses = new Set();
          this.onNetworkStatusChange = [];
          this.connectivityMonitor = connectivityMonitor;
          this.connectivityMonitor.addCallback(function(_) {
            asyncQueue.enqueueAndForget(function() {
              return tslib.__awaiter(_this, void 0, void 0, function() {
                return tslib.__generator(this, function(_d) {
                  switch (_d.label) {
                    case 0:
                      if (!canUseNetwork(this))
                        return [3, 2];
                      logDebug(LOG_TAG$b, "Restarting streams for network reachability change.");
                      return [4, restartNetwork(this)];
                    case 1:
                      _d.sent();
                      _d.label = 2;
                    case 2:
                      return [2];
                  }
                });
              });
            });
          });
          this.onlineStateTracker = new OnlineStateTracker(asyncQueue, onlineStateHandler);
        }
        return RemoteStoreImpl2;
      }();
      function newRemoteStore(localStore, datastore, asyncQueue, onlineStateHandler, connectivityMonitor) {
        return new RemoteStoreImpl(localStore, datastore, asyncQueue, onlineStateHandler, connectivityMonitor);
      }
      function remoteStoreEnableNetwork(remoteStore) {
        var remoteStoreImpl = debugCast(remoteStore);
        remoteStoreImpl.offlineCauses.delete(0);
        return enableNetworkInternal(remoteStoreImpl);
      }
      function enableNetworkInternal(remoteStoreImpl) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var _i, _d, networkStatusHandler;
          return tslib.__generator(this, function(_e) {
            switch (_e.label) {
              case 0:
                if (!canUseNetwork(remoteStoreImpl))
                  return [3, 4];
                _i = 0, _d = remoteStoreImpl.onNetworkStatusChange;
                _e.label = 1;
              case 1:
                if (!(_i < _d.length))
                  return [3, 4];
                networkStatusHandler = _d[_i];
                return [4, networkStatusHandler(true)];
              case 2:
                _e.sent();
                _e.label = 3;
              case 3:
                _i++;
                return [3, 1];
              case 4:
                return [2];
            }
          });
        });
      }
      function remoteStoreDisableNetwork(remoteStore) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var remoteStoreImpl;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                remoteStoreImpl = debugCast(remoteStore);
                remoteStoreImpl.offlineCauses.add(0);
                return [4, disableNetworkInternal(remoteStoreImpl)];
              case 1:
                _d.sent();
                remoteStoreImpl.onlineStateTracker.set("Offline");
                return [2];
            }
          });
        });
      }
      function disableNetworkInternal(remoteStoreImpl) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var _i, _d, networkStatusHandler;
          return tslib.__generator(this, function(_e) {
            switch (_e.label) {
              case 0:
                _i = 0, _d = remoteStoreImpl.onNetworkStatusChange;
                _e.label = 1;
              case 1:
                if (!(_i < _d.length))
                  return [3, 4];
                networkStatusHandler = _d[_i];
                return [4, networkStatusHandler(false)];
              case 2:
                _e.sent();
                _e.label = 3;
              case 3:
                _i++;
                return [3, 1];
              case 4:
                return [2];
            }
          });
        });
      }
      function remoteStoreShutdown(remoteStore) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var remoteStoreImpl;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                remoteStoreImpl = debugCast(remoteStore);
                logDebug(LOG_TAG$b, "RemoteStore shutting down.");
                remoteStoreImpl.offlineCauses.add(5);
                return [4, disableNetworkInternal(remoteStoreImpl)];
              case 1:
                _d.sent();
                remoteStoreImpl.connectivityMonitor.shutdown();
                remoteStoreImpl.onlineStateTracker.set("Unknown");
                return [2];
            }
          });
        });
      }
      function remoteStoreListen(remoteStore, targetData) {
        var remoteStoreImpl = debugCast(remoteStore);
        if (remoteStoreImpl.listenTargets.has(targetData.targetId)) {
          return;
        }
        remoteStoreImpl.listenTargets.set(targetData.targetId, targetData);
        if (shouldStartWatchStream(remoteStoreImpl)) {
          startWatchStream(remoteStoreImpl);
        } else if (ensureWatchStream(remoteStoreImpl).isOpen()) {
          sendWatchRequest(remoteStoreImpl, targetData);
        }
      }
      function remoteStoreUnlisten(remoteStore, targetId) {
        var remoteStoreImpl = debugCast(remoteStore);
        var watchStream = ensureWatchStream(remoteStoreImpl);
        remoteStoreImpl.listenTargets.delete(targetId);
        if (watchStream.isOpen()) {
          sendUnwatchRequest(remoteStoreImpl, targetId);
        }
        if (remoteStoreImpl.listenTargets.size === 0) {
          if (watchStream.isOpen()) {
            watchStream.markIdle();
          } else if (canUseNetwork(remoteStoreImpl)) {
            remoteStoreImpl.onlineStateTracker.set("Unknown");
          }
        }
      }
      function sendWatchRequest(remoteStoreImpl, targetData) {
        remoteStoreImpl.watchChangeAggregator.recordPendingTargetRequest(targetData.targetId);
        ensureWatchStream(remoteStoreImpl).watch(targetData);
      }
      function sendUnwatchRequest(remoteStoreImpl, targetId) {
        remoteStoreImpl.watchChangeAggregator.recordPendingTargetRequest(targetId);
        ensureWatchStream(remoteStoreImpl).unwatch(targetId);
      }
      function startWatchStream(remoteStoreImpl) {
        remoteStoreImpl.watchChangeAggregator = new WatchChangeAggregator({
          getRemoteKeysForTarget: function(targetId) {
            return remoteStoreImpl.remoteSyncer.getRemoteKeysForTarget(targetId);
          },
          getTargetDataForTarget: function(targetId) {
            return remoteStoreImpl.listenTargets.get(targetId) || null;
          }
        });
        ensureWatchStream(remoteStoreImpl).start();
        remoteStoreImpl.onlineStateTracker.handleWatchStreamStart();
      }
      function shouldStartWatchStream(remoteStoreImpl) {
        return canUseNetwork(remoteStoreImpl) && !ensureWatchStream(remoteStoreImpl).isStarted() && remoteStoreImpl.listenTargets.size > 0;
      }
      function canUseNetwork(remoteStore) {
        var remoteStoreImpl = debugCast(remoteStore);
        return remoteStoreImpl.offlineCauses.size === 0;
      }
      function cleanUpWatchStreamState(remoteStoreImpl) {
        remoteStoreImpl.watchChangeAggregator = void 0;
      }
      function onWatchStreamOpen(remoteStoreImpl) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          return tslib.__generator(this, function(_d) {
            remoteStoreImpl.listenTargets.forEach(function(targetData, targetId) {
              sendWatchRequest(remoteStoreImpl, targetData);
            });
            return [2];
          });
        });
      }
      function onWatchStreamClose(remoteStoreImpl, error3) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          return tslib.__generator(this, function(_d) {
            cleanUpWatchStreamState(remoteStoreImpl);
            if (shouldStartWatchStream(remoteStoreImpl)) {
              remoteStoreImpl.onlineStateTracker.handleWatchStreamFailure(error3);
              startWatchStream(remoteStoreImpl);
            } else {
              remoteStoreImpl.onlineStateTracker.set("Unknown");
            }
            return [2];
          });
        });
      }
      function onWatchStreamChange(remoteStoreImpl, watchChange, snapshotVersion) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var e_4, lastRemoteSnapshotVersion, e_5;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                remoteStoreImpl.onlineStateTracker.set("Online");
                if (!(watchChange instanceof WatchTargetChange && watchChange.state === 2 && watchChange.cause))
                  return [3, 6];
                _d.label = 1;
              case 1:
                _d.trys.push([1, 3, , 5]);
                return [4, handleTargetError(remoteStoreImpl, watchChange)];
              case 2:
                _d.sent();
                return [3, 5];
              case 3:
                e_4 = _d.sent();
                logDebug(LOG_TAG$b, "Failed to remove targets %s: %s ", watchChange.targetIds.join(","), e_4);
                return [4, disableNetworkUntilRecovery(remoteStoreImpl, e_4)];
              case 4:
                _d.sent();
                return [3, 5];
              case 5:
                return [2];
              case 6:
                if (watchChange instanceof DocumentWatchChange) {
                  remoteStoreImpl.watchChangeAggregator.handleDocumentChange(watchChange);
                } else if (watchChange instanceof ExistenceFilterChange) {
                  remoteStoreImpl.watchChangeAggregator.handleExistenceFilter(watchChange);
                } else {
                  remoteStoreImpl.watchChangeAggregator.handleTargetChange(watchChange);
                }
                if (!!snapshotVersion.isEqual(SnapshotVersion.min()))
                  return [3, 13];
                _d.label = 7;
              case 7:
                _d.trys.push([7, 11, , 13]);
                return [4, localStoreGetLastRemoteSnapshotVersion(remoteStoreImpl.localStore)];
              case 8:
                lastRemoteSnapshotVersion = _d.sent();
                if (!(snapshotVersion.compareTo(lastRemoteSnapshotVersion) >= 0))
                  return [3, 10];
                return [4, raiseWatchSnapshot(remoteStoreImpl, snapshotVersion)];
              case 9:
                _d.sent();
                _d.label = 10;
              case 10:
                return [3, 13];
              case 11:
                e_5 = _d.sent();
                logDebug(LOG_TAG$b, "Failed to raise snapshot:", e_5);
                return [4, disableNetworkUntilRecovery(remoteStoreImpl, e_5)];
              case 12:
                _d.sent();
                return [3, 13];
              case 13:
                return [2];
            }
          });
        });
      }
      function disableNetworkUntilRecovery(remoteStoreImpl, e, op) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var _this = this;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                if (!isIndexedDbTransactionError(e))
                  return [3, 2];
                remoteStoreImpl.offlineCauses.add(1);
                return [4, disableNetworkInternal(remoteStoreImpl)];
              case 1:
                _d.sent();
                remoteStoreImpl.onlineStateTracker.set("Offline");
                if (!op) {
                  op = function() {
                    return localStoreGetLastRemoteSnapshotVersion(remoteStoreImpl.localStore);
                  };
                }
                remoteStoreImpl.asyncQueue.enqueueRetryable(function() {
                  return tslib.__awaiter(_this, void 0, void 0, function() {
                    return tslib.__generator(this, function(_d2) {
                      switch (_d2.label) {
                        case 0:
                          logDebug(LOG_TAG$b, "Retrying IndexedDB access");
                          return [4, op()];
                        case 1:
                          _d2.sent();
                          remoteStoreImpl.offlineCauses.delete(1);
                          return [4, enableNetworkInternal(remoteStoreImpl)];
                        case 2:
                          _d2.sent();
                          return [2];
                      }
                    });
                  });
                });
                return [3, 3];
              case 2:
                throw e;
              case 3:
                return [2];
            }
          });
        });
      }
      function executeWithRecovery(remoteStoreImpl, op) {
        return op().catch(function(e) {
          return disableNetworkUntilRecovery(remoteStoreImpl, e, op);
        });
      }
      function raiseWatchSnapshot(remoteStoreImpl, snapshotVersion) {
        var remoteEvent = remoteStoreImpl.watchChangeAggregator.createRemoteEvent(snapshotVersion);
        remoteEvent.targetChanges.forEach(function(change, targetId) {
          if (change.resumeToken.approximateByteSize() > 0) {
            var targetData = remoteStoreImpl.listenTargets.get(targetId);
            if (targetData) {
              remoteStoreImpl.listenTargets.set(targetId, targetData.withResumeToken(change.resumeToken, snapshotVersion));
            }
          }
        });
        remoteEvent.targetMismatches.forEach(function(targetId) {
          var targetData = remoteStoreImpl.listenTargets.get(targetId);
          if (!targetData) {
            return;
          }
          remoteStoreImpl.listenTargets.set(targetId, targetData.withResumeToken(ByteString.EMPTY_BYTE_STRING, targetData.snapshotVersion));
          sendUnwatchRequest(remoteStoreImpl, targetId);
          var requestTargetData = new TargetData(targetData.target, targetId, 1, targetData.sequenceNumber);
          sendWatchRequest(remoteStoreImpl, requestTargetData);
        });
        return remoteStoreImpl.remoteSyncer.applyRemoteEvent(remoteEvent);
      }
      function handleTargetError(remoteStoreImpl, watchChange) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var error3, _i, _d, targetId;
          return tslib.__generator(this, function(_e) {
            switch (_e.label) {
              case 0:
                error3 = watchChange.cause;
                _i = 0, _d = watchChange.targetIds;
                _e.label = 1;
              case 1:
                if (!(_i < _d.length))
                  return [3, 4];
                targetId = _d[_i];
                if (!remoteStoreImpl.listenTargets.has(targetId))
                  return [3, 3];
                return [4, remoteStoreImpl.remoteSyncer.rejectListen(targetId, error3)];
              case 2:
                _e.sent();
                remoteStoreImpl.listenTargets.delete(targetId);
                remoteStoreImpl.watchChangeAggregator.removeTarget(targetId);
                _e.label = 3;
              case 3:
                _i++;
                return [3, 1];
              case 4:
                return [2];
            }
          });
        });
      }
      function fillWritePipeline(remoteStore) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var remoteStoreImpl, writeStream, lastBatchIdRetrieved, batch, e_6;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                remoteStoreImpl = debugCast(remoteStore);
                writeStream = ensureWriteStream(remoteStoreImpl);
                lastBatchIdRetrieved = remoteStoreImpl.writePipeline.length > 0 ? remoteStoreImpl.writePipeline[remoteStoreImpl.writePipeline.length - 1].batchId : BATCHID_UNKNOWN;
                _d.label = 1;
              case 1:
                if (!canAddToWritePipeline(remoteStoreImpl))
                  return [3, 7];
                _d.label = 2;
              case 2:
                _d.trys.push([2, 4, , 6]);
                return [4, localStoreGetNextMutationBatch(remoteStoreImpl.localStore, lastBatchIdRetrieved)];
              case 3:
                batch = _d.sent();
                if (batch === null) {
                  if (remoteStoreImpl.writePipeline.length === 0) {
                    writeStream.markIdle();
                  }
                  return [3, 7];
                } else {
                  lastBatchIdRetrieved = batch.batchId;
                  addToWritePipeline(remoteStoreImpl, batch);
                }
                return [3, 6];
              case 4:
                e_6 = _d.sent();
                return [4, disableNetworkUntilRecovery(remoteStoreImpl, e_6)];
              case 5:
                _d.sent();
                return [3, 6];
              case 6:
                return [3, 1];
              case 7:
                if (shouldStartWriteStream(remoteStoreImpl)) {
                  startWriteStream(remoteStoreImpl);
                }
                return [2];
            }
          });
        });
      }
      function canAddToWritePipeline(remoteStoreImpl) {
        return canUseNetwork(remoteStoreImpl) && remoteStoreImpl.writePipeline.length < MAX_PENDING_WRITES;
      }
      function addToWritePipeline(remoteStoreImpl, batch) {
        remoteStoreImpl.writePipeline.push(batch);
        var writeStream = ensureWriteStream(remoteStoreImpl);
        if (writeStream.isOpen() && writeStream.handshakeComplete) {
          writeStream.writeMutations(batch.mutations);
        }
      }
      function shouldStartWriteStream(remoteStoreImpl) {
        return canUseNetwork(remoteStoreImpl) && !ensureWriteStream(remoteStoreImpl).isStarted() && remoteStoreImpl.writePipeline.length > 0;
      }
      function startWriteStream(remoteStoreImpl) {
        ensureWriteStream(remoteStoreImpl).start();
      }
      function onWriteStreamOpen(remoteStoreImpl) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          return tslib.__generator(this, function(_d) {
            ensureWriteStream(remoteStoreImpl).writeHandshake();
            return [2];
          });
        });
      }
      function onWriteHandshakeComplete(remoteStoreImpl) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var writeStream, _i, _d, batch;
          return tslib.__generator(this, function(_e) {
            writeStream = ensureWriteStream(remoteStoreImpl);
            for (_i = 0, _d = remoteStoreImpl.writePipeline; _i < _d.length; _i++) {
              batch = _d[_i];
              writeStream.writeMutations(batch.mutations);
            }
            return [2];
          });
        });
      }
      function onMutationResult(remoteStoreImpl, commitVersion, results) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var batch, success;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                batch = remoteStoreImpl.writePipeline.shift();
                success = MutationBatchResult.from(batch, commitVersion, results);
                return [4, executeWithRecovery(remoteStoreImpl, function() {
                  return remoteStoreImpl.remoteSyncer.applySuccessfulWrite(success);
                })];
              case 1:
                _d.sent();
                return [4, fillWritePipeline(remoteStoreImpl)];
              case 2:
                _d.sent();
                return [2];
            }
          });
        });
      }
      function onWriteStreamClose(remoteStoreImpl, error3) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                if (!(error3 && ensureWriteStream(remoteStoreImpl).handshakeComplete))
                  return [3, 2];
                return [4, handleWriteError(remoteStoreImpl, error3)];
              case 1:
                _d.sent();
                _d.label = 2;
              case 2:
                if (shouldStartWriteStream(remoteStoreImpl)) {
                  startWriteStream(remoteStoreImpl);
                }
                return [2];
            }
          });
        });
      }
      function handleWriteError(remoteStoreImpl, error3) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var batch_1;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                if (!isPermanentWriteError(error3.code))
                  return [3, 3];
                batch_1 = remoteStoreImpl.writePipeline.shift();
                ensureWriteStream(remoteStoreImpl).inhibitBackoff();
                return [4, executeWithRecovery(remoteStoreImpl, function() {
                  return remoteStoreImpl.remoteSyncer.rejectFailedWrite(batch_1.batchId, error3);
                })];
              case 1:
                _d.sent();
                return [4, fillWritePipeline(remoteStoreImpl)];
              case 2:
                _d.sent();
                _d.label = 3;
              case 3:
                return [2];
            }
          });
        });
      }
      function restartNetwork(remoteStore) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var remoteStoreImpl;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                remoteStoreImpl = debugCast(remoteStore);
                remoteStoreImpl.offlineCauses.add(4);
                return [4, disableNetworkInternal(remoteStoreImpl)];
              case 1:
                _d.sent();
                remoteStoreImpl.onlineStateTracker.set("Unknown");
                remoteStoreImpl.offlineCauses.delete(4);
                return [4, enableNetworkInternal(remoteStoreImpl)];
              case 2:
                _d.sent();
                return [2];
            }
          });
        });
      }
      function remoteStoreHandleCredentialChange(remoteStore, user) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var remoteStoreImpl, usesNetwork;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                remoteStoreImpl = debugCast(remoteStore);
                remoteStoreImpl.asyncQueue.verifyOperationInProgress();
                logDebug(LOG_TAG$b, "RemoteStore received new credentials");
                usesNetwork = canUseNetwork(remoteStoreImpl);
                remoteStoreImpl.offlineCauses.add(3);
                return [4, disableNetworkInternal(remoteStoreImpl)];
              case 1:
                _d.sent();
                if (usesNetwork) {
                  remoteStoreImpl.onlineStateTracker.set("Unknown");
                }
                return [4, remoteStoreImpl.remoteSyncer.handleCredentialChange(user)];
              case 2:
                _d.sent();
                remoteStoreImpl.offlineCauses.delete(3);
                return [4, enableNetworkInternal(remoteStoreImpl)];
              case 3:
                _d.sent();
                return [2];
            }
          });
        });
      }
      function remoteStoreApplyPrimaryState(remoteStore, isPrimary) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var remoteStoreImpl;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                remoteStoreImpl = debugCast(remoteStore);
                if (!isPrimary)
                  return [3, 2];
                remoteStoreImpl.offlineCauses.delete(2);
                return [4, enableNetworkInternal(remoteStoreImpl)];
              case 1:
                _d.sent();
                return [3, 4];
              case 2:
                if (!!isPrimary)
                  return [3, 4];
                remoteStoreImpl.offlineCauses.add(2);
                return [4, disableNetworkInternal(remoteStoreImpl)];
              case 3:
                _d.sent();
                remoteStoreImpl.onlineStateTracker.set("Unknown");
                _d.label = 4;
              case 4:
                return [2];
            }
          });
        });
      }
      function ensureWatchStream(remoteStoreImpl) {
        var _this = this;
        if (!remoteStoreImpl.watchStream) {
          remoteStoreImpl.watchStream = newPersistentWatchStream(remoteStoreImpl.datastore, remoteStoreImpl.asyncQueue, {
            onOpen: onWatchStreamOpen.bind(null, remoteStoreImpl),
            onClose: onWatchStreamClose.bind(null, remoteStoreImpl),
            onWatchChange: onWatchStreamChange.bind(null, remoteStoreImpl)
          });
          remoteStoreImpl.onNetworkStatusChange.push(function(enabled) {
            return tslib.__awaiter(_this, void 0, void 0, function() {
              return tslib.__generator(this, function(_d) {
                switch (_d.label) {
                  case 0:
                    if (!enabled)
                      return [3, 1];
                    remoteStoreImpl.watchStream.inhibitBackoff();
                    if (shouldStartWatchStream(remoteStoreImpl)) {
                      startWatchStream(remoteStoreImpl);
                    } else {
                      remoteStoreImpl.onlineStateTracker.set("Unknown");
                    }
                    return [3, 3];
                  case 1:
                    return [4, remoteStoreImpl.watchStream.stop()];
                  case 2:
                    _d.sent();
                    cleanUpWatchStreamState(remoteStoreImpl);
                    _d.label = 3;
                  case 3:
                    return [2];
                }
              });
            });
          });
        }
        return remoteStoreImpl.watchStream;
      }
      function ensureWriteStream(remoteStoreImpl) {
        var _this = this;
        if (!remoteStoreImpl.writeStream) {
          remoteStoreImpl.writeStream = newPersistentWriteStream(remoteStoreImpl.datastore, remoteStoreImpl.asyncQueue, {
            onOpen: onWriteStreamOpen.bind(null, remoteStoreImpl),
            onClose: onWriteStreamClose.bind(null, remoteStoreImpl),
            onHandshakeComplete: onWriteHandshakeComplete.bind(null, remoteStoreImpl),
            onMutationResult: onMutationResult.bind(null, remoteStoreImpl)
          });
          remoteStoreImpl.onNetworkStatusChange.push(function(enabled) {
            return tslib.__awaiter(_this, void 0, void 0, function() {
              return tslib.__generator(this, function(_d) {
                switch (_d.label) {
                  case 0:
                    if (!enabled)
                      return [3, 2];
                    remoteStoreImpl.writeStream.inhibitBackoff();
                    return [4, fillWritePipeline(remoteStoreImpl)];
                  case 1:
                    _d.sent();
                    return [3, 4];
                  case 2:
                    return [4, remoteStoreImpl.writeStream.stop()];
                  case 3:
                    _d.sent();
                    if (remoteStoreImpl.writePipeline.length > 0) {
                      logDebug(LOG_TAG$b, "Stopping write stream with " + remoteStoreImpl.writePipeline.length + " pending writes");
                      remoteStoreImpl.writePipeline = [];
                    }
                    _d.label = 4;
                  case 4:
                    return [2];
                }
              });
            });
          });
        }
        return remoteStoreImpl.writeStream;
      }
      var LOG_TAG$c = "AsyncQueue";
      var DelayedOperation = function() {
        function DelayedOperation2(asyncQueue, timerId, targetTimeMs, op, removalCallback) {
          this.asyncQueue = asyncQueue;
          this.timerId = timerId;
          this.targetTimeMs = targetTimeMs;
          this.op = op;
          this.removalCallback = removalCallback;
          this.deferred = new Deferred();
          this.then = this.deferred.promise.then.bind(this.deferred.promise);
          this.deferred.promise.catch(function(err) {
          });
        }
        DelayedOperation2.createAndSchedule = function(asyncQueue, timerId, delayMs, op, removalCallback) {
          var targetTime = Date.now() + delayMs;
          var delayedOp = new DelayedOperation2(asyncQueue, timerId, targetTime, op, removalCallback);
          delayedOp.start(delayMs);
          return delayedOp;
        };
        DelayedOperation2.prototype.start = function(delayMs) {
          var _this = this;
          this.timerHandle = setTimeout(function() {
            return _this.handleDelayElapsed();
          }, delayMs);
        };
        DelayedOperation2.prototype.skipDelay = function() {
          return this.handleDelayElapsed();
        };
        DelayedOperation2.prototype.cancel = function(reason) {
          if (this.timerHandle !== null) {
            this.clearTimeout();
            this.deferred.reject(new FirestoreError(Code.CANCELLED, "Operation cancelled" + (reason ? ": " + reason : "")));
          }
        };
        DelayedOperation2.prototype.handleDelayElapsed = function() {
          var _this = this;
          this.asyncQueue.enqueueAndForget(function() {
            if (_this.timerHandle !== null) {
              _this.clearTimeout();
              return _this.op().then(function(result) {
                return _this.deferred.resolve(result);
              });
            } else {
              return Promise.resolve();
            }
          });
        };
        DelayedOperation2.prototype.clearTimeout = function() {
          if (this.timerHandle !== null) {
            this.removalCallback(this);
            clearTimeout(this.timerHandle);
            this.timerHandle = null;
          }
        };
        return DelayedOperation2;
      }();
      function wrapInUserErrorIfRecoverable(e, msg) {
        logError(LOG_TAG$c, msg + ": " + e);
        if (isIndexedDbTransactionError(e)) {
          return new FirestoreError(Code.UNAVAILABLE, msg + ": " + e);
        } else {
          throw e;
        }
      }
      var DocumentSet = function() {
        function DocumentSet2(comp) {
          if (comp) {
            this.comparator = function(d1, d2) {
              return comp(d1, d2) || DocumentKey.comparator(d1.key, d2.key);
            };
          } else {
            this.comparator = function(d1, d2) {
              return DocumentKey.comparator(d1.key, d2.key);
            };
          }
          this.keyedMap = documentMap();
          this.sortedSet = new SortedMap(this.comparator);
        }
        DocumentSet2.emptySet = function(oldSet) {
          return new DocumentSet2(oldSet.comparator);
        };
        DocumentSet2.prototype.has = function(key) {
          return this.keyedMap.get(key) != null;
        };
        DocumentSet2.prototype.get = function(key) {
          return this.keyedMap.get(key);
        };
        DocumentSet2.prototype.first = function() {
          return this.sortedSet.minKey();
        };
        DocumentSet2.prototype.last = function() {
          return this.sortedSet.maxKey();
        };
        DocumentSet2.prototype.isEmpty = function() {
          return this.sortedSet.isEmpty();
        };
        DocumentSet2.prototype.indexOf = function(key) {
          var doc2 = this.keyedMap.get(key);
          return doc2 ? this.sortedSet.indexOf(doc2) : -1;
        };
        Object.defineProperty(DocumentSet2.prototype, "size", {
          get: function() {
            return this.sortedSet.size;
          },
          enumerable: false,
          configurable: true
        });
        DocumentSet2.prototype.forEach = function(cb) {
          this.sortedSet.inorderTraversal(function(k, v) {
            cb(k);
            return false;
          });
        };
        DocumentSet2.prototype.add = function(doc2) {
          var set = this.delete(doc2.key);
          return set.copy(set.keyedMap.insert(doc2.key, doc2), set.sortedSet.insert(doc2, null));
        };
        DocumentSet2.prototype.delete = function(key) {
          var doc2 = this.get(key);
          if (!doc2) {
            return this;
          }
          return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc2));
        };
        DocumentSet2.prototype.isEqual = function(other) {
          if (!(other instanceof DocumentSet2)) {
            return false;
          }
          if (this.size !== other.size) {
            return false;
          }
          var thisIt = this.sortedSet.getIterator();
          var otherIt = other.sortedSet.getIterator();
          while (thisIt.hasNext()) {
            var thisDoc = thisIt.getNext().key;
            var otherDoc = otherIt.getNext().key;
            if (!thisDoc.isEqual(otherDoc)) {
              return false;
            }
          }
          return true;
        };
        DocumentSet2.prototype.toString = function() {
          var docStrings = [];
          this.forEach(function(doc2) {
            docStrings.push(doc2.toString());
          });
          if (docStrings.length === 0) {
            return "DocumentSet ()";
          } else {
            return "DocumentSet (\n  " + docStrings.join("  \n") + "\n)";
          }
        };
        DocumentSet2.prototype.copy = function(keyedMap, sortedSet) {
          var newSet = new DocumentSet2();
          newSet.comparator = this.comparator;
          newSet.keyedMap = keyedMap;
          newSet.sortedSet = sortedSet;
          return newSet;
        };
        return DocumentSet2;
      }();
      var DocumentChangeSet = function() {
        function DocumentChangeSet2() {
          this.changeMap = new SortedMap(DocumentKey.comparator);
        }
        DocumentChangeSet2.prototype.track = function(change) {
          var key = change.doc.key;
          var oldChange = this.changeMap.get(key);
          if (!oldChange) {
            this.changeMap = this.changeMap.insert(key, change);
            return;
          }
          if (change.type !== 0 && oldChange.type === 3) {
            this.changeMap = this.changeMap.insert(key, change);
          } else if (change.type === 3 && oldChange.type !== 1) {
            this.changeMap = this.changeMap.insert(key, {
              type: oldChange.type,
              doc: change.doc
            });
          } else if (change.type === 2 && oldChange.type === 2) {
            this.changeMap = this.changeMap.insert(key, {
              type: 2,
              doc: change.doc
            });
          } else if (change.type === 2 && oldChange.type === 0) {
            this.changeMap = this.changeMap.insert(key, {
              type: 0,
              doc: change.doc
            });
          } else if (change.type === 1 && oldChange.type === 0) {
            this.changeMap = this.changeMap.remove(key);
          } else if (change.type === 1 && oldChange.type === 2) {
            this.changeMap = this.changeMap.insert(key, {
              type: 1,
              doc: oldChange.doc
            });
          } else if (change.type === 0 && oldChange.type === 1) {
            this.changeMap = this.changeMap.insert(key, {
              type: 2,
              doc: change.doc
            });
          } else {
            fail();
          }
        };
        DocumentChangeSet2.prototype.getChanges = function() {
          var changes = [];
          this.changeMap.inorderTraversal(function(key, change) {
            changes.push(change);
          });
          return changes;
        };
        return DocumentChangeSet2;
      }();
      var ViewSnapshot = function() {
        function ViewSnapshot2(query3, docs, oldDocs, docChanges, mutatedKeys, fromCache, syncStateChanged, excludesMetadataChanges) {
          this.query = query3;
          this.docs = docs;
          this.oldDocs = oldDocs;
          this.docChanges = docChanges;
          this.mutatedKeys = mutatedKeys;
          this.fromCache = fromCache;
          this.syncStateChanged = syncStateChanged;
          this.excludesMetadataChanges = excludesMetadataChanges;
        }
        ViewSnapshot2.fromInitialDocuments = function(query3, documents, mutatedKeys, fromCache) {
          var changes = [];
          documents.forEach(function(doc2) {
            changes.push({type: 0, doc: doc2});
          });
          return new ViewSnapshot2(query3, documents, DocumentSet.emptySet(documents), changes, mutatedKeys, fromCache, true, false);
        };
        Object.defineProperty(ViewSnapshot2.prototype, "hasPendingWrites", {
          get: function() {
            return !this.mutatedKeys.isEmpty();
          },
          enumerable: false,
          configurable: true
        });
        ViewSnapshot2.prototype.isEqual = function(other) {
          if (this.fromCache !== other.fromCache || this.syncStateChanged !== other.syncStateChanged || !this.mutatedKeys.isEqual(other.mutatedKeys) || !queryEquals(this.query, other.query) || !this.docs.isEqual(other.docs) || !this.oldDocs.isEqual(other.oldDocs)) {
            return false;
          }
          var changes = this.docChanges;
          var otherChanges = other.docChanges;
          if (changes.length !== otherChanges.length) {
            return false;
          }
          for (var i = 0; i < changes.length; i++) {
            if (changes[i].type !== otherChanges[i].type || !changes[i].doc.isEqual(otherChanges[i].doc)) {
              return false;
            }
          }
          return true;
        };
        return ViewSnapshot2;
      }();
      var QueryListenersInfo = function() {
        function QueryListenersInfo2() {
          this.viewSnap = void 0;
          this.listeners = [];
        }
        return QueryListenersInfo2;
      }();
      function newEventManager() {
        return new EventManagerImpl();
      }
      var EventManagerImpl = function() {
        function EventManagerImpl2() {
          this.queries = new ObjectMap(function(q) {
            return canonifyQuery(q);
          }, queryEquals);
          this.onlineState = "Unknown";
          this.snapshotsInSyncListeners = new Set();
        }
        return EventManagerImpl2;
      }();
      function eventManagerListen(eventManager, listener) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var eventManagerImpl, query3, firstListen, queryInfo, _d, e_7, firestoreError, raisedEvent, raisedEvent_1;
          return tslib.__generator(this, function(_e) {
            switch (_e.label) {
              case 0:
                eventManagerImpl = debugCast(eventManager);
                query3 = listener.query;
                firstListen = false;
                queryInfo = eventManagerImpl.queries.get(query3);
                if (!queryInfo) {
                  firstListen = true;
                  queryInfo = new QueryListenersInfo();
                }
                if (!firstListen)
                  return [3, 4];
                _e.label = 1;
              case 1:
                _e.trys.push([1, 3, , 4]);
                _d = queryInfo;
                return [4, eventManagerImpl.onListen(query3)];
              case 2:
                _d.viewSnap = _e.sent();
                return [3, 4];
              case 3:
                e_7 = _e.sent();
                firestoreError = wrapInUserErrorIfRecoverable(e_7, "Initialization of query '" + stringifyQuery(listener.query) + "' failed");
                listener.onError(firestoreError);
                return [2];
              case 4:
                eventManagerImpl.queries.set(query3, queryInfo);
                queryInfo.listeners.push(listener);
                raisedEvent = listener.applyOnlineStateChange(eventManagerImpl.onlineState);
                if (queryInfo.viewSnap) {
                  raisedEvent_1 = listener.onViewSnapshot(queryInfo.viewSnap);
                  if (raisedEvent_1) {
                    raiseSnapshotsInSyncEvent(eventManagerImpl);
                  }
                }
                return [2];
            }
          });
        });
      }
      function eventManagerUnlisten(eventManager, listener) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var eventManagerImpl, query3, lastListen, queryInfo, i;
          return tslib.__generator(this, function(_d) {
            eventManagerImpl = debugCast(eventManager);
            query3 = listener.query;
            lastListen = false;
            queryInfo = eventManagerImpl.queries.get(query3);
            if (queryInfo) {
              i = queryInfo.listeners.indexOf(listener);
              if (i >= 0) {
                queryInfo.listeners.splice(i, 1);
                lastListen = queryInfo.listeners.length === 0;
              }
            }
            if (lastListen) {
              eventManagerImpl.queries.delete(query3);
              return [2, eventManagerImpl.onUnlisten(query3)];
            }
            return [2];
          });
        });
      }
      function eventManagerOnWatchChange(eventManager, viewSnaps) {
        var eventManagerImpl = debugCast(eventManager);
        var raisedEvent = false;
        for (var _i = 0, viewSnaps_1 = viewSnaps; _i < viewSnaps_1.length; _i++) {
          var viewSnap = viewSnaps_1[_i];
          var query_1 = viewSnap.query;
          var queryInfo = eventManagerImpl.queries.get(query_1);
          if (queryInfo) {
            for (var _d = 0, _e = queryInfo.listeners; _d < _e.length; _d++) {
              var listener = _e[_d];
              if (listener.onViewSnapshot(viewSnap)) {
                raisedEvent = true;
              }
            }
            queryInfo.viewSnap = viewSnap;
          }
        }
        if (raisedEvent) {
          raiseSnapshotsInSyncEvent(eventManagerImpl);
        }
      }
      function eventManagerOnWatchError(eventManager, query3, error3) {
        var eventManagerImpl = debugCast(eventManager);
        var queryInfo = eventManagerImpl.queries.get(query3);
        if (queryInfo) {
          for (var _i = 0, _d = queryInfo.listeners; _i < _d.length; _i++) {
            var listener = _d[_i];
            listener.onError(error3);
          }
        }
        eventManagerImpl.queries.delete(query3);
      }
      function eventManagerOnOnlineStateChange(eventManager, onlineState) {
        var eventManagerImpl = debugCast(eventManager);
        eventManagerImpl.onlineState = onlineState;
        var raisedEvent = false;
        eventManagerImpl.queries.forEach(function(_, queryInfo) {
          for (var _i = 0, _d = queryInfo.listeners; _i < _d.length; _i++) {
            var listener = _d[_i];
            if (listener.applyOnlineStateChange(onlineState)) {
              raisedEvent = true;
            }
          }
        });
        if (raisedEvent) {
          raiseSnapshotsInSyncEvent(eventManagerImpl);
        }
      }
      function addSnapshotsInSyncListener(eventManager, observer) {
        var eventManagerImpl = debugCast(eventManager);
        eventManagerImpl.snapshotsInSyncListeners.add(observer);
        observer.next();
      }
      function removeSnapshotsInSyncListener(eventManager, observer) {
        var eventManagerImpl = debugCast(eventManager);
        eventManagerImpl.snapshotsInSyncListeners.delete(observer);
      }
      function raiseSnapshotsInSyncEvent(eventManagerImpl) {
        eventManagerImpl.snapshotsInSyncListeners.forEach(function(observer) {
          observer.next();
        });
      }
      var QueryListener = function() {
        function QueryListener2(query3, queryObserver, options2) {
          this.query = query3;
          this.queryObserver = queryObserver;
          this.raisedInitialEvent = false;
          this.snap = null;
          this.onlineState = "Unknown";
          this.options = options2 || {};
        }
        QueryListener2.prototype.onViewSnapshot = function(snap) {
          if (!this.options.includeMetadataChanges) {
            var docChanges = [];
            for (var _i = 0, _d = snap.docChanges; _i < _d.length; _i++) {
              var docChange = _d[_i];
              if (docChange.type !== 3) {
                docChanges.push(docChange);
              }
            }
            snap = new ViewSnapshot(snap.query, snap.docs, snap.oldDocs, docChanges, snap.mutatedKeys, snap.fromCache, snap.syncStateChanged, true);
          }
          var raisedEvent = false;
          if (!this.raisedInitialEvent) {
            if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {
              this.raiseInitialEvent(snap);
              raisedEvent = true;
            }
          } else if (this.shouldRaiseEvent(snap)) {
            this.queryObserver.next(snap);
            raisedEvent = true;
          }
          this.snap = snap;
          return raisedEvent;
        };
        QueryListener2.prototype.onError = function(error3) {
          this.queryObserver.error(error3);
        };
        QueryListener2.prototype.applyOnlineStateChange = function(onlineState) {
          this.onlineState = onlineState;
          var raisedEvent = false;
          if (this.snap && !this.raisedInitialEvent && this.shouldRaiseInitialEvent(this.snap, onlineState)) {
            this.raiseInitialEvent(this.snap);
            raisedEvent = true;
          }
          return raisedEvent;
        };
        QueryListener2.prototype.shouldRaiseInitialEvent = function(snap, onlineState) {
          if (!snap.fromCache) {
            return true;
          }
          var maybeOnline = onlineState !== "Offline";
          if (this.options.waitForSyncWhenOnline && maybeOnline) {
            return false;
          }
          return !snap.docs.isEmpty() || onlineState === "Offline";
        };
        QueryListener2.prototype.shouldRaiseEvent = function(snap) {
          if (snap.docChanges.length > 0) {
            return true;
          }
          var hasPendingWritesChanged = this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;
          if (snap.syncStateChanged || hasPendingWritesChanged) {
            return this.options.includeMetadataChanges === true;
          }
          return false;
        };
        QueryListener2.prototype.raiseInitialEvent = function(snap) {
          snap = ViewSnapshot.fromInitialDocuments(snap.query, snap.docs, snap.mutatedKeys, snap.fromCache);
          this.raisedInitialEvent = true;
          this.queryObserver.next(snap);
        };
        return QueryListener2;
      }();
      var LocalViewChanges = function() {
        function LocalViewChanges2(targetId, fromCache, addedKeys, removedKeys) {
          this.targetId = targetId;
          this.fromCache = fromCache;
          this.addedKeys = addedKeys;
          this.removedKeys = removedKeys;
        }
        LocalViewChanges2.fromSnapshot = function(targetId, viewSnapshot) {
          var addedKeys = documentKeySet();
          var removedKeys = documentKeySet();
          for (var _i = 0, _d = viewSnapshot.docChanges; _i < _d.length; _i++) {
            var docChange = _d[_i];
            switch (docChange.type) {
              case 0:
                addedKeys = addedKeys.add(docChange.doc.key);
                break;
              case 1:
                removedKeys = removedKeys.add(docChange.doc.key);
                break;
            }
          }
          return new LocalViewChanges2(targetId, viewSnapshot.fromCache, addedKeys, removedKeys);
        };
        return LocalViewChanges2;
      }();
      var BundleLoadResult = function() {
        function BundleLoadResult2(progress, changedDocs) {
          this.progress = progress;
          this.changedDocs = changedDocs;
        }
        return BundleLoadResult2;
      }();
      var BundleConverterImpl = function() {
        function BundleConverterImpl2(serializer) {
          this.serializer = serializer;
        }
        BundleConverterImpl2.prototype.toDocumentKey = function(name2) {
          return fromName(this.serializer, name2);
        };
        BundleConverterImpl2.prototype.toMutableDocument = function(bundledDoc) {
          if (bundledDoc.metadata.exists) {
            return fromDocument(this.serializer, bundledDoc.document, false);
          } else {
            return MutableDocument.newNoDocument(this.toDocumentKey(bundledDoc.metadata.name), this.toSnapshotVersion(bundledDoc.metadata.readTime));
          }
        };
        BundleConverterImpl2.prototype.toSnapshotVersion = function(time) {
          return fromVersion(time);
        };
        return BundleConverterImpl2;
      }();
      var BundleLoader = function() {
        function BundleLoader2(bundleMetadata, localStore, serializer) {
          this.bundleMetadata = bundleMetadata;
          this.localStore = localStore;
          this.serializer = serializer;
          this.queries = [];
          this.documents = [];
          this.progress = bundleInitialProgress(bundleMetadata);
        }
        BundleLoader2.prototype.addSizedElement = function(element) {
          this.progress.bytesLoaded += element.byteLength;
          var documentsLoaded = this.progress.documentsLoaded;
          if (element.payload.namedQuery) {
            this.queries.push(element.payload.namedQuery);
          } else if (element.payload.documentMetadata) {
            this.documents.push({metadata: element.payload.documentMetadata});
            if (!element.payload.documentMetadata.exists) {
              ++documentsLoaded;
            }
          } else if (element.payload.document) {
            this.documents[this.documents.length - 1].document = element.payload.document;
            ++documentsLoaded;
          }
          if (documentsLoaded !== this.progress.documentsLoaded) {
            this.progress.documentsLoaded = documentsLoaded;
            return Object.assign({}, this.progress);
          }
          return null;
        };
        BundleLoader2.prototype.getQueryDocumentMapping = function(documents) {
          var queryDocumentMap = new Map();
          var bundleConverter = new BundleConverterImpl(this.serializer);
          for (var _i = 0, documents_2 = documents; _i < documents_2.length; _i++) {
            var bundleDoc = documents_2[_i];
            if (bundleDoc.metadata.queries) {
              var documentKey = bundleConverter.toDocumentKey(bundleDoc.metadata.name);
              for (var _d = 0, _e = bundleDoc.metadata.queries; _d < _e.length; _d++) {
                var queryName = _e[_d];
                var documentKeys = (queryDocumentMap.get(queryName) || documentKeySet()).add(documentKey);
                queryDocumentMap.set(queryName, documentKeys);
              }
            }
          }
          return queryDocumentMap;
        };
        BundleLoader2.prototype.complete = function() {
          return tslib.__awaiter(this, void 0, void 0, function() {
            var changedDocuments, queryDocumentMap, _i, _d, q;
            return tslib.__generator(this, function(_e) {
              switch (_e.label) {
                case 0:
                  return [4, localStoreApplyBundledDocuments(this.localStore, new BundleConverterImpl(this.serializer), this.documents, this.bundleMetadata.id)];
                case 1:
                  changedDocuments = _e.sent();
                  queryDocumentMap = this.getQueryDocumentMapping(this.documents);
                  _i = 0, _d = this.queries;
                  _e.label = 2;
                case 2:
                  if (!(_i < _d.length))
                    return [3, 5];
                  q = _d[_i];
                  return [4, localStoreSaveNamedQuery(this.localStore, q, queryDocumentMap.get(q.name))];
                case 3:
                  _e.sent();
                  _e.label = 4;
                case 4:
                  _i++;
                  return [3, 2];
                case 5:
                  this.progress.taskState = "Success";
                  return [2, new BundleLoadResult(Object.assign({}, this.progress), changedDocuments)];
              }
            });
          });
        };
        return BundleLoader2;
      }();
      function bundleInitialProgress(metadata) {
        return {
          taskState: "Running",
          documentsLoaded: 0,
          bytesLoaded: 0,
          totalDocuments: metadata.totalDocuments,
          totalBytes: metadata.totalBytes
        };
      }
      function bundleSuccessProgress(metadata) {
        return {
          taskState: "Success",
          documentsLoaded: metadata.totalDocuments,
          bytesLoaded: metadata.totalBytes,
          totalDocuments: metadata.totalDocuments,
          totalBytes: metadata.totalBytes
        };
      }
      var AddedLimboDocument = function() {
        function AddedLimboDocument2(key) {
          this.key = key;
        }
        return AddedLimboDocument2;
      }();
      var RemovedLimboDocument = function() {
        function RemovedLimboDocument2(key) {
          this.key = key;
        }
        return RemovedLimboDocument2;
      }();
      var View = function() {
        function View2(query3, _syncedDocuments) {
          this.query = query3;
          this._syncedDocuments = _syncedDocuments;
          this.syncState = null;
          this.current = false;
          this.limboDocuments = documentKeySet();
          this.mutatedKeys = documentKeySet();
          this.docComparator = newQueryComparator(query3);
          this.documentSet = new DocumentSet(this.docComparator);
        }
        Object.defineProperty(View2.prototype, "syncedDocuments", {
          get: function() {
            return this._syncedDocuments;
          },
          enumerable: false,
          configurable: true
        });
        View2.prototype.computeDocChanges = function(docChanges, previousChanges) {
          var _this = this;
          var changeSet = previousChanges ? previousChanges.changeSet : new DocumentChangeSet();
          var oldDocumentSet = previousChanges ? previousChanges.documentSet : this.documentSet;
          var newMutatedKeys = previousChanges ? previousChanges.mutatedKeys : this.mutatedKeys;
          var newDocumentSet = oldDocumentSet;
          var needsRefill = false;
          var lastDocInLimit = hasLimitToFirst(this.query) && oldDocumentSet.size === this.query.limit ? oldDocumentSet.last() : null;
          var firstDocInLimit = hasLimitToLast(this.query) && oldDocumentSet.size === this.query.limit ? oldDocumentSet.first() : null;
          docChanges.inorderTraversal(function(key, entry) {
            var oldDoc2 = oldDocumentSet.get(key);
            var newDoc = queryMatches(_this.query, entry) ? entry : null;
            var oldDocHadPendingMutations = oldDoc2 ? _this.mutatedKeys.has(oldDoc2.key) : false;
            var newDocHasPendingMutations = newDoc ? newDoc.hasLocalMutations || _this.mutatedKeys.has(newDoc.key) && newDoc.hasCommittedMutations : false;
            var changeApplied = false;
            if (oldDoc2 && newDoc) {
              var docsEqual = oldDoc2.data.isEqual(newDoc.data);
              if (!docsEqual) {
                if (!_this.shouldWaitForSyncedDocument(oldDoc2, newDoc)) {
                  changeSet.track({
                    type: 2,
                    doc: newDoc
                  });
                  changeApplied = true;
                  if (lastDocInLimit && _this.docComparator(newDoc, lastDocInLimit) > 0 || firstDocInLimit && _this.docComparator(newDoc, firstDocInLimit) < 0) {
                    needsRefill = true;
                  }
                }
              } else if (oldDocHadPendingMutations !== newDocHasPendingMutations) {
                changeSet.track({type: 3, doc: newDoc});
                changeApplied = true;
              }
            } else if (!oldDoc2 && newDoc) {
              changeSet.track({type: 0, doc: newDoc});
              changeApplied = true;
            } else if (oldDoc2 && !newDoc) {
              changeSet.track({type: 1, doc: oldDoc2});
              changeApplied = true;
              if (lastDocInLimit || firstDocInLimit) {
                needsRefill = true;
              }
            }
            if (changeApplied) {
              if (newDoc) {
                newDocumentSet = newDocumentSet.add(newDoc);
                if (newDocHasPendingMutations) {
                  newMutatedKeys = newMutatedKeys.add(key);
                } else {
                  newMutatedKeys = newMutatedKeys.delete(key);
                }
              } else {
                newDocumentSet = newDocumentSet.delete(key);
                newMutatedKeys = newMutatedKeys.delete(key);
              }
            }
          });
          if (hasLimitToFirst(this.query) || hasLimitToLast(this.query)) {
            while (newDocumentSet.size > this.query.limit) {
              var oldDoc = hasLimitToFirst(this.query) ? newDocumentSet.last() : newDocumentSet.first();
              newDocumentSet = newDocumentSet.delete(oldDoc.key);
              newMutatedKeys = newMutatedKeys.delete(oldDoc.key);
              changeSet.track({type: 1, doc: oldDoc});
            }
          }
          return {
            documentSet: newDocumentSet,
            changeSet,
            needsRefill,
            mutatedKeys: newMutatedKeys
          };
        };
        View2.prototype.shouldWaitForSyncedDocument = function(oldDoc, newDoc) {
          return oldDoc.hasLocalMutations && newDoc.hasCommittedMutations && !newDoc.hasLocalMutations;
        };
        View2.prototype.applyChanges = function(docChanges, updateLimboDocuments, targetChange) {
          var _this = this;
          var oldDocs = this.documentSet;
          this.documentSet = docChanges.documentSet;
          this.mutatedKeys = docChanges.mutatedKeys;
          var changes = docChanges.changeSet.getChanges();
          changes.sort(function(c1, c2) {
            return compareChangeType(c1.type, c2.type) || _this.docComparator(c1.doc, c2.doc);
          });
          this.applyTargetChange(targetChange);
          var limboChanges = updateLimboDocuments ? this.updateLimboDocuments() : [];
          var synced = this.limboDocuments.size === 0 && this.current;
          var newSyncState = synced ? 1 : 0;
          var syncStateChanged = newSyncState !== this.syncState;
          this.syncState = newSyncState;
          if (changes.length === 0 && !syncStateChanged) {
            return {limboChanges};
          } else {
            var snap = new ViewSnapshot(this.query, docChanges.documentSet, oldDocs, changes, docChanges.mutatedKeys, newSyncState === 0, syncStateChanged, false);
            return {
              snapshot: snap,
              limboChanges
            };
          }
        };
        View2.prototype.applyOnlineStateChange = function(onlineState) {
          if (this.current && onlineState === "Offline") {
            this.current = false;
            return this.applyChanges({
              documentSet: this.documentSet,
              changeSet: new DocumentChangeSet(),
              mutatedKeys: this.mutatedKeys,
              needsRefill: false
            }, false);
          } else {
            return {limboChanges: []};
          }
        };
        View2.prototype.shouldBeInLimbo = function(key) {
          if (this._syncedDocuments.has(key)) {
            return false;
          }
          if (!this.documentSet.has(key)) {
            return false;
          }
          if (this.documentSet.get(key).hasLocalMutations) {
            return false;
          }
          return true;
        };
        View2.prototype.applyTargetChange = function(targetChange) {
          var _this = this;
          if (targetChange) {
            targetChange.addedDocuments.forEach(function(key) {
              return _this._syncedDocuments = _this._syncedDocuments.add(key);
            });
            targetChange.modifiedDocuments.forEach(function(key) {
            });
            targetChange.removedDocuments.forEach(function(key) {
              return _this._syncedDocuments = _this._syncedDocuments.delete(key);
            });
            this.current = targetChange.current;
          }
        };
        View2.prototype.updateLimboDocuments = function() {
          var _this = this;
          if (!this.current) {
            return [];
          }
          var oldLimboDocuments = this.limboDocuments;
          this.limboDocuments = documentKeySet();
          this.documentSet.forEach(function(doc2) {
            if (_this.shouldBeInLimbo(doc2.key)) {
              _this.limboDocuments = _this.limboDocuments.add(doc2.key);
            }
          });
          var changes = [];
          oldLimboDocuments.forEach(function(key) {
            if (!_this.limboDocuments.has(key)) {
              changes.push(new RemovedLimboDocument(key));
            }
          });
          this.limboDocuments.forEach(function(key) {
            if (!oldLimboDocuments.has(key)) {
              changes.push(new AddedLimboDocument(key));
            }
          });
          return changes;
        };
        View2.prototype.synchronizeWithPersistedState = function(queryResult) {
          this._syncedDocuments = queryResult.remoteKeys;
          this.limboDocuments = documentKeySet();
          var docChanges = this.computeDocChanges(queryResult.documents);
          return this.applyChanges(docChanges, true);
        };
        View2.prototype.computeInitialSnapshot = function() {
          return ViewSnapshot.fromInitialDocuments(this.query, this.documentSet, this.mutatedKeys, this.syncState === 0);
        };
        return View2;
      }();
      function compareChangeType(c1, c2) {
        var order = function(change) {
          switch (change) {
            case 0:
              return 1;
            case 2:
              return 2;
            case 3:
              return 2;
            case 1:
              return 0;
            default:
              return fail();
          }
        };
        return order(c1) - order(c2);
      }
      var LOG_TAG$d = "SyncEngine";
      var QueryView = function() {
        function QueryView2(query3, targetId, view) {
          this.query = query3;
          this.targetId = targetId;
          this.view = view;
        }
        return QueryView2;
      }();
      var LimboResolution = function() {
        function LimboResolution2(key) {
          this.key = key;
          this.receivedDocument = false;
        }
        return LimboResolution2;
      }();
      var SyncEngineImpl = function() {
        function SyncEngineImpl2(localStore, remoteStore, eventManager, sharedClientState, currentUser, maxConcurrentLimboResolutions) {
          this.localStore = localStore;
          this.remoteStore = remoteStore;
          this.eventManager = eventManager;
          this.sharedClientState = sharedClientState;
          this.currentUser = currentUser;
          this.maxConcurrentLimboResolutions = maxConcurrentLimboResolutions;
          this.syncEngineListener = {};
          this.queryViewsByQuery = new ObjectMap(function(q) {
            return canonifyQuery(q);
          }, queryEquals);
          this.queriesByTarget = new Map();
          this.enqueuedLimboResolutions = new Set();
          this.activeLimboTargetsByKey = new SortedMap(DocumentKey.comparator);
          this.activeLimboResolutionsByTarget = new Map();
          this.limboDocumentRefs = new ReferenceSet();
          this.mutationUserCallbacks = {};
          this.pendingWritesCallbacks = new Map();
          this.limboTargetIdGenerator = TargetIdGenerator.forSyncEngine();
          this.onlineState = "Unknown";
          this._isPrimaryClient = void 0;
        }
        Object.defineProperty(SyncEngineImpl2.prototype, "isPrimaryClient", {
          get: function() {
            return this._isPrimaryClient === true;
          },
          enumerable: false,
          configurable: true
        });
        return SyncEngineImpl2;
      }();
      function newSyncEngine(localStore, remoteStore, eventManager, sharedClientState, currentUser, maxConcurrentLimboResolutions, isPrimary) {
        var syncEngine = new SyncEngineImpl(localStore, remoteStore, eventManager, sharedClientState, currentUser, maxConcurrentLimboResolutions);
        if (isPrimary) {
          syncEngine._isPrimaryClient = true;
        }
        return syncEngine;
      }
      function syncEngineListen(syncEngine, query3) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var syncEngineImpl, targetId, viewSnapshot, queryView, targetData, status_1;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                syncEngineImpl = ensureWatchCallbacks(syncEngine);
                queryView = syncEngineImpl.queryViewsByQuery.get(query3);
                if (!queryView)
                  return [3, 1];
                targetId = queryView.targetId;
                syncEngineImpl.sharedClientState.addLocalQueryTarget(targetId);
                viewSnapshot = queryView.view.computeInitialSnapshot();
                return [3, 4];
              case 1:
                return [4, localStoreAllocateTarget(syncEngineImpl.localStore, queryToTarget(query3))];
              case 2:
                targetData = _d.sent();
                status_1 = syncEngineImpl.sharedClientState.addLocalQueryTarget(targetData.targetId);
                targetId = targetData.targetId;
                return [4, initializeViewAndComputeSnapshot(syncEngineImpl, query3, targetId, status_1 === "current")];
              case 3:
                viewSnapshot = _d.sent();
                if (syncEngineImpl.isPrimaryClient) {
                  remoteStoreListen(syncEngineImpl.remoteStore, targetData);
                }
                _d.label = 4;
              case 4:
                return [2, viewSnapshot];
            }
          });
        });
      }
      function initializeViewAndComputeSnapshot(syncEngineImpl, query3, targetId, current) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var queryResult, view, viewDocChanges, synthesizedTargetChange, viewChange, data;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                syncEngineImpl.applyDocChanges = function(queryView, changes, remoteEvent) {
                  return applyDocChanges(syncEngineImpl, queryView, changes, remoteEvent);
                };
                return [4, localStoreExecuteQuery(syncEngineImpl.localStore, query3, true)];
              case 1:
                queryResult = _d.sent();
                view = new View(query3, queryResult.remoteKeys);
                viewDocChanges = view.computeDocChanges(queryResult.documents);
                synthesizedTargetChange = TargetChange.createSynthesizedTargetChangeForCurrentChange(targetId, current && syncEngineImpl.onlineState !== "Offline");
                viewChange = view.applyChanges(viewDocChanges, syncEngineImpl.isPrimaryClient, synthesizedTargetChange);
                updateTrackedLimbos(syncEngineImpl, targetId, viewChange.limboChanges);
                data = new QueryView(query3, targetId, view);
                syncEngineImpl.queryViewsByQuery.set(query3, data);
                if (syncEngineImpl.queriesByTarget.has(targetId)) {
                  syncEngineImpl.queriesByTarget.get(targetId).push(query3);
                } else {
                  syncEngineImpl.queriesByTarget.set(targetId, [query3]);
                }
                return [2, viewChange.snapshot];
            }
          });
        });
      }
      function syncEngineUnlisten(syncEngine, query3) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var syncEngineImpl, queryView, queries, targetRemainsActive;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                syncEngineImpl = debugCast(syncEngine);
                queryView = syncEngineImpl.queryViewsByQuery.get(query3);
                queries = syncEngineImpl.queriesByTarget.get(queryView.targetId);
                if (queries.length > 1) {
                  syncEngineImpl.queriesByTarget.set(queryView.targetId, queries.filter(function(q) {
                    return !queryEquals(q, query3);
                  }));
                  syncEngineImpl.queryViewsByQuery.delete(query3);
                  return [2];
                }
                if (!syncEngineImpl.isPrimaryClient)
                  return [3, 3];
                syncEngineImpl.sharedClientState.removeLocalQueryTarget(queryView.targetId);
                targetRemainsActive = syncEngineImpl.sharedClientState.isActiveQueryTarget(queryView.targetId);
                if (!!targetRemainsActive)
                  return [3, 2];
                return [4, localStoreReleaseTarget(syncEngineImpl.localStore, queryView.targetId, false).then(function() {
                  syncEngineImpl.sharedClientState.clearQueryState(queryView.targetId);
                  remoteStoreUnlisten(syncEngineImpl.remoteStore, queryView.targetId);
                  removeAndCleanupTarget(syncEngineImpl, queryView.targetId);
                }).catch(ignoreIfPrimaryLeaseLoss)];
              case 1:
                _d.sent();
                _d.label = 2;
              case 2:
                return [3, 5];
              case 3:
                removeAndCleanupTarget(syncEngineImpl, queryView.targetId);
                return [4, localStoreReleaseTarget(syncEngineImpl.localStore, queryView.targetId, true)];
              case 4:
                _d.sent();
                _d.label = 5;
              case 5:
                return [2];
            }
          });
        });
      }
      function syncEngineWrite(syncEngine, batch, userCallback) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var syncEngineImpl, result, e_8, error3;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                syncEngineImpl = syncEngineEnsureWriteCallbacks(syncEngine);
                _d.label = 1;
              case 1:
                _d.trys.push([1, 5, , 6]);
                return [4, localStoreWriteLocally(syncEngineImpl.localStore, batch)];
              case 2:
                result = _d.sent();
                syncEngineImpl.sharedClientState.addPendingMutation(result.batchId);
                addMutationCallback(syncEngineImpl, result.batchId, userCallback);
                return [4, syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, result.changes)];
              case 3:
                _d.sent();
                return [4, fillWritePipeline(syncEngineImpl.remoteStore)];
              case 4:
                _d.sent();
                return [3, 6];
              case 5:
                e_8 = _d.sent();
                error3 = wrapInUserErrorIfRecoverable(e_8, "Failed to persist write");
                userCallback.reject(error3);
                return [3, 6];
              case 6:
                return [2];
            }
          });
        });
      }
      function syncEngineApplyRemoteEvent(syncEngine, remoteEvent) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var syncEngineImpl, changes, error_2;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                syncEngineImpl = debugCast(syncEngine);
                _d.label = 1;
              case 1:
                _d.trys.push([1, 4, , 6]);
                return [4, localStoreApplyRemoteEventToLocalCache(syncEngineImpl.localStore, remoteEvent)];
              case 2:
                changes = _d.sent();
                remoteEvent.targetChanges.forEach(function(targetChange, targetId) {
                  var limboResolution = syncEngineImpl.activeLimboResolutionsByTarget.get(targetId);
                  if (limboResolution) {
                    hardAssert(targetChange.addedDocuments.size + targetChange.modifiedDocuments.size + targetChange.removedDocuments.size <= 1);
                    if (targetChange.addedDocuments.size > 0) {
                      limboResolution.receivedDocument = true;
                    } else if (targetChange.modifiedDocuments.size > 0) {
                      hardAssert(limboResolution.receivedDocument);
                    } else if (targetChange.removedDocuments.size > 0) {
                      hardAssert(limboResolution.receivedDocument);
                      limboResolution.receivedDocument = false;
                    } else
                      ;
                  }
                });
                return [4, syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes, remoteEvent)];
              case 3:
                _d.sent();
                return [3, 6];
              case 4:
                error_2 = _d.sent();
                return [4, ignoreIfPrimaryLeaseLoss(error_2)];
              case 5:
                _d.sent();
                return [3, 6];
              case 6:
                return [2];
            }
          });
        });
      }
      function syncEngineApplyOnlineStateChange(syncEngine, onlineState, source) {
        var syncEngineImpl = debugCast(syncEngine);
        if (syncEngineImpl.isPrimaryClient && source === 0 || !syncEngineImpl.isPrimaryClient && source === 1) {
          var newViewSnapshots_1 = [];
          syncEngineImpl.queryViewsByQuery.forEach(function(query3, queryView) {
            var viewChange = queryView.view.applyOnlineStateChange(onlineState);
            if (viewChange.snapshot) {
              newViewSnapshots_1.push(viewChange.snapshot);
            }
          });
          eventManagerOnOnlineStateChange(syncEngineImpl.eventManager, onlineState);
          if (newViewSnapshots_1.length) {
            syncEngineImpl.syncEngineListener.onWatchChange(newViewSnapshots_1);
          }
          syncEngineImpl.onlineState = onlineState;
          if (syncEngineImpl.isPrimaryClient) {
            syncEngineImpl.sharedClientState.setOnlineState(onlineState);
          }
        }
      }
      function syncEngineRejectListen(syncEngine, targetId, err) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var syncEngineImpl, limboResolution, limboKey, documentUpdates, resolvedLimboDocuments, event_2;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                syncEngineImpl = debugCast(syncEngine);
                syncEngineImpl.sharedClientState.updateQueryState(targetId, "rejected", err);
                limboResolution = syncEngineImpl.activeLimboResolutionsByTarget.get(targetId);
                limboKey = limboResolution && limboResolution.key;
                if (!limboKey)
                  return [3, 2];
                documentUpdates = new SortedMap(DocumentKey.comparator);
                documentUpdates = documentUpdates.insert(limboKey, MutableDocument.newNoDocument(limboKey, SnapshotVersion.min()));
                resolvedLimboDocuments = documentKeySet().add(limboKey);
                event_2 = new RemoteEvent(SnapshotVersion.min(), new Map(), new SortedSet(primitiveComparator), documentUpdates, resolvedLimboDocuments);
                return [4, syncEngineApplyRemoteEvent(syncEngineImpl, event_2)];
              case 1:
                _d.sent();
                syncEngineImpl.activeLimboTargetsByKey = syncEngineImpl.activeLimboTargetsByKey.remove(limboKey);
                syncEngineImpl.activeLimboResolutionsByTarget.delete(targetId);
                pumpEnqueuedLimboResolutions(syncEngineImpl);
                return [3, 4];
              case 2:
                return [4, localStoreReleaseTarget(syncEngineImpl.localStore, targetId, false).then(function() {
                  return removeAndCleanupTarget(syncEngineImpl, targetId, err);
                }).catch(ignoreIfPrimaryLeaseLoss)];
              case 3:
                _d.sent();
                _d.label = 4;
              case 4:
                return [2];
            }
          });
        });
      }
      function syncEngineApplySuccessfulWrite(syncEngine, mutationBatchResult) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var syncEngineImpl, batchId, changes, error_3;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                syncEngineImpl = debugCast(syncEngine);
                batchId = mutationBatchResult.batch.batchId;
                _d.label = 1;
              case 1:
                _d.trys.push([1, 4, , 6]);
                return [4, localStoreAcknowledgeBatch(syncEngineImpl.localStore, mutationBatchResult)];
              case 2:
                changes = _d.sent();
                processUserCallback(syncEngineImpl, batchId, null);
                triggerPendingWritesCallbacks(syncEngineImpl, batchId);
                syncEngineImpl.sharedClientState.updateMutationState(batchId, "acknowledged");
                return [4, syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes)];
              case 3:
                _d.sent();
                return [3, 6];
              case 4:
                error_3 = _d.sent();
                return [4, ignoreIfPrimaryLeaseLoss(error_3)];
              case 5:
                _d.sent();
                return [3, 6];
              case 6:
                return [2];
            }
          });
        });
      }
      function syncEngineRejectFailedWrite(syncEngine, batchId, error3) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var syncEngineImpl, changes, error_4;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                syncEngineImpl = debugCast(syncEngine);
                _d.label = 1;
              case 1:
                _d.trys.push([1, 4, , 6]);
                return [4, localStoreRejectBatch(syncEngineImpl.localStore, batchId)];
              case 2:
                changes = _d.sent();
                processUserCallback(syncEngineImpl, batchId, error3);
                triggerPendingWritesCallbacks(syncEngineImpl, batchId);
                syncEngineImpl.sharedClientState.updateMutationState(batchId, "rejected", error3);
                return [4, syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes)];
              case 3:
                _d.sent();
                return [3, 6];
              case 4:
                error_4 = _d.sent();
                return [4, ignoreIfPrimaryLeaseLoss(error_4)];
              case 5:
                _d.sent();
                return [3, 6];
              case 6:
                return [2];
            }
          });
        });
      }
      function syncEngineRegisterPendingWritesCallback(syncEngine, callback) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var syncEngineImpl, highestBatchId, callbacks, e_9, firestoreError;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                syncEngineImpl = debugCast(syncEngine);
                if (!canUseNetwork(syncEngineImpl.remoteStore)) {
                  logDebug(LOG_TAG$d, "The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled.");
                }
                _d.label = 1;
              case 1:
                _d.trys.push([1, 3, , 4]);
                return [4, localStoreGetHighestUnacknowledgedBatchId(syncEngineImpl.localStore)];
              case 2:
                highestBatchId = _d.sent();
                if (highestBatchId === BATCHID_UNKNOWN) {
                  callback.resolve();
                  return [2];
                }
                callbacks = syncEngineImpl.pendingWritesCallbacks.get(highestBatchId) || [];
                callbacks.push(callback);
                syncEngineImpl.pendingWritesCallbacks.set(highestBatchId, callbacks);
                return [3, 4];
              case 3:
                e_9 = _d.sent();
                firestoreError = wrapInUserErrorIfRecoverable(e_9, "Initialization of waitForPendingWrites() operation failed");
                callback.reject(firestoreError);
                return [3, 4];
              case 4:
                return [2];
            }
          });
        });
      }
      function triggerPendingWritesCallbacks(syncEngineImpl, batchId) {
        (syncEngineImpl.pendingWritesCallbacks.get(batchId) || []).forEach(function(callback) {
          callback.resolve();
        });
        syncEngineImpl.pendingWritesCallbacks.delete(batchId);
      }
      function rejectOutstandingPendingWritesCallbacks(syncEngineImpl, errorMessage) {
        syncEngineImpl.pendingWritesCallbacks.forEach(function(callbacks) {
          callbacks.forEach(function(callback) {
            callback.reject(new FirestoreError(Code.CANCELLED, errorMessage));
          });
        });
        syncEngineImpl.pendingWritesCallbacks.clear();
      }
      function addMutationCallback(syncEngineImpl, batchId, callback) {
        var newCallbacks = syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()];
        if (!newCallbacks) {
          newCallbacks = new SortedMap(primitiveComparator);
        }
        newCallbacks = newCallbacks.insert(batchId, callback);
        syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()] = newCallbacks;
      }
      function processUserCallback(syncEngine, batchId, error3) {
        var syncEngineImpl = debugCast(syncEngine);
        var newCallbacks = syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()];
        if (newCallbacks) {
          var callback = newCallbacks.get(batchId);
          if (callback) {
            if (error3) {
              callback.reject(error3);
            } else {
              callback.resolve();
            }
            newCallbacks = newCallbacks.remove(batchId);
          }
          syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()] = newCallbacks;
        }
      }
      function removeAndCleanupTarget(syncEngineImpl, targetId, error3) {
        if (error3 === void 0) {
          error3 = null;
        }
        syncEngineImpl.sharedClientState.removeLocalQueryTarget(targetId);
        for (var _i = 0, _d = syncEngineImpl.queriesByTarget.get(targetId); _i < _d.length; _i++) {
          var query_2 = _d[_i];
          syncEngineImpl.queryViewsByQuery.delete(query_2);
          if (error3) {
            syncEngineImpl.syncEngineListener.onWatchError(query_2, error3);
          }
        }
        syncEngineImpl.queriesByTarget.delete(targetId);
        if (syncEngineImpl.isPrimaryClient) {
          var limboKeys = syncEngineImpl.limboDocumentRefs.removeReferencesForId(targetId);
          limboKeys.forEach(function(limboKey) {
            var isReferenced = syncEngineImpl.limboDocumentRefs.containsKey(limboKey);
            if (!isReferenced) {
              removeLimboTarget(syncEngineImpl, limboKey);
            }
          });
        }
      }
      function removeLimboTarget(syncEngineImpl, key) {
        syncEngineImpl.enqueuedLimboResolutions.delete(key.path.canonicalString());
        var limboTargetId = syncEngineImpl.activeLimboTargetsByKey.get(key);
        if (limboTargetId === null) {
          return;
        }
        remoteStoreUnlisten(syncEngineImpl.remoteStore, limboTargetId);
        syncEngineImpl.activeLimboTargetsByKey = syncEngineImpl.activeLimboTargetsByKey.remove(key);
        syncEngineImpl.activeLimboResolutionsByTarget.delete(limboTargetId);
        pumpEnqueuedLimboResolutions(syncEngineImpl);
      }
      function updateTrackedLimbos(syncEngineImpl, targetId, limboChanges) {
        for (var _i = 0, limboChanges_1 = limboChanges; _i < limboChanges_1.length; _i++) {
          var limboChange = limboChanges_1[_i];
          if (limboChange instanceof AddedLimboDocument) {
            syncEngineImpl.limboDocumentRefs.addReference(limboChange.key, targetId);
            trackLimboChange(syncEngineImpl, limboChange);
          } else if (limboChange instanceof RemovedLimboDocument) {
            logDebug(LOG_TAG$d, "Document no longer in limbo: " + limboChange.key);
            syncEngineImpl.limboDocumentRefs.removeReference(limboChange.key, targetId);
            var isReferenced = syncEngineImpl.limboDocumentRefs.containsKey(limboChange.key);
            if (!isReferenced) {
              removeLimboTarget(syncEngineImpl, limboChange.key);
            }
          } else {
            fail();
          }
        }
      }
      function trackLimboChange(syncEngineImpl, limboChange) {
        var key = limboChange.key;
        var keyString = key.path.canonicalString();
        if (!syncEngineImpl.activeLimboTargetsByKey.get(key) && !syncEngineImpl.enqueuedLimboResolutions.has(keyString)) {
          logDebug(LOG_TAG$d, "New document in limbo: " + key);
          syncEngineImpl.enqueuedLimboResolutions.add(keyString);
          pumpEnqueuedLimboResolutions(syncEngineImpl);
        }
      }
      function pumpEnqueuedLimboResolutions(syncEngineImpl) {
        while (syncEngineImpl.enqueuedLimboResolutions.size > 0 && syncEngineImpl.activeLimboTargetsByKey.size < syncEngineImpl.maxConcurrentLimboResolutions) {
          var keyString = syncEngineImpl.enqueuedLimboResolutions.values().next().value;
          syncEngineImpl.enqueuedLimboResolutions.delete(keyString);
          var key = new DocumentKey(ResourcePath.fromString(keyString));
          var limboTargetId = syncEngineImpl.limboTargetIdGenerator.next();
          syncEngineImpl.activeLimboResolutionsByTarget.set(limboTargetId, new LimboResolution(key));
          syncEngineImpl.activeLimboTargetsByKey = syncEngineImpl.activeLimboTargetsByKey.insert(key, limboTargetId);
          remoteStoreListen(syncEngineImpl.remoteStore, new TargetData(queryToTarget(newQueryForPath(key.path)), limboTargetId, 2, ListenSequence.INVALID));
        }
      }
      function syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngine, changes, remoteEvent) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var syncEngineImpl, newSnaps, docChangesInAllViews, queriesProcessed;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                syncEngineImpl = debugCast(syncEngine);
                newSnaps = [];
                docChangesInAllViews = [];
                queriesProcessed = [];
                if (syncEngineImpl.queryViewsByQuery.isEmpty()) {
                  return [2];
                }
                syncEngineImpl.queryViewsByQuery.forEach(function(_, queryView) {
                  queriesProcessed.push(syncEngineImpl.applyDocChanges(queryView, changes, remoteEvent).then(function(viewSnapshot) {
                    if (viewSnapshot) {
                      if (syncEngineImpl.isPrimaryClient) {
                        syncEngineImpl.sharedClientState.updateQueryState(queryView.targetId, viewSnapshot.fromCache ? "not-current" : "current");
                      }
                      newSnaps.push(viewSnapshot);
                      var docChanges = LocalViewChanges.fromSnapshot(queryView.targetId, viewSnapshot);
                      docChangesInAllViews.push(docChanges);
                    }
                  }));
                });
                return [4, Promise.all(queriesProcessed)];
              case 1:
                _d.sent();
                syncEngineImpl.syncEngineListener.onWatchChange(newSnaps);
                return [4, localStoreNotifyLocalViewChanges(syncEngineImpl.localStore, docChangesInAllViews)];
              case 2:
                _d.sent();
                return [2];
            }
          });
        });
      }
      function applyDocChanges(syncEngineImpl, queryView, changes, remoteEvent) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var viewDocChanges, targetChange, viewChange;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                viewDocChanges = queryView.view.computeDocChanges(changes);
                if (!viewDocChanges.needsRefill)
                  return [3, 2];
                return [4, localStoreExecuteQuery(syncEngineImpl.localStore, queryView.query, false).then(function(_d2) {
                  var documents = _d2.documents;
                  return queryView.view.computeDocChanges(documents, viewDocChanges);
                })];
              case 1:
                viewDocChanges = _d.sent();
                _d.label = 2;
              case 2:
                targetChange = remoteEvent && remoteEvent.targetChanges.get(queryView.targetId);
                viewChange = queryView.view.applyChanges(viewDocChanges, syncEngineImpl.isPrimaryClient, targetChange);
                updateTrackedLimbos(syncEngineImpl, queryView.targetId, viewChange.limboChanges);
                return [2, viewChange.snapshot];
            }
          });
        });
      }
      function syncEngineHandleCredentialChange(syncEngine, user) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var syncEngineImpl, userChanged, result;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                syncEngineImpl = debugCast(syncEngine);
                userChanged = !syncEngineImpl.currentUser.isEqual(user);
                if (!userChanged)
                  return [3, 3];
                logDebug(LOG_TAG$d, "User change. New user:", user.toKey());
                return [4, localStoreHandleUserChange(syncEngineImpl.localStore, user)];
              case 1:
                result = _d.sent();
                syncEngineImpl.currentUser = user;
                rejectOutstandingPendingWritesCallbacks(syncEngineImpl, "'waitForPendingWrites' promise is rejected due to a user change.");
                syncEngineImpl.sharedClientState.handleUserChange(user, result.removedBatchIds, result.addedBatchIds);
                return [4, syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, result.affectedDocuments)];
              case 2:
                _d.sent();
                _d.label = 3;
              case 3:
                return [2];
            }
          });
        });
      }
      function syncEngineGetRemoteKeysForTarget(syncEngine, targetId) {
        var syncEngineImpl = debugCast(syncEngine);
        var limboResolution = syncEngineImpl.activeLimboResolutionsByTarget.get(targetId);
        if (limboResolution && limboResolution.receivedDocument) {
          return documentKeySet().add(limboResolution.key);
        } else {
          var keySet = documentKeySet();
          var queries = syncEngineImpl.queriesByTarget.get(targetId);
          if (!queries) {
            return keySet;
          }
          for (var _i = 0, queries_1 = queries; _i < queries_1.length; _i++) {
            var query_3 = queries_1[_i];
            var queryView = syncEngineImpl.queryViewsByQuery.get(query_3);
            keySet = keySet.unionWith(queryView.view.syncedDocuments);
          }
          return keySet;
        }
      }
      function synchronizeViewAndComputeSnapshot(syncEngine, queryView) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var syncEngineImpl, queryResult, viewSnapshot;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                syncEngineImpl = debugCast(syncEngine);
                return [4, localStoreExecuteQuery(syncEngineImpl.localStore, queryView.query, true)];
              case 1:
                queryResult = _d.sent();
                viewSnapshot = queryView.view.synchronizeWithPersistedState(queryResult);
                if (syncEngineImpl.isPrimaryClient) {
                  updateTrackedLimbos(syncEngineImpl, queryView.targetId, viewSnapshot.limboChanges);
                }
                return [2, viewSnapshot];
            }
          });
        });
      }
      function syncEngineSynchronizeWithChangedDocuments(syncEngine) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var syncEngineImpl;
          return tslib.__generator(this, function(_d) {
            syncEngineImpl = debugCast(syncEngine);
            return [2, localStoreGetNewDocumentChanges(syncEngineImpl.localStore).then(function(changes) {
              return syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes);
            })];
          });
        });
      }
      function syncEngineApplyBatchState(syncEngine, batchId, batchState, error3) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var syncEngineImpl, documents;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                syncEngineImpl = debugCast(syncEngine);
                return [4, localStoreLookupMutationDocuments(syncEngineImpl.localStore, batchId)];
              case 1:
                documents = _d.sent();
                if (documents === null) {
                  logDebug(LOG_TAG$d, "Cannot apply mutation batch with id: " + batchId);
                  return [2];
                }
                if (!(batchState === "pending"))
                  return [3, 3];
                return [4, fillWritePipeline(syncEngineImpl.remoteStore)];
              case 2:
                _d.sent();
                return [3, 4];
              case 3:
                if (batchState === "acknowledged" || batchState === "rejected") {
                  processUserCallback(syncEngineImpl, batchId, error3 ? error3 : null);
                  triggerPendingWritesCallbacks(syncEngineImpl, batchId);
                  localStoreRemoveCachedMutationBatchMetadata(syncEngineImpl.localStore, batchId);
                } else {
                  fail();
                }
                _d.label = 4;
              case 4:
                return [4, syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, documents)];
              case 5:
                _d.sent();
                return [2];
            }
          });
        });
      }
      function syncEngineApplyPrimaryState(syncEngine, isPrimary) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var syncEngineImpl, activeTargets, activeQueries, _i, activeQueries_1, targetData, activeTargets_1, p_1;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                syncEngineImpl = debugCast(syncEngine);
                ensureWatchCallbacks(syncEngineImpl);
                syncEngineEnsureWriteCallbacks(syncEngineImpl);
                if (!(isPrimary === true && syncEngineImpl._isPrimaryClient !== true))
                  return [3, 3];
                activeTargets = syncEngineImpl.sharedClientState.getAllActiveQueryTargets();
                return [4, synchronizeQueryViewsAndRaiseSnapshots(syncEngineImpl, activeTargets.toArray())];
              case 1:
                activeQueries = _d.sent();
                syncEngineImpl._isPrimaryClient = true;
                return [4, remoteStoreApplyPrimaryState(syncEngineImpl.remoteStore, true)];
              case 2:
                _d.sent();
                for (_i = 0, activeQueries_1 = activeQueries; _i < activeQueries_1.length; _i++) {
                  targetData = activeQueries_1[_i];
                  remoteStoreListen(syncEngineImpl.remoteStore, targetData);
                }
                return [3, 7];
              case 3:
                if (!(isPrimary === false && syncEngineImpl._isPrimaryClient !== false))
                  return [3, 7];
                activeTargets_1 = [];
                p_1 = Promise.resolve();
                syncEngineImpl.queriesByTarget.forEach(function(_, targetId) {
                  if (syncEngineImpl.sharedClientState.isLocalQueryTarget(targetId)) {
                    activeTargets_1.push(targetId);
                  } else {
                    p_1 = p_1.then(function() {
                      removeAndCleanupTarget(syncEngineImpl, targetId);
                      return localStoreReleaseTarget(syncEngineImpl.localStore, targetId, true);
                    });
                  }
                  remoteStoreUnlisten(syncEngineImpl.remoteStore, targetId);
                });
                return [4, p_1];
              case 4:
                _d.sent();
                return [4, synchronizeQueryViewsAndRaiseSnapshots(syncEngineImpl, activeTargets_1)];
              case 5:
                _d.sent();
                resetLimboDocuments(syncEngineImpl);
                syncEngineImpl._isPrimaryClient = false;
                return [4, remoteStoreApplyPrimaryState(syncEngineImpl.remoteStore, false)];
              case 6:
                _d.sent();
                _d.label = 7;
              case 7:
                return [2];
            }
          });
        });
      }
      function resetLimboDocuments(syncEngine) {
        var syncEngineImpl = debugCast(syncEngine);
        syncEngineImpl.activeLimboResolutionsByTarget.forEach(function(_, targetId) {
          remoteStoreUnlisten(syncEngineImpl.remoteStore, targetId);
        });
        syncEngineImpl.limboDocumentRefs.removeAllReferences();
        syncEngineImpl.activeLimboResolutionsByTarget = new Map();
        syncEngineImpl.activeLimboTargetsByKey = new SortedMap(DocumentKey.comparator);
      }
      function synchronizeQueryViewsAndRaiseSnapshots(syncEngine, targets, transitionToPrimary) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var syncEngineImpl, activeQueries, newViewSnapshots, _i, targets_1, targetId, targetData, queries, _d, queries_2, query_4, queryView, viewChange, target;
          return tslib.__generator(this, function(_e) {
            switch (_e.label) {
              case 0:
                syncEngineImpl = debugCast(syncEngine);
                activeQueries = [];
                newViewSnapshots = [];
                _i = 0, targets_1 = targets;
                _e.label = 1;
              case 1:
                if (!(_i < targets_1.length))
                  return [3, 13];
                targetId = targets_1[_i];
                targetData = void 0;
                queries = syncEngineImpl.queriesByTarget.get(targetId);
                if (!(queries && queries.length !== 0))
                  return [3, 7];
                return [4, localStoreAllocateTarget(syncEngineImpl.localStore, queryToTarget(queries[0]))];
              case 2:
                targetData = _e.sent();
                _d = 0, queries_2 = queries;
                _e.label = 3;
              case 3:
                if (!(_d < queries_2.length))
                  return [3, 6];
                query_4 = queries_2[_d];
                queryView = syncEngineImpl.queryViewsByQuery.get(query_4);
                return [4, synchronizeViewAndComputeSnapshot(syncEngineImpl, queryView)];
              case 4:
                viewChange = _e.sent();
                if (viewChange.snapshot) {
                  newViewSnapshots.push(viewChange.snapshot);
                }
                _e.label = 5;
              case 5:
                _d++;
                return [3, 3];
              case 6:
                return [3, 11];
              case 7:
                return [4, localStoreGetCachedTarget(syncEngineImpl.localStore, targetId)];
              case 8:
                target = _e.sent();
                return [4, localStoreAllocateTarget(syncEngineImpl.localStore, target)];
              case 9:
                targetData = _e.sent();
                return [4, initializeViewAndComputeSnapshot(syncEngineImpl, synthesizeTargetToQuery(target), targetId, false)];
              case 10:
                _e.sent();
                _e.label = 11;
              case 11:
                activeQueries.push(targetData);
                _e.label = 12;
              case 12:
                _i++;
                return [3, 1];
              case 13:
                syncEngineImpl.syncEngineListener.onWatchChange(newViewSnapshots);
                return [2, activeQueries];
            }
          });
        });
      }
      function synthesizeTargetToQuery(target) {
        return newQuery(target.path, target.collectionGroup, target.orderBy, target.filters, target.limit, "F", target.startAt, target.endAt);
      }
      function syncEngineGetActiveClients(syncEngine) {
        var syncEngineImpl = debugCast(syncEngine);
        return localStoreGetActiveClients(syncEngineImpl.localStore);
      }
      function syncEngineApplyTargetState(syncEngine, targetId, state, error3) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var syncEngineImpl, _d, changes, synthesizedRemoteEvent;
          return tslib.__generator(this, function(_e) {
            switch (_e.label) {
              case 0:
                syncEngineImpl = debugCast(syncEngine);
                if (syncEngineImpl._isPrimaryClient) {
                  logDebug(LOG_TAG$d, "Ignoring unexpected query state notification.");
                  return [2];
                }
                if (!syncEngineImpl.queriesByTarget.has(targetId))
                  return [3, 7];
                _d = state;
                switch (_d) {
                  case "current":
                    return [3, 1];
                  case "not-current":
                    return [3, 1];
                  case "rejected":
                    return [3, 4];
                }
                return [3, 6];
              case 1:
                return [4, localStoreGetNewDocumentChanges(syncEngineImpl.localStore)];
              case 2:
                changes = _e.sent();
                synthesizedRemoteEvent = RemoteEvent.createSynthesizedRemoteEventForCurrentChange(targetId, state === "current");
                return [4, syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes, synthesizedRemoteEvent)];
              case 3:
                _e.sent();
                return [3, 7];
              case 4:
                return [4, localStoreReleaseTarget(syncEngineImpl.localStore, targetId, true)];
              case 5:
                _e.sent();
                removeAndCleanupTarget(syncEngineImpl, targetId, error3);
                return [3, 7];
              case 6:
                fail();
                _e.label = 7;
              case 7:
                return [2];
            }
          });
        });
      }
      function syncEngineApplyActiveTargetsChange(syncEngine, added, removed) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var syncEngineImpl, _i, added_1, targetId, target, targetData, _loop_5, _d, removed_1, targetId;
          return tslib.__generator(this, function(_e) {
            switch (_e.label) {
              case 0:
                syncEngineImpl = ensureWatchCallbacks(syncEngine);
                if (!syncEngineImpl._isPrimaryClient) {
                  return [2];
                }
                _i = 0, added_1 = added;
                _e.label = 1;
              case 1:
                if (!(_i < added_1.length))
                  return [3, 6];
                targetId = added_1[_i];
                if (syncEngineImpl.queriesByTarget.has(targetId)) {
                  logDebug(LOG_TAG$d, "Adding an already active target " + targetId);
                  return [3, 5];
                }
                return [4, localStoreGetCachedTarget(syncEngineImpl.localStore, targetId)];
              case 2:
                target = _e.sent();
                return [4, localStoreAllocateTarget(syncEngineImpl.localStore, target)];
              case 3:
                targetData = _e.sent();
                return [4, initializeViewAndComputeSnapshot(syncEngineImpl, synthesizeTargetToQuery(target), targetData.targetId, false)];
              case 4:
                _e.sent();
                remoteStoreListen(syncEngineImpl.remoteStore, targetData);
                _e.label = 5;
              case 5:
                _i++;
                return [3, 1];
              case 6:
                _loop_5 = function(targetId2) {
                  return tslib.__generator(this, function(_f) {
                    switch (_f.label) {
                      case 0:
                        if (!syncEngineImpl.queriesByTarget.has(targetId2)) {
                          return [2, "continue"];
                        }
                        return [4, localStoreReleaseTarget(syncEngineImpl.localStore, targetId2, false).then(function() {
                          remoteStoreUnlisten(syncEngineImpl.remoteStore, targetId2);
                          removeAndCleanupTarget(syncEngineImpl, targetId2);
                        }).catch(ignoreIfPrimaryLeaseLoss)];
                      case 1:
                        _f.sent();
                        return [2];
                    }
                  });
                };
                _d = 0, removed_1 = removed;
                _e.label = 7;
              case 7:
                if (!(_d < removed_1.length))
                  return [3, 10];
                targetId = removed_1[_d];
                return [5, _loop_5(targetId)];
              case 8:
                _e.sent();
                _e.label = 9;
              case 9:
                _d++;
                return [3, 7];
              case 10:
                return [2];
            }
          });
        });
      }
      function ensureWatchCallbacks(syncEngine) {
        var syncEngineImpl = debugCast(syncEngine);
        syncEngineImpl.remoteStore.remoteSyncer.applyRemoteEvent = syncEngineApplyRemoteEvent.bind(null, syncEngineImpl);
        syncEngineImpl.remoteStore.remoteSyncer.getRemoteKeysForTarget = syncEngineGetRemoteKeysForTarget.bind(null, syncEngineImpl);
        syncEngineImpl.remoteStore.remoteSyncer.rejectListen = syncEngineRejectListen.bind(null, syncEngineImpl);
        syncEngineImpl.syncEngineListener.onWatchChange = eventManagerOnWatchChange.bind(null, syncEngineImpl.eventManager);
        syncEngineImpl.syncEngineListener.onWatchError = eventManagerOnWatchError.bind(null, syncEngineImpl.eventManager);
        return syncEngineImpl;
      }
      function syncEngineEnsureWriteCallbacks(syncEngine) {
        var syncEngineImpl = debugCast(syncEngine);
        syncEngineImpl.remoteStore.remoteSyncer.applySuccessfulWrite = syncEngineApplySuccessfulWrite.bind(null, syncEngineImpl);
        syncEngineImpl.remoteStore.remoteSyncer.rejectFailedWrite = syncEngineRejectFailedWrite.bind(null, syncEngineImpl);
        return syncEngineImpl;
      }
      function syncEngineLoadBundle(syncEngine, bundleReader, task) {
        var syncEngineImpl = debugCast(syncEngine);
        loadBundleImpl(syncEngineImpl, bundleReader, task).then(function() {
          syncEngineImpl.sharedClientState.notifyBundleLoaded();
        });
      }
      function loadBundleImpl(syncEngine, reader, task) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var metadata, skip, loader, element, progress, result, e_10;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 13, , 14]);
                return [4, reader.getMetadata()];
              case 1:
                metadata = _d.sent();
                return [4, localStoreHasNewerBundle(syncEngine.localStore, metadata)];
              case 2:
                skip = _d.sent();
                if (!skip)
                  return [3, 4];
                return [4, reader.close()];
              case 3:
                _d.sent();
                task._completeWith(bundleSuccessProgress(metadata));
                return [2];
              case 4:
                task._updateProgress(bundleInitialProgress(metadata));
                loader = new BundleLoader(metadata, syncEngine.localStore, reader.serializer);
                return [4, reader.nextElement()];
              case 5:
                element = _d.sent();
                _d.label = 6;
              case 6:
                if (!element)
                  return [3, 9];
                return [4, loader.addSizedElement(element)];
              case 7:
                progress = _d.sent();
                if (progress) {
                  task._updateProgress(progress);
                }
                return [4, reader.nextElement()];
              case 8:
                element = _d.sent();
                return [3, 6];
              case 9:
                return [4, loader.complete()];
              case 10:
                result = _d.sent();
                return [4, syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngine, result.changedDocs, void 0)];
              case 11:
                _d.sent();
                return [4, localStoreSaveBundle(syncEngine.localStore, metadata)];
              case 12:
                _d.sent();
                task._completeWith(result.progress);
                return [3, 14];
              case 13:
                e_10 = _d.sent();
                logWarn(LOG_TAG$d, "Loading bundle failed with " + e_10);
                task._failWith(e_10);
                return [3, 14];
              case 14:
                return [2];
            }
          });
        });
      }
      var MemoryOfflineComponentProvider = function() {
        function MemoryOfflineComponentProvider2() {
          this.synchronizeTabs = false;
        }
        MemoryOfflineComponentProvider2.prototype.initialize = function(cfg) {
          return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  this.serializer = newSerializer(cfg.databaseInfo.databaseId);
                  this.sharedClientState = this.createSharedClientState(cfg);
                  this.persistence = this.createPersistence(cfg);
                  return [4, this.persistence.start()];
                case 1:
                  _d.sent();
                  this.gcScheduler = this.createGarbageCollectionScheduler(cfg);
                  this.localStore = this.createLocalStore(cfg);
                  return [2];
              }
            });
          });
        };
        MemoryOfflineComponentProvider2.prototype.createGarbageCollectionScheduler = function(cfg) {
          return null;
        };
        MemoryOfflineComponentProvider2.prototype.createLocalStore = function(cfg) {
          return newLocalStore(this.persistence, new QueryEngine(), cfg.initialUser, this.serializer);
        };
        MemoryOfflineComponentProvider2.prototype.createPersistence = function(cfg) {
          return new MemoryPersistence(MemoryEagerDelegate.factory, this.serializer);
        };
        MemoryOfflineComponentProvider2.prototype.createSharedClientState = function(cfg) {
          return new MemorySharedClientState();
        };
        MemoryOfflineComponentProvider2.prototype.terminate = function() {
          return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  if (this.gcScheduler) {
                    this.gcScheduler.stop();
                  }
                  return [4, this.sharedClientState.shutdown()];
                case 1:
                  _d.sent();
                  return [4, this.persistence.shutdown()];
                case 2:
                  _d.sent();
                  return [2];
              }
            });
          });
        };
        return MemoryOfflineComponentProvider2;
      }();
      var IndexedDbOfflineComponentProvider = function(_super) {
        tslib.__extends(IndexedDbOfflineComponentProvider2, _super);
        function IndexedDbOfflineComponentProvider2(onlineComponentProvider, cacheSizeBytes, forceOwnership) {
          var _this = _super.call(this) || this;
          _this.onlineComponentProvider = onlineComponentProvider;
          _this.cacheSizeBytes = cacheSizeBytes;
          _this.forceOwnership = forceOwnership;
          _this.synchronizeTabs = false;
          return _this;
        }
        IndexedDbOfflineComponentProvider2.prototype.initialize = function(cfg) {
          return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  return [4, _super.prototype.initialize.call(this, cfg)];
                case 1:
                  _d.sent();
                  return [4, localStoreSynchronizeLastDocumentChangeReadTime(this.localStore)];
                case 2:
                  _d.sent();
                  return [4, this.onlineComponentProvider.initialize(this, cfg)];
                case 3:
                  _d.sent();
                  return [4, syncEngineEnsureWriteCallbacks(this.onlineComponentProvider.syncEngine)];
                case 4:
                  _d.sent();
                  return [4, fillWritePipeline(this.onlineComponentProvider.remoteStore)];
                case 5:
                  _d.sent();
                  return [2];
              }
            });
          });
        };
        IndexedDbOfflineComponentProvider2.prototype.createLocalStore = function(cfg) {
          return newLocalStore(this.persistence, new QueryEngine(), cfg.initialUser, this.serializer);
        };
        IndexedDbOfflineComponentProvider2.prototype.createGarbageCollectionScheduler = function(cfg) {
          var garbageCollector = this.persistence.referenceDelegate.garbageCollector;
          return new LruScheduler(garbageCollector, cfg.asyncQueue);
        };
        IndexedDbOfflineComponentProvider2.prototype.createPersistence = function(cfg) {
          var persistenceKey = indexedDbStoragePrefix(cfg.databaseInfo.databaseId, cfg.databaseInfo.persistenceKey);
          var lruParams = this.cacheSizeBytes !== void 0 ? LruParams.withCacheSize(this.cacheSizeBytes) : LruParams.DEFAULT;
          return new IndexedDbPersistence(this.synchronizeTabs, persistenceKey, cfg.clientId, lruParams, cfg.asyncQueue, getWindow(), getDocument(), this.serializer, this.sharedClientState, !!this.forceOwnership);
        };
        IndexedDbOfflineComponentProvider2.prototype.createSharedClientState = function(cfg) {
          return new MemorySharedClientState();
        };
        return IndexedDbOfflineComponentProvider2;
      }(MemoryOfflineComponentProvider);
      var MultiTabOfflineComponentProvider = function(_super) {
        tslib.__extends(MultiTabOfflineComponentProvider2, _super);
        function MultiTabOfflineComponentProvider2(onlineComponentProvider, cacheSizeBytes) {
          var _this = _super.call(this, onlineComponentProvider, cacheSizeBytes, false) || this;
          _this.onlineComponentProvider = onlineComponentProvider;
          _this.cacheSizeBytes = cacheSizeBytes;
          _this.synchronizeTabs = true;
          return _this;
        }
        MultiTabOfflineComponentProvider2.prototype.initialize = function(cfg) {
          return tslib.__awaiter(this, void 0, void 0, function() {
            var syncEngine;
            var _this = this;
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  return [4, _super.prototype.initialize.call(this, cfg)];
                case 1:
                  _d.sent();
                  syncEngine = this.onlineComponentProvider.syncEngine;
                  if (!(this.sharedClientState instanceof WebStorageSharedClientState))
                    return [3, 3];
                  this.sharedClientState.syncEngine = {
                    applyBatchState: syncEngineApplyBatchState.bind(null, syncEngine),
                    applyTargetState: syncEngineApplyTargetState.bind(null, syncEngine),
                    applyActiveTargetsChange: syncEngineApplyActiveTargetsChange.bind(null, syncEngine),
                    getActiveClients: syncEngineGetActiveClients.bind(null, syncEngine),
                    synchronizeWithChangedDocuments: syncEngineSynchronizeWithChangedDocuments.bind(null, syncEngine)
                  };
                  return [4, this.sharedClientState.start()];
                case 2:
                  _d.sent();
                  _d.label = 3;
                case 3:
                  return [4, this.persistence.setPrimaryStateListener(function(isPrimary) {
                    return tslib.__awaiter(_this, void 0, void 0, function() {
                      return tslib.__generator(this, function(_d2) {
                        switch (_d2.label) {
                          case 0:
                            return [4, syncEngineApplyPrimaryState(this.onlineComponentProvider.syncEngine, isPrimary)];
                          case 1:
                            _d2.sent();
                            if (this.gcScheduler) {
                              if (isPrimary && !this.gcScheduler.started) {
                                this.gcScheduler.start(this.localStore);
                              } else if (!isPrimary) {
                                this.gcScheduler.stop();
                              }
                            }
                            return [2];
                        }
                      });
                    });
                  })];
                case 4:
                  _d.sent();
                  return [2];
              }
            });
          });
        };
        MultiTabOfflineComponentProvider2.prototype.createSharedClientState = function(cfg) {
          var window2 = getWindow();
          if (!WebStorageSharedClientState.isAvailable(window2)) {
            throw new FirestoreError(Code.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
          }
          var persistenceKey = indexedDbStoragePrefix(cfg.databaseInfo.databaseId, cfg.databaseInfo.persistenceKey);
          return new WebStorageSharedClientState(window2, cfg.asyncQueue, persistenceKey, cfg.clientId, cfg.initialUser);
        };
        return MultiTabOfflineComponentProvider2;
      }(IndexedDbOfflineComponentProvider);
      var OnlineComponentProvider = function() {
        function OnlineComponentProvider2() {
        }
        OnlineComponentProvider2.prototype.initialize = function(offlineComponentProvider, cfg) {
          return tslib.__awaiter(this, void 0, void 0, function() {
            var _this = this;
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  if (this.localStore) {
                    return [2];
                  }
                  this.localStore = offlineComponentProvider.localStore;
                  this.sharedClientState = offlineComponentProvider.sharedClientState;
                  this.datastore = this.createDatastore(cfg);
                  this.remoteStore = this.createRemoteStore(cfg);
                  this.eventManager = this.createEventManager(cfg);
                  this.syncEngine = this.createSyncEngine(cfg, !offlineComponentProvider.synchronizeTabs);
                  this.sharedClientState.onlineStateHandler = function(onlineState) {
                    return syncEngineApplyOnlineStateChange(_this.syncEngine, onlineState, 1);
                  };
                  this.remoteStore.remoteSyncer.handleCredentialChange = syncEngineHandleCredentialChange.bind(null, this.syncEngine);
                  return [4, remoteStoreApplyPrimaryState(this.remoteStore, this.syncEngine.isPrimaryClient)];
                case 1:
                  _d.sent();
                  return [2];
              }
            });
          });
        };
        OnlineComponentProvider2.prototype.createEventManager = function(cfg) {
          return newEventManager();
        };
        OnlineComponentProvider2.prototype.createDatastore = function(cfg) {
          var serializer = newSerializer(cfg.databaseInfo.databaseId);
          var connection = newConnection(cfg.databaseInfo);
          return newDatastore(cfg.credentials, connection, serializer);
        };
        OnlineComponentProvider2.prototype.createRemoteStore = function(cfg) {
          var _this = this;
          return newRemoteStore(this.localStore, this.datastore, cfg.asyncQueue, function(onlineState) {
            return syncEngineApplyOnlineStateChange(_this.syncEngine, onlineState, 0);
          }, newConnectivityMonitor());
        };
        OnlineComponentProvider2.prototype.createSyncEngine = function(cfg, startAsPrimary) {
          return newSyncEngine(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, cfg.initialUser, cfg.maxConcurrentLimboResolutions, startAsPrimary);
        };
        OnlineComponentProvider2.prototype.terminate = function() {
          return remoteStoreShutdown(this.remoteStore);
        };
        return OnlineComponentProvider2;
      }();
      var DEFAULT_BYTES_PER_READ = 10240;
      function toByteStreamReaderHelper(source, bytesPerRead) {
        if (bytesPerRead === void 0) {
          bytesPerRead = DEFAULT_BYTES_PER_READ;
        }
        var readFrom = 0;
        var reader = {
          read: function() {
            return tslib.__awaiter(this, void 0, void 0, function() {
              var result;
              return tslib.__generator(this, function(_d) {
                if (readFrom < source.byteLength) {
                  result = {
                    value: source.slice(readFrom, readFrom + bytesPerRead),
                    done: false
                  };
                  readFrom += bytesPerRead;
                  return [2, result];
                }
                return [2, {done: true}];
              });
            });
          },
          cancel: function() {
            return tslib.__awaiter(this, void 0, void 0, function() {
              return tslib.__generator(this, function(_d) {
                return [2];
              });
            });
          },
          releaseLock: function() {
          },
          closed: Promise.reject("unimplemented")
        };
        return reader;
      }
      function validateNonEmptyArgument(functionName, argumentName, argument) {
        if (!argument) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() cannot be called with an empty " + argumentName + ".");
        }
      }
      function validateIsNotUsedTogether(optionName1, argument1, optionName2, argument2) {
        if (argument1 === true && argument2 === true) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, optionName1 + " and " + optionName2 + " cannot be used together.");
        }
      }
      function validateDocumentPath(path2) {
        if (!DocumentKey.isDocumentKey(path2)) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid document reference. Document references must have an even number of segments, but " + path2 + " has " + path2.length + ".");
        }
      }
      function validateCollectionPath(path2) {
        if (DocumentKey.isDocumentKey(path2)) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid collection reference. Collection references must have an odd number of segments, but " + path2 + " has " + path2.length + ".");
        }
      }
      function isPlainObject(input) {
        return typeof input === "object" && input !== null && (Object.getPrototypeOf(input) === Object.prototype || Object.getPrototypeOf(input) === null);
      }
      function valueDescription(input) {
        if (input === void 0) {
          return "undefined";
        } else if (input === null) {
          return "null";
        } else if (typeof input === "string") {
          if (input.length > 20) {
            input = input.substring(0, 20) + "...";
          }
          return JSON.stringify(input);
        } else if (typeof input === "number" || typeof input === "boolean") {
          return "" + input;
        } else if (typeof input === "object") {
          if (input instanceof Array) {
            return "an array";
          } else {
            var customObjectName = tryGetCustomObjectType(input);
            if (customObjectName) {
              return "a custom " + customObjectName + " object";
            } else {
              return "an object";
            }
          }
        } else if (typeof input === "function") {
          return "a function";
        } else {
          return fail();
        }
      }
      function tryGetCustomObjectType(input) {
        if (input.constructor) {
          var funcNameRegex = /function\s+([^\s(]+)\s*\(/;
          var results = funcNameRegex.exec(input.constructor.toString());
          if (results && results.length > 1) {
            return results[1];
          }
        }
        return null;
      }
      function cast(obj, constructor) {
        if ("_delegate" in obj) {
          obj = obj._delegate;
        }
        if (!(obj instanceof constructor)) {
          if (constructor.name === obj.constructor.name) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
          } else {
            var description = valueDescription(obj);
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Expected type '" + constructor.name + "', but it was: " + description);
          }
        }
        return obj;
      }
      function validatePositiveNumber(functionName, n) {
        if (n <= 0) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires a positive number, but it was: " + n + ".");
        }
      }
      function toByteStreamReader(source, bytesPerRead) {
        if (!(source instanceof Uint8Array)) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "NodePlatform.toByteStreamReader expects source to be Uint8Array, got " + valueDescription(source));
        }
        return toByteStreamReaderHelper(source, bytesPerRead);
      }
      var AsyncObserver = function() {
        function AsyncObserver2(observer) {
          this.observer = observer;
          this.muted = false;
        }
        AsyncObserver2.prototype.next = function(value) {
          if (this.observer.next) {
            this.scheduleEvent(this.observer.next, value);
          }
        };
        AsyncObserver2.prototype.error = function(error3) {
          if (this.observer.error) {
            this.scheduleEvent(this.observer.error, error3);
          } else {
            console.error("Uncaught Error in snapshot listener:", error3);
          }
        };
        AsyncObserver2.prototype.mute = function() {
          this.muted = true;
        };
        AsyncObserver2.prototype.scheduleEvent = function(eventHandler, event) {
          var _this = this;
          if (!this.muted) {
            setTimeout(function() {
              if (!_this.muted) {
                eventHandler(event);
              }
            }, 0);
          }
        };
        return AsyncObserver2;
      }();
      var SizedBundleElement = function() {
        function SizedBundleElement2(payload, byteLength) {
          this.payload = payload;
          this.byteLength = byteLength;
        }
        SizedBundleElement2.prototype.isBundleMetadata = function() {
          return "metadata" in this.payload;
        };
        return SizedBundleElement2;
      }();
      var BundleReaderImpl = function() {
        function BundleReaderImpl2(reader, serializer) {
          var _this = this;
          this.reader = reader;
          this.serializer = serializer;
          this.metadata = new Deferred();
          this.buffer = new Uint8Array();
          this.textDecoder = newTextDecoder();
          this.nextElementImpl().then(function(element) {
            if (element && element.isBundleMetadata()) {
              _this.metadata.resolve(element.payload.metadata);
            } else {
              _this.metadata.reject(new Error("The first element of the bundle is not a metadata, it is\n             " + JSON.stringify(element === null || element === void 0 ? void 0 : element.payload)));
            }
          }, function(error3) {
            return _this.metadata.reject(error3);
          });
        }
        BundleReaderImpl2.prototype.close = function() {
          return this.reader.cancel();
        };
        BundleReaderImpl2.prototype.getMetadata = function() {
          return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(_d) {
              return [2, this.metadata.promise];
            });
          });
        };
        BundleReaderImpl2.prototype.nextElement = function() {
          return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  return [4, this.getMetadata()];
                case 1:
                  _d.sent();
                  return [2, this.nextElementImpl()];
              }
            });
          });
        };
        BundleReaderImpl2.prototype.nextElementImpl = function() {
          return tslib.__awaiter(this, void 0, void 0, function() {
            var lengthBuffer, lengthString, length, jsonString;
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  return [4, this.readLength()];
                case 1:
                  lengthBuffer = _d.sent();
                  if (lengthBuffer === null) {
                    return [2, null];
                  }
                  lengthString = this.textDecoder.decode(lengthBuffer);
                  length = Number(lengthString);
                  if (isNaN(length)) {
                    this.raiseError("length string (" + lengthString + ") is not valid number");
                  }
                  return [4, this.readJsonString(length)];
                case 2:
                  jsonString = _d.sent();
                  return [2, new SizedBundleElement(JSON.parse(jsonString), lengthBuffer.length + length)];
              }
            });
          });
        };
        BundleReaderImpl2.prototype.indexOfOpenBracket = function() {
          return this.buffer.findIndex(function(v) {
            return v === "{".charCodeAt(0);
          });
        };
        BundleReaderImpl2.prototype.readLength = function() {
          return tslib.__awaiter(this, void 0, void 0, function() {
            var done, position, result;
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  if (!(this.indexOfOpenBracket() < 0))
                    return [3, 2];
                  return [4, this.pullMoreDataToBuffer()];
                case 1:
                  done = _d.sent();
                  if (done) {
                    return [3, 2];
                  }
                  return [3, 0];
                case 2:
                  if (this.buffer.length === 0) {
                    return [2, null];
                  }
                  position = this.indexOfOpenBracket();
                  if (position < 0) {
                    this.raiseError("Reached the end of bundle when a length string is expected.");
                  }
                  result = this.buffer.slice(0, position);
                  this.buffer = this.buffer.slice(position);
                  return [2, result];
              }
            });
          });
        };
        BundleReaderImpl2.prototype.readJsonString = function(length) {
          return tslib.__awaiter(this, void 0, void 0, function() {
            var done, result;
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  if (!(this.buffer.length < length))
                    return [3, 2];
                  return [4, this.pullMoreDataToBuffer()];
                case 1:
                  done = _d.sent();
                  if (done) {
                    this.raiseError("Reached the end of bundle when more is expected.");
                  }
                  return [3, 0];
                case 2:
                  result = this.textDecoder.decode(this.buffer.slice(0, length));
                  this.buffer = this.buffer.slice(length);
                  return [2, result];
              }
            });
          });
        };
        BundleReaderImpl2.prototype.raiseError = function(message) {
          this.reader.cancel();
          throw new Error("Invalid bundle format: " + message);
        };
        BundleReaderImpl2.prototype.pullMoreDataToBuffer = function() {
          return tslib.__awaiter(this, void 0, void 0, function() {
            var result, newBuffer;
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  return [4, this.reader.read()];
                case 1:
                  result = _d.sent();
                  if (!result.done) {
                    newBuffer = new Uint8Array(this.buffer.length + result.value.length);
                    newBuffer.set(this.buffer);
                    newBuffer.set(result.value, this.buffer.length);
                    this.buffer = newBuffer;
                  }
                  return [2, result.done];
              }
            });
          });
        };
        return BundleReaderImpl2;
      }();
      function newBundleReader(reader, serializer) {
        return new BundleReaderImpl(reader, serializer);
      }
      var Transaction = function() {
        function Transaction2(datastore) {
          this.datastore = datastore;
          this.readVersions = new Map();
          this.mutations = [];
          this.committed = false;
          this.lastWriteError = null;
          this.writtenDocs = new Set();
        }
        Transaction2.prototype.lookup = function(keys) {
          return tslib.__awaiter(this, void 0, void 0, function() {
            var docs;
            var _this = this;
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  this.ensureCommitNotCalled();
                  if (this.mutations.length > 0) {
                    throw new FirestoreError(Code.INVALID_ARGUMENT, "Firestore transactions require all reads to be executed before all writes.");
                  }
                  return [4, invokeBatchGetDocumentsRpc(this.datastore, keys)];
                case 1:
                  docs = _d.sent();
                  docs.forEach(function(doc2) {
                    return _this.recordVersion(doc2);
                  });
                  return [2, docs];
              }
            });
          });
        };
        Transaction2.prototype.set = function(key, data) {
          this.write(data.toMutation(key, this.precondition(key)));
          this.writtenDocs.add(key.toString());
        };
        Transaction2.prototype.update = function(key, data) {
          try {
            this.write(data.toMutation(key, this.preconditionForUpdate(key)));
          } catch (e) {
            this.lastWriteError = e;
          }
          this.writtenDocs.add(key.toString());
        };
        Transaction2.prototype.delete = function(key) {
          this.write(new DeleteMutation(key, this.precondition(key)));
          this.writtenDocs.add(key.toString());
        };
        Transaction2.prototype.commit = function() {
          return tslib.__awaiter(this, void 0, void 0, function() {
            var unwritten;
            var _this = this;
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  this.ensureCommitNotCalled();
                  if (this.lastWriteError) {
                    throw this.lastWriteError;
                  }
                  unwritten = this.readVersions;
                  this.mutations.forEach(function(mutation) {
                    unwritten.delete(mutation.key.toString());
                  });
                  unwritten.forEach(function(_, path2) {
                    var key = DocumentKey.fromPath(path2);
                    _this.mutations.push(new VerifyMutation(key, _this.precondition(key)));
                  });
                  return [4, invokeCommitRpc(this.datastore, this.mutations)];
                case 1:
                  _d.sent();
                  this.committed = true;
                  return [2];
              }
            });
          });
        };
        Transaction2.prototype.recordVersion = function(doc2) {
          var docVersion;
          if (doc2.isFoundDocument()) {
            docVersion = doc2.version;
          } else if (doc2.isNoDocument()) {
            docVersion = SnapshotVersion.min();
          } else {
            throw fail();
          }
          var existingVersion = this.readVersions.get(doc2.key.toString());
          if (existingVersion) {
            if (!docVersion.isEqual(existingVersion)) {
              throw new FirestoreError(Code.ABORTED, "Document version changed between two reads.");
            }
          } else {
            this.readVersions.set(doc2.key.toString(), docVersion);
          }
        };
        Transaction2.prototype.precondition = function(key) {
          var version2 = this.readVersions.get(key.toString());
          if (!this.writtenDocs.has(key.toString()) && version2) {
            return Precondition.updateTime(version2);
          } else {
            return Precondition.none();
          }
        };
        Transaction2.prototype.preconditionForUpdate = function(key) {
          var version2 = this.readVersions.get(key.toString());
          if (!this.writtenDocs.has(key.toString()) && version2) {
            if (version2.isEqual(SnapshotVersion.min())) {
              throw new FirestoreError(Code.INVALID_ARGUMENT, "Can't update a document that doesn't exist.");
            }
            return Precondition.updateTime(version2);
          } else {
            return Precondition.exists(true);
          }
        };
        Transaction2.prototype.write = function(mutation) {
          this.ensureCommitNotCalled();
          this.mutations.push(mutation);
        };
        Transaction2.prototype.ensureCommitNotCalled = function() {
        };
        return Transaction2;
      }();
      var RETRY_COUNT = 5;
      var TransactionRunner = function() {
        function TransactionRunner2(asyncQueue, datastore, updateFunction, deferred) {
          this.asyncQueue = asyncQueue;
          this.datastore = datastore;
          this.updateFunction = updateFunction;
          this.deferred = deferred;
          this.retries = RETRY_COUNT;
          this.backoff = new ExponentialBackoff(this.asyncQueue, "transaction_retry");
        }
        TransactionRunner2.prototype.run = function() {
          this.runWithBackOff();
        };
        TransactionRunner2.prototype.runWithBackOff = function() {
          var _this = this;
          this.backoff.backoffAndRun(function() {
            return tslib.__awaiter(_this, void 0, void 0, function() {
              var transaction, userPromise;
              var _this2 = this;
              return tslib.__generator(this, function(_d) {
                transaction = new Transaction(this.datastore);
                userPromise = this.tryRunUpdateFunction(transaction);
                if (userPromise) {
                  userPromise.then(function(result) {
                    _this2.asyncQueue.enqueueAndForget(function() {
                      return transaction.commit().then(function() {
                        _this2.deferred.resolve(result);
                      }).catch(function(commitError) {
                        _this2.handleTransactionError(commitError);
                      });
                    });
                  }).catch(function(userPromiseError) {
                    _this2.handleTransactionError(userPromiseError);
                  });
                }
                return [2];
              });
            });
          });
        };
        TransactionRunner2.prototype.tryRunUpdateFunction = function(transaction) {
          try {
            var userPromise = this.updateFunction(transaction);
            if (isNullOrUndefined(userPromise) || !userPromise.catch || !userPromise.then) {
              this.deferred.reject(Error("Transaction callback must return a Promise"));
              return null;
            }
            return userPromise;
          } catch (error3) {
            this.deferred.reject(error3);
            return null;
          }
        };
        TransactionRunner2.prototype.handleTransactionError = function(error3) {
          var _this = this;
          if (this.retries > 0 && this.isRetryableTransactionError(error3)) {
            this.retries -= 1;
            this.asyncQueue.enqueueAndForget(function() {
              _this.runWithBackOff();
              return Promise.resolve();
            });
          } else {
            this.deferred.reject(error3);
          }
        };
        TransactionRunner2.prototype.isRetryableTransactionError = function(error3) {
          if (error3.name === "FirebaseError") {
            var code = error3.code;
            return code === "aborted" || code === "failed-precondition" || !isPermanentError(code);
          }
          return false;
        };
        return TransactionRunner2;
      }();
      var LOG_TAG$e = "FirestoreClient";
      var MAX_CONCURRENT_LIMBO_RESOLUTIONS = 100;
      var FirestoreClient = function() {
        function FirestoreClient2(credentials, asyncQueue, databaseInfo) {
          var _this = this;
          this.credentials = credentials;
          this.asyncQueue = asyncQueue;
          this.databaseInfo = databaseInfo;
          this.user = User.UNAUTHENTICATED;
          this.clientId = AutoId.newId();
          this.credentialListener = function() {
          };
          this.receivedInitialUser = new Deferred();
          this.credentials.setChangeListener(function(user) {
            logDebug(LOG_TAG$e, "Received user=", user.uid);
            _this.user = user;
            _this.credentialListener(user);
            _this.receivedInitialUser.resolve();
          });
        }
        FirestoreClient2.prototype.getConfiguration = function() {
          return tslib.__awaiter(this, void 0, void 0, function() {
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  return [4, this.receivedInitialUser.promise];
                case 1:
                  _d.sent();
                  return [2, {
                    asyncQueue: this.asyncQueue,
                    databaseInfo: this.databaseInfo,
                    clientId: this.clientId,
                    credentials: this.credentials,
                    initialUser: this.user,
                    maxConcurrentLimboResolutions: MAX_CONCURRENT_LIMBO_RESOLUTIONS
                  }];
              }
            });
          });
        };
        FirestoreClient2.prototype.setCredentialChangeListener = function(listener) {
          var _this = this;
          this.credentialListener = listener;
          this.receivedInitialUser.promise.then(function() {
            return _this.credentialListener(_this.user);
          });
        };
        FirestoreClient2.prototype.verifyNotTerminated = function() {
          if (this.asyncQueue.isShuttingDown) {
            throw new FirestoreError(Code.FAILED_PRECONDITION, "The client has already been terminated.");
          }
        };
        FirestoreClient2.prototype.terminate = function() {
          var _this = this;
          this.asyncQueue.enterRestrictedMode();
          var deferred = new Deferred();
          this.asyncQueue.enqueueAndForgetEvenWhileRestricted(function() {
            return tslib.__awaiter(_this, void 0, void 0, function() {
              var e_11, firestoreError;
              return tslib.__generator(this, function(_d) {
                switch (_d.label) {
                  case 0:
                    _d.trys.push([0, 5, , 6]);
                    if (!this.onlineComponents)
                      return [3, 2];
                    return [4, this.onlineComponents.terminate()];
                  case 1:
                    _d.sent();
                    _d.label = 2;
                  case 2:
                    if (!this.offlineComponents)
                      return [3, 4];
                    return [4, this.offlineComponents.terminate()];
                  case 3:
                    _d.sent();
                    _d.label = 4;
                  case 4:
                    this.credentials.removeChangeListener();
                    deferred.resolve();
                    return [3, 6];
                  case 5:
                    e_11 = _d.sent();
                    firestoreError = wrapInUserErrorIfRecoverable(e_11, "Failed to shutdown persistence");
                    deferred.reject(firestoreError);
                    return [3, 6];
                  case 6:
                    return [2];
                }
              });
            });
          });
          return deferred.promise;
        };
        return FirestoreClient2;
      }();
      function setOfflineComponentProvider(client, offlineComponentProvider) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var configuration, currentUser;
          var _this = this;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                client.asyncQueue.verifyOperationInProgress();
                logDebug(LOG_TAG$e, "Initializing OfflineComponentProvider");
                return [4, client.getConfiguration()];
              case 1:
                configuration = _d.sent();
                return [4, offlineComponentProvider.initialize(configuration)];
              case 2:
                _d.sent();
                currentUser = configuration.initialUser;
                client.setCredentialChangeListener(function(user) {
                  if (!currentUser.isEqual(user)) {
                    currentUser = user;
                    client.asyncQueue.enqueueRetryable(function() {
                      return tslib.__awaiter(_this, void 0, void 0, function() {
                        return tslib.__generator(this, function(_d2) {
                          switch (_d2.label) {
                            case 0:
                              return [4, localStoreHandleUserChange(offlineComponentProvider.localStore, user)];
                            case 1:
                              _d2.sent();
                              return [2];
                          }
                        });
                      });
                    });
                  }
                });
                offlineComponentProvider.persistence.setDatabaseDeletedListener(function() {
                  return client.terminate();
                });
                client.offlineComponents = offlineComponentProvider;
                return [2];
            }
          });
        });
      }
      function setOnlineComponentProvider(client, onlineComponentProvider) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var offlineComponentProvider, configuration;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                client.asyncQueue.verifyOperationInProgress();
                return [4, ensureOfflineComponents(client)];
              case 1:
                offlineComponentProvider = _d.sent();
                logDebug(LOG_TAG$e, "Initializing OnlineComponentProvider");
                return [4, client.getConfiguration()];
              case 2:
                configuration = _d.sent();
                return [4, onlineComponentProvider.initialize(offlineComponentProvider, configuration)];
              case 3:
                _d.sent();
                client.setCredentialChangeListener(function(user) {
                  return client.asyncQueue.enqueueRetryable(function() {
                    return remoteStoreHandleCredentialChange(onlineComponentProvider.remoteStore, user);
                  });
                });
                client.onlineComponents = onlineComponentProvider;
                return [2];
            }
          });
        });
      }
      function ensureOfflineComponents(client) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                if (!!client.offlineComponents)
                  return [3, 2];
                logDebug(LOG_TAG$e, "Using default OfflineComponentProvider");
                return [4, setOfflineComponentProvider(client, new MemoryOfflineComponentProvider())];
              case 1:
                _d.sent();
                _d.label = 2;
              case 2:
                return [2, client.offlineComponents];
            }
          });
        });
      }
      function ensureOnlineComponents(client) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                if (!!client.onlineComponents)
                  return [3, 2];
                logDebug(LOG_TAG$e, "Using default OnlineComponentProvider");
                return [4, setOnlineComponentProvider(client, new OnlineComponentProvider())];
              case 1:
                _d.sent();
                _d.label = 2;
              case 2:
                return [2, client.onlineComponents];
            }
          });
        });
      }
      function getPersistence(client) {
        return ensureOfflineComponents(client).then(function(c) {
          return c.persistence;
        });
      }
      function getLocalStore(client) {
        return ensureOfflineComponents(client).then(function(c) {
          return c.localStore;
        });
      }
      function getRemoteStore(client) {
        return ensureOnlineComponents(client).then(function(c) {
          return c.remoteStore;
        });
      }
      function getSyncEngine(client) {
        return ensureOnlineComponents(client).then(function(c) {
          return c.syncEngine;
        });
      }
      function getDatastore(client) {
        return ensureOnlineComponents(client).then(function(c) {
          return c.datastore;
        });
      }
      function getEventManager(client) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var onlineComponentProvider, eventManager;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                return [4, ensureOnlineComponents(client)];
              case 1:
                onlineComponentProvider = _d.sent();
                eventManager = onlineComponentProvider.eventManager;
                eventManager.onListen = syncEngineListen.bind(null, onlineComponentProvider.syncEngine);
                eventManager.onUnlisten = syncEngineUnlisten.bind(null, onlineComponentProvider.syncEngine);
                return [2, eventManager];
            }
          });
        });
      }
      function firestoreClientEnableNetwork(client) {
        var _this = this;
        return client.asyncQueue.enqueue(function() {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            var persistence, remoteStore;
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  return [4, getPersistence(client)];
                case 1:
                  persistence = _d.sent();
                  return [4, getRemoteStore(client)];
                case 2:
                  remoteStore = _d.sent();
                  persistence.setNetworkEnabled(true);
                  return [2, remoteStoreEnableNetwork(remoteStore)];
              }
            });
          });
        });
      }
      function firestoreClientDisableNetwork(client) {
        var _this = this;
        return client.asyncQueue.enqueue(function() {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            var persistence, remoteStore;
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  return [4, getPersistence(client)];
                case 1:
                  persistence = _d.sent();
                  return [4, getRemoteStore(client)];
                case 2:
                  remoteStore = _d.sent();
                  persistence.setNetworkEnabled(false);
                  return [2, remoteStoreDisableNetwork(remoteStore)];
              }
            });
          });
        });
      }
      function firestoreClientWaitForPendingWrites(client) {
        var _this = this;
        var deferred = new Deferred();
        client.asyncQueue.enqueueAndForget(function() {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            var syncEngine;
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  return [4, getSyncEngine(client)];
                case 1:
                  syncEngine = _d.sent();
                  return [2, syncEngineRegisterPendingWritesCallback(syncEngine, deferred)];
              }
            });
          });
        });
        return deferred.promise;
      }
      function firestoreClientListen(client, query3, options2, observer) {
        var _this = this;
        var wrappedObserver = new AsyncObserver(observer);
        var listener = new QueryListener(query3, wrappedObserver, options2);
        client.asyncQueue.enqueueAndForget(function() {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            var eventManager;
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  return [4, getEventManager(client)];
                case 1:
                  eventManager = _d.sent();
                  return [2, eventManagerListen(eventManager, listener)];
              }
            });
          });
        });
        return function() {
          wrappedObserver.mute();
          client.asyncQueue.enqueueAndForget(function() {
            return tslib.__awaiter(_this, void 0, void 0, function() {
              var eventManager;
              return tslib.__generator(this, function(_d) {
                switch (_d.label) {
                  case 0:
                    return [4, getEventManager(client)];
                  case 1:
                    eventManager = _d.sent();
                    return [2, eventManagerUnlisten(eventManager, listener)];
                }
              });
            });
          });
        };
      }
      function firestoreClientGetDocumentFromLocalCache(client, docKey) {
        var _this = this;
        var deferred = new Deferred();
        client.asyncQueue.enqueueAndForget(function() {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            var localStore;
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  return [4, getLocalStore(client)];
                case 1:
                  localStore = _d.sent();
                  return [2, readDocumentFromCache(localStore, docKey, deferred)];
              }
            });
          });
        });
        return deferred.promise;
      }
      function firestoreClientGetDocumentViaSnapshotListener(client, key, options2) {
        var _this = this;
        if (options2 === void 0) {
          options2 = {};
        }
        var deferred = new Deferred();
        client.asyncQueue.enqueueAndForget(function() {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            var eventManager;
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  return [4, getEventManager(client)];
                case 1:
                  eventManager = _d.sent();
                  return [2, readDocumentViaSnapshotListener(eventManager, client.asyncQueue, key, options2, deferred)];
              }
            });
          });
        });
        return deferred.promise;
      }
      function firestoreClientGetDocumentsFromLocalCache(client, query3) {
        var _this = this;
        var deferred = new Deferred();
        client.asyncQueue.enqueueAndForget(function() {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            var localStore;
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  return [4, getLocalStore(client)];
                case 1:
                  localStore = _d.sent();
                  return [2, executeQueryFromCache(localStore, query3, deferred)];
              }
            });
          });
        });
        return deferred.promise;
      }
      function firestoreClientGetDocumentsViaSnapshotListener(client, query3, options2) {
        var _this = this;
        if (options2 === void 0) {
          options2 = {};
        }
        var deferred = new Deferred();
        client.asyncQueue.enqueueAndForget(function() {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            var eventManager;
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  return [4, getEventManager(client)];
                case 1:
                  eventManager = _d.sent();
                  return [2, executeQueryViaSnapshotListener(eventManager, client.asyncQueue, query3, options2, deferred)];
              }
            });
          });
        });
        return deferred.promise;
      }
      function firestoreClientWrite(client, mutations) {
        var _this = this;
        var deferred = new Deferred();
        client.asyncQueue.enqueueAndForget(function() {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            var syncEngine;
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  return [4, getSyncEngine(client)];
                case 1:
                  syncEngine = _d.sent();
                  return [2, syncEngineWrite(syncEngine, mutations, deferred)];
              }
            });
          });
        });
        return deferred.promise;
      }
      function firestoreClientAddSnapshotsInSyncListener(client, observer) {
        var _this = this;
        var wrappedObserver = new AsyncObserver(observer);
        client.asyncQueue.enqueueAndForget(function() {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            var eventManager;
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  return [4, getEventManager(client)];
                case 1:
                  eventManager = _d.sent();
                  return [2, addSnapshotsInSyncListener(eventManager, wrappedObserver)];
              }
            });
          });
        });
        return function() {
          wrappedObserver.mute();
          client.asyncQueue.enqueueAndForget(function() {
            return tslib.__awaiter(_this, void 0, void 0, function() {
              var eventManager;
              return tslib.__generator(this, function(_d) {
                switch (_d.label) {
                  case 0:
                    return [4, getEventManager(client)];
                  case 1:
                    eventManager = _d.sent();
                    return [2, removeSnapshotsInSyncListener(eventManager, wrappedObserver)];
                }
              });
            });
          });
        };
      }
      function firestoreClientTransaction(client, updateFunction) {
        var _this = this;
        var deferred = new Deferred();
        client.asyncQueue.enqueueAndForget(function() {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            var datastore;
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  return [4, getDatastore(client)];
                case 1:
                  datastore = _d.sent();
                  new TransactionRunner(client.asyncQueue, datastore, updateFunction, deferred).run();
                  return [2];
              }
            });
          });
        });
        return deferred.promise;
      }
      function readDocumentFromCache(localStore, docKey, result) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var document_4, e_12, firestoreError;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                return [4, localStoreReadDocument(localStore, docKey)];
              case 1:
                document_4 = _d.sent();
                if (document_4.isFoundDocument()) {
                  result.resolve(document_4);
                } else if (document_4.isNoDocument()) {
                  result.resolve(null);
                } else {
                  result.reject(new FirestoreError(Code.UNAVAILABLE, "Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)"));
                }
                return [3, 3];
              case 2:
                e_12 = _d.sent();
                firestoreError = wrapInUserErrorIfRecoverable(e_12, "Failed to get document '" + docKey + " from cache");
                result.reject(firestoreError);
                return [3, 3];
              case 3:
                return [2];
            }
          });
        });
      }
      function readDocumentViaSnapshotListener(eventManager, asyncQueue, key, options2, result) {
        var wrappedObserver = new AsyncObserver({
          next: function(snap) {
            asyncQueue.enqueueAndForget(function() {
              return eventManagerUnlisten(eventManager, listener);
            });
            var exists = snap.docs.has(key);
            if (!exists && snap.fromCache) {
              result.reject(new FirestoreError(Code.UNAVAILABLE, "Failed to get document because the client is offline."));
            } else if (exists && snap.fromCache && options2 && options2.source === "server") {
              result.reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)'));
            } else {
              result.resolve(snap);
            }
          },
          error: function(e) {
            return result.reject(e);
          }
        });
        var listener = new QueryListener(newQueryForPath(key.path), wrappedObserver, {
          includeMetadataChanges: true,
          waitForSyncWhenOnline: true
        });
        return eventManagerListen(eventManager, listener);
      }
      function executeQueryFromCache(localStore, query3, result) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var queryResult, view, viewDocChanges, viewChange, e_13, firestoreError;
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                return [4, localStoreExecuteQuery(localStore, query3, true)];
              case 1:
                queryResult = _d.sent();
                view = new View(query3, queryResult.remoteKeys);
                viewDocChanges = view.computeDocChanges(queryResult.documents);
                viewChange = view.applyChanges(viewDocChanges, false);
                result.resolve(viewChange.snapshot);
                return [3, 3];
              case 2:
                e_13 = _d.sent();
                firestoreError = wrapInUserErrorIfRecoverable(e_13, "Failed to execute query '" + query3 + " against cache");
                result.reject(firestoreError);
                return [3, 3];
              case 3:
                return [2];
            }
          });
        });
      }
      function executeQueryViaSnapshotListener(eventManager, asyncQueue, query3, options2, result) {
        var wrappedObserver = new AsyncObserver({
          next: function(snapshot) {
            asyncQueue.enqueueAndForget(function() {
              return eventManagerUnlisten(eventManager, listener);
            });
            if (snapshot.fromCache && options2.source === "server") {
              result.reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)'));
            } else {
              result.resolve(snapshot);
            }
          },
          error: function(e) {
            return result.reject(e);
          }
        });
        var listener = new QueryListener(query3, wrappedObserver, {
          includeMetadataChanges: true,
          waitForSyncWhenOnline: true
        });
        return eventManagerListen(eventManager, listener);
      }
      function firestoreClientLoadBundle(client, databaseId, data, resultTask) {
        var _this = this;
        var reader = createBundleReader(data, newSerializer(databaseId));
        client.asyncQueue.enqueueAndForget(function() {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            var _d;
            return tslib.__generator(this, function(_e) {
              switch (_e.label) {
                case 0:
                  _d = syncEngineLoadBundle;
                  return [4, getSyncEngine(client)];
                case 1:
                  _d.apply(void 0, [_e.sent(), reader, resultTask]);
                  return [2];
              }
            });
          });
        });
      }
      function firestoreClientGetNamedQuery(client, queryName) {
        var _this = this;
        return client.asyncQueue.enqueue(function() {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            var _d;
            return tslib.__generator(this, function(_e) {
              switch (_e.label) {
                case 0:
                  _d = localStoreGetNamedQuery;
                  return [4, getLocalStore(client)];
                case 1:
                  return [2, _d.apply(void 0, [_e.sent(), queryName])];
              }
            });
          });
        });
      }
      function createBundleReader(data, serializer) {
        var content;
        if (typeof data === "string") {
          content = newTextEncoder().encode(data);
        } else {
          content = data;
        }
        return newBundleReader(toByteStreamReader(content), serializer);
      }
      var DatabaseInfo = function() {
        function DatabaseInfo2(databaseId, appId, persistenceKey, host, ssl, forceLongPolling, autoDetectLongPolling) {
          this.databaseId = databaseId;
          this.appId = appId;
          this.persistenceKey = persistenceKey;
          this.host = host;
          this.ssl = ssl;
          this.forceLongPolling = forceLongPolling;
          this.autoDetectLongPolling = autoDetectLongPolling;
        }
        return DatabaseInfo2;
      }();
      var DEFAULT_DATABASE_NAME = "(default)";
      var DatabaseId = function() {
        function DatabaseId2(projectId, database) {
          this.projectId = projectId;
          this.database = database ? database : DEFAULT_DATABASE_NAME;
        }
        Object.defineProperty(DatabaseId2.prototype, "isDefaultDatabase", {
          get: function() {
            return this.database === DEFAULT_DATABASE_NAME;
          },
          enumerable: false,
          configurable: true
        });
        DatabaseId2.prototype.isEqual = function(other) {
          return other instanceof DatabaseId2 && other.projectId === this.projectId && other.database === this.database;
        };
        return DatabaseId2;
      }();
      var LOG_TAG$f = "ComponentProvider";
      var datastoreInstances = new Map();
      function removeComponents(firestore) {
        var datastore = datastoreInstances.get(firestore);
        if (datastore) {
          logDebug(LOG_TAG$f, "Removing Datastore");
          datastoreInstances.delete(firestore);
          datastore.terminate();
        }
      }
      function makeDatabaseInfo(databaseId, appId, persistenceKey, settings) {
        return new DatabaseInfo(databaseId, appId, persistenceKey, settings.host, settings.ssl, settings.experimentalForceLongPolling, settings.experimentalAutoDetectLongPolling);
      }
      var OAuthToken = function() {
        function OAuthToken2(value, user) {
          this.user = user;
          this.type = "OAuth";
          this.authHeaders = {};
          this.authHeaders["Authorization"] = "Bearer " + value;
        }
        return OAuthToken2;
      }();
      var EmptyCredentialsProvider = function() {
        function EmptyCredentialsProvider2() {
          this.changeListener = null;
        }
        EmptyCredentialsProvider2.prototype.getToken = function() {
          return Promise.resolve(null);
        };
        EmptyCredentialsProvider2.prototype.invalidateToken = function() {
        };
        EmptyCredentialsProvider2.prototype.setChangeListener = function(changeListener) {
          this.changeListener = changeListener;
          changeListener(User.UNAUTHENTICATED);
        };
        EmptyCredentialsProvider2.prototype.removeChangeListener = function() {
          this.changeListener = null;
        };
        return EmptyCredentialsProvider2;
      }();
      var FirebaseCredentialsProvider = function() {
        function FirebaseCredentialsProvider2(authProvider) {
          var _this = this;
          this.tokenListener = null;
          this.currentUser = User.UNAUTHENTICATED;
          this.receivedInitialUser = false;
          this.tokenCounter = 0;
          this.changeListener = null;
          this.forceRefresh = false;
          this.tokenListener = function() {
            _this.tokenCounter++;
            _this.currentUser = _this.getUser();
            _this.receivedInitialUser = true;
            if (_this.changeListener) {
              _this.changeListener(_this.currentUser);
            }
          };
          this.tokenCounter = 0;
          this.auth = authProvider.getImmediate({optional: true});
          if (this.auth) {
            this.auth.addAuthTokenListener(this.tokenListener);
          } else {
            this.tokenListener(null);
            authProvider.get().then(function(auth) {
              _this.auth = auth;
              if (_this.tokenListener) {
                _this.auth.addAuthTokenListener(_this.tokenListener);
              }
            }, function() {
            });
          }
        }
        FirebaseCredentialsProvider2.prototype.getToken = function() {
          var _this = this;
          var initialTokenCounter = this.tokenCounter;
          var forceRefresh = this.forceRefresh;
          this.forceRefresh = false;
          if (!this.auth) {
            return Promise.resolve(null);
          }
          return this.auth.getToken(forceRefresh).then(function(tokenData) {
            if (_this.tokenCounter !== initialTokenCounter) {
              logDebug("FirebaseCredentialsProvider", "getToken aborted due to token change.");
              return _this.getToken();
            } else {
              if (tokenData) {
                hardAssert(typeof tokenData.accessToken === "string");
                return new OAuthToken(tokenData.accessToken, _this.currentUser);
              } else {
                return null;
              }
            }
          });
        };
        FirebaseCredentialsProvider2.prototype.invalidateToken = function() {
          this.forceRefresh = true;
        };
        FirebaseCredentialsProvider2.prototype.setChangeListener = function(changeListener) {
          this.changeListener = changeListener;
          if (this.receivedInitialUser) {
            changeListener(this.currentUser);
          }
        };
        FirebaseCredentialsProvider2.prototype.removeChangeListener = function() {
          if (this.auth) {
            this.auth.removeAuthTokenListener(this.tokenListener);
          }
          this.tokenListener = null;
          this.changeListener = null;
        };
        FirebaseCredentialsProvider2.prototype.getUser = function() {
          var currentUid = this.auth && this.auth.getUid();
          hardAssert(currentUid === null || typeof currentUid === "string");
          return new User(currentUid);
        };
        return FirebaseCredentialsProvider2;
      }();
      var FirstPartyToken = function() {
        function FirstPartyToken2(gapi, sessionIndex, iamToken) {
          this.gapi = gapi;
          this.sessionIndex = sessionIndex;
          this.iamToken = iamToken;
          this.type = "FirstParty";
          this.user = User.FIRST_PARTY;
        }
        Object.defineProperty(FirstPartyToken2.prototype, "authHeaders", {
          get: function() {
            var headers = {
              "X-Goog-AuthUser": this.sessionIndex
            };
            var authHeader = this.gapi["auth"]["getAuthHeaderValueForFirstParty"]([]);
            if (authHeader) {
              headers["Authorization"] = authHeader;
            }
            if (this.iamToken) {
              headers["X-Goog-Iam-Authorization-Token"] = this.iamToken;
            }
            return headers;
          },
          enumerable: false,
          configurable: true
        });
        return FirstPartyToken2;
      }();
      var FirstPartyCredentialsProvider = function() {
        function FirstPartyCredentialsProvider2(gapi, sessionIndex, iamToken) {
          this.gapi = gapi;
          this.sessionIndex = sessionIndex;
          this.iamToken = iamToken;
        }
        FirstPartyCredentialsProvider2.prototype.getToken = function() {
          return Promise.resolve(new FirstPartyToken(this.gapi, this.sessionIndex, this.iamToken));
        };
        FirstPartyCredentialsProvider2.prototype.setChangeListener = function(changeListener) {
          changeListener(User.FIRST_PARTY);
        };
        FirstPartyCredentialsProvider2.prototype.removeChangeListener = function() {
        };
        FirstPartyCredentialsProvider2.prototype.invalidateToken = function() {
        };
        return FirstPartyCredentialsProvider2;
      }();
      function makeCredentialsProvider(credentials) {
        if (!credentials) {
          return new EmptyCredentialsProvider();
        }
        switch (credentials["type"]) {
          case "gapi":
            var client = credentials["client"];
            hardAssert(!!(typeof client === "object" && client !== null && client["auth"] && client["auth"]["getAuthHeaderValueForFirstParty"]));
            return new FirstPartyCredentialsProvider(client, credentials["sessionIndex"] || "0", credentials["iamToken"] || null);
          case "provider":
            return credentials["client"];
          default:
            throw new FirestoreError(Code.INVALID_ARGUMENT, "makeCredentialsProvider failed due to invalid credential type");
        }
      }
      var DEFAULT_HOST = "firestore.googleapis.com";
      var DEFAULT_SSL = true;
      var FirestoreSettings = function() {
        function FirestoreSettings2(settings) {
          var _a;
          if (settings.host === void 0) {
            if (settings.ssl !== void 0) {
              throw new FirestoreError(Code.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
            }
            this.host = DEFAULT_HOST;
            this.ssl = DEFAULT_SSL;
          } else {
            this.host = settings.host;
            this.ssl = (_a = settings.ssl) !== null && _a !== void 0 ? _a : DEFAULT_SSL;
          }
          this.credentials = settings.credentials;
          this.ignoreUndefinedProperties = !!settings.ignoreUndefinedProperties;
          if (settings.cacheSizeBytes === void 0) {
            this.cacheSizeBytes = LRU_DEFAULT_CACHE_SIZE_BYTES;
          } else {
            if (settings.cacheSizeBytes !== LRU_COLLECTION_DISABLED && settings.cacheSizeBytes < LRU_MINIMUM_CACHE_SIZE_BYTES) {
              throw new FirestoreError(Code.INVALID_ARGUMENT, "cacheSizeBytes must be at least " + LRU_MINIMUM_CACHE_SIZE_BYTES);
            } else {
              this.cacheSizeBytes = settings.cacheSizeBytes;
            }
          }
          this.experimentalForceLongPolling = !!settings.experimentalForceLongPolling;
          this.experimentalAutoDetectLongPolling = !!settings.experimentalAutoDetectLongPolling;
          validateIsNotUsedTogether("experimentalForceLongPolling", settings.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", settings.experimentalAutoDetectLongPolling);
        }
        FirestoreSettings2.prototype.isEqual = function(other) {
          return this.host === other.host && this.ssl === other.ssl && this.credentials === other.credentials && this.cacheSizeBytes === other.cacheSizeBytes && this.experimentalForceLongPolling === other.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === other.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === other.ignoreUndefinedProperties;
        };
        return FirestoreSettings2;
      }();
      var FirebaseFirestore = function() {
        function FirebaseFirestore2(databaseIdOrApp, authProvider) {
          this._persistenceKey = "(lite)";
          this._settings = new FirestoreSettings({});
          this._settingsFrozen = false;
          if (databaseIdOrApp instanceof DatabaseId) {
            this._databaseId = databaseIdOrApp;
            this._credentials = new EmptyCredentialsProvider();
          } else {
            this._app = databaseIdOrApp;
            this._databaseId = databaseIdFromApp(databaseIdOrApp);
            this._credentials = new FirebaseCredentialsProvider(authProvider);
          }
        }
        Object.defineProperty(FirebaseFirestore2.prototype, "app", {
          get: function() {
            if (!this._app) {
              throw new FirestoreError(Code.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
            }
            return this._app;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(FirebaseFirestore2.prototype, "_initialized", {
          get: function() {
            return this._settingsFrozen;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(FirebaseFirestore2.prototype, "_terminated", {
          get: function() {
            return this._terminateTask !== void 0;
          },
          enumerable: false,
          configurable: true
        });
        FirebaseFirestore2.prototype._setSettings = function(settings) {
          if (this._settingsFrozen) {
            throw new FirestoreError(Code.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
          }
          this._settings = new FirestoreSettings(settings);
          if (settings.credentials !== void 0) {
            this._credentials = makeCredentialsProvider(settings.credentials);
          }
        };
        FirebaseFirestore2.prototype._getSettings = function() {
          return this._settings;
        };
        FirebaseFirestore2.prototype._freezeSettings = function() {
          this._settingsFrozen = true;
          return this._settings;
        };
        FirebaseFirestore2.prototype._delete = function() {
          if (!this._terminateTask) {
            this._terminateTask = this._terminate();
          }
          return this._terminateTask;
        };
        FirebaseFirestore2.prototype.toJSON = function() {
          return {
            app: this._app,
            databaseId: this._databaseId,
            settings: this._settings
          };
        };
        FirebaseFirestore2.prototype._terminate = function() {
          removeComponents(this);
          return Promise.resolve();
        };
        return FirebaseFirestore2;
      }();
      function databaseIdFromApp(app2) {
        if (!Object.prototype.hasOwnProperty.apply(app2.options, ["projectId"])) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
        }
        return new DatabaseId(app2.options.projectId);
      }
      function useFirestoreEmulator(firestore, host, port) {
        firestore = cast(firestore, FirebaseFirestore);
        var settings = firestore._getSettings();
        if (settings.host !== DEFAULT_HOST && settings.host !== host) {
          logWarn("Host has been set in both settings() and useEmulator(), emulator host will be used");
        }
        firestore._setSettings(Object.assign(Object.assign({}, settings), {host: host + ":" + port, ssl: false}));
      }
      var DocumentReference = function() {
        function DocumentReference2(firestore, _converter, _key) {
          this._converter = _converter;
          this._key = _key;
          this.type = "document";
          this.firestore = firestore;
        }
        Object.defineProperty(DocumentReference2.prototype, "_path", {
          get: function() {
            return this._key.path;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(DocumentReference2.prototype, "id", {
          get: function() {
            return this._key.path.lastSegment();
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(DocumentReference2.prototype, "path", {
          get: function() {
            return this._key.path.canonicalString();
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(DocumentReference2.prototype, "parent", {
          get: function() {
            return new CollectionReference(this.firestore, this._converter, this._key.path.popLast());
          },
          enumerable: false,
          configurable: true
        });
        DocumentReference2.prototype.withConverter = function(converter) {
          return new DocumentReference2(this.firestore, converter, this._key);
        };
        return DocumentReference2;
      }();
      var Query = function() {
        function Query2(firestore, _converter, _query) {
          this._converter = _converter;
          this._query = _query;
          this.type = "query";
          this.firestore = firestore;
        }
        Query2.prototype.withConverter = function(converter) {
          return new Query2(this.firestore, converter, this._query);
        };
        return Query2;
      }();
      var CollectionReference = function(_super) {
        tslib.__extends(CollectionReference2, _super);
        function CollectionReference2(firestore, converter, _path) {
          var _this = _super.call(this, firestore, converter, newQueryForPath(_path)) || this;
          _this._path = _path;
          _this.type = "collection";
          return _this;
        }
        Object.defineProperty(CollectionReference2.prototype, "id", {
          get: function() {
            return this._query.path.lastSegment();
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(CollectionReference2.prototype, "path", {
          get: function() {
            return this._query.path.canonicalString();
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(CollectionReference2.prototype, "parent", {
          get: function() {
            var parentPath = this._path.popLast();
            if (parentPath.isEmpty()) {
              return null;
            } else {
              return new DocumentReference(this.firestore, null, new DocumentKey(parentPath));
            }
          },
          enumerable: false,
          configurable: true
        });
        CollectionReference2.prototype.withConverter = function(converter) {
          return new CollectionReference2(this.firestore, converter, this._path);
        };
        return CollectionReference2;
      }(Query);
      function collection2(parent, path2) {
        var pathSegments = [];
        for (var _i = 2; _i < arguments.length; _i++) {
          pathSegments[_i - 2] = arguments[_i];
        }
        parent = util.getModularInstance(parent);
        validateNonEmptyArgument("collection", "path", path2);
        if (parent instanceof FirebaseFirestore) {
          var absolutePath = ResourcePath.fromString.apply(ResourcePath, tslib.__spreadArray([path2], pathSegments));
          validateCollectionPath(absolutePath);
          return new CollectionReference(parent, null, absolutePath);
        } else {
          if (!(parent instanceof DocumentReference) && !(parent instanceof CollectionReference)) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
          }
          var absolutePath = ResourcePath.fromString.apply(ResourcePath, tslib.__spreadArray([parent.path], pathSegments)).child(ResourcePath.fromString(path2));
          validateCollectionPath(absolutePath);
          return new CollectionReference(parent.firestore, null, absolutePath);
        }
      }
      function collectionGroup(firestore, collectionId) {
        firestore = cast(firestore, FirebaseFirestore);
        validateNonEmptyArgument("collectionGroup", "collection id", collectionId);
        if (collectionId.indexOf("/") >= 0) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid collection ID '" + collectionId + "' passed to function collectionGroup(). Collection IDs must not contain '/'.");
        }
        return new Query(firestore, null, newQueryForCollectionGroup(collectionId));
      }
      function doc(parent, path2) {
        var pathSegments = [];
        for (var _i = 2; _i < arguments.length; _i++) {
          pathSegments[_i - 2] = arguments[_i];
        }
        parent = util.getModularInstance(parent);
        if (arguments.length === 1) {
          path2 = AutoId.newId();
        }
        validateNonEmptyArgument("doc", "path", path2);
        if (parent instanceof FirebaseFirestore) {
          var absolutePath = ResourcePath.fromString.apply(ResourcePath, tslib.__spreadArray([path2], pathSegments));
          validateDocumentPath(absolutePath);
          return new DocumentReference(parent, null, new DocumentKey(absolutePath));
        } else {
          if (!(parent instanceof DocumentReference) && !(parent instanceof CollectionReference)) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
          }
          var absolutePath = parent._path.child(ResourcePath.fromString.apply(ResourcePath, tslib.__spreadArray([path2], pathSegments)));
          validateDocumentPath(absolutePath);
          return new DocumentReference(parent.firestore, parent instanceof CollectionReference ? parent._converter : null, new DocumentKey(absolutePath));
        }
      }
      function refEqual(left, right) {
        left = util.getModularInstance(left);
        right = util.getModularInstance(right);
        if ((left instanceof DocumentReference || left instanceof CollectionReference) && (right instanceof DocumentReference || right instanceof CollectionReference)) {
          return left.firestore === right.firestore && left.path === right.path && left._converter === right._converter;
        }
        return false;
      }
      function queryEqual(left, right) {
        left = util.getModularInstance(left);
        right = util.getModularInstance(right);
        if (left instanceof Query && right instanceof Query) {
          return left.firestore === right.firestore && queryEquals(left._query, right._query) && left._converter === right._converter;
        }
        return false;
      }
      var LOG_TAG$g = "AsyncQueue";
      var AsyncQueueImpl = function() {
        function AsyncQueueImpl2() {
          var _this = this;
          this.tail = Promise.resolve();
          this.retryableOps = [];
          this._isShuttingDown = false;
          this.delayedOperations = [];
          this.failure = null;
          this.operationInProgress = false;
          this.timerIdsToSkip = [];
          this.backoff = new ExponentialBackoff(this, "async_queue_retry");
          this.visibilityHandler = function() {
            _this.backoff.skipBackoff();
          };
        }
        Object.defineProperty(AsyncQueueImpl2.prototype, "isShuttingDown", {
          get: function() {
            return this._isShuttingDown;
          },
          enumerable: false,
          configurable: true
        });
        AsyncQueueImpl2.prototype.enqueueAndForget = function(op) {
          this.enqueue(op);
        };
        AsyncQueueImpl2.prototype.enqueueAndForgetEvenWhileRestricted = function(op) {
          this.verifyNotFailed();
          this.enqueueInternal(op);
        };
        AsyncQueueImpl2.prototype.enterRestrictedMode = function() {
          if (!this._isShuttingDown) {
            this._isShuttingDown = true;
          }
        };
        AsyncQueueImpl2.prototype.enqueue = function(op) {
          this.verifyNotFailed();
          if (this._isShuttingDown) {
            return new Promise(function(resolve2) {
            });
          }
          return this.enqueueInternal(op);
        };
        AsyncQueueImpl2.prototype.enqueueRetryable = function(op) {
          var _this = this;
          this.enqueueAndForget(function() {
            _this.retryableOps.push(op);
            return _this.retryNextOp();
          });
        };
        AsyncQueueImpl2.prototype.retryNextOp = function() {
          return tslib.__awaiter(this, void 0, void 0, function() {
            var e_14;
            var _this = this;
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  if (this.retryableOps.length === 0) {
                    return [2];
                  }
                  _d.label = 1;
                case 1:
                  _d.trys.push([1, 3, , 4]);
                  return [4, this.retryableOps[0]()];
                case 2:
                  _d.sent();
                  this.retryableOps.shift();
                  this.backoff.reset();
                  return [3, 4];
                case 3:
                  e_14 = _d.sent();
                  if (isIndexedDbTransactionError(e_14)) {
                    logDebug(LOG_TAG$g, "Operation failed with retryable error: " + e_14);
                  } else {
                    throw e_14;
                  }
                  return [3, 4];
                case 4:
                  if (this.retryableOps.length > 0) {
                    this.backoff.backoffAndRun(function() {
                      return _this.retryNextOp();
                    });
                  }
                  return [2];
              }
            });
          });
        };
        AsyncQueueImpl2.prototype.enqueueInternal = function(op) {
          var _this = this;
          var newTail = this.tail.then(function() {
            _this.operationInProgress = true;
            return op().catch(function(error3) {
              _this.failure = error3;
              _this.operationInProgress = false;
              var message = getMessageOrStack(error3);
              logError("INTERNAL UNHANDLED ERROR: ", message);
              throw error3;
            }).then(function(result) {
              _this.operationInProgress = false;
              return result;
            });
          });
          this.tail = newTail;
          return newTail;
        };
        AsyncQueueImpl2.prototype.enqueueAfterDelay = function(timerId, delayMs, op) {
          var _this = this;
          this.verifyNotFailed();
          if (this.timerIdsToSkip.indexOf(timerId) > -1) {
            delayMs = 0;
          }
          var delayedOp = DelayedOperation.createAndSchedule(this, timerId, delayMs, op, function(removedOp) {
            return _this.removeDelayedOperation(removedOp);
          });
          this.delayedOperations.push(delayedOp);
          return delayedOp;
        };
        AsyncQueueImpl2.prototype.verifyNotFailed = function() {
          if (this.failure) {
            fail();
          }
        };
        AsyncQueueImpl2.prototype.verifyOperationInProgress = function() {
        };
        AsyncQueueImpl2.prototype.drain = function() {
          return tslib.__awaiter(this, void 0, void 0, function() {
            var currentTail;
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  currentTail = this.tail;
                  return [4, currentTail];
                case 1:
                  _d.sent();
                  _d.label = 2;
                case 2:
                  if (currentTail !== this.tail)
                    return [3, 0];
                  _d.label = 3;
                case 3:
                  return [2];
              }
            });
          });
        };
        AsyncQueueImpl2.prototype.containsDelayedOperation = function(timerId) {
          for (var _i = 0, _d = this.delayedOperations; _i < _d.length; _i++) {
            var op = _d[_i];
            if (op.timerId === timerId) {
              return true;
            }
          }
          return false;
        };
        AsyncQueueImpl2.prototype.runAllDelayedOperationsUntil = function(lastTimerId) {
          var _this = this;
          return this.drain().then(function() {
            _this.delayedOperations.sort(function(a, b) {
              return a.targetTimeMs - b.targetTimeMs;
            });
            for (var _i = 0, _d = _this.delayedOperations; _i < _d.length; _i++) {
              var op = _d[_i];
              op.skipDelay();
              if (lastTimerId !== "all" && op.timerId === lastTimerId) {
                break;
              }
            }
            return _this.drain();
          });
        };
        AsyncQueueImpl2.prototype.skipDelaysForTimerId = function(timerId) {
          this.timerIdsToSkip.push(timerId);
        };
        AsyncQueueImpl2.prototype.removeDelayedOperation = function(op) {
          var index2 = this.delayedOperations.indexOf(op);
          this.delayedOperations.splice(index2, 1);
        };
        return AsyncQueueImpl2;
      }();
      function newAsyncQueue() {
        return new AsyncQueueImpl();
      }
      function getMessageOrStack(error3) {
        var message = error3.message || "";
        if (error3.stack) {
          if (error3.stack.includes(error3.message)) {
            message = error3.stack;
          } else {
            message = error3.message + "\n" + error3.stack;
          }
        }
        return message;
      }
      var LoadBundleTask = function() {
        function LoadBundleTask2() {
          this._progressObserver = {};
          this._taskCompletionResolver = new Deferred();
          this._lastProgress = {
            taskState: "Running",
            totalBytes: 0,
            totalDocuments: 0,
            bytesLoaded: 0,
            documentsLoaded: 0
          };
        }
        LoadBundleTask2.prototype.onProgress = function(next, error3, complete) {
          this._progressObserver = {
            next,
            error: error3,
            complete
          };
        };
        LoadBundleTask2.prototype.catch = function(onRejected) {
          return this._taskCompletionResolver.promise.catch(onRejected);
        };
        LoadBundleTask2.prototype.then = function(onFulfilled, onRejected) {
          return this._taskCompletionResolver.promise.then(onFulfilled, onRejected);
        };
        LoadBundleTask2.prototype._completeWith = function(progress) {
          this._updateProgress(progress);
          if (this._progressObserver.complete) {
            this._progressObserver.complete();
          }
          this._taskCompletionResolver.resolve(progress);
        };
        LoadBundleTask2.prototype._failWith = function(error3) {
          this._lastProgress.taskState = "Error";
          if (this._progressObserver.next) {
            this._progressObserver.next(this._lastProgress);
          }
          if (this._progressObserver.error) {
            this._progressObserver.error(error3);
          }
          this._taskCompletionResolver.reject(error3);
        };
        LoadBundleTask2.prototype._updateProgress = function(progress) {
          this._lastProgress = progress;
          if (this._progressObserver.next) {
            this._progressObserver.next(progress);
          }
        };
        return LoadBundleTask2;
      }();
      var DOM_EXCEPTION_INVALID_STATE = 11;
      var DOM_EXCEPTION_ABORTED = 20;
      var DOM_EXCEPTION_QUOTA_EXCEEDED = 22;
      var CACHE_SIZE_UNLIMITED = LRU_COLLECTION_DISABLED;
      var FirebaseFirestore$1 = function(_super) {
        tslib.__extends(FirebaseFirestore$12, _super);
        function FirebaseFirestore$12(databaseIdOrApp, authProvider) {
          var _this = _super.call(this, databaseIdOrApp, authProvider) || this;
          _this._queue = newAsyncQueue();
          _this._persistenceKey = "name" in databaseIdOrApp ? databaseIdOrApp.name : "[DEFAULT]";
          return _this;
        }
        FirebaseFirestore$12.prototype._terminate = function() {
          if (!this._firestoreClient) {
            configureFirestore(this);
          }
          return this._firestoreClient.terminate();
        };
        return FirebaseFirestore$12;
      }(FirebaseFirestore);
      function initializeFirestore(app$1, settings) {
        var provider = app._getProvider(app$1, "firestore-exp");
        if (provider.isInitialized()) {
          throw new FirestoreError(Code.FAILED_PRECONDITION, "Firestore can only be initialized once per app.");
        }
        if (settings.cacheSizeBytes !== void 0 && settings.cacheSizeBytes !== CACHE_SIZE_UNLIMITED && settings.cacheSizeBytes < LRU_MINIMUM_CACHE_SIZE_BYTES) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "cacheSizeBytes must be at least " + LRU_MINIMUM_CACHE_SIZE_BYTES);
        }
        return provider.initialize({options: settings});
      }
      function getFirestore2(app$1) {
        if (app$1 === void 0) {
          app$1 = app.getApp();
        }
        return app._getProvider(app$1, "firestore-exp").getImmediate();
      }
      function ensureFirestoreConfigured(firestore) {
        if (!firestore._firestoreClient) {
          configureFirestore(firestore);
        }
        firestore._firestoreClient.verifyNotTerminated();
        return firestore._firestoreClient;
      }
      function configureFirestore(firestore) {
        var _a;
        var settings = firestore._freezeSettings();
        var databaseInfo = makeDatabaseInfo(firestore._databaseId, ((_a = firestore._app) === null || _a === void 0 ? void 0 : _a.options.appId) || "", firestore._persistenceKey, settings);
        firestore._firestoreClient = new FirestoreClient(firestore._credentials, firestore._queue, databaseInfo);
      }
      function enableIndexedDbPersistence(firestore, persistenceSettings) {
        firestore = cast(firestore, FirebaseFirestore$1);
        verifyNotInitialized(firestore);
        var client = ensureFirestoreConfigured(firestore);
        var settings = firestore._freezeSettings();
        var onlineComponentProvider = new OnlineComponentProvider();
        var offlineComponentProvider = new IndexedDbOfflineComponentProvider(onlineComponentProvider, settings.cacheSizeBytes, persistenceSettings === null || persistenceSettings === void 0 ? void 0 : persistenceSettings.forceOwnership);
        return setPersistenceProviders(client, onlineComponentProvider, offlineComponentProvider);
      }
      function enableMultiTabIndexedDbPersistence(firestore) {
        firestore = cast(firestore, FirebaseFirestore$1);
        verifyNotInitialized(firestore);
        var client = ensureFirestoreConfigured(firestore);
        var settings = firestore._freezeSettings();
        var onlineComponentProvider = new OnlineComponentProvider();
        var offlineComponentProvider = new MultiTabOfflineComponentProvider(onlineComponentProvider, settings.cacheSizeBytes);
        return setPersistenceProviders(client, onlineComponentProvider, offlineComponentProvider);
      }
      function setPersistenceProviders(client, onlineComponentProvider, offlineComponentProvider) {
        var _this = this;
        var persistenceResult = new Deferred();
        return client.asyncQueue.enqueue(function() {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            var e_15;
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  _d.trys.push([0, 3, , 4]);
                  return [4, setOfflineComponentProvider(client, offlineComponentProvider)];
                case 1:
                  _d.sent();
                  return [4, setOnlineComponentProvider(client, onlineComponentProvider)];
                case 2:
                  _d.sent();
                  persistenceResult.resolve();
                  return [3, 4];
                case 3:
                  e_15 = _d.sent();
                  if (!canFallbackFromIndexedDbError(e_15)) {
                    throw e_15;
                  }
                  console.warn("Error enabling offline persistence. Falling back to persistence disabled: " + e_15);
                  persistenceResult.reject(e_15);
                  return [3, 4];
                case 4:
                  return [2];
              }
            });
          });
        }).then(function() {
          return persistenceResult.promise;
        });
      }
      function canFallbackFromIndexedDbError(error3) {
        if (error3.name === "FirebaseError") {
          return error3.code === Code.FAILED_PRECONDITION || error3.code === Code.UNIMPLEMENTED;
        } else if (typeof DOMException !== "undefined" && error3 instanceof DOMException) {
          return error3.code === DOM_EXCEPTION_QUOTA_EXCEEDED || error3.code === DOM_EXCEPTION_ABORTED || error3.code === DOM_EXCEPTION_INVALID_STATE;
        }
        return true;
      }
      function clearIndexedDbPersistence(firestore) {
        var _this = this;
        if (firestore._initialized && !firestore._terminated) {
          throw new FirestoreError(Code.FAILED_PRECONDITION, "Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");
        }
        var deferred = new Deferred();
        firestore._queue.enqueueAndForgetEvenWhileRestricted(function() {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            var e_16;
            return tslib.__generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  _d.trys.push([0, 2, , 3]);
                  return [4, indexedDbClearPersistence(indexedDbStoragePrefix(firestore._databaseId, firestore._persistenceKey))];
                case 1:
                  _d.sent();
                  deferred.resolve();
                  return [3, 3];
                case 2:
                  e_16 = _d.sent();
                  deferred.reject(e_16);
                  return [3, 3];
                case 3:
                  return [2];
              }
            });
          });
        });
        return deferred.promise;
      }
      function waitForPendingWrites(firestore) {
        firestore = cast(firestore, FirebaseFirestore$1);
        var client = ensureFirestoreConfigured(firestore);
        return firestoreClientWaitForPendingWrites(client);
      }
      function enableNetwork(firestore) {
        firestore = cast(firestore, FirebaseFirestore$1);
        var client = ensureFirestoreConfigured(firestore);
        return firestoreClientEnableNetwork(client);
      }
      function disableNetwork(firestore) {
        firestore = cast(firestore, FirebaseFirestore$1);
        var client = ensureFirestoreConfigured(firestore);
        return firestoreClientDisableNetwork(client);
      }
      function terminate(firestore) {
        app._removeServiceInstance(firestore.app, "firestore-exp");
        return firestore._delete();
      }
      function loadBundle(firestore, bundleData) {
        firestore = cast(firestore, FirebaseFirestore$1);
        var client = ensureFirestoreConfigured(firestore);
        var resultTask = new LoadBundleTask();
        firestoreClientLoadBundle(client, firestore._databaseId, bundleData, resultTask);
        return resultTask;
      }
      function namedQuery(firestore, name2) {
        firestore = cast(firestore, FirebaseFirestore$1);
        var client = ensureFirestoreConfigured(firestore);
        return firestoreClientGetNamedQuery(client, name2).then(function(namedQuery2) {
          if (!namedQuery2) {
            return null;
          }
          return new Query(firestore, null, namedQuery2.query);
        });
      }
      function verifyNotInitialized(firestore) {
        if (firestore._initialized || firestore._terminated) {
          throw new FirestoreError(Code.FAILED_PRECONDITION, "Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.");
        }
      }
      function registerFirestore(variant) {
        app._registerComponent(new component.Component("firestore-exp", function(container, _d) {
          var settings = _d.options;
          var app2 = container.getProvider("app-exp").getImmediate();
          var firestoreInstance = new FirebaseFirestore$1(app2, container.getProvider("auth-internal"));
          if (settings) {
            firestoreInstance._setSettings(settings);
          }
          return firestoreInstance;
        }, "PUBLIC"));
        app.registerVersion(name, version, variant);
      }
      var FieldPath$1 = function() {
        function FieldPath$12() {
          var fieldNames = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            fieldNames[_i] = arguments[_i];
          }
          for (var i = 0; i < fieldNames.length; ++i) {
            if (fieldNames[i].length === 0) {
              throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
            }
          }
          this._internalPath = new FieldPath(fieldNames);
        }
        FieldPath$12.prototype.isEqual = function(other) {
          return this._internalPath.isEqual(other._internalPath);
        };
        return FieldPath$12;
      }();
      function documentId() {
        return new FieldPath$1(DOCUMENT_KEY_NAME);
      }
      var Bytes = function() {
        function Bytes2(byteString) {
          this._byteString = byteString;
        }
        Bytes2.fromBase64String = function(base64) {
          try {
            return new Bytes2(ByteString.fromBase64String(base64));
          } catch (e) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + e);
          }
        };
        Bytes2.fromUint8Array = function(array) {
          return new Bytes2(ByteString.fromUint8Array(array));
        };
        Bytes2.prototype.toBase64 = function() {
          return this._byteString.toBase64();
        };
        Bytes2.prototype.toUint8Array = function() {
          return this._byteString.toUint8Array();
        };
        Bytes2.prototype.toString = function() {
          return "Bytes(base64: " + this.toBase64() + ")";
        };
        Bytes2.prototype.isEqual = function(other) {
          return this._byteString.isEqual(other._byteString);
        };
        return Bytes2;
      }();
      var FieldValue = function() {
        function FieldValue2(_methodName) {
          this._methodName = _methodName;
        }
        return FieldValue2;
      }();
      var GeoPoint = function() {
        function GeoPoint2(latitude, longitude) {
          if (!isFinite(latitude) || latitude < -90 || latitude > 90) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + latitude);
          }
          if (!isFinite(longitude) || longitude < -180 || longitude > 180) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + longitude);
          }
          this._lat = latitude;
          this._long = longitude;
        }
        Object.defineProperty(GeoPoint2.prototype, "latitude", {
          get: function() {
            return this._lat;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(GeoPoint2.prototype, "longitude", {
          get: function() {
            return this._long;
          },
          enumerable: false,
          configurable: true
        });
        GeoPoint2.prototype.isEqual = function(other) {
          return this._lat === other._lat && this._long === other._long;
        };
        GeoPoint2.prototype.toJSON = function() {
          return {latitude: this._lat, longitude: this._long};
        };
        GeoPoint2.prototype._compareTo = function(other) {
          return primitiveComparator(this._lat, other._lat) || primitiveComparator(this._long, other._long);
        };
        return GeoPoint2;
      }();
      var RESERVED_FIELD_REGEX = /^__.*__$/;
      var ParsedSetData = function() {
        function ParsedSetData2(data, fieldMask, fieldTransforms) {
          this.data = data;
          this.fieldMask = fieldMask;
          this.fieldTransforms = fieldTransforms;
        }
        ParsedSetData2.prototype.toMutation = function(key, precondition) {
          if (this.fieldMask !== null) {
            return new PatchMutation(key, this.data, this.fieldMask, precondition, this.fieldTransforms);
          } else {
            return new SetMutation(key, this.data, precondition, this.fieldTransforms);
          }
        };
        return ParsedSetData2;
      }();
      var ParsedUpdateData = function() {
        function ParsedUpdateData2(data, fieldMask, fieldTransforms) {
          this.data = data;
          this.fieldMask = fieldMask;
          this.fieldTransforms = fieldTransforms;
        }
        ParsedUpdateData2.prototype.toMutation = function(key, precondition) {
          return new PatchMutation(key, this.data, this.fieldMask, precondition, this.fieldTransforms);
        };
        return ParsedUpdateData2;
      }();
      function isWrite(dataSource) {
        switch (dataSource) {
          case 0:
          case 2:
          case 1:
            return true;
          case 3:
          case 4:
            return false;
          default:
            throw fail();
        }
      }
      var ParseContextImpl = function() {
        function ParseContextImpl2(settings, databaseId, serializer, ignoreUndefinedProperties, fieldTransforms, fieldMask) {
          this.settings = settings;
          this.databaseId = databaseId;
          this.serializer = serializer;
          this.ignoreUndefinedProperties = ignoreUndefinedProperties;
          if (fieldTransforms === void 0) {
            this.validatePath();
          }
          this.fieldTransforms = fieldTransforms || [];
          this.fieldMask = fieldMask || [];
        }
        Object.defineProperty(ParseContextImpl2.prototype, "path", {
          get: function() {
            return this.settings.path;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(ParseContextImpl2.prototype, "dataSource", {
          get: function() {
            return this.settings.dataSource;
          },
          enumerable: false,
          configurable: true
        });
        ParseContextImpl2.prototype.contextWith = function(configuration) {
          return new ParseContextImpl2(Object.assign(Object.assign({}, this.settings), configuration), this.databaseId, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
        };
        ParseContextImpl2.prototype.childContextForField = function(field) {
          var _a;
          var childPath = (_a = this.path) === null || _a === void 0 ? void 0 : _a.child(field);
          var context = this.contextWith({path: childPath, arrayElement: false});
          context.validatePathSegment(field);
          return context;
        };
        ParseContextImpl2.prototype.childContextForFieldPath = function(field) {
          var _a;
          var childPath = (_a = this.path) === null || _a === void 0 ? void 0 : _a.child(field);
          var context = this.contextWith({path: childPath, arrayElement: false});
          context.validatePath();
          return context;
        };
        ParseContextImpl2.prototype.childContextForArray = function(index2) {
          return this.contextWith({path: void 0, arrayElement: true});
        };
        ParseContextImpl2.prototype.createError = function(reason) {
          return createError(reason, this.settings.methodName, this.settings.hasConverter || false, this.path, this.settings.targetDoc);
        };
        ParseContextImpl2.prototype.contains = function(fieldPath) {
          return this.fieldMask.find(function(field) {
            return fieldPath.isPrefixOf(field);
          }) !== void 0 || this.fieldTransforms.find(function(transform) {
            return fieldPath.isPrefixOf(transform.field);
          }) !== void 0;
        };
        ParseContextImpl2.prototype.validatePath = function() {
          if (!this.path) {
            return;
          }
          for (var i = 0; i < this.path.length; i++) {
            this.validatePathSegment(this.path.get(i));
          }
        };
        ParseContextImpl2.prototype.validatePathSegment = function(segment) {
          if (segment.length === 0) {
            throw this.createError("Document fields must not be empty");
          }
          if (isWrite(this.dataSource) && RESERVED_FIELD_REGEX.test(segment)) {
            throw this.createError('Document fields cannot begin and end with "__"');
          }
        };
        return ParseContextImpl2;
      }();
      var UserDataReader = function() {
        function UserDataReader2(databaseId, ignoreUndefinedProperties, serializer) {
          this.databaseId = databaseId;
          this.ignoreUndefinedProperties = ignoreUndefinedProperties;
          this.serializer = serializer || newSerializer(databaseId);
        }
        UserDataReader2.prototype.createContext = function(dataSource, methodName, targetDoc, hasConverter) {
          if (hasConverter === void 0) {
            hasConverter = false;
          }
          return new ParseContextImpl({
            dataSource,
            methodName,
            targetDoc,
            path: FieldPath.emptyPath(),
            arrayElement: false,
            hasConverter
          }, this.databaseId, this.serializer, this.ignoreUndefinedProperties);
        };
        return UserDataReader2;
      }();
      function newUserDataReader(firestore) {
        var settings = firestore._freezeSettings();
        var serializer = newSerializer(firestore._databaseId);
        return new UserDataReader(firestore._databaseId, !!settings.ignoreUndefinedProperties, serializer);
      }
      function parseSetData(userDataReader, methodName, targetDoc, input, hasConverter, options2) {
        if (options2 === void 0) {
          options2 = {};
        }
        var context = userDataReader.createContext(options2.merge || options2.mergeFields ? 2 : 0, methodName, targetDoc, hasConverter);
        validatePlainObject("Data must be an object, but it was:", context, input);
        var updateData = parseObject(input, context);
        var fieldMask;
        var fieldTransforms;
        if (options2.merge) {
          fieldMask = new FieldMask(context.fieldMask);
          fieldTransforms = context.fieldTransforms;
        } else if (options2.mergeFields) {
          var validatedFieldPaths = [];
          for (var _i = 0, _d = options2.mergeFields; _i < _d.length; _i++) {
            var stringOrFieldPath = _d[_i];
            var fieldPath = fieldPathFromArgument(methodName, stringOrFieldPath, targetDoc);
            if (!context.contains(fieldPath)) {
              throw new FirestoreError(Code.INVALID_ARGUMENT, "Field '" + fieldPath + "' is specified in your field mask but missing from your input data.");
            }
            if (!fieldMaskContains(validatedFieldPaths, fieldPath)) {
              validatedFieldPaths.push(fieldPath);
            }
          }
          fieldMask = new FieldMask(validatedFieldPaths);
          fieldTransforms = context.fieldTransforms.filter(function(transform) {
            return fieldMask.covers(transform.field);
          });
        } else {
          fieldMask = null;
          fieldTransforms = context.fieldTransforms;
        }
        return new ParsedSetData(new ObjectValue(updateData), fieldMask, fieldTransforms);
      }
      var DeleteFieldValueImpl = function(_super) {
        tslib.__extends(DeleteFieldValueImpl2, _super);
        function DeleteFieldValueImpl2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        DeleteFieldValueImpl2.prototype._toFieldTransform = function(context) {
          if (context.dataSource === 2) {
            context.fieldMask.push(context.path);
          } else if (context.dataSource === 1) {
            throw context.createError(this._methodName + "() can only appear at the top level of your update data");
          } else {
            throw context.createError(this._methodName + "() cannot be used with set() unless you pass {merge:true}");
          }
          return null;
        };
        DeleteFieldValueImpl2.prototype.isEqual = function(other) {
          return other instanceof DeleteFieldValueImpl2;
        };
        return DeleteFieldValueImpl2;
      }(FieldValue);
      function createSentinelChildContext(fieldValue, context, arrayElement) {
        return new ParseContextImpl({
          dataSource: 3,
          targetDoc: context.settings.targetDoc,
          methodName: fieldValue._methodName,
          arrayElement
        }, context.databaseId, context.serializer, context.ignoreUndefinedProperties);
      }
      var ServerTimestampFieldValueImpl = function(_super) {
        tslib.__extends(ServerTimestampFieldValueImpl2, _super);
        function ServerTimestampFieldValueImpl2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ServerTimestampFieldValueImpl2.prototype._toFieldTransform = function(context) {
          return new FieldTransform(context.path, new ServerTimestampTransform());
        };
        ServerTimestampFieldValueImpl2.prototype.isEqual = function(other) {
          return other instanceof ServerTimestampFieldValueImpl2;
        };
        return ServerTimestampFieldValueImpl2;
      }(FieldValue);
      var ArrayUnionFieldValueImpl = function(_super) {
        tslib.__extends(ArrayUnionFieldValueImpl2, _super);
        function ArrayUnionFieldValueImpl2(methodName, _elements) {
          var _this = _super.call(this, methodName) || this;
          _this._elements = _elements;
          return _this;
        }
        ArrayUnionFieldValueImpl2.prototype._toFieldTransform = function(context) {
          var parseContext = createSentinelChildContext(this, context, true);
          var parsedElements = this._elements.map(function(element) {
            return parseData(element, parseContext);
          });
          var arrayUnion2 = new ArrayUnionTransformOperation(parsedElements);
          return new FieldTransform(context.path, arrayUnion2);
        };
        ArrayUnionFieldValueImpl2.prototype.isEqual = function(other) {
          return this === other;
        };
        return ArrayUnionFieldValueImpl2;
      }(FieldValue);
      var ArrayRemoveFieldValueImpl = function(_super) {
        tslib.__extends(ArrayRemoveFieldValueImpl2, _super);
        function ArrayRemoveFieldValueImpl2(methodName, _elements) {
          var _this = _super.call(this, methodName) || this;
          _this._elements = _elements;
          return _this;
        }
        ArrayRemoveFieldValueImpl2.prototype._toFieldTransform = function(context) {
          var parseContext = createSentinelChildContext(this, context, true);
          var parsedElements = this._elements.map(function(element) {
            return parseData(element, parseContext);
          });
          var arrayUnion2 = new ArrayRemoveTransformOperation(parsedElements);
          return new FieldTransform(context.path, arrayUnion2);
        };
        ArrayRemoveFieldValueImpl2.prototype.isEqual = function(other) {
          return this === other;
        };
        return ArrayRemoveFieldValueImpl2;
      }(FieldValue);
      var NumericIncrementFieldValueImpl = function(_super) {
        tslib.__extends(NumericIncrementFieldValueImpl2, _super);
        function NumericIncrementFieldValueImpl2(methodName, _operand) {
          var _this = _super.call(this, methodName) || this;
          _this._operand = _operand;
          return _this;
        }
        NumericIncrementFieldValueImpl2.prototype._toFieldTransform = function(context) {
          var numericIncrement = new NumericIncrementTransformOperation(context.serializer, toNumber(context.serializer, this._operand));
          return new FieldTransform(context.path, numericIncrement);
        };
        NumericIncrementFieldValueImpl2.prototype.isEqual = function(other) {
          return this === other;
        };
        return NumericIncrementFieldValueImpl2;
      }(FieldValue);
      function parseUpdateData(userDataReader, methodName, targetDoc, input) {
        var context = userDataReader.createContext(1, methodName, targetDoc);
        validatePlainObject("Data must be an object, but it was:", context, input);
        var fieldMaskPaths = [];
        var updateData = ObjectValue.empty();
        forEach(input, function(key, value) {
          var path2 = fieldPathFromDotSeparatedString(methodName, key, targetDoc);
          value = util.getModularInstance(value);
          var childContext = context.childContextForFieldPath(path2);
          if (value instanceof DeleteFieldValueImpl) {
            fieldMaskPaths.push(path2);
          } else {
            var parsedValue = parseData(value, childContext);
            if (parsedValue != null) {
              fieldMaskPaths.push(path2);
              updateData.set(path2, parsedValue);
            }
          }
        });
        var mask = new FieldMask(fieldMaskPaths);
        return new ParsedUpdateData(updateData, mask, context.fieldTransforms);
      }
      function parseUpdateVarargs(userDataReader, methodName, targetDoc, field, value, moreFieldsAndValues) {
        var context = userDataReader.createContext(1, methodName, targetDoc);
        var keys = [fieldPathFromArgument(methodName, field, targetDoc)];
        var values = [value];
        if (moreFieldsAndValues.length % 2 !== 0) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + methodName + "() needs to be called with an even number of arguments that alternate between field names and values.");
        }
        for (var i = 0; i < moreFieldsAndValues.length; i += 2) {
          keys.push(fieldPathFromArgument(methodName, moreFieldsAndValues[i]));
          values.push(moreFieldsAndValues[i + 1]);
        }
        var fieldMaskPaths = [];
        var updateData = ObjectValue.empty();
        for (var i = keys.length - 1; i >= 0; --i) {
          if (!fieldMaskContains(fieldMaskPaths, keys[i])) {
            var path2 = keys[i];
            var value_1 = values[i];
            value_1 = util.getModularInstance(value_1);
            var childContext = context.childContextForFieldPath(path2);
            if (value_1 instanceof DeleteFieldValueImpl) {
              fieldMaskPaths.push(path2);
            } else {
              var parsedValue = parseData(value_1, childContext);
              if (parsedValue != null) {
                fieldMaskPaths.push(path2);
                updateData.set(path2, parsedValue);
              }
            }
          }
        }
        var mask = new FieldMask(fieldMaskPaths);
        return new ParsedUpdateData(updateData, mask, context.fieldTransforms);
      }
      function parseQueryValue(userDataReader, methodName, input, allowArrays) {
        if (allowArrays === void 0) {
          allowArrays = false;
        }
        var context = userDataReader.createContext(allowArrays ? 4 : 3, methodName);
        var parsed = parseData(input, context);
        return parsed;
      }
      function parseData(input, context) {
        input = util.getModularInstance(input);
        if (looksLikeJsonObject(input)) {
          validatePlainObject("Unsupported field value:", context, input);
          return parseObject(input, context);
        } else if (input instanceof FieldValue) {
          parseSentinelFieldValue(input, context);
          return null;
        } else if (input === void 0 && context.ignoreUndefinedProperties) {
          return null;
        } else {
          if (context.path) {
            context.fieldMask.push(context.path);
          }
          if (input instanceof Array) {
            if (context.settings.arrayElement && context.dataSource !== 4) {
              throw context.createError("Nested arrays are not supported");
            }
            return parseArray(input, context);
          } else {
            return parseScalarValue(input, context);
          }
        }
      }
      function parseObject(obj, context) {
        var fields = {};
        if (isEmpty(obj)) {
          if (context.path && context.path.length > 0) {
            context.fieldMask.push(context.path);
          }
        } else {
          forEach(obj, function(key, val) {
            var parsedValue = parseData(val, context.childContextForField(key));
            if (parsedValue != null) {
              fields[key] = parsedValue;
            }
          });
        }
        return {mapValue: {fields}};
      }
      function parseArray(array, context) {
        var values = [];
        var entryIndex = 0;
        for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
          var entry = array_1[_i];
          var parsedEntry = parseData(entry, context.childContextForArray(entryIndex));
          if (parsedEntry == null) {
            parsedEntry = {nullValue: "NULL_VALUE"};
          }
          values.push(parsedEntry);
          entryIndex++;
        }
        return {arrayValue: {values}};
      }
      function parseSentinelFieldValue(value, context) {
        if (!isWrite(context.dataSource)) {
          throw context.createError(value._methodName + "() can only be used with update() and set()");
        }
        if (!context.path) {
          throw context.createError(value._methodName + "() is not currently supported inside arrays");
        }
        var fieldTransform = value._toFieldTransform(context);
        if (fieldTransform) {
          context.fieldTransforms.push(fieldTransform);
        }
      }
      function parseScalarValue(value, context) {
        value = util.getModularInstance(value);
        if (value === null) {
          return {nullValue: "NULL_VALUE"};
        } else if (typeof value === "number") {
          return toNumber(context.serializer, value);
        } else if (typeof value === "boolean") {
          return {booleanValue: value};
        } else if (typeof value === "string") {
          return {stringValue: value};
        } else if (value instanceof Date) {
          var timestamp = Timestamp.fromDate(value);
          return {
            timestampValue: toTimestamp(context.serializer, timestamp)
          };
        } else if (value instanceof Timestamp) {
          var timestamp = new Timestamp(value.seconds, Math.floor(value.nanoseconds / 1e3) * 1e3);
          return {
            timestampValue: toTimestamp(context.serializer, timestamp)
          };
        } else if (value instanceof GeoPoint) {
          return {
            geoPointValue: {
              latitude: value.latitude,
              longitude: value.longitude
            }
          };
        } else if (value instanceof Bytes) {
          return {bytesValue: toBytes(context.serializer, value._byteString)};
        } else if (value instanceof DocumentReference) {
          var thisDb = context.databaseId;
          var otherDb = value.firestore._databaseId;
          if (!otherDb.isEqual(thisDb)) {
            throw context.createError("Document reference is for database " + (otherDb.projectId + "/" + otherDb.database + " but should be ") + ("for database " + thisDb.projectId + "/" + thisDb.database));
          }
          return {
            referenceValue: toResourceName(value.firestore._databaseId || context.databaseId, value._key.path)
          };
        } else {
          throw context.createError("Unsupported field value: " + valueDescription(value));
        }
      }
      function looksLikeJsonObject(input) {
        return typeof input === "object" && input !== null && !(input instanceof Array) && !(input instanceof Date) && !(input instanceof Timestamp) && !(input instanceof GeoPoint) && !(input instanceof Bytes) && !(input instanceof DocumentReference) && !(input instanceof FieldValue);
      }
      function validatePlainObject(message, context, input) {
        if (!looksLikeJsonObject(input) || !isPlainObject(input)) {
          var description = valueDescription(input);
          if (description === "an object") {
            throw context.createError(message + " a custom object");
          } else {
            throw context.createError(message + " " + description);
          }
        }
      }
      function fieldPathFromArgument(methodName, path2, targetDoc) {
        path2 = util.getModularInstance(path2);
        if (path2 instanceof FieldPath$1) {
          return path2._internalPath;
        } else if (typeof path2 === "string") {
          return fieldPathFromDotSeparatedString(methodName, path2);
        } else {
          var message = "Field path arguments must be of type string or FieldPath.";
          throw createError(message, methodName, false, void 0, targetDoc);
        }
      }
      var FIELD_PATH_RESERVED = new RegExp("[~\\*/\\[\\]]");
      function fieldPathFromDotSeparatedString(methodName, path2, targetDoc) {
        var found = path2.search(FIELD_PATH_RESERVED);
        if (found >= 0) {
          throw createError("Invalid field path (" + path2 + "). Paths must not contain '~', '*', '/', '[', or ']'", methodName, false, void 0, targetDoc);
        }
        try {
          return new (FieldPath$1.bind.apply(FieldPath$1, tslib.__spreadArray([void 0], path2.split("."))))()._internalPath;
        } catch (e) {
          throw createError("Invalid field path (" + path2 + "). Paths must not be empty, begin with '.', end with '.', or contain '..'", methodName, false, void 0, targetDoc);
        }
      }
      function createError(reason, methodName, hasConverter, path2, targetDoc) {
        var hasPath = path2 && !path2.isEmpty();
        var hasDocument = targetDoc !== void 0;
        var message = "Function " + methodName + "() called with invalid data";
        if (hasConverter) {
          message += " (via `toFirestore()`)";
        }
        message += ". ";
        var description = "";
        if (hasPath || hasDocument) {
          description += " (found";
          if (hasPath) {
            description += " in field " + path2;
          }
          if (hasDocument) {
            description += " in document " + targetDoc;
          }
          description += ")";
        }
        return new FirestoreError(Code.INVALID_ARGUMENT, message + reason + description);
      }
      function fieldMaskContains(haystack, needle) {
        return haystack.some(function(v) {
          return v.isEqual(needle);
        });
      }
      var DocumentSnapshot = function() {
        function DocumentSnapshot2(_firestore, _userDataWriter, _key, _document, _converter) {
          this._firestore = _firestore;
          this._userDataWriter = _userDataWriter;
          this._key = _key;
          this._document = _document;
          this._converter = _converter;
        }
        Object.defineProperty(DocumentSnapshot2.prototype, "id", {
          get: function() {
            return this._key.path.lastSegment();
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(DocumentSnapshot2.prototype, "ref", {
          get: function() {
            return new DocumentReference(this._firestore, this._converter, this._key);
          },
          enumerable: false,
          configurable: true
        });
        DocumentSnapshot2.prototype.exists = function() {
          return this._document !== null;
        };
        DocumentSnapshot2.prototype.data = function() {
          if (!this._document) {
            return void 0;
          } else if (this._converter) {
            var snapshot = new QueryDocumentSnapshot(this._firestore, this._userDataWriter, this._key, this._document, null);
            return this._converter.fromFirestore(snapshot);
          } else {
            return this._userDataWriter.convertValue(this._document.data.toProto());
          }
        };
        DocumentSnapshot2.prototype.get = function(fieldPath) {
          if (this._document) {
            var value = this._document.data.field(fieldPathFromArgument$1("DocumentSnapshot.get", fieldPath));
            if (value !== null) {
              return this._userDataWriter.convertValue(value);
            }
          }
          return void 0;
        };
        return DocumentSnapshot2;
      }();
      var QueryDocumentSnapshot = function(_super) {
        tslib.__extends(QueryDocumentSnapshot2, _super);
        function QueryDocumentSnapshot2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        QueryDocumentSnapshot2.prototype.data = function() {
          return _super.prototype.data.call(this);
        };
        return QueryDocumentSnapshot2;
      }(DocumentSnapshot);
      function fieldPathFromArgument$1(methodName, arg) {
        if (typeof arg === "string") {
          return fieldPathFromDotSeparatedString(methodName, arg);
        } else if (arg instanceof FieldPath$1) {
          return arg._internalPath;
        } else {
          return arg._delegate._internalPath;
        }
      }
      var SnapshotMetadata = function() {
        function SnapshotMetadata2(hasPendingWrites, fromCache) {
          this.hasPendingWrites = hasPendingWrites;
          this.fromCache = fromCache;
        }
        SnapshotMetadata2.prototype.isEqual = function(other) {
          return this.hasPendingWrites === other.hasPendingWrites && this.fromCache === other.fromCache;
        };
        return SnapshotMetadata2;
      }();
      var DocumentSnapshot$1 = function(_super) {
        tslib.__extends(DocumentSnapshot$12, _super);
        function DocumentSnapshot$12(_firestore, userDataWriter, key, document2, metadata, converter) {
          var _this = _super.call(this, _firestore, userDataWriter, key, document2, converter) || this;
          _this._firestore = _firestore;
          _this._firestoreImpl = _firestore;
          _this.metadata = metadata;
          return _this;
        }
        DocumentSnapshot$12.prototype.exists = function() {
          return _super.prototype.exists.call(this);
        };
        DocumentSnapshot$12.prototype.data = function(options2) {
          if (options2 === void 0) {
            options2 = {};
          }
          if (!this._document) {
            return void 0;
          } else if (this._converter) {
            var snapshot = new QueryDocumentSnapshot$1(this._firestore, this._userDataWriter, this._key, this._document, this.metadata, null);
            return this._converter.fromFirestore(snapshot, options2);
          } else {
            return this._userDataWriter.convertValue(this._document.data.toProto(), options2.serverTimestamps);
          }
        };
        DocumentSnapshot$12.prototype.get = function(fieldPath, options2) {
          if (options2 === void 0) {
            options2 = {};
          }
          if (this._document) {
            var value = this._document.data.field(fieldPathFromArgument$1("DocumentSnapshot.get", fieldPath));
            if (value !== null) {
              return this._userDataWriter.convertValue(value, options2.serverTimestamps);
            }
          }
          return void 0;
        };
        return DocumentSnapshot$12;
      }(DocumentSnapshot);
      var QueryDocumentSnapshot$1 = function(_super) {
        tslib.__extends(QueryDocumentSnapshot$12, _super);
        function QueryDocumentSnapshot$12() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        QueryDocumentSnapshot$12.prototype.data = function(options2) {
          if (options2 === void 0) {
            options2 = {};
          }
          return _super.prototype.data.call(this, options2);
        };
        return QueryDocumentSnapshot$12;
      }(DocumentSnapshot$1);
      var QuerySnapshot = function() {
        function QuerySnapshot2(_firestore, _userDataWriter, query3, _snapshot) {
          this._firestore = _firestore;
          this._userDataWriter = _userDataWriter;
          this._snapshot = _snapshot;
          this.metadata = new SnapshotMetadata(_snapshot.hasPendingWrites, _snapshot.fromCache);
          this.query = query3;
        }
        Object.defineProperty(QuerySnapshot2.prototype, "docs", {
          get: function() {
            var result = [];
            this.forEach(function(doc2) {
              return result.push(doc2);
            });
            return result;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(QuerySnapshot2.prototype, "size", {
          get: function() {
            return this._snapshot.docs.size;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(QuerySnapshot2.prototype, "empty", {
          get: function() {
            return this.size === 0;
          },
          enumerable: false,
          configurable: true
        });
        QuerySnapshot2.prototype.forEach = function(callback, thisArg) {
          var _this = this;
          this._snapshot.docs.forEach(function(doc2) {
            callback.call(thisArg, new QueryDocumentSnapshot$1(_this._firestore, _this._userDataWriter, doc2.key, doc2, new SnapshotMetadata(_this._snapshot.mutatedKeys.has(doc2.key), _this._snapshot.fromCache), _this.query._converter));
          });
        };
        QuerySnapshot2.prototype.docChanges = function(options2) {
          if (options2 === void 0) {
            options2 = {};
          }
          var includeMetadataChanges = !!options2.includeMetadataChanges;
          if (includeMetadataChanges && this._snapshot.excludesMetadataChanges) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
          }
          if (!this._cachedChanges || this._cachedChangesIncludeMetadataChanges !== includeMetadataChanges) {
            this._cachedChanges = changesFromSnapshot(this, includeMetadataChanges);
            this._cachedChangesIncludeMetadataChanges = includeMetadataChanges;
          }
          return this._cachedChanges;
        };
        return QuerySnapshot2;
      }();
      function changesFromSnapshot(querySnapshot, includeMetadataChanges) {
        if (querySnapshot._snapshot.oldDocs.isEmpty()) {
          var lastDoc_1;
          var index_1 = 0;
          return querySnapshot._snapshot.docChanges.map(function(change) {
            var doc2 = new QueryDocumentSnapshot$1(querySnapshot._firestore, querySnapshot._userDataWriter, change.doc.key, change.doc, new SnapshotMetadata(querySnapshot._snapshot.mutatedKeys.has(change.doc.key), querySnapshot._snapshot.fromCache), querySnapshot.query._converter);
            lastDoc_1 = change.doc;
            return {
              type: "added",
              doc: doc2,
              oldIndex: -1,
              newIndex: index_1++
            };
          });
        } else {
          var indexTracker_1 = querySnapshot._snapshot.oldDocs;
          return querySnapshot._snapshot.docChanges.filter(function(change) {
            return includeMetadataChanges || change.type !== 3;
          }).map(function(change) {
            var doc2 = new QueryDocumentSnapshot$1(querySnapshot._firestore, querySnapshot._userDataWriter, change.doc.key, change.doc, new SnapshotMetadata(querySnapshot._snapshot.mutatedKeys.has(change.doc.key), querySnapshot._snapshot.fromCache), querySnapshot.query._converter);
            var oldIndex = -1;
            var newIndex = -1;
            if (change.type !== 0) {
              oldIndex = indexTracker_1.indexOf(change.doc.key);
              indexTracker_1 = indexTracker_1.delete(change.doc.key);
            }
            if (change.type !== 1) {
              indexTracker_1 = indexTracker_1.add(change.doc);
              newIndex = indexTracker_1.indexOf(change.doc.key);
            }
            return {
              type: resultChangeType(change.type),
              doc: doc2,
              oldIndex,
              newIndex
            };
          });
        }
      }
      function resultChangeType(type) {
        switch (type) {
          case 0:
            return "added";
          case 2:
          case 3:
            return "modified";
          case 1:
            return "removed";
          default:
            return fail();
        }
      }
      function snapshotEqual(left, right) {
        if (left instanceof DocumentSnapshot$1 && right instanceof DocumentSnapshot$1) {
          return left._firestore === right._firestore && left._key.isEqual(right._key) && (left._document === null ? right._document === null : left._document.isEqual(right._document)) && left._converter === right._converter;
        } else if (left instanceof QuerySnapshot && right instanceof QuerySnapshot) {
          return left._firestore === right._firestore && queryEqual(left.query, right.query) && left.metadata.isEqual(right.metadata) && left._snapshot.isEqual(right._snapshot);
        }
        return false;
      }
      function validateHasExplicitOrderByForLimitToLast(query3) {
        if (hasLimitToLast(query3) && query3.explicitOrderBy.length === 0) {
          throw new FirestoreError(Code.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
        }
      }
      var QueryConstraint = function() {
        function QueryConstraint2() {
        }
        return QueryConstraint2;
      }();
      function query2(query3) {
        var queryConstraints = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          queryConstraints[_i - 1] = arguments[_i];
        }
        for (var _d = 0, queryConstraints_1 = queryConstraints; _d < queryConstraints_1.length; _d++) {
          var constraint = queryConstraints_1[_d];
          query3 = constraint._apply(query3);
        }
        return query3;
      }
      var QueryFilterConstraint = function(_super) {
        tslib.__extends(QueryFilterConstraint2, _super);
        function QueryFilterConstraint2(_field, _op, _value) {
          var _this = _super.call(this) || this;
          _this._field = _field;
          _this._op = _op;
          _this._value = _value;
          _this.type = "where";
          return _this;
        }
        QueryFilterConstraint2.prototype._apply = function(query3) {
          var reader = newUserDataReader(query3.firestore);
          var filter = newQueryFilter(query3._query, "where", reader, query3.firestore._databaseId, this._field, this._op, this._value);
          return new Query(query3.firestore, query3._converter, queryWithAddedFilter(query3._query, filter));
        };
        return QueryFilterConstraint2;
      }(QueryConstraint);
      function where2(fieldPath, opStr, value) {
        var op = opStr;
        var field = fieldPathFromArgument$1("where", fieldPath);
        return new QueryFilterConstraint(field, op, value);
      }
      var QueryOrderByConstraint = function(_super) {
        tslib.__extends(QueryOrderByConstraint2, _super);
        function QueryOrderByConstraint2(_field, _direction) {
          var _this = _super.call(this) || this;
          _this._field = _field;
          _this._direction = _direction;
          _this.type = "orderBy";
          return _this;
        }
        QueryOrderByConstraint2.prototype._apply = function(query3) {
          var orderBy2 = newQueryOrderBy(query3._query, this._field, this._direction);
          return new Query(query3.firestore, query3._converter, queryWithAddedOrderBy(query3._query, orderBy2));
        };
        return QueryOrderByConstraint2;
      }(QueryConstraint);
      function orderBy(fieldPath, directionStr) {
        if (directionStr === void 0) {
          directionStr = "asc";
        }
        var direction = directionStr;
        var path2 = fieldPathFromArgument$1("orderBy", fieldPath);
        return new QueryOrderByConstraint(path2, direction);
      }
      var QueryLimitConstraint = function(_super) {
        tslib.__extends(QueryLimitConstraint2, _super);
        function QueryLimitConstraint2(type, _limit, _limitType) {
          var _this = _super.call(this) || this;
          _this.type = type;
          _this._limit = _limit;
          _this._limitType = _limitType;
          return _this;
        }
        QueryLimitConstraint2.prototype._apply = function(query3) {
          return new Query(query3.firestore, query3._converter, queryWithLimit(query3._query, this._limit, this._limitType));
        };
        return QueryLimitConstraint2;
      }(QueryConstraint);
      function limit(limit2) {
        validatePositiveNumber("limit", limit2);
        return new QueryLimitConstraint("limit", limit2, "F");
      }
      function limitToLast(limit2) {
        validatePositiveNumber("limitToLast", limit2);
        return new QueryLimitConstraint("limitToLast", limit2, "L");
      }
      var QueryStartAtConstraint = function(_super) {
        tslib.__extends(QueryStartAtConstraint2, _super);
        function QueryStartAtConstraint2(type, _docOrFields, _before) {
          var _this = _super.call(this) || this;
          _this.type = type;
          _this._docOrFields = _docOrFields;
          _this._before = _before;
          return _this;
        }
        QueryStartAtConstraint2.prototype._apply = function(query3) {
          var bound = newQueryBoundFromDocOrFields(query3, this.type, this._docOrFields, this._before);
          return new Query(query3.firestore, query3._converter, queryWithStartAt(query3._query, bound));
        };
        return QueryStartAtConstraint2;
      }(QueryConstraint);
      function startAt() {
        var docOrFields = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          docOrFields[_i] = arguments[_i];
        }
        return new QueryStartAtConstraint("startAt", docOrFields, true);
      }
      function startAfter() {
        var docOrFields = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          docOrFields[_i] = arguments[_i];
        }
        return new QueryStartAtConstraint("startAfter", docOrFields, false);
      }
      var QueryEndAtConstraint = function(_super) {
        tslib.__extends(QueryEndAtConstraint2, _super);
        function QueryEndAtConstraint2(type, _docOrFields, _before) {
          var _this = _super.call(this) || this;
          _this.type = type;
          _this._docOrFields = _docOrFields;
          _this._before = _before;
          return _this;
        }
        QueryEndAtConstraint2.prototype._apply = function(query3) {
          var bound = newQueryBoundFromDocOrFields(query3, this.type, this._docOrFields, this._before);
          return new Query(query3.firestore, query3._converter, queryWithEndAt(query3._query, bound));
        };
        return QueryEndAtConstraint2;
      }(QueryConstraint);
      function endBefore() {
        var docOrFields = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          docOrFields[_i] = arguments[_i];
        }
        return new QueryEndAtConstraint("endBefore", docOrFields, true);
      }
      function endAt() {
        var docOrFields = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          docOrFields[_i] = arguments[_i];
        }
        return new QueryEndAtConstraint("endAt", docOrFields, false);
      }
      function newQueryBoundFromDocOrFields(query3, methodName, docOrFields, before) {
        docOrFields[0] = util.getModularInstance(docOrFields[0]);
        if (docOrFields[0] instanceof DocumentSnapshot) {
          return newQueryBoundFromDocument(query3._query, query3.firestore._databaseId, methodName, docOrFields[0]._document, before);
        } else {
          var reader = newUserDataReader(query3.firestore);
          return newQueryBoundFromFields(query3._query, query3.firestore._databaseId, reader, methodName, docOrFields, before);
        }
      }
      function newQueryFilter(query3, methodName, dataReader, databaseId, fieldPath, op, value) {
        var fieldValue;
        if (fieldPath.isKeyField()) {
          if (op === "array-contains" || op === "array-contains-any") {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid Query. You can't perform '" + op + "' queries on FieldPath.documentId().");
          } else if (op === "in" || op === "not-in") {
            validateDisjunctiveFilterElements(value, op);
            var referenceList = [];
            for (var _i = 0, value_2 = value; _i < value_2.length; _i++) {
              var arrayValue = value_2[_i];
              referenceList.push(parseDocumentIdValue(databaseId, query3, arrayValue));
            }
            fieldValue = {arrayValue: {values: referenceList}};
          } else {
            fieldValue = parseDocumentIdValue(databaseId, query3, value);
          }
        } else {
          if (op === "in" || op === "not-in" || op === "array-contains-any") {
            validateDisjunctiveFilterElements(value, op);
          }
          fieldValue = parseQueryValue(dataReader, methodName, value, op === "in" || op === "not-in");
        }
        var filter = FieldFilter.create(fieldPath, op, fieldValue);
        validateNewFilter(query3, filter);
        return filter;
      }
      function newQueryOrderBy(query3, fieldPath, direction) {
        if (query3.startAt !== null) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
        }
        if (query3.endAt !== null) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
        }
        var orderBy2 = new OrderBy(fieldPath, direction);
        validateNewOrderBy(query3, orderBy2);
        return orderBy2;
      }
      function newQueryBoundFromDocument(query3, databaseId, methodName, doc2, before) {
        if (!doc2) {
          throw new FirestoreError(Code.NOT_FOUND, "Can't use a DocumentSnapshot that doesn't exist for " + (methodName + "()."));
        }
        var components = [];
        for (var _i = 0, _d = queryOrderBy(query3); _i < _d.length; _i++) {
          var orderBy_5 = _d[_i];
          if (orderBy_5.field.isKeyField()) {
            components.push(refValue(databaseId, doc2.key));
          } else {
            var value = doc2.data.field(orderBy_5.field);
            if (isServerTimestamp(value)) {
              throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a document for which the field "' + orderBy_5.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
            } else if (value !== null) {
              components.push(value);
            } else {
              var field = orderBy_5.field.canonicalString();
              throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You are trying to start or end a query using a " + ("document for which the field '" + field + "' (used as the ") + "orderBy) does not exist.");
            }
          }
        }
        return new Bound(components, before);
      }
      function newQueryBoundFromFields(query3, databaseId, dataReader, methodName, values, before) {
        var orderBy2 = query3.explicitOrderBy;
        if (values.length > orderBy2.length) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Too many arguments provided to " + methodName + "(). The number of arguments must be less than or equal to the number of orderBy() clauses");
        }
        var components = [];
        for (var i = 0; i < values.length; i++) {
          var rawValue = values[i];
          var orderByComponent = orderBy2[i];
          if (orderByComponent.field.isKeyField()) {
            if (typeof rawValue !== "string") {
              throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. Expected a string for document ID in " + (methodName + "(), but got a " + typeof rawValue));
            }
            if (!isCollectionGroupQuery(query3) && rawValue.indexOf("/") !== -1) {
              throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying a collection and ordering by FieldPath.documentId(), " + ("the value passed to " + methodName + "() must be a plain document ID, but ") + ("'" + rawValue + "' contains a slash."));
            }
            var path2 = query3.path.child(ResourcePath.fromString(rawValue));
            if (!DocumentKey.isDocumentKey(path2)) {
              throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying a collection group and ordering by " + ("FieldPath.documentId(), the value passed to " + methodName + "() must result in a ") + ("valid document path, but '" + path2 + "' is not because it contains an odd number ") + "of segments.");
            }
            var key = new DocumentKey(path2);
            components.push(refValue(databaseId, key));
          } else {
            var wrapped = parseQueryValue(dataReader, methodName, rawValue);
            components.push(wrapped);
          }
        }
        return new Bound(components, before);
      }
      function parseDocumentIdValue(databaseId, query3, documentIdValue) {
        documentIdValue = util.getModularInstance(documentIdValue);
        if (typeof documentIdValue === "string") {
          if (documentIdValue === "") {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");
          }
          if (!isCollectionGroupQuery(query3) && documentIdValue.indexOf("/") !== -1) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but " + ("'" + documentIdValue + "' contains a '/' character."));
          }
          var path2 = query3.path.child(ResourcePath.fromString(documentIdValue));
          if (!DocumentKey.isDocumentKey(path2)) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, " + ("but '" + path2 + "' is not because it has an odd number of segments (" + path2.length + ")."));
          }
          return refValue(databaseId, new DocumentKey(path2));
        } else if (documentIdValue instanceof DocumentReference) {
          return refValue(databaseId, documentIdValue._key);
        } else {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: " + (valueDescription(documentIdValue) + "."));
        }
      }
      function validateDisjunctiveFilterElements(value, operator) {
        if (!Array.isArray(value) || value.length === 0) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid Query. A non-empty array is required for " + ("'" + operator.toString() + "' filters."));
        }
        if (value.length > 10) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid Query. '" + operator.toString() + "' filters support a maximum of 10 elements in the value array.");
        }
      }
      function conflictingOps(op) {
        switch (op) {
          case "!=":
            return ["!=", "not-in"];
          case "array-contains":
            return [
              "array-contains",
              "array-contains-any",
              "not-in"
            ];
          case "in":
            return ["array-contains-any", "in", "not-in"];
          case "array-contains-any":
            return [
              "array-contains",
              "array-contains-any",
              "in",
              "not-in"
            ];
          case "not-in":
            return [
              "array-contains",
              "array-contains-any",
              "in",
              "not-in",
              "!="
            ];
          default:
            return [];
        }
      }
      function validateNewFilter(query3, filter) {
        if (filter.isInequality()) {
          var existingField = getInequalityFilterField(query3);
          if (existingField !== null && !existingField.isEqual(filter.field)) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have" + (" inequality filters on '" + existingField.toString() + "'") + (" and '" + filter.field.toString() + "'"));
          }
          var firstOrderByField = getFirstOrderByField(query3);
          if (firstOrderByField !== null) {
            validateOrderByAndInequalityMatch(query3, filter.field, firstOrderByField);
          }
        }
        var conflictingOp = findFilterOperator(query3, conflictingOps(filter.op));
        if (conflictingOp !== null) {
          if (conflictingOp === filter.op) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You cannot use more than one " + ("'" + filter.op.toString() + "' filter."));
          } else {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You cannot use '" + filter.op.toString() + "' filters " + ("with '" + conflictingOp.toString() + "' filters."));
          }
        }
      }
      function validateNewOrderBy(query3, orderBy2) {
        if (getFirstOrderByField(query3) === null) {
          var inequalityField = getInequalityFilterField(query3);
          if (inequalityField !== null) {
            validateOrderByAndInequalityMatch(query3, inequalityField, orderBy2.field);
          }
        }
      }
      function validateOrderByAndInequalityMatch(baseQuery, inequality, orderBy2) {
        if (!orderBy2.isEqual(inequality)) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You have a where filter with an inequality " + ("(<, <=, !=, not-in, >, or >=) on field '" + inequality.toString() + "' ") + ("and so you must also use '" + inequality.toString() + "' ") + "as your first argument to orderBy(), but your first orderBy() " + ("is on field '" + orderBy2.toString() + "' instead."));
        }
      }
      var AbstractUserDataWriter = function() {
        function AbstractUserDataWriter2() {
        }
        AbstractUserDataWriter2.prototype.convertValue = function(value, serverTimestampBehavior) {
          if (serverTimestampBehavior === void 0) {
            serverTimestampBehavior = "none";
          }
          switch (typeOrder(value)) {
            case 0:
              return null;
            case 1:
              return value.booleanValue;
            case 2:
              return normalizeNumber(value.integerValue || value.doubleValue);
            case 3:
              return this.convertTimestamp(value.timestampValue);
            case 4:
              return this.convertServerTimestamp(value, serverTimestampBehavior);
            case 5:
              return value.stringValue;
            case 6:
              return this.convertBytes(normalizeByteString(value.bytesValue));
            case 7:
              return this.convertReference(value.referenceValue);
            case 8:
              return this.convertGeoPoint(value.geoPointValue);
            case 9:
              return this.convertArray(value.arrayValue, serverTimestampBehavior);
            case 10:
              return this.convertObject(value.mapValue, serverTimestampBehavior);
            default:
              throw fail();
          }
        };
        AbstractUserDataWriter2.prototype.convertObject = function(mapValue, serverTimestampBehavior) {
          var _this = this;
          var result = {};
          forEach(mapValue.fields || {}, function(key, value) {
            result[key] = _this.convertValue(value, serverTimestampBehavior);
          });
          return result;
        };
        AbstractUserDataWriter2.prototype.convertGeoPoint = function(value) {
          return new GeoPoint(normalizeNumber(value.latitude), normalizeNumber(value.longitude));
        };
        AbstractUserDataWriter2.prototype.convertArray = function(arrayValue, serverTimestampBehavior) {
          var _this = this;
          return (arrayValue.values || []).map(function(value) {
            return _this.convertValue(value, serverTimestampBehavior);
          });
        };
        AbstractUserDataWriter2.prototype.convertServerTimestamp = function(value, serverTimestampBehavior) {
          switch (serverTimestampBehavior) {
            case "previous":
              var previousValue = getPreviousValue(value);
              if (previousValue == null) {
                return null;
              }
              return this.convertValue(previousValue, serverTimestampBehavior);
            case "estimate":
              return this.convertTimestamp(getLocalWriteTime(value));
            default:
              return null;
          }
        };
        AbstractUserDataWriter2.prototype.convertTimestamp = function(value) {
          var normalizedValue = normalizeTimestamp(value);
          return new Timestamp(normalizedValue.seconds, normalizedValue.nanos);
        };
        AbstractUserDataWriter2.prototype.convertDocumentKey = function(name2, expectedDatabaseId) {
          var resourcePath = ResourcePath.fromString(name2);
          hardAssert(isValidResourceName(resourcePath));
          var databaseId = new DatabaseId(resourcePath.get(1), resourcePath.get(3));
          var key = new DocumentKey(resourcePath.popFirst(5));
          if (!databaseId.isEqual(expectedDatabaseId)) {
            logError("Document " + key + " contains a document reference within a different database (" + (databaseId.projectId + "/" + databaseId.database + ") which is not ") + "supported. It will be treated as a reference in the current " + ("database (" + expectedDatabaseId.projectId + "/" + expectedDatabaseId.database + ") ") + "instead.");
          }
          return key;
        };
        return AbstractUserDataWriter2;
      }();
      function applyFirestoreDataConverter(converter, value, options2) {
        var convertedValue;
        if (converter) {
          if (options2 && (options2.merge || options2.mergeFields)) {
            convertedValue = converter.toFirestore(value, options2);
          } else {
            convertedValue = converter.toFirestore(value);
          }
        } else {
          convertedValue = value;
        }
        return convertedValue;
      }
      var LiteUserDataWriter = function(_super) {
        tslib.__extends(LiteUserDataWriter2, _super);
        function LiteUserDataWriter2(firestore) {
          var _this = _super.call(this) || this;
          _this.firestore = firestore;
          return _this;
        }
        LiteUserDataWriter2.prototype.convertBytes = function(bytes) {
          return new Bytes(bytes);
        };
        LiteUserDataWriter2.prototype.convertReference = function(name2) {
          var key = this.convertDocumentKey(name2, this.firestore._databaseId);
          return new DocumentReference(this.firestore, null, key);
        };
        return LiteUserDataWriter2;
      }(AbstractUserDataWriter);
      var WriteBatch = function() {
        function WriteBatch2(_firestore, _commitHandler) {
          this._firestore = _firestore;
          this._commitHandler = _commitHandler;
          this._mutations = [];
          this._committed = false;
          this._dataReader = newUserDataReader(_firestore);
        }
        WriteBatch2.prototype.set = function(documentRef, data, options2) {
          this._verifyNotCommitted();
          var ref = validateReference(documentRef, this._firestore);
          var convertedValue = applyFirestoreDataConverter(ref._converter, data, options2);
          var parsed = parseSetData(this._dataReader, "WriteBatch.set", ref._key, convertedValue, ref._converter !== null, options2);
          this._mutations.push(parsed.toMutation(ref._key, Precondition.none()));
          return this;
        };
        WriteBatch2.prototype.update = function(documentRef, fieldOrUpdateData, value) {
          var moreFieldsAndValues = [];
          for (var _i = 3; _i < arguments.length; _i++) {
            moreFieldsAndValues[_i - 3] = arguments[_i];
          }
          this._verifyNotCommitted();
          var ref = validateReference(documentRef, this._firestore);
          fieldOrUpdateData = util.getModularInstance(fieldOrUpdateData);
          var parsed;
          if (typeof fieldOrUpdateData === "string" || fieldOrUpdateData instanceof FieldPath$1) {
            parsed = parseUpdateVarargs(this._dataReader, "WriteBatch.update", ref._key, fieldOrUpdateData, value, moreFieldsAndValues);
          } else {
            parsed = parseUpdateData(this._dataReader, "WriteBatch.update", ref._key, fieldOrUpdateData);
          }
          this._mutations.push(parsed.toMutation(ref._key, Precondition.exists(true)));
          return this;
        };
        WriteBatch2.prototype.delete = function(documentRef) {
          this._verifyNotCommitted();
          var ref = validateReference(documentRef, this._firestore);
          this._mutations = this._mutations.concat(new DeleteMutation(ref._key, Precondition.none()));
          return this;
        };
        WriteBatch2.prototype.commit = function() {
          this._verifyNotCommitted();
          this._committed = true;
          if (this._mutations.length > 0) {
            return this._commitHandler(this._mutations);
          }
          return Promise.resolve();
        };
        WriteBatch2.prototype._verifyNotCommitted = function() {
          if (this._committed) {
            throw new FirestoreError(Code.FAILED_PRECONDITION, "A write batch can no longer be used after commit() has been called.");
          }
        };
        return WriteBatch2;
      }();
      function validateReference(documentRef, firestore) {
        documentRef = util.getModularInstance(documentRef);
        if (documentRef.firestore !== firestore) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Provided document reference is from a different Firestore instance.");
        } else {
          return documentRef;
        }
      }
      var Transaction$1 = function() {
        function Transaction$12(_firestore, _transaction) {
          this._firestore = _firestore;
          this._transaction = _transaction;
          this._dataReader = newUserDataReader(_firestore);
        }
        Transaction$12.prototype.get = function(documentRef) {
          var _this = this;
          var ref = validateReference(documentRef, this._firestore);
          var userDataWriter = new LiteUserDataWriter(this._firestore);
          return this._transaction.lookup([ref._key]).then(function(docs) {
            if (!docs || docs.length !== 1) {
              return fail();
            }
            var doc2 = docs[0];
            if (doc2.isFoundDocument()) {
              return new DocumentSnapshot(_this._firestore, userDataWriter, doc2.key, doc2, ref._converter);
            } else if (doc2.isNoDocument()) {
              return new DocumentSnapshot(_this._firestore, userDataWriter, ref._key, null, ref._converter);
            } else {
              throw fail();
            }
          });
        };
        Transaction$12.prototype.set = function(documentRef, value, options2) {
          var ref = validateReference(documentRef, this._firestore);
          var convertedValue = applyFirestoreDataConverter(ref._converter, value, options2);
          var parsed = parseSetData(this._dataReader, "Transaction.set", ref._key, convertedValue, ref._converter !== null, options2);
          this._transaction.set(ref._key, parsed);
          return this;
        };
        Transaction$12.prototype.update = function(documentRef, fieldOrUpdateData, value) {
          var moreFieldsAndValues = [];
          for (var _i = 3; _i < arguments.length; _i++) {
            moreFieldsAndValues[_i - 3] = arguments[_i];
          }
          var ref = validateReference(documentRef, this._firestore);
          fieldOrUpdateData = util.getModularInstance(fieldOrUpdateData);
          var parsed;
          if (typeof fieldOrUpdateData === "string" || fieldOrUpdateData instanceof FieldPath$1) {
            parsed = parseUpdateVarargs(this._dataReader, "Transaction.update", ref._key, fieldOrUpdateData, value, moreFieldsAndValues);
          } else {
            parsed = parseUpdateData(this._dataReader, "Transaction.update", ref._key, fieldOrUpdateData);
          }
          this._transaction.update(ref._key, parsed);
          return this;
        };
        Transaction$12.prototype.delete = function(documentRef) {
          var ref = validateReference(documentRef, this._firestore);
          this._transaction.delete(ref._key);
          return this;
        };
        return Transaction$12;
      }();
      function isPartialObserver(obj) {
        return implementsAnyMethods(obj, ["next", "error", "complete"]);
      }
      function implementsAnyMethods(obj, methods) {
        if (typeof obj !== "object" || obj === null) {
          return false;
        }
        var object = obj;
        for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
          var method = methods_1[_i];
          if (method in object && typeof object[method] === "function") {
            return true;
          }
        }
        return false;
      }
      function getDoc(reference) {
        reference = cast(reference, DocumentReference);
        var firestore = cast(reference.firestore, FirebaseFirestore$1);
        var client = ensureFirestoreConfigured(firestore);
        return firestoreClientGetDocumentViaSnapshotListener(client, reference._key).then(function(snapshot) {
          return convertToDocSnapshot(firestore, reference, snapshot);
        });
      }
      var ExpUserDataWriter = function(_super) {
        tslib.__extends(ExpUserDataWriter2, _super);
        function ExpUserDataWriter2(firestore) {
          var _this = _super.call(this) || this;
          _this.firestore = firestore;
          return _this;
        }
        ExpUserDataWriter2.prototype.convertBytes = function(bytes) {
          return new Bytes(bytes);
        };
        ExpUserDataWriter2.prototype.convertReference = function(name2) {
          var key = this.convertDocumentKey(name2, this.firestore._databaseId);
          return new DocumentReference(this.firestore, null, key);
        };
        return ExpUserDataWriter2;
      }(AbstractUserDataWriter);
      function getDocFromCache(reference) {
        reference = cast(reference, DocumentReference);
        var firestore = cast(reference.firestore, FirebaseFirestore$1);
        var client = ensureFirestoreConfigured(firestore);
        var userDataWriter = new ExpUserDataWriter(firestore);
        return firestoreClientGetDocumentFromLocalCache(client, reference._key).then(function(doc2) {
          return new DocumentSnapshot$1(firestore, userDataWriter, reference._key, doc2, new SnapshotMetadata(doc2 !== null && doc2.hasLocalMutations, true), reference._converter);
        });
      }
      function getDocFromServer(reference) {
        reference = cast(reference, DocumentReference);
        var firestore = cast(reference.firestore, FirebaseFirestore$1);
        var client = ensureFirestoreConfigured(firestore);
        return firestoreClientGetDocumentViaSnapshotListener(client, reference._key, {
          source: "server"
        }).then(function(snapshot) {
          return convertToDocSnapshot(firestore, reference, snapshot);
        });
      }
      function getDocs2(query3) {
        query3 = cast(query3, Query);
        var firestore = cast(query3.firestore, FirebaseFirestore$1);
        var client = ensureFirestoreConfigured(firestore);
        var userDataWriter = new ExpUserDataWriter(firestore);
        validateHasExplicitOrderByForLimitToLast(query3._query);
        return firestoreClientGetDocumentsViaSnapshotListener(client, query3._query).then(function(snapshot) {
          return new QuerySnapshot(firestore, userDataWriter, query3, snapshot);
        });
      }
      function getDocsFromCache(query3) {
        query3 = cast(query3, Query);
        var firestore = cast(query3.firestore, FirebaseFirestore$1);
        var client = ensureFirestoreConfigured(firestore);
        var userDataWriter = new ExpUserDataWriter(firestore);
        return firestoreClientGetDocumentsFromLocalCache(client, query3._query).then(function(snapshot) {
          return new QuerySnapshot(firestore, userDataWriter, query3, snapshot);
        });
      }
      function getDocsFromServer(query3) {
        query3 = cast(query3, Query);
        var firestore = cast(query3.firestore, FirebaseFirestore$1);
        var client = ensureFirestoreConfigured(firestore);
        var userDataWriter = new ExpUserDataWriter(firestore);
        return firestoreClientGetDocumentsViaSnapshotListener(client, query3._query, {
          source: "server"
        }).then(function(snapshot) {
          return new QuerySnapshot(firestore, userDataWriter, query3, snapshot);
        });
      }
      function setDoc(reference, data, options2) {
        reference = cast(reference, DocumentReference);
        var firestore = cast(reference.firestore, FirebaseFirestore$1);
        var convertedValue = applyFirestoreDataConverter(reference._converter, data, options2);
        var dataReader = newUserDataReader(firestore);
        var parsed = parseSetData(dataReader, "setDoc", reference._key, convertedValue, reference._converter !== null, options2);
        var mutation = parsed.toMutation(reference._key, Precondition.none());
        return executeWrite(firestore, [mutation]);
      }
      function updateDoc(reference, fieldOrUpdateData, value) {
        var moreFieldsAndValues = [];
        for (var _i = 3; _i < arguments.length; _i++) {
          moreFieldsAndValues[_i - 3] = arguments[_i];
        }
        reference = cast(reference, DocumentReference);
        var firestore = cast(reference.firestore, FirebaseFirestore$1);
        var dataReader = newUserDataReader(firestore);
        fieldOrUpdateData = util.getModularInstance(fieldOrUpdateData);
        var parsed;
        if (typeof fieldOrUpdateData === "string" || fieldOrUpdateData instanceof FieldPath$1) {
          parsed = parseUpdateVarargs(dataReader, "updateDoc", reference._key, fieldOrUpdateData, value, moreFieldsAndValues);
        } else {
          parsed = parseUpdateData(dataReader, "updateDoc", reference._key, fieldOrUpdateData);
        }
        var mutation = parsed.toMutation(reference._key, Precondition.exists(true));
        return executeWrite(firestore, [mutation]);
      }
      function deleteDoc(reference) {
        var firestore = cast(reference.firestore, FirebaseFirestore$1);
        var mutations = [new DeleteMutation(reference._key, Precondition.none())];
        return executeWrite(firestore, mutations);
      }
      function addDoc(reference, data) {
        var firestore = cast(reference.firestore, FirebaseFirestore$1);
        var docRef = doc(reference);
        var convertedValue = applyFirestoreDataConverter(reference._converter, data);
        var dataReader = newUserDataReader(reference.firestore);
        var parsed = parseSetData(dataReader, "addDoc", docRef._key, convertedValue, reference._converter !== null, {});
        var mutation = parsed.toMutation(docRef._key, Precondition.exists(false));
        return executeWrite(firestore, [mutation]).then(function() {
          return docRef;
        });
      }
      function onSnapshot(reference) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
        }
        var _a, _b, _c;
        reference = util.getModularInstance(reference);
        var options2 = {
          includeMetadataChanges: false
        };
        var currArg = 0;
        if (typeof args[currArg] === "object" && !isPartialObserver(args[currArg])) {
          options2 = args[currArg];
          currArg++;
        }
        var internalOptions = {
          includeMetadataChanges: options2.includeMetadataChanges
        };
        if (isPartialObserver(args[currArg])) {
          var userObserver = args[currArg];
          args[currArg] = (_a = userObserver.next) === null || _a === void 0 ? void 0 : _a.bind(userObserver);
          args[currArg + 1] = (_b = userObserver.error) === null || _b === void 0 ? void 0 : _b.bind(userObserver);
          args[currArg + 2] = (_c = userObserver.complete) === null || _c === void 0 ? void 0 : _c.bind(userObserver);
        }
        var observer;
        var firestore;
        var internalQuery;
        if (reference instanceof DocumentReference) {
          firestore = cast(reference.firestore, FirebaseFirestore$1);
          internalQuery = newQueryForPath(reference._key.path);
          observer = {
            next: function(snapshot) {
              if (args[currArg]) {
                args[currArg](convertToDocSnapshot(firestore, reference, snapshot));
              }
            },
            error: args[currArg + 1],
            complete: args[currArg + 2]
          };
        } else {
          var query_5 = cast(reference, Query);
          firestore = cast(query_5.firestore, FirebaseFirestore$1);
          internalQuery = query_5._query;
          var userDataWriter_1 = new ExpUserDataWriter(firestore);
          observer = {
            next: function(snapshot) {
              if (args[currArg]) {
                args[currArg](new QuerySnapshot(firestore, userDataWriter_1, query_5, snapshot));
              }
            },
            error: args[currArg + 1],
            complete: args[currArg + 2]
          };
          validateHasExplicitOrderByForLimitToLast(reference._query);
        }
        var client = ensureFirestoreConfigured(firestore);
        return firestoreClientListen(client, internalQuery, internalOptions, observer);
      }
      function onSnapshotsInSync(firestore, arg) {
        firestore = cast(firestore, FirebaseFirestore$1);
        var client = ensureFirestoreConfigured(firestore);
        var observer = isPartialObserver(arg) ? arg : {
          next: arg
        };
        return firestoreClientAddSnapshotsInSyncListener(client, observer);
      }
      function executeWrite(firestore, mutations) {
        var client = ensureFirestoreConfigured(firestore);
        return firestoreClientWrite(client, mutations);
      }
      function convertToDocSnapshot(firestore, ref, snapshot) {
        var doc2 = snapshot.docs.get(ref._key);
        var userDataWriter = new ExpUserDataWriter(firestore);
        return new DocumentSnapshot$1(firestore, userDataWriter, ref._key, doc2, new SnapshotMetadata(snapshot.hasPendingWrites, snapshot.fromCache), ref._converter);
      }
      var Transaction$2 = function(_super) {
        tslib.__extends(Transaction$22, _super);
        function Transaction$22(_firestore, _transaction) {
          var _this = _super.call(this, _firestore, _transaction) || this;
          _this._firestore = _firestore;
          return _this;
        }
        Transaction$22.prototype.get = function(documentRef) {
          var _this = this;
          var ref = validateReference(documentRef, this._firestore);
          var userDataWriter = new ExpUserDataWriter(this._firestore);
          return _super.prototype.get.call(this, documentRef).then(function(liteDocumentSnapshot) {
            return new DocumentSnapshot$1(_this._firestore, userDataWriter, ref._key, liteDocumentSnapshot._document, new SnapshotMetadata(false, false), ref._converter);
          });
        };
        return Transaction$22;
      }(Transaction$1);
      function runTransaction(firestore, updateFunction) {
        var client = ensureFirestoreConfigured(firestore);
        return firestoreClientTransaction(client, function(internalTransaction) {
          return updateFunction(new Transaction$2(firestore, internalTransaction));
        });
      }
      function deleteField() {
        return new DeleteFieldValueImpl("deleteField");
      }
      function serverTimestamp$1() {
        return new ServerTimestampFieldValueImpl("serverTimestamp");
      }
      function arrayUnion() {
        var elements = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          elements[_i] = arguments[_i];
        }
        return new ArrayUnionFieldValueImpl("arrayUnion", elements);
      }
      function arrayRemove() {
        var elements = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          elements[_i] = arguments[_i];
        }
        return new ArrayRemoveFieldValueImpl("arrayRemove", elements);
      }
      function increment(n) {
        return new NumericIncrementFieldValueImpl("increment", n);
      }
      function writeBatch(firestore) {
        firestore = cast(firestore, FirebaseFirestore$1);
        ensureFirestoreConfigured(firestore);
        return new WriteBatch(firestore, function(mutations) {
          return executeWrite(firestore, mutations);
        });
      }
      registerFirestore("node");
      exports3.AbstractUserDataWriter = AbstractUserDataWriter;
      exports3.Bytes = Bytes;
      exports3.CACHE_SIZE_UNLIMITED = CACHE_SIZE_UNLIMITED;
      exports3.CollectionReference = CollectionReference;
      exports3.DocumentReference = DocumentReference;
      exports3.DocumentSnapshot = DocumentSnapshot$1;
      exports3.FieldPath = FieldPath$1;
      exports3.FieldValue = FieldValue;
      exports3.FirebaseFirestore = FirebaseFirestore$1;
      exports3.FirestoreError = FirestoreError;
      exports3.GeoPoint = GeoPoint;
      exports3.LoadBundleTask = LoadBundleTask;
      exports3.Query = Query;
      exports3.QueryConstraint = QueryConstraint;
      exports3.QueryDocumentSnapshot = QueryDocumentSnapshot$1;
      exports3.QuerySnapshot = QuerySnapshot;
      exports3.SnapshotMetadata = SnapshotMetadata;
      exports3.Timestamp = Timestamp;
      exports3.Transaction = Transaction$2;
      exports3.WriteBatch = WriteBatch;
      exports3.addDoc = addDoc;
      exports3.arrayRemove = arrayRemove;
      exports3.arrayUnion = arrayUnion;
      exports3.clearIndexedDbPersistence = clearIndexedDbPersistence;
      exports3.collection = collection2;
      exports3.collectionGroup = collectionGroup;
      exports3.deleteDoc = deleteDoc;
      exports3.deleteField = deleteField;
      exports3.disableNetwork = disableNetwork;
      exports3.doc = doc;
      exports3.documentId = documentId;
      exports3.enableIndexedDbPersistence = enableIndexedDbPersistence;
      exports3.enableMultiTabIndexedDbPersistence = enableMultiTabIndexedDbPersistence;
      exports3.enableNetwork = enableNetwork;
      exports3.endAt = endAt;
      exports3.endBefore = endBefore;
      exports3.ensureFirestoreConfigured = ensureFirestoreConfigured;
      exports3.executeWrite = executeWrite;
      exports3.getDoc = getDoc;
      exports3.getDocFromCache = getDocFromCache;
      exports3.getDocFromServer = getDocFromServer;
      exports3.getDocs = getDocs2;
      exports3.getDocsFromCache = getDocsFromCache;
      exports3.getDocsFromServer = getDocsFromServer;
      exports3.getFirestore = getFirestore2;
      exports3.increment = increment;
      exports3.initializeFirestore = initializeFirestore;
      exports3.limit = limit;
      exports3.limitToLast = limitToLast;
      exports3.loadBundle = loadBundle;
      exports3.namedQuery = namedQuery;
      exports3.onSnapshot = onSnapshot;
      exports3.onSnapshotsInSync = onSnapshotsInSync;
      exports3.orderBy = orderBy;
      exports3.query = query2;
      exports3.queryEqual = queryEqual;
      exports3.refEqual = refEqual;
      exports3.runTransaction = runTransaction;
      exports3.serverTimestamp = serverTimestamp$1;
      exports3.setDoc = setDoc;
      exports3.setLogLevel = setLogLevel;
      exports3.snapshotEqual = snapshotEqual;
      exports3.startAfter = startAfter;
      exports3.startAt = startAt;
      exports3.terminate = terminate;
      exports3.updateDoc = updateDoc;
      exports3.useFirestoreEmulator = useFirestoreEmulator;
      exports3.waitForPendingWrites = waitForPendingWrites;
      exports3.where = where2;
      exports3.writeBatch = writeBatch;
      Object.defineProperty(exports3, "__esModule", {value: true});
    });
  }
});

// node_modules/firebase/firestore/dist/index.cjs.js
var require_index_cjs6 = __commonJS({
  "node_modules/firebase/firestore/dist/index.cjs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    var firestore = require_index_node_umd();
    Object.keys(firestore).forEach(function(k) {
      if (k !== "default")
        Object.defineProperty(exports2, k, {
          enumerable: true,
          get: function() {
            return firestore[k];
          }
        });
    });
  }
});

// node_modules/date-fns/_lib/toInteger/index.js
var require_toInteger = __commonJS({
  "node_modules/date-fns/_lib/toInteger/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = toInteger;
    function toInteger(dirtyNumber) {
      if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
        return NaN;
      }
      var number = Number(dirtyNumber);
      if (isNaN(number)) {
        return number;
      }
      return number < 0 ? Math.ceil(number) : Math.floor(number);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/requiredArgs/index.js
var require_requiredArgs = __commonJS({
  "node_modules/date-fns/_lib/requiredArgs/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = requiredArgs;
    function requiredArgs(required, args) {
      if (args.length < required) {
        throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
      }
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/toDate/index.js
var require_toDate = __commonJS({
  "node_modules/date-fns/toDate/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = toDate;
    var _index = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function toDate(argument) {
      (0, _index.default)(1, arguments);
      var argStr = Object.prototype.toString.call(argument);
      if (argument instanceof Date || typeof argument === "object" && argStr === "[object Date]") {
        return new Date(argument.getTime());
      } else if (typeof argument === "number" || argStr === "[object Number]") {
        return new Date(argument);
      } else {
        if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
          console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule");
          console.warn(new Error().stack);
        }
        return new Date(NaN);
      }
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/addDays/index.js
var require_addDays = __commonJS({
  "node_modules/date-fns/addDays/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = addDays;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function addDays(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var amount = (0, _index.default)(dirtyAmount);
      if (isNaN(amount)) {
        return new Date(NaN);
      }
      if (!amount) {
        return date;
      }
      date.setDate(date.getDate() + amount);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/addMonths/index.js
var require_addMonths = __commonJS({
  "node_modules/date-fns/addMonths/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = addMonths;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function addMonths(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var amount = (0, _index.default)(dirtyAmount);
      if (isNaN(amount)) {
        return new Date(NaN);
      }
      if (!amount) {
        return date;
      }
      var dayOfMonth = date.getDate();
      var endOfDesiredMonth = new Date(date.getTime());
      endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
      var daysInMonth = endOfDesiredMonth.getDate();
      if (dayOfMonth >= daysInMonth) {
        return endOfDesiredMonth;
      } else {
        date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
        return date;
      }
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/add/index.js
var require_add = __commonJS({
  "node_modules/date-fns/add/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = add;
    var _index = _interopRequireDefault(require_addDays());
    var _index2 = _interopRequireDefault(require_addMonths());
    var _index3 = _interopRequireDefault(require_toDate());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    var _index5 = _interopRequireDefault(require_toInteger());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function add(dirtyDate, duration) {
      (0, _index4.default)(2, arguments);
      if (!duration || typeof duration !== "object")
        return new Date(NaN);
      var years = "years" in duration ? (0, _index5.default)(duration.years) : 0;
      var months = "months" in duration ? (0, _index5.default)(duration.months) : 0;
      var weeks = "weeks" in duration ? (0, _index5.default)(duration.weeks) : 0;
      var days = "days" in duration ? (0, _index5.default)(duration.days) : 0;
      var hours = "hours" in duration ? (0, _index5.default)(duration.hours) : 0;
      var minutes = "minutes" in duration ? (0, _index5.default)(duration.minutes) : 0;
      var seconds = "seconds" in duration ? (0, _index5.default)(duration.seconds) : 0;
      var date = (0, _index3.default)(dirtyDate);
      var dateWithMonths = months || years ? (0, _index2.default)(date, months + years * 12) : date;
      var dateWithDays = days || weeks ? (0, _index.default)(dateWithMonths, days + weeks * 7) : dateWithMonths;
      var minutesToAdd = minutes + hours * 60;
      var secondsToAdd = seconds + minutesToAdd * 60;
      var msToAdd = secondsToAdd * 1e3;
      var finalDate = new Date(dateWithDays.getTime() + msToAdd);
      return finalDate;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isWeekend/index.js
var require_isWeekend = __commonJS({
  "node_modules/date-fns/isWeekend/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isWeekend;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isWeekend(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var day = date.getDay();
      return day === 0 || day === 6;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isSunday/index.js
var require_isSunday = __commonJS({
  "node_modules/date-fns/isSunday/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isSunday;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isSunday(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate).getDay() === 0;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isSaturday/index.js
var require_isSaturday = __commonJS({
  "node_modules/date-fns/isSaturday/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isSaturday;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isSaturday(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate).getDay() === 6;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/addBusinessDays/index.js
var require_addBusinessDays = __commonJS({
  "node_modules/date-fns/addBusinessDays/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = addBusinessDays;
    var _index = _interopRequireDefault(require_isWeekend());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_toInteger());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    var _index5 = _interopRequireDefault(require_isSunday());
    var _index6 = _interopRequireDefault(require_isSaturday());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function addBusinessDays(dirtyDate, dirtyAmount) {
      (0, _index4.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var startedOnWeekend = (0, _index.default)(date);
      var amount = (0, _index3.default)(dirtyAmount);
      if (isNaN(amount))
        return new Date(NaN);
      var hours = date.getHours();
      var sign = amount < 0 ? -1 : 1;
      var fullWeeks = (0, _index3.default)(amount / 5);
      date.setDate(date.getDate() + fullWeeks * 7);
      var restDays = Math.abs(amount % 5);
      while (restDays > 0) {
        date.setDate(date.getDate() + sign);
        if (!(0, _index.default)(date))
          restDays -= 1;
      }
      if (startedOnWeekend && (0, _index.default)(date) && amount !== 0) {
        if ((0, _index6.default)(date))
          date.setDate(date.getDate() + (sign < 0 ? 2 : -1));
        if ((0, _index5.default)(date))
          date.setDate(date.getDate() + (sign < 0 ? 1 : -2));
      }
      date.setHours(hours);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/addMilliseconds/index.js
var require_addMilliseconds = __commonJS({
  "node_modules/date-fns/addMilliseconds/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = addMilliseconds;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function addMilliseconds(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var timestamp = (0, _index2.default)(dirtyDate).getTime();
      var amount = (0, _index.default)(dirtyAmount);
      return new Date(timestamp + amount);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/addHours/index.js
var require_addHours = __commonJS({
  "node_modules/date-fns/addHours/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = addHours;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addMilliseconds());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var MILLISECONDS_IN_HOUR = 36e5;
    function addHours(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      return (0, _index2.default)(dirtyDate, amount * MILLISECONDS_IN_HOUR);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfWeek/index.js
var require_startOfWeek = __commonJS({
  "node_modules/date-fns/startOfWeek/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfWeek2;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_toInteger());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function startOfWeek2(dirtyDate, dirtyOptions) {
      (0, _index3.default)(1, arguments);
      var options2 = dirtyOptions || {};
      var locale = options2.locale;
      var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
      var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : (0, _index2.default)(localeWeekStartsOn);
      var weekStartsOn = options2.weekStartsOn == null ? defaultWeekStartsOn : (0, _index2.default)(options2.weekStartsOn);
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
      }
      var date = (0, _index.default)(dirtyDate);
      var day = date.getDay();
      var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
      date.setDate(date.getDate() - diff);
      date.setHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfISOWeek/index.js
var require_startOfISOWeek = __commonJS({
  "node_modules/date-fns/startOfISOWeek/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfISOWeek;
    var _index = _interopRequireDefault(require_startOfWeek());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function startOfISOWeek(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate, {
        weekStartsOn: 1
      });
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getISOWeekYear/index.js
var require_getISOWeekYear = __commonJS({
  "node_modules/date-fns/getISOWeekYear/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getISOWeekYear;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_startOfISOWeek());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function getISOWeekYear(dirtyDate) {
      (0, _index3.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var year = date.getFullYear();
      var fourthOfJanuaryOfNextYear = new Date(0);
      fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
      fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
      var startOfNextYear = (0, _index2.default)(fourthOfJanuaryOfNextYear);
      var fourthOfJanuaryOfThisYear = new Date(0);
      fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
      fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
      var startOfThisYear = (0, _index2.default)(fourthOfJanuaryOfThisYear);
      if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
      } else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
      } else {
        return year - 1;
      }
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfISOWeekYear/index.js
var require_startOfISOWeekYear = __commonJS({
  "node_modules/date-fns/startOfISOWeekYear/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfISOWeekYear;
    var _index = _interopRequireDefault(require_getISOWeekYear());
    var _index2 = _interopRequireDefault(require_startOfISOWeek());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function startOfISOWeekYear(dirtyDate) {
      (0, _index3.default)(1, arguments);
      var year = (0, _index.default)(dirtyDate);
      var fourthOfJanuary = new Date(0);
      fourthOfJanuary.setFullYear(year, 0, 4);
      fourthOfJanuary.setHours(0, 0, 0, 0);
      var date = (0, _index2.default)(fourthOfJanuary);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds/index.js
var require_getTimezoneOffsetInMilliseconds = __commonJS({
  "node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getTimezoneOffsetInMilliseconds;
    function getTimezoneOffsetInMilliseconds(date) {
      var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
      utcDate.setUTCFullYear(date.getFullYear());
      return date.getTime() - utcDate.getTime();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfDay/index.js
var require_startOfDay = __commonJS({
  "node_modules/date-fns/startOfDay/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfDay;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function startOfDay(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      date.setHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInCalendarDays/index.js
var require_differenceInCalendarDays = __commonJS({
  "node_modules/date-fns/differenceInCalendarDays/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInCalendarDays;
    var _index = _interopRequireDefault(require_getTimezoneOffsetInMilliseconds());
    var _index2 = _interopRequireDefault(require_startOfDay());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var MILLISECONDS_IN_DAY = 864e5;
    function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
      (0, _index3.default)(2, arguments);
      var startOfDayLeft = (0, _index2.default)(dirtyDateLeft);
      var startOfDayRight = (0, _index2.default)(dirtyDateRight);
      var timestampLeft = startOfDayLeft.getTime() - (0, _index.default)(startOfDayLeft);
      var timestampRight = startOfDayRight.getTime() - (0, _index.default)(startOfDayRight);
      return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setISOWeekYear/index.js
var require_setISOWeekYear = __commonJS({
  "node_modules/date-fns/setISOWeekYear/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setISOWeekYear;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_startOfISOWeekYear());
    var _index4 = _interopRequireDefault(require_differenceInCalendarDays());
    var _index5 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function setISOWeekYear(dirtyDate, dirtyISOWeekYear) {
      (0, _index5.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var isoWeekYear = (0, _index.default)(dirtyISOWeekYear);
      var diff = (0, _index4.default)(date, (0, _index3.default)(date));
      var fourthOfJanuary = new Date(0);
      fourthOfJanuary.setFullYear(isoWeekYear, 0, 4);
      fourthOfJanuary.setHours(0, 0, 0, 0);
      date = (0, _index3.default)(fourthOfJanuary);
      date.setDate(date.getDate() + diff);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/addISOWeekYears/index.js
var require_addISOWeekYears = __commonJS({
  "node_modules/date-fns/addISOWeekYears/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = addISOWeekYears;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_getISOWeekYear());
    var _index3 = _interopRequireDefault(require_setISOWeekYear());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function addISOWeekYears(dirtyDate, dirtyAmount) {
      (0, _index4.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      return (0, _index3.default)(dirtyDate, (0, _index2.default)(dirtyDate) + amount);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/addMinutes/index.js
var require_addMinutes = __commonJS({
  "node_modules/date-fns/addMinutes/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = addMinutes;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addMilliseconds());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var MILLISECONDS_IN_MINUTE = 6e4;
    function addMinutes(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      return (0, _index2.default)(dirtyDate, amount * MILLISECONDS_IN_MINUTE);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/addQuarters/index.js
var require_addQuarters = __commonJS({
  "node_modules/date-fns/addQuarters/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = addQuarters;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addMonths());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function addQuarters(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      var months = amount * 3;
      return (0, _index2.default)(dirtyDate, months);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/addSeconds/index.js
var require_addSeconds = __commonJS({
  "node_modules/date-fns/addSeconds/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = addSeconds;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addMilliseconds());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function addSeconds(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      return (0, _index2.default)(dirtyDate, amount * 1e3);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/addWeeks/index.js
var require_addWeeks = __commonJS({
  "node_modules/date-fns/addWeeks/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = addWeeks;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addDays());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function addWeeks(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      var days = amount * 7;
      return (0, _index2.default)(dirtyDate, days);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/addYears/index.js
var require_addYears = __commonJS({
  "node_modules/date-fns/addYears/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = addYears;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addMonths());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function addYears(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      return (0, _index2.default)(dirtyDate, amount * 12);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/areIntervalsOverlapping/index.js
var require_areIntervalsOverlapping = __commonJS({
  "node_modules/date-fns/areIntervalsOverlapping/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = areIntervalsOverlapping;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function areIntervalsOverlapping(dirtyIntervalLeft, dirtyIntervalRight) {
      var options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
        inclusive: false
      };
      (0, _index2.default)(2, arguments);
      var intervalLeft = dirtyIntervalLeft || {};
      var intervalRight = dirtyIntervalRight || {};
      var leftStartTime = (0, _index.default)(intervalLeft.start).getTime();
      var leftEndTime = (0, _index.default)(intervalLeft.end).getTime();
      var rightStartTime = (0, _index.default)(intervalRight.start).getTime();
      var rightEndTime = (0, _index.default)(intervalRight.end).getTime();
      if (!(leftStartTime <= leftEndTime && rightStartTime <= rightEndTime)) {
        throw new RangeError("Invalid interval");
      }
      if (options2.inclusive) {
        return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;
      }
      return leftStartTime < rightEndTime && rightStartTime < leftEndTime;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/closestIndexTo/index.js
var require_closestIndexTo = __commonJS({
  "node_modules/date-fns/closestIndexTo/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = closestIndexTo;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function closestIndexTo(dirtyDateToCompare, dirtyDatesArray) {
      (0, _index2.default)(2, arguments);
      var dateToCompare = (0, _index.default)(dirtyDateToCompare);
      if (isNaN(dateToCompare)) {
        return NaN;
      }
      var timeToCompare = dateToCompare.getTime();
      var datesArray;
      if (dirtyDatesArray == null) {
        datesArray = [];
      } else if (typeof dirtyDatesArray.forEach === "function") {
        datesArray = dirtyDatesArray;
      } else {
        datesArray = Array.prototype.slice.call(dirtyDatesArray);
      }
      var result;
      var minDistance;
      datesArray.forEach(function(dirtyDate, index2) {
        var currentDate = (0, _index.default)(dirtyDate);
        if (isNaN(currentDate)) {
          result = NaN;
          minDistance = NaN;
          return;
        }
        var distance = Math.abs(timeToCompare - currentDate.getTime());
        if (result == null || distance < minDistance) {
          result = index2;
          minDistance = distance;
        }
      });
      return result;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/closestTo/index.js
var require_closestTo = __commonJS({
  "node_modules/date-fns/closestTo/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = closestTo;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function closestTo(dirtyDateToCompare, dirtyDatesArray) {
      (0, _index2.default)(2, arguments);
      var dateToCompare = (0, _index.default)(dirtyDateToCompare);
      if (isNaN(dateToCompare)) {
        return new Date(NaN);
      }
      var timeToCompare = dateToCompare.getTime();
      var datesArray;
      if (dirtyDatesArray == null) {
        datesArray = [];
      } else if (typeof dirtyDatesArray.forEach === "function") {
        datesArray = dirtyDatesArray;
      } else {
        datesArray = Array.prototype.slice.call(dirtyDatesArray);
      }
      var result;
      var minDistance;
      datesArray.forEach(function(dirtyDate) {
        var currentDate = (0, _index.default)(dirtyDate);
        if (isNaN(currentDate)) {
          result = new Date(NaN);
          minDistance = NaN;
          return;
        }
        var distance = Math.abs(timeToCompare - currentDate.getTime());
        if (result == null || distance < minDistance) {
          result = currentDate;
          minDistance = distance;
        }
      });
      return result;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/compareAsc/index.js
var require_compareAsc = __commonJS({
  "node_modules/date-fns/compareAsc/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = compareAsc;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function compareAsc(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var dateLeft = (0, _index.default)(dirtyDateLeft);
      var dateRight = (0, _index.default)(dirtyDateRight);
      var diff = dateLeft.getTime() - dateRight.getTime();
      if (diff < 0) {
        return -1;
      } else if (diff > 0) {
        return 1;
      } else {
        return diff;
      }
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/compareDesc/index.js
var require_compareDesc = __commonJS({
  "node_modules/date-fns/compareDesc/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = compareDesc;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function compareDesc(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var dateLeft = (0, _index.default)(dirtyDateLeft);
      var dateRight = (0, _index.default)(dirtyDateRight);
      var diff = dateLeft.getTime() - dateRight.getTime();
      if (diff > 0) {
        return -1;
      } else if (diff < 0) {
        return 1;
      } else {
        return diff;
      }
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isValid/index.js
var require_isValid = __commonJS({
  "node_modules/date-fns/isValid/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isValid;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isValid(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      return !isNaN(date);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isSameDay/index.js
var require_isSameDay = __commonJS({
  "node_modules/date-fns/isSameDay/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isSameDay;
    var _index = _interopRequireDefault(require_startOfDay());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isSameDay(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var dateLeftStartOfDay = (0, _index.default)(dirtyDateLeft);
      var dateRightStartOfDay = (0, _index.default)(dirtyDateRight);
      return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInBusinessDays/index.js
var require_differenceInBusinessDays = __commonJS({
  "node_modules/date-fns/differenceInBusinessDays/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInBusinessDays;
    var _index = _interopRequireDefault(require_isValid());
    var _index2 = _interopRequireDefault(require_isWeekend());
    var _index3 = _interopRequireDefault(require_toDate());
    var _index4 = _interopRequireDefault(require_differenceInCalendarDays());
    var _index5 = _interopRequireDefault(require_addDays());
    var _index6 = _interopRequireDefault(require_isSameDay());
    var _index7 = _interopRequireDefault(require_toInteger());
    var _index8 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function differenceInBusinessDays(dirtyDateLeft, dirtyDateRight) {
      (0, _index8.default)(2, arguments);
      var dateLeft = (0, _index3.default)(dirtyDateLeft);
      var dateRight = (0, _index3.default)(dirtyDateRight);
      if (!(0, _index.default)(dateLeft) || !(0, _index.default)(dateRight))
        return new Date(NaN);
      var calendarDifference = (0, _index4.default)(dateLeft, dateRight);
      var sign = calendarDifference < 0 ? -1 : 1;
      var weeks = (0, _index7.default)(calendarDifference / 7);
      var result = weeks * 5;
      dateRight = (0, _index5.default)(dateRight, weeks * 7);
      while (!(0, _index6.default)(dateLeft, dateRight)) {
        result += (0, _index2.default)(dateRight) ? 0 : sign;
        dateRight = (0, _index5.default)(dateRight, sign);
      }
      return result === 0 ? 0 : result;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInCalendarISOWeekYears/index.js
var require_differenceInCalendarISOWeekYears = __commonJS({
  "node_modules/date-fns/differenceInCalendarISOWeekYears/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInCalendarISOWeekYears;
    var _index = _interopRequireDefault(require_getISOWeekYear());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function differenceInCalendarISOWeekYears(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      return (0, _index.default)(dirtyDateLeft) - (0, _index.default)(dirtyDateRight);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInCalendarISOWeeks/index.js
var require_differenceInCalendarISOWeeks = __commonJS({
  "node_modules/date-fns/differenceInCalendarISOWeeks/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInCalendarISOWeeks;
    var _index = _interopRequireDefault(require_getTimezoneOffsetInMilliseconds());
    var _index2 = _interopRequireDefault(require_startOfISOWeek());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var MILLISECONDS_IN_WEEK = 6048e5;
    function differenceInCalendarISOWeeks(dirtyDateLeft, dirtyDateRight) {
      (0, _index3.default)(2, arguments);
      var startOfISOWeekLeft = (0, _index2.default)(dirtyDateLeft);
      var startOfISOWeekRight = (0, _index2.default)(dirtyDateRight);
      var timestampLeft = startOfISOWeekLeft.getTime() - (0, _index.default)(startOfISOWeekLeft);
      var timestampRight = startOfISOWeekRight.getTime() - (0, _index.default)(startOfISOWeekRight);
      return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInCalendarMonths/index.js
var require_differenceInCalendarMonths = __commonJS({
  "node_modules/date-fns/differenceInCalendarMonths/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInCalendarMonths;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var dateLeft = (0, _index.default)(dirtyDateLeft);
      var dateRight = (0, _index.default)(dirtyDateRight);
      var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
      var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
      return yearDiff * 12 + monthDiff;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getQuarter/index.js
var require_getQuarter = __commonJS({
  "node_modules/date-fns/getQuarter/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getQuarter;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function getQuarter(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var quarter = Math.floor(date.getMonth() / 3) + 1;
      return quarter;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInCalendarQuarters/index.js
var require_differenceInCalendarQuarters = __commonJS({
  "node_modules/date-fns/differenceInCalendarQuarters/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInCalendarQuarters;
    var _index = _interopRequireDefault(require_getQuarter());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function differenceInCalendarQuarters(dirtyDateLeft, dirtyDateRight) {
      (0, _index3.default)(2, arguments);
      var dateLeft = (0, _index2.default)(dirtyDateLeft);
      var dateRight = (0, _index2.default)(dirtyDateRight);
      var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
      var quarterDiff = (0, _index.default)(dateLeft) - (0, _index.default)(dateRight);
      return yearDiff * 4 + quarterDiff;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInCalendarWeeks/index.js
var require_differenceInCalendarWeeks = __commonJS({
  "node_modules/date-fns/differenceInCalendarWeeks/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInCalendarWeeks;
    var _index = _interopRequireDefault(require_startOfWeek());
    var _index2 = _interopRequireDefault(require_getTimezoneOffsetInMilliseconds());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var MILLISECONDS_IN_WEEK = 6048e5;
    function differenceInCalendarWeeks(dirtyDateLeft, dirtyDateRight, dirtyOptions) {
      (0, _index3.default)(2, arguments);
      var startOfWeekLeft = (0, _index.default)(dirtyDateLeft, dirtyOptions);
      var startOfWeekRight = (0, _index.default)(dirtyDateRight, dirtyOptions);
      var timestampLeft = startOfWeekLeft.getTime() - (0, _index2.default)(startOfWeekLeft);
      var timestampRight = startOfWeekRight.getTime() - (0, _index2.default)(startOfWeekRight);
      return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInCalendarYears/index.js
var require_differenceInCalendarYears = __commonJS({
  "node_modules/date-fns/differenceInCalendarYears/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInCalendarYears;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var dateLeft = (0, _index.default)(dirtyDateLeft);
      var dateRight = (0, _index.default)(dirtyDateRight);
      return dateLeft.getFullYear() - dateRight.getFullYear();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInDays/index.js
var require_differenceInDays = __commonJS({
  "node_modules/date-fns/differenceInDays/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInDays;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_differenceInCalendarDays());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function compareLocalAsc(dateLeft, dateRight) {
      var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();
      if (diff < 0) {
        return -1;
      } else if (diff > 0) {
        return 1;
      } else {
        return diff;
      }
    }
    function differenceInDays(dirtyDateLeft, dirtyDateRight) {
      (0, _index3.default)(2, arguments);
      var dateLeft = (0, _index.default)(dirtyDateLeft);
      var dateRight = (0, _index.default)(dirtyDateRight);
      var sign = compareLocalAsc(dateLeft, dateRight);
      var difference = Math.abs((0, _index2.default)(dateLeft, dateRight));
      dateLeft.setDate(dateLeft.getDate() - sign * difference);
      var isLastDayNotFull = compareLocalAsc(dateLeft, dateRight) === -sign;
      var result = sign * (difference - isLastDayNotFull);
      return result === 0 ? 0 : result;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInMilliseconds/index.js
var require_differenceInMilliseconds = __commonJS({
  "node_modules/date-fns/differenceInMilliseconds/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInMilliseconds;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var dateLeft = (0, _index.default)(dirtyDateLeft);
      var dateRight = (0, _index.default)(dirtyDateRight);
      return dateLeft.getTime() - dateRight.getTime();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInHours/index.js
var require_differenceInHours = __commonJS({
  "node_modules/date-fns/differenceInHours/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInHours;
    var _index = _interopRequireDefault(require_differenceInMilliseconds());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var MILLISECONDS_IN_HOUR = 36e5;
    function differenceInHours(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var diff = (0, _index.default)(dirtyDateLeft, dirtyDateRight) / MILLISECONDS_IN_HOUR;
      return diff > 0 ? Math.floor(diff) : Math.ceil(diff);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/subISOWeekYears/index.js
var require_subISOWeekYears = __commonJS({
  "node_modules/date-fns/subISOWeekYears/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = subISOWeekYears;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addISOWeekYears());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function subISOWeekYears(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      return (0, _index2.default)(dirtyDate, -amount);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInISOWeekYears/index.js
var require_differenceInISOWeekYears = __commonJS({
  "node_modules/date-fns/differenceInISOWeekYears/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInISOWeekYears;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_differenceInCalendarISOWeekYears());
    var _index3 = _interopRequireDefault(require_compareAsc());
    var _index4 = _interopRequireDefault(require_subISOWeekYears());
    var _index5 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function differenceInISOWeekYears(dirtyDateLeft, dirtyDateRight) {
      (0, _index5.default)(2, arguments);
      var dateLeft = (0, _index.default)(dirtyDateLeft);
      var dateRight = (0, _index.default)(dirtyDateRight);
      var sign = (0, _index3.default)(dateLeft, dateRight);
      var difference = Math.abs((0, _index2.default)(dateLeft, dateRight));
      dateLeft = (0, _index4.default)(dateLeft, sign * difference);
      var isLastISOWeekYearNotFull = (0, _index3.default)(dateLeft, dateRight) === -sign;
      var result = sign * (difference - isLastISOWeekYearNotFull);
      return result === 0 ? 0 : result;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInMinutes/index.js
var require_differenceInMinutes = __commonJS({
  "node_modules/date-fns/differenceInMinutes/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInMinutes;
    var _index = _interopRequireDefault(require_differenceInMilliseconds());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var MILLISECONDS_IN_MINUTE = 6e4;
    function differenceInMinutes(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var diff = (0, _index.default)(dirtyDateLeft, dirtyDateRight) / MILLISECONDS_IN_MINUTE;
      return diff > 0 ? Math.floor(diff) : Math.ceil(diff);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfDay/index.js
var require_endOfDay = __commonJS({
  "node_modules/date-fns/endOfDay/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfDay;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function endOfDay(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      date.setHours(23, 59, 59, 999);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfMonth/index.js
var require_endOfMonth = __commonJS({
  "node_modules/date-fns/endOfMonth/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfMonth;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function endOfMonth(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var month = date.getMonth();
      date.setFullYear(date.getFullYear(), month + 1, 0);
      date.setHours(23, 59, 59, 999);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isLastDayOfMonth/index.js
var require_isLastDayOfMonth = __commonJS({
  "node_modules/date-fns/isLastDayOfMonth/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isLastDayOfMonth;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_endOfDay());
    var _index3 = _interopRequireDefault(require_endOfMonth());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isLastDayOfMonth(dirtyDate) {
      (0, _index4.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      return (0, _index2.default)(date).getTime() === (0, _index3.default)(date).getTime();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInMonths/index.js
var require_differenceInMonths = __commonJS({
  "node_modules/date-fns/differenceInMonths/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInMonths;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_differenceInCalendarMonths());
    var _index3 = _interopRequireDefault(require_compareAsc());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    var _index5 = _interopRequireDefault(require_isLastDayOfMonth());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function differenceInMonths(dirtyDateLeft, dirtyDateRight) {
      (0, _index4.default)(2, arguments);
      var dateLeft = (0, _index.default)(dirtyDateLeft);
      var dateRight = (0, _index.default)(dirtyDateRight);
      var sign = (0, _index3.default)(dateLeft, dateRight);
      var difference = Math.abs((0, _index2.default)(dateLeft, dateRight));
      var result;
      if (difference < 1) {
        result = 0;
      } else {
        if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {
          dateLeft.setDate(30);
        }
        dateLeft.setMonth(dateLeft.getMonth() - sign * difference);
        var isLastMonthNotFull = (0, _index3.default)(dateLeft, dateRight) === -sign;
        if ((0, _index5.default)((0, _index.default)(dirtyDateLeft)) && difference === 1 && (0, _index3.default)(dirtyDateLeft, dateRight) === 1) {
          isLastMonthNotFull = false;
        }
        result = sign * (difference - isLastMonthNotFull);
      }
      return result === 0 ? 0 : result;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInQuarters/index.js
var require_differenceInQuarters = __commonJS({
  "node_modules/date-fns/differenceInQuarters/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInQuarters;
    var _index = _interopRequireDefault(require_differenceInMonths());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function differenceInQuarters(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var diff = (0, _index.default)(dirtyDateLeft, dirtyDateRight) / 3;
      return diff > 0 ? Math.floor(diff) : Math.ceil(diff);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInSeconds/index.js
var require_differenceInSeconds = __commonJS({
  "node_modules/date-fns/differenceInSeconds/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInSeconds;
    var _index = _interopRequireDefault(require_differenceInMilliseconds());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function differenceInSeconds(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var diff = (0, _index.default)(dirtyDateLeft, dirtyDateRight) / 1e3;
      return diff > 0 ? Math.floor(diff) : Math.ceil(diff);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInWeeks/index.js
var require_differenceInWeeks = __commonJS({
  "node_modules/date-fns/differenceInWeeks/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInWeeks;
    var _index = _interopRequireDefault(require_differenceInDays());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function differenceInWeeks(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var diff = (0, _index.default)(dirtyDateLeft, dirtyDateRight) / 7;
      return diff > 0 ? Math.floor(diff) : Math.ceil(diff);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInYears/index.js
var require_differenceInYears = __commonJS({
  "node_modules/date-fns/differenceInYears/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInYears;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_differenceInCalendarYears());
    var _index3 = _interopRequireDefault(require_compareAsc());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function differenceInYears(dirtyDateLeft, dirtyDateRight) {
      (0, _index4.default)(2, arguments);
      var dateLeft = (0, _index.default)(dirtyDateLeft);
      var dateRight = (0, _index.default)(dirtyDateRight);
      var sign = (0, _index3.default)(dateLeft, dateRight);
      var difference = Math.abs((0, _index2.default)(dateLeft, dateRight));
      dateLeft.setFullYear("1584");
      dateRight.setFullYear("1584");
      var isLastYearNotFull = (0, _index3.default)(dateLeft, dateRight) === -sign;
      var result = sign * (difference - isLastYearNotFull);
      return result === 0 ? 0 : result;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/eachDayOfInterval/index.js
var require_eachDayOfInterval = __commonJS({
  "node_modules/date-fns/eachDayOfInterval/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = eachDayOfInterval;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function eachDayOfInterval(dirtyInterval, options2) {
      (0, _index2.default)(1, arguments);
      var interval = dirtyInterval || {};
      var startDate = (0, _index.default)(interval.start);
      var endDate = (0, _index.default)(interval.end);
      var endTime = endDate.getTime();
      if (!(startDate.getTime() <= endTime)) {
        throw new RangeError("Invalid interval");
      }
      var dates = [];
      var currentDate = startDate;
      currentDate.setHours(0, 0, 0, 0);
      var step = options2 && "step" in options2 ? Number(options2.step) : 1;
      if (step < 1 || isNaN(step))
        throw new RangeError("`options.step` must be a number greater than 1");
      while (currentDate.getTime() <= endTime) {
        dates.push((0, _index.default)(currentDate));
        currentDate.setDate(currentDate.getDate() + step);
        currentDate.setHours(0, 0, 0, 0);
      }
      return dates;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/eachHourOfInterval/index.js
var require_eachHourOfInterval = __commonJS({
  "node_modules/date-fns/eachHourOfInterval/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = eachHourOfInterval;
    var _index = _interopRequireDefault(require_addHours());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function eachHourOfInterval(dirtyInterval, options2) {
      (0, _index3.default)(1, arguments);
      var interval = dirtyInterval || {};
      var startDate = (0, _index2.default)(interval.start);
      var endDate = (0, _index2.default)(interval.end);
      var startTime = startDate.getTime();
      var endTime = endDate.getTime();
      if (!(startTime <= endTime)) {
        throw new RangeError("Invalid interval");
      }
      var dates = [];
      var currentDate = startDate;
      currentDate.setMinutes(0, 0, 0);
      var step = options2 && "step" in options2 ? Number(options2.step) : 1;
      if (step < 1 || isNaN(step))
        throw new RangeError("`options.step` must be a number greater than 1");
      while (currentDate.getTime() <= endTime) {
        dates.push((0, _index2.default)(currentDate));
        currentDate = (0, _index.default)(currentDate, step);
      }
      return dates;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfMinute/index.js
var require_startOfMinute = __commonJS({
  "node_modules/date-fns/startOfMinute/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfMinute;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function startOfMinute(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      date.setSeconds(0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/eachMinuteOfInterval/index.js
var require_eachMinuteOfInterval = __commonJS({
  "node_modules/date-fns/eachMinuteOfInterval/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = eachMinuteOfInterval;
    var _index = _interopRequireDefault(require_addMinutes());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_startOfMinute());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function eachMinuteOfInterval(interval, options2) {
      (0, _index4.default)(1, arguments);
      var startDate = (0, _index3.default)((0, _index2.default)(interval.start));
      var endDate = (0, _index3.default)((0, _index2.default)(interval.end));
      var startTime = startDate.getTime();
      var endTime = endDate.getTime();
      if (startTime >= endTime) {
        throw new RangeError("Invalid interval");
      }
      var dates = [];
      var currentDate = startDate;
      var step = options2 && "step" in options2 ? Number(options2.step) : 1;
      if (step < 1 || isNaN(step))
        throw new RangeError("`options.step` must be a number equal or greater than 1");
      while (currentDate.getTime() <= endTime) {
        dates.push((0, _index2.default)(currentDate));
        currentDate = (0, _index.default)(currentDate, step);
      }
      return dates;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/eachMonthOfInterval/index.js
var require_eachMonthOfInterval = __commonJS({
  "node_modules/date-fns/eachMonthOfInterval/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = eachMonthOfInterval;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function eachMonthOfInterval(dirtyInterval) {
      (0, _index2.default)(1, arguments);
      var interval = dirtyInterval || {};
      var startDate = (0, _index.default)(interval.start);
      var endDate = (0, _index.default)(interval.end);
      var endTime = endDate.getTime();
      var dates = [];
      if (!(startDate.getTime() <= endTime)) {
        throw new RangeError("Invalid interval");
      }
      var currentDate = startDate;
      currentDate.setHours(0, 0, 0, 0);
      currentDate.setDate(1);
      while (currentDate.getTime() <= endTime) {
        dates.push((0, _index.default)(currentDate));
        currentDate.setMonth(currentDate.getMonth() + 1);
      }
      return dates;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfQuarter/index.js
var require_startOfQuarter = __commonJS({
  "node_modules/date-fns/startOfQuarter/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfQuarter;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function startOfQuarter(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var currentMonth = date.getMonth();
      var month = currentMonth - currentMonth % 3;
      date.setMonth(month, 1);
      date.setHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/eachQuarterOfInterval/index.js
var require_eachQuarterOfInterval = __commonJS({
  "node_modules/date-fns/eachQuarterOfInterval/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = eachQuarterOfInterval;
    var _index = _interopRequireDefault(require_addQuarters());
    var _index2 = _interopRequireDefault(require_startOfQuarter());
    var _index3 = _interopRequireDefault(require_toDate());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function eachQuarterOfInterval(dirtyInterval) {
      (0, _index4.default)(1, arguments);
      var interval = dirtyInterval || {};
      var startDate = (0, _index3.default)(interval.start);
      var endDate = (0, _index3.default)(interval.end);
      var endTime = endDate.getTime();
      if (!(startDate.getTime() <= endTime)) {
        throw new RangeError("Invalid interval");
      }
      var startDateQuarter = (0, _index2.default)(startDate);
      var endDateQuarter = (0, _index2.default)(endDate);
      endTime = endDateQuarter.getTime();
      var quarters = [];
      var currentQuarter = startDateQuarter;
      while (currentQuarter.getTime() <= endTime) {
        quarters.push((0, _index3.default)(currentQuarter));
        currentQuarter = (0, _index.default)(currentQuarter, 1);
      }
      return quarters;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/eachWeekOfInterval/index.js
var require_eachWeekOfInterval = __commonJS({
  "node_modules/date-fns/eachWeekOfInterval/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = eachWeekOfInterval;
    var _index = _interopRequireDefault(require_addWeeks());
    var _index2 = _interopRequireDefault(require_startOfWeek());
    var _index3 = _interopRequireDefault(require_toDate());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function eachWeekOfInterval(dirtyInterval, options2) {
      (0, _index4.default)(1, arguments);
      var interval = dirtyInterval || {};
      var startDate = (0, _index3.default)(interval.start);
      var endDate = (0, _index3.default)(interval.end);
      var endTime = endDate.getTime();
      if (!(startDate.getTime() <= endTime)) {
        throw new RangeError("Invalid interval");
      }
      var startDateWeek = (0, _index2.default)(startDate, options2);
      var endDateWeek = (0, _index2.default)(endDate, options2);
      startDateWeek.setHours(15);
      endDateWeek.setHours(15);
      endTime = endDateWeek.getTime();
      var weeks = [];
      var currentWeek = startDateWeek;
      while (currentWeek.getTime() <= endTime) {
        currentWeek.setHours(0);
        weeks.push((0, _index3.default)(currentWeek));
        currentWeek = (0, _index.default)(currentWeek, 1);
        currentWeek.setHours(15);
      }
      return weeks;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/eachWeekendOfInterval/index.js
var require_eachWeekendOfInterval = __commonJS({
  "node_modules/date-fns/eachWeekendOfInterval/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = eachWeekendOfInterval;
    var _index = _interopRequireDefault(require_eachDayOfInterval());
    var _index2 = _interopRequireDefault(require_isSunday());
    var _index3 = _interopRequireDefault(require_isWeekend());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function eachWeekendOfInterval(interval) {
      (0, _index4.default)(1, arguments);
      var dateInterval = (0, _index.default)(interval);
      var weekends = [];
      var index2 = 0;
      while (index2 < dateInterval.length) {
        var date = dateInterval[index2++];
        if ((0, _index3.default)(date)) {
          weekends.push(date);
          if ((0, _index2.default)(date))
            index2 = index2 + 5;
        }
      }
      return weekends;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfMonth/index.js
var require_startOfMonth = __commonJS({
  "node_modules/date-fns/startOfMonth/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfMonth;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function startOfMonth(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      date.setDate(1);
      date.setHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/eachWeekendOfMonth/index.js
var require_eachWeekendOfMonth = __commonJS({
  "node_modules/date-fns/eachWeekendOfMonth/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = eachWeekendOfMonth;
    var _index = _interopRequireDefault(require_eachWeekendOfInterval());
    var _index2 = _interopRequireDefault(require_startOfMonth());
    var _index3 = _interopRequireDefault(require_endOfMonth());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function eachWeekendOfMonth(dirtyDate) {
      (0, _index4.default)(1, arguments);
      var startDate = (0, _index2.default)(dirtyDate);
      if (isNaN(startDate.getTime()))
        throw new RangeError("The passed date is invalid");
      var endDate = (0, _index3.default)(dirtyDate);
      return (0, _index.default)({
        start: startDate,
        end: endDate
      });
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfYear/index.js
var require_startOfYear = __commonJS({
  "node_modules/date-fns/startOfYear/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfYear;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function startOfYear(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var cleanDate = (0, _index.default)(dirtyDate);
      var date = new Date(0);
      date.setFullYear(cleanDate.getFullYear(), 0, 1);
      date.setHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfYear/index.js
var require_endOfYear = __commonJS({
  "node_modules/date-fns/endOfYear/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfYear;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function endOfYear(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var year = date.getFullYear();
      date.setFullYear(year + 1, 0, 0);
      date.setHours(23, 59, 59, 999);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/eachWeekendOfYear/index.js
var require_eachWeekendOfYear = __commonJS({
  "node_modules/date-fns/eachWeekendOfYear/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = eachWeekendOfYear;
    var _index = _interopRequireDefault(require_eachWeekendOfInterval());
    var _index2 = _interopRequireDefault(require_startOfYear());
    var _index3 = _interopRequireDefault(require_endOfYear());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function eachWeekendOfYear(dirtyDate) {
      (0, _index4.default)(1, arguments);
      var startDate = (0, _index2.default)(dirtyDate);
      if (isNaN(startDate))
        throw new RangeError("The passed date is invalid");
      var endDate = (0, _index3.default)(dirtyDate);
      return (0, _index.default)({
        start: startDate,
        end: endDate
      });
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/eachYearOfInterval/index.js
var require_eachYearOfInterval = __commonJS({
  "node_modules/date-fns/eachYearOfInterval/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = eachYearOfInterval;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function eachYearOfInterval(dirtyInterval) {
      (0, _index2.default)(1, arguments);
      var interval = dirtyInterval || {};
      var startDate = (0, _index.default)(interval.start);
      var endDate = (0, _index.default)(interval.end);
      var endTime = endDate.getTime();
      if (!(startDate.getTime() <= endTime)) {
        throw new RangeError("Invalid interval");
      }
      var dates = [];
      var currentDate = startDate;
      currentDate.setHours(0, 0, 0, 0);
      currentDate.setMonth(0, 1);
      while (currentDate.getTime() <= endTime) {
        dates.push((0, _index.default)(currentDate));
        currentDate.setFullYear(currentDate.getFullYear() + 1);
      }
      return dates;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfDecade/index.js
var require_endOfDecade = __commonJS({
  "node_modules/date-fns/endOfDecade/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfDecade;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function endOfDecade(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var year = date.getFullYear();
      var decade = 9 + Math.floor(year / 10) * 10;
      date.setFullYear(decade, 11, 31);
      date.setHours(23, 59, 59, 999);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfHour/index.js
var require_endOfHour = __commonJS({
  "node_modules/date-fns/endOfHour/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfHour;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function endOfHour(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      date.setMinutes(59, 59, 999);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfWeek/index.js
var require_endOfWeek = __commonJS({
  "node_modules/date-fns/endOfWeek/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfWeek2;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_toInteger());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function endOfWeek2(dirtyDate, dirtyOptions) {
      (0, _index3.default)(1, arguments);
      var options2 = dirtyOptions || {};
      var locale = options2.locale;
      var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
      var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : (0, _index2.default)(localeWeekStartsOn);
      var weekStartsOn = options2.weekStartsOn == null ? defaultWeekStartsOn : (0, _index2.default)(options2.weekStartsOn);
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
      }
      var date = (0, _index.default)(dirtyDate);
      var day = date.getDay();
      var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
      date.setDate(date.getDate() + diff);
      date.setHours(23, 59, 59, 999);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfISOWeek/index.js
var require_endOfISOWeek = __commonJS({
  "node_modules/date-fns/endOfISOWeek/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfISOWeek;
    var _index = _interopRequireDefault(require_endOfWeek());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function endOfISOWeek(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate, {
        weekStartsOn: 1
      });
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfISOWeekYear/index.js
var require_endOfISOWeekYear = __commonJS({
  "node_modules/date-fns/endOfISOWeekYear/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfISOWeekYear;
    var _index = _interopRequireDefault(require_getISOWeekYear());
    var _index2 = _interopRequireDefault(require_startOfISOWeek());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function endOfISOWeekYear(dirtyDate) {
      (0, _index3.default)(1, arguments);
      var year = (0, _index.default)(dirtyDate);
      var fourthOfJanuaryOfNextYear = new Date(0);
      fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
      fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
      var date = (0, _index2.default)(fourthOfJanuaryOfNextYear);
      date.setMilliseconds(date.getMilliseconds() - 1);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfMinute/index.js
var require_endOfMinute = __commonJS({
  "node_modules/date-fns/endOfMinute/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfMinute;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function endOfMinute(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      date.setSeconds(59, 999);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfQuarter/index.js
var require_endOfQuarter = __commonJS({
  "node_modules/date-fns/endOfQuarter/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfQuarter;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function endOfQuarter(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var currentMonth = date.getMonth();
      var month = currentMonth - currentMonth % 3 + 3;
      date.setMonth(month, 0);
      date.setHours(23, 59, 59, 999);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfSecond/index.js
var require_endOfSecond = __commonJS({
  "node_modules/date-fns/endOfSecond/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfSecond;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function endOfSecond(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      date.setMilliseconds(999);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfToday/index.js
var require_endOfToday = __commonJS({
  "node_modules/date-fns/endOfToday/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfToday;
    var _index = _interopRequireDefault(require_endOfDay());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function endOfToday() {
      return (0, _index.default)(Date.now());
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfTomorrow/index.js
var require_endOfTomorrow = __commonJS({
  "node_modules/date-fns/endOfTomorrow/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfTomorrow;
    function endOfTomorrow() {
      var now = new Date();
      var year = now.getFullYear();
      var month = now.getMonth();
      var day = now.getDate();
      var date = new Date(0);
      date.setFullYear(year, month, day + 1);
      date.setHours(23, 59, 59, 999);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfYesterday/index.js
var require_endOfYesterday = __commonJS({
  "node_modules/date-fns/endOfYesterday/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfYesterday;
    function endOfYesterday() {
      var now = new Date();
      var year = now.getFullYear();
      var month = now.getMonth();
      var day = now.getDate();
      var date = new Date(0);
      date.setFullYear(year, month, day - 1);
      date.setHours(23, 59, 59, 999);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/locale/en-US/_lib/formatDistance/index.js
var require_formatDistance = __commonJS({
  "node_modules/date-fns/locale/en-US/_lib/formatDistance/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formatDistance;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "less than a second",
        other: "less than {{count}} seconds"
      },
      xSeconds: {
        one: "1 second",
        other: "{{count}} seconds"
      },
      halfAMinute: "half a minute",
      lessThanXMinutes: {
        one: "less than a minute",
        other: "less than {{count}} minutes"
      },
      xMinutes: {
        one: "1 minute",
        other: "{{count}} minutes"
      },
      aboutXHours: {
        one: "about 1 hour",
        other: "about {{count}} hours"
      },
      xHours: {
        one: "1 hour",
        other: "{{count}} hours"
      },
      xDays: {
        one: "1 day",
        other: "{{count}} days"
      },
      aboutXWeeks: {
        one: "about 1 week",
        other: "about {{count}} weeks"
      },
      xWeeks: {
        one: "1 week",
        other: "{{count}} weeks"
      },
      aboutXMonths: {
        one: "about 1 month",
        other: "about {{count}} months"
      },
      xMonths: {
        one: "1 month",
        other: "{{count}} months"
      },
      aboutXYears: {
        one: "about 1 year",
        other: "about {{count}} years"
      },
      xYears: {
        one: "1 year",
        other: "{{count}} years"
      },
      overXYears: {
        one: "over 1 year",
        other: "over {{count}} years"
      },
      almostXYears: {
        one: "almost 1 year",
        other: "almost {{count}} years"
      }
    };
    function formatDistance(token, count, options2) {
      options2 = options2 || {};
      var result;
      if (typeof formatDistanceLocale[token] === "string") {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace("{{count}}", count);
      }
      if (options2.addSuffix) {
        if (options2.comparison > 0) {
          return "in " + result;
        } else {
          return result + " ago";
        }
      }
      return result;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/locale/_lib/buildFormatLongFn/index.js
var require_buildFormatLongFn = __commonJS({
  "node_modules/date-fns/locale/_lib/buildFormatLongFn/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = buildFormatLongFn;
    function buildFormatLongFn(args) {
      return function(dirtyOptions) {
        var options2 = dirtyOptions || {};
        var width = options2.width ? String(options2.width) : args.defaultWidth;
        var format3 = args.formats[width] || args.formats[args.defaultWidth];
        return format3;
      };
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/locale/en-US/_lib/formatLong/index.js
var require_formatLong = __commonJS({
  "node_modules/date-fns/locale/en-US/_lib/formatLong/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _index = _interopRequireDefault(require_buildFormatLongFn());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var dateFormats = {
      full: "EEEE, MMMM do, y",
      long: "MMMM do, y",
      medium: "MMM d, y",
      short: "MM/dd/yyyy"
    };
    var timeFormats = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    var dateTimeFormats = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
    var _default = formatLong;
    exports2.default = _default;
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/locale/en-US/_lib/formatRelative/index.js
var require_formatRelative = __commonJS({
  "node_modules/date-fns/locale/en-US/_lib/formatRelative/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formatRelative;
    var formatRelativeLocale = {
      lastWeek: "'last' eeee 'at' p",
      yesterday: "'yesterday at' p",
      today: "'today at' p",
      tomorrow: "'tomorrow at' p",
      nextWeek: "eeee 'at' p",
      other: "P"
    };
    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/locale/_lib/buildLocalizeFn/index.js
var require_buildLocalizeFn = __commonJS({
  "node_modules/date-fns/locale/_lib/buildLocalizeFn/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = buildLocalizeFn;
    function buildLocalizeFn(args) {
      return function(dirtyIndex, dirtyOptions) {
        var options2 = dirtyOptions || {};
        var context = options2.context ? String(options2.context) : "standalone";
        var valuesArray;
        if (context === "formatting" && args.formattingValues) {
          var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
          var width = options2.width ? String(options2.width) : defaultWidth;
          valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
        } else {
          var _defaultWidth = args.defaultWidth;
          var _width = options2.width ? String(options2.width) : args.defaultWidth;
          valuesArray = args.values[_width] || args.values[_defaultWidth];
        }
        var index2 = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
        return valuesArray[index2];
      };
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/locale/en-US/_lib/localize/index.js
var require_localize = __commonJS({
  "node_modules/date-fns/locale/en-US/_lib/localize/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _index = _interopRequireDefault(require_buildLocalizeFn());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var eraValues = {
      narrow: ["B", "A"],
      abbreviated: ["BC", "AD"],
      wide: ["Before Christ", "Anno Domini"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
    };
    var monthValues = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
      wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
    };
    var dayValues = {
      narrow: ["S", "M", "T", "W", "T", "F", "S"],
      short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
      abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
    };
    var dayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "mi",
        noon: "n",
        morning: "morning",
        afternoon: "afternoon",
        evening: "evening",
        night: "night"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "midnight",
        noon: "noon",
        morning: "morning",
        afternoon: "afternoon",
        evening: "evening",
        night: "night"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnight",
        noon: "noon",
        morning: "morning",
        afternoon: "afternoon",
        evening: "evening",
        night: "night"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "mi",
        noon: "n",
        morning: "in the morning",
        afternoon: "in the afternoon",
        evening: "in the evening",
        night: "at night"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "midnight",
        noon: "noon",
        morning: "in the morning",
        afternoon: "in the afternoon",
        evening: "in the evening",
        night: "at night"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnight",
        noon: "noon",
        morning: "in the morning",
        afternoon: "in the afternoon",
        evening: "in the evening",
        night: "at night"
      }
    };
    function ordinalNumber(dirtyNumber, _dirtyOptions) {
      var number = Number(dirtyNumber);
      var rem100 = number % 100;
      if (rem100 > 20 || rem100 < 10) {
        switch (rem100 % 10) {
          case 1:
            return number + "st";
          case 2:
            return number + "nd";
          case 3:
            return number + "rd";
        }
      }
      return number + "th";
    }
    var localize = {
      ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: function(quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
    var _default = localize;
    exports2.default = _default;
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/locale/_lib/buildMatchPatternFn/index.js
var require_buildMatchPatternFn = __commonJS({
  "node_modules/date-fns/locale/_lib/buildMatchPatternFn/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = buildMatchPatternFn;
    function buildMatchPatternFn(args) {
      return function(dirtyString, dirtyOptions) {
        var string = String(dirtyString);
        var options2 = dirtyOptions || {};
        var matchResult = string.match(args.matchPattern);
        if (!matchResult) {
          return null;
        }
        var matchedString = matchResult[0];
        var parseResult = string.match(args.parsePattern);
        if (!parseResult) {
          return null;
        }
        var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
        value = options2.valueCallback ? options2.valueCallback(value) : value;
        return {
          value,
          rest: string.slice(matchedString.length)
        };
      };
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/locale/_lib/buildMatchFn/index.js
var require_buildMatchFn = __commonJS({
  "node_modules/date-fns/locale/_lib/buildMatchFn/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = buildMatchFn;
    function buildMatchFn(args) {
      return function(dirtyString, dirtyOptions) {
        var string = String(dirtyString);
        var options2 = dirtyOptions || {};
        var width = options2.width;
        var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
        var matchResult = string.match(matchPattern);
        if (!matchResult) {
          return null;
        }
        var matchedString = matchResult[0];
        var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
        var value;
        if (Object.prototype.toString.call(parsePatterns) === "[object Array]") {
          value = findIndex(parsePatterns, function(pattern) {
            return pattern.test(matchedString);
          });
        } else {
          value = findKey(parsePatterns, function(pattern) {
            return pattern.test(matchedString);
          });
        }
        value = args.valueCallback ? args.valueCallback(value) : value;
        value = options2.valueCallback ? options2.valueCallback(value) : value;
        return {
          value,
          rest: string.slice(matchedString.length)
        };
      };
    }
    function findKey(object, predicate) {
      for (var key in object) {
        if (object.hasOwnProperty(key) && predicate(object[key])) {
          return key;
        }
      }
    }
    function findIndex(array, predicate) {
      for (var key = 0; key < array.length; key++) {
        if (predicate(array[key])) {
          return key;
        }
      }
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/locale/en-US/_lib/match/index.js
var require_match = __commonJS({
  "node_modules/date-fns/locale/en-US/_lib/match/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _index = _interopRequireDefault(require_buildMatchPatternFn());
    var _index2 = _interopRequireDefault(require_buildMatchFn());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(b|a)/i,
      abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
      wide: /^(before christ|before common era|anno domini|common era)/i
    };
    var parseEraPatterns = {
      any: [/^b/i, /^(a|c)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](th|st|nd|rd)? quarter/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
      wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[smtwf]/i,
      short: /^(su|mo|tu|we|th|fr|sa)/i,
      abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
      wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
      any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
      any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
      }
    };
    var match = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function(value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: function(index2) {
          return index2 + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
    var _default = match;
    exports2.default = _default;
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/locale/en-US/index.js
var require_en_US = __commonJS({
  "node_modules/date-fns/locale/en-US/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _index = _interopRequireDefault(require_formatDistance());
    var _index2 = _interopRequireDefault(require_formatLong());
    var _index3 = _interopRequireDefault(require_formatRelative());
    var _index4 = _interopRequireDefault(require_localize());
    var _index5 = _interopRequireDefault(require_match());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var locale = {
      code: "en-US",
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports2.default = _default;
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/subMilliseconds/index.js
var require_subMilliseconds = __commonJS({
  "node_modules/date-fns/subMilliseconds/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = subMilliseconds;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addMilliseconds());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function subMilliseconds(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      return (0, _index2.default)(dirtyDate, -amount);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/addLeadingZeros/index.js
var require_addLeadingZeros = __commonJS({
  "node_modules/date-fns/_lib/addLeadingZeros/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = addLeadingZeros;
    function addLeadingZeros(number, targetLength) {
      var sign = number < 0 ? "-" : "";
      var output = Math.abs(number).toString();
      while (output.length < targetLength) {
        output = "0" + output;
      }
      return sign + output;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/format/lightFormatters/index.js
var require_lightFormatters = __commonJS({
  "node_modules/date-fns/_lib/format/lightFormatters/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _index = _interopRequireDefault(require_addLeadingZeros());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var formatters = {
      y: function(date, token) {
        var signedYear = date.getUTCFullYear();
        var year = signedYear > 0 ? signedYear : 1 - signedYear;
        return (0, _index.default)(token === "yy" ? year % 100 : year, token.length);
      },
      M: function(date, token) {
        var month = date.getUTCMonth();
        return token === "M" ? String(month + 1) : (0, _index.default)(month + 1, 2);
      },
      d: function(date, token) {
        return (0, _index.default)(date.getUTCDate(), token.length);
      },
      a: function(date, token) {
        var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? "pm" : "am";
        switch (token) {
          case "a":
          case "aa":
            return dayPeriodEnumValue.toUpperCase();
          case "aaa":
            return dayPeriodEnumValue;
          case "aaaaa":
            return dayPeriodEnumValue[0];
          case "aaaa":
          default:
            return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
        }
      },
      h: function(date, token) {
        return (0, _index.default)(date.getUTCHours() % 12 || 12, token.length);
      },
      H: function(date, token) {
        return (0, _index.default)(date.getUTCHours(), token.length);
      },
      m: function(date, token) {
        return (0, _index.default)(date.getUTCMinutes(), token.length);
      },
      s: function(date, token) {
        return (0, _index.default)(date.getUTCSeconds(), token.length);
      },
      S: function(date, token) {
        var numberOfDigits = token.length;
        var milliseconds = date.getUTCMilliseconds();
        var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
        return (0, _index.default)(fractionalSeconds, token.length);
      }
    };
    var _default = formatters;
    exports2.default = _default;
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/getUTCDayOfYear/index.js
var require_getUTCDayOfYear = __commonJS({
  "node_modules/date-fns/_lib/getUTCDayOfYear/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getUTCDayOfYear;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var MILLISECONDS_IN_DAY = 864e5;
    function getUTCDayOfYear(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var timestamp = date.getTime();
      date.setUTCMonth(0, 1);
      date.setUTCHours(0, 0, 0, 0);
      var startOfYearTimestamp = date.getTime();
      var difference = timestamp - startOfYearTimestamp;
      return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/startOfUTCISOWeek/index.js
var require_startOfUTCISOWeek = __commonJS({
  "node_modules/date-fns/_lib/startOfUTCISOWeek/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfUTCISOWeek;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function startOfUTCISOWeek(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var weekStartsOn = 1;
      var date = (0, _index.default)(dirtyDate);
      var day = date.getUTCDay();
      var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
      date.setUTCDate(date.getUTCDate() - diff);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/getUTCISOWeekYear/index.js
var require_getUTCISOWeekYear = __commonJS({
  "node_modules/date-fns/_lib/getUTCISOWeekYear/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getUTCISOWeekYear;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_startOfUTCISOWeek());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function getUTCISOWeekYear(dirtyDate) {
      (0, _index3.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var year = date.getUTCFullYear();
      var fourthOfJanuaryOfNextYear = new Date(0);
      fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
      fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
      var startOfNextYear = (0, _index2.default)(fourthOfJanuaryOfNextYear);
      var fourthOfJanuaryOfThisYear = new Date(0);
      fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
      fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
      var startOfThisYear = (0, _index2.default)(fourthOfJanuaryOfThisYear);
      if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
      } else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
      } else {
        return year - 1;
      }
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/startOfUTCISOWeekYear/index.js
var require_startOfUTCISOWeekYear = __commonJS({
  "node_modules/date-fns/_lib/startOfUTCISOWeekYear/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfUTCISOWeekYear;
    var _index = _interopRequireDefault(require_getUTCISOWeekYear());
    var _index2 = _interopRequireDefault(require_startOfUTCISOWeek());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function startOfUTCISOWeekYear(dirtyDate) {
      (0, _index3.default)(1, arguments);
      var year = (0, _index.default)(dirtyDate);
      var fourthOfJanuary = new Date(0);
      fourthOfJanuary.setUTCFullYear(year, 0, 4);
      fourthOfJanuary.setUTCHours(0, 0, 0, 0);
      var date = (0, _index2.default)(fourthOfJanuary);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/getUTCISOWeek/index.js
var require_getUTCISOWeek = __commonJS({
  "node_modules/date-fns/_lib/getUTCISOWeek/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getUTCISOWeek;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_startOfUTCISOWeek());
    var _index3 = _interopRequireDefault(require_startOfUTCISOWeekYear());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var MILLISECONDS_IN_WEEK = 6048e5;
    function getUTCISOWeek(dirtyDate) {
      (0, _index4.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var diff = (0, _index2.default)(date).getTime() - (0, _index3.default)(date).getTime();
      return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/startOfUTCWeek/index.js
var require_startOfUTCWeek = __commonJS({
  "node_modules/date-fns/_lib/startOfUTCWeek/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfUTCWeek;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function startOfUTCWeek(dirtyDate, dirtyOptions) {
      (0, _index3.default)(1, arguments);
      var options2 = dirtyOptions || {};
      var locale = options2.locale;
      var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
      var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : (0, _index.default)(localeWeekStartsOn);
      var weekStartsOn = options2.weekStartsOn == null ? defaultWeekStartsOn : (0, _index.default)(options2.weekStartsOn);
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
      }
      var date = (0, _index2.default)(dirtyDate);
      var day = date.getUTCDay();
      var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
      date.setUTCDate(date.getUTCDate() - diff);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/getUTCWeekYear/index.js
var require_getUTCWeekYear = __commonJS({
  "node_modules/date-fns/_lib/getUTCWeekYear/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getUTCWeekYear;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_startOfUTCWeek());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function getUTCWeekYear(dirtyDate, dirtyOptions) {
      (0, _index4.default)(1, arguments);
      var date = (0, _index2.default)(dirtyDate, dirtyOptions);
      var year = date.getUTCFullYear();
      var options2 = dirtyOptions || {};
      var locale = options2.locale;
      var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
      var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : (0, _index.default)(localeFirstWeekContainsDate);
      var firstWeekContainsDate = options2.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : (0, _index.default)(options2.firstWeekContainsDate);
      if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
      }
      var firstWeekOfNextYear = new Date(0);
      firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
      firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
      var startOfNextYear = (0, _index3.default)(firstWeekOfNextYear, dirtyOptions);
      var firstWeekOfThisYear = new Date(0);
      firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
      firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
      var startOfThisYear = (0, _index3.default)(firstWeekOfThisYear, dirtyOptions);
      if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
      } else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
      } else {
        return year - 1;
      }
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/startOfUTCWeekYear/index.js
var require_startOfUTCWeekYear = __commonJS({
  "node_modules/date-fns/_lib/startOfUTCWeekYear/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfUTCWeekYear;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_getUTCWeekYear());
    var _index3 = _interopRequireDefault(require_startOfUTCWeek());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function startOfUTCWeekYear(dirtyDate, dirtyOptions) {
      (0, _index4.default)(1, arguments);
      var options2 = dirtyOptions || {};
      var locale = options2.locale;
      var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
      var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : (0, _index.default)(localeFirstWeekContainsDate);
      var firstWeekContainsDate = options2.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : (0, _index.default)(options2.firstWeekContainsDate);
      var year = (0, _index2.default)(dirtyDate, dirtyOptions);
      var firstWeek = new Date(0);
      firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
      firstWeek.setUTCHours(0, 0, 0, 0);
      var date = (0, _index3.default)(firstWeek, dirtyOptions);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/getUTCWeek/index.js
var require_getUTCWeek = __commonJS({
  "node_modules/date-fns/_lib/getUTCWeek/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getUTCWeek;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_startOfUTCWeek());
    var _index3 = _interopRequireDefault(require_startOfUTCWeekYear());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var MILLISECONDS_IN_WEEK = 6048e5;
    function getUTCWeek(dirtyDate, options2) {
      (0, _index4.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var diff = (0, _index2.default)(date, options2).getTime() - (0, _index3.default)(date, options2).getTime();
      return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/format/formatters/index.js
var require_formatters = __commonJS({
  "node_modules/date-fns/_lib/format/formatters/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _index = _interopRequireDefault(require_lightFormatters());
    var _index2 = _interopRequireDefault(require_getUTCDayOfYear());
    var _index3 = _interopRequireDefault(require_getUTCISOWeek());
    var _index4 = _interopRequireDefault(require_getUTCISOWeekYear());
    var _index5 = _interopRequireDefault(require_getUTCWeek());
    var _index6 = _interopRequireDefault(require_getUTCWeekYear());
    var _index7 = _interopRequireDefault(require_addLeadingZeros());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var dayPeriodEnum = {
      am: "am",
      pm: "pm",
      midnight: "midnight",
      noon: "noon",
      morning: "morning",
      afternoon: "afternoon",
      evening: "evening",
      night: "night"
    };
    var formatters = {
      G: function(date, token, localize) {
        var era = date.getUTCFullYear() > 0 ? 1 : 0;
        switch (token) {
          case "G":
          case "GG":
          case "GGG":
            return localize.era(era, {
              width: "abbreviated"
            });
          case "GGGGG":
            return localize.era(era, {
              width: "narrow"
            });
          case "GGGG":
          default:
            return localize.era(era, {
              width: "wide"
            });
        }
      },
      y: function(date, token, localize) {
        if (token === "yo") {
          var signedYear = date.getUTCFullYear();
          var year = signedYear > 0 ? signedYear : 1 - signedYear;
          return localize.ordinalNumber(year, {
            unit: "year"
          });
        }
        return _index.default.y(date, token);
      },
      Y: function(date, token, localize, options2) {
        var signedWeekYear = (0, _index6.default)(date, options2);
        var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
        if (token === "YY") {
          var twoDigitYear = weekYear % 100;
          return (0, _index7.default)(twoDigitYear, 2);
        }
        if (token === "Yo") {
          return localize.ordinalNumber(weekYear, {
            unit: "year"
          });
        }
        return (0, _index7.default)(weekYear, token.length);
      },
      R: function(date, token) {
        var isoWeekYear = (0, _index4.default)(date);
        return (0, _index7.default)(isoWeekYear, token.length);
      },
      u: function(date, token) {
        var year = date.getUTCFullYear();
        return (0, _index7.default)(year, token.length);
      },
      Q: function(date, token, localize) {
        var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
        switch (token) {
          case "Q":
            return String(quarter);
          case "QQ":
            return (0, _index7.default)(quarter, 2);
          case "Qo":
            return localize.ordinalNumber(quarter, {
              unit: "quarter"
            });
          case "QQQ":
            return localize.quarter(quarter, {
              width: "abbreviated",
              context: "formatting"
            });
          case "QQQQQ":
            return localize.quarter(quarter, {
              width: "narrow",
              context: "formatting"
            });
          case "QQQQ":
          default:
            return localize.quarter(quarter, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      q: function(date, token, localize) {
        var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
        switch (token) {
          case "q":
            return String(quarter);
          case "qq":
            return (0, _index7.default)(quarter, 2);
          case "qo":
            return localize.ordinalNumber(quarter, {
              unit: "quarter"
            });
          case "qqq":
            return localize.quarter(quarter, {
              width: "abbreviated",
              context: "standalone"
            });
          case "qqqqq":
            return localize.quarter(quarter, {
              width: "narrow",
              context: "standalone"
            });
          case "qqqq":
          default:
            return localize.quarter(quarter, {
              width: "wide",
              context: "standalone"
            });
        }
      },
      M: function(date, token, localize) {
        var month = date.getUTCMonth();
        switch (token) {
          case "M":
          case "MM":
            return _index.default.M(date, token);
          case "Mo":
            return localize.ordinalNumber(month + 1, {
              unit: "month"
            });
          case "MMM":
            return localize.month(month, {
              width: "abbreviated",
              context: "formatting"
            });
          case "MMMMM":
            return localize.month(month, {
              width: "narrow",
              context: "formatting"
            });
          case "MMMM":
          default:
            return localize.month(month, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      L: function(date, token, localize) {
        var month = date.getUTCMonth();
        switch (token) {
          case "L":
            return String(month + 1);
          case "LL":
            return (0, _index7.default)(month + 1, 2);
          case "Lo":
            return localize.ordinalNumber(month + 1, {
              unit: "month"
            });
          case "LLL":
            return localize.month(month, {
              width: "abbreviated",
              context: "standalone"
            });
          case "LLLLL":
            return localize.month(month, {
              width: "narrow",
              context: "standalone"
            });
          case "LLLL":
          default:
            return localize.month(month, {
              width: "wide",
              context: "standalone"
            });
        }
      },
      w: function(date, token, localize, options2) {
        var week = (0, _index5.default)(date, options2);
        if (token === "wo") {
          return localize.ordinalNumber(week, {
            unit: "week"
          });
        }
        return (0, _index7.default)(week, token.length);
      },
      I: function(date, token, localize) {
        var isoWeek = (0, _index3.default)(date);
        if (token === "Io") {
          return localize.ordinalNumber(isoWeek, {
            unit: "week"
          });
        }
        return (0, _index7.default)(isoWeek, token.length);
      },
      d: function(date, token, localize) {
        if (token === "do") {
          return localize.ordinalNumber(date.getUTCDate(), {
            unit: "date"
          });
        }
        return _index.default.d(date, token);
      },
      D: function(date, token, localize) {
        var dayOfYear = (0, _index2.default)(date);
        if (token === "Do") {
          return localize.ordinalNumber(dayOfYear, {
            unit: "dayOfYear"
          });
        }
        return (0, _index7.default)(dayOfYear, token.length);
      },
      E: function(date, token, localize) {
        var dayOfWeek = date.getUTCDay();
        switch (token) {
          case "E":
          case "EE":
          case "EEE":
            return localize.day(dayOfWeek, {
              width: "abbreviated",
              context: "formatting"
            });
          case "EEEEE":
            return localize.day(dayOfWeek, {
              width: "narrow",
              context: "formatting"
            });
          case "EEEEEE":
            return localize.day(dayOfWeek, {
              width: "short",
              context: "formatting"
            });
          case "EEEE":
          default:
            return localize.day(dayOfWeek, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      e: function(date, token, localize, options2) {
        var dayOfWeek = date.getUTCDay();
        var localDayOfWeek = (dayOfWeek - options2.weekStartsOn + 8) % 7 || 7;
        switch (token) {
          case "e":
            return String(localDayOfWeek);
          case "ee":
            return (0, _index7.default)(localDayOfWeek, 2);
          case "eo":
            return localize.ordinalNumber(localDayOfWeek, {
              unit: "day"
            });
          case "eee":
            return localize.day(dayOfWeek, {
              width: "abbreviated",
              context: "formatting"
            });
          case "eeeee":
            return localize.day(dayOfWeek, {
              width: "narrow",
              context: "formatting"
            });
          case "eeeeee":
            return localize.day(dayOfWeek, {
              width: "short",
              context: "formatting"
            });
          case "eeee":
          default:
            return localize.day(dayOfWeek, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      c: function(date, token, localize, options2) {
        var dayOfWeek = date.getUTCDay();
        var localDayOfWeek = (dayOfWeek - options2.weekStartsOn + 8) % 7 || 7;
        switch (token) {
          case "c":
            return String(localDayOfWeek);
          case "cc":
            return (0, _index7.default)(localDayOfWeek, token.length);
          case "co":
            return localize.ordinalNumber(localDayOfWeek, {
              unit: "day"
            });
          case "ccc":
            return localize.day(dayOfWeek, {
              width: "abbreviated",
              context: "standalone"
            });
          case "ccccc":
            return localize.day(dayOfWeek, {
              width: "narrow",
              context: "standalone"
            });
          case "cccccc":
            return localize.day(dayOfWeek, {
              width: "short",
              context: "standalone"
            });
          case "cccc":
          default:
            return localize.day(dayOfWeek, {
              width: "wide",
              context: "standalone"
            });
        }
      },
      i: function(date, token, localize) {
        var dayOfWeek = date.getUTCDay();
        var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
        switch (token) {
          case "i":
            return String(isoDayOfWeek);
          case "ii":
            return (0, _index7.default)(isoDayOfWeek, token.length);
          case "io":
            return localize.ordinalNumber(isoDayOfWeek, {
              unit: "day"
            });
          case "iii":
            return localize.day(dayOfWeek, {
              width: "abbreviated",
              context: "formatting"
            });
          case "iiiii":
            return localize.day(dayOfWeek, {
              width: "narrow",
              context: "formatting"
            });
          case "iiiiii":
            return localize.day(dayOfWeek, {
              width: "short",
              context: "formatting"
            });
          case "iiii":
          default:
            return localize.day(dayOfWeek, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      a: function(date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
        switch (token) {
          case "a":
          case "aa":
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "abbreviated",
              context: "formatting"
            });
          case "aaa":
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "abbreviated",
              context: "formatting"
            }).toLowerCase();
          case "aaaaa":
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "narrow",
              context: "formatting"
            });
          case "aaaa":
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      b: function(date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue;
        if (hours === 12) {
          dayPeriodEnumValue = dayPeriodEnum.noon;
        } else if (hours === 0) {
          dayPeriodEnumValue = dayPeriodEnum.midnight;
        } else {
          dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
        }
        switch (token) {
          case "b":
          case "bb":
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "abbreviated",
              context: "formatting"
            });
          case "bbb":
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "abbreviated",
              context: "formatting"
            }).toLowerCase();
          case "bbbbb":
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "narrow",
              context: "formatting"
            });
          case "bbbb":
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      B: function(date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue;
        if (hours >= 17) {
          dayPeriodEnumValue = dayPeriodEnum.evening;
        } else if (hours >= 12) {
          dayPeriodEnumValue = dayPeriodEnum.afternoon;
        } else if (hours >= 4) {
          dayPeriodEnumValue = dayPeriodEnum.morning;
        } else {
          dayPeriodEnumValue = dayPeriodEnum.night;
        }
        switch (token) {
          case "B":
          case "BB":
          case "BBB":
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "abbreviated",
              context: "formatting"
            });
          case "BBBBB":
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "narrow",
              context: "formatting"
            });
          case "BBBB":
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      h: function(date, token, localize) {
        if (token === "ho") {
          var hours = date.getUTCHours() % 12;
          if (hours === 0)
            hours = 12;
          return localize.ordinalNumber(hours, {
            unit: "hour"
          });
        }
        return _index.default.h(date, token);
      },
      H: function(date, token, localize) {
        if (token === "Ho") {
          return localize.ordinalNumber(date.getUTCHours(), {
            unit: "hour"
          });
        }
        return _index.default.H(date, token);
      },
      K: function(date, token, localize) {
        var hours = date.getUTCHours() % 12;
        if (token === "Ko") {
          return localize.ordinalNumber(hours, {
            unit: "hour"
          });
        }
        return (0, _index7.default)(hours, token.length);
      },
      k: function(date, token, localize) {
        var hours = date.getUTCHours();
        if (hours === 0)
          hours = 24;
        if (token === "ko") {
          return localize.ordinalNumber(hours, {
            unit: "hour"
          });
        }
        return (0, _index7.default)(hours, token.length);
      },
      m: function(date, token, localize) {
        if (token === "mo") {
          return localize.ordinalNumber(date.getUTCMinutes(), {
            unit: "minute"
          });
        }
        return _index.default.m(date, token);
      },
      s: function(date, token, localize) {
        if (token === "so") {
          return localize.ordinalNumber(date.getUTCSeconds(), {
            unit: "second"
          });
        }
        return _index.default.s(date, token);
      },
      S: function(date, token) {
        return _index.default.S(date, token);
      },
      X: function(date, token, _localize, options2) {
        var originalDate = options2._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        if (timezoneOffset === 0) {
          return "Z";
        }
        switch (token) {
          case "X":
            return formatTimezoneWithOptionalMinutes(timezoneOffset);
          case "XXXX":
          case "XX":
            return formatTimezone(timezoneOffset);
          case "XXXXX":
          case "XXX":
          default:
            return formatTimezone(timezoneOffset, ":");
        }
      },
      x: function(date, token, _localize, options2) {
        var originalDate = options2._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        switch (token) {
          case "x":
            return formatTimezoneWithOptionalMinutes(timezoneOffset);
          case "xxxx":
          case "xx":
            return formatTimezone(timezoneOffset);
          case "xxxxx":
          case "xxx":
          default:
            return formatTimezone(timezoneOffset, ":");
        }
      },
      O: function(date, token, _localize, options2) {
        var originalDate = options2._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        switch (token) {
          case "O":
          case "OO":
          case "OOO":
            return "GMT" + formatTimezoneShort(timezoneOffset, ":");
          case "OOOO":
          default:
            return "GMT" + formatTimezone(timezoneOffset, ":");
        }
      },
      z: function(date, token, _localize, options2) {
        var originalDate = options2._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        switch (token) {
          case "z":
          case "zz":
          case "zzz":
            return "GMT" + formatTimezoneShort(timezoneOffset, ":");
          case "zzzz":
          default:
            return "GMT" + formatTimezone(timezoneOffset, ":");
        }
      },
      t: function(date, token, _localize, options2) {
        var originalDate = options2._originalDate || date;
        var timestamp = Math.floor(originalDate.getTime() / 1e3);
        return (0, _index7.default)(timestamp, token.length);
      },
      T: function(date, token, _localize, options2) {
        var originalDate = options2._originalDate || date;
        var timestamp = originalDate.getTime();
        return (0, _index7.default)(timestamp, token.length);
      }
    };
    function formatTimezoneShort(offset, dirtyDelimiter) {
      var sign = offset > 0 ? "-" : "+";
      var absOffset = Math.abs(offset);
      var hours = Math.floor(absOffset / 60);
      var minutes = absOffset % 60;
      if (minutes === 0) {
        return sign + String(hours);
      }
      var delimiter = dirtyDelimiter || "";
      return sign + String(hours) + delimiter + (0, _index7.default)(minutes, 2);
    }
    function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
      if (offset % 60 === 0) {
        var sign = offset > 0 ? "-" : "+";
        return sign + (0, _index7.default)(Math.abs(offset) / 60, 2);
      }
      return formatTimezone(offset, dirtyDelimiter);
    }
    function formatTimezone(offset, dirtyDelimiter) {
      var delimiter = dirtyDelimiter || "";
      var sign = offset > 0 ? "-" : "+";
      var absOffset = Math.abs(offset);
      var hours = (0, _index7.default)(Math.floor(absOffset / 60), 2);
      var minutes = (0, _index7.default)(absOffset % 60, 2);
      return sign + hours + delimiter + minutes;
    }
    var _default = formatters;
    exports2.default = _default;
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/format/longFormatters/index.js
var require_longFormatters = __commonJS({
  "node_modules/date-fns/_lib/format/longFormatters/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    function dateLongFormatter(pattern, formatLong) {
      switch (pattern) {
        case "P":
          return formatLong.date({
            width: "short"
          });
        case "PP":
          return formatLong.date({
            width: "medium"
          });
        case "PPP":
          return formatLong.date({
            width: "long"
          });
        case "PPPP":
        default:
          return formatLong.date({
            width: "full"
          });
      }
    }
    function timeLongFormatter(pattern, formatLong) {
      switch (pattern) {
        case "p":
          return formatLong.time({
            width: "short"
          });
        case "pp":
          return formatLong.time({
            width: "medium"
          });
        case "ppp":
          return formatLong.time({
            width: "long"
          });
        case "pppp":
        default:
          return formatLong.time({
            width: "full"
          });
      }
    }
    function dateTimeLongFormatter(pattern, formatLong) {
      var matchResult = pattern.match(/(P+)(p+)?/);
      var datePattern = matchResult[1];
      var timePattern = matchResult[2];
      if (!timePattern) {
        return dateLongFormatter(pattern, formatLong);
      }
      var dateTimeFormat;
      switch (datePattern) {
        case "P":
          dateTimeFormat = formatLong.dateTime({
            width: "short"
          });
          break;
        case "PP":
          dateTimeFormat = formatLong.dateTime({
            width: "medium"
          });
          break;
        case "PPP":
          dateTimeFormat = formatLong.dateTime({
            width: "long"
          });
          break;
        case "PPPP":
        default:
          dateTimeFormat = formatLong.dateTime({
            width: "full"
          });
          break;
      }
      return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong)).replace("{{time}}", timeLongFormatter(timePattern, formatLong));
    }
    var longFormatters = {
      p: timeLongFormatter,
      P: dateTimeLongFormatter
    };
    var _default = longFormatters;
    exports2.default = _default;
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/protectedTokens/index.js
var require_protectedTokens = __commonJS({
  "node_modules/date-fns/_lib/protectedTokens/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.isProtectedDayOfYearToken = isProtectedDayOfYearToken;
    exports2.isProtectedWeekYearToken = isProtectedWeekYearToken;
    exports2.throwProtectedError = throwProtectedError;
    var protectedDayOfYearTokens = ["D", "DD"];
    var protectedWeekYearTokens = ["YY", "YYYY"];
    function isProtectedDayOfYearToken(token) {
      return protectedDayOfYearTokens.indexOf(token) !== -1;
    }
    function isProtectedWeekYearToken(token) {
      return protectedWeekYearTokens.indexOf(token) !== -1;
    }
    function throwProtectedError(token, format3, input) {
      if (token === "YYYY") {
        throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format3, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
      } else if (token === "YY") {
        throw new RangeError("Use `yy` instead of `YY` (in `".concat(format3, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
      } else if (token === "D") {
        throw new RangeError("Use `d` instead of `D` (in `".concat(format3, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
      } else if (token === "DD") {
        throw new RangeError("Use `dd` instead of `DD` (in `".concat(format3, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
      }
    }
  }
});

// node_modules/date-fns/format/index.js
var require_format = __commonJS({
  "node_modules/date-fns/format/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = format3;
    var _index = _interopRequireDefault(require_isValid());
    var _index2 = _interopRequireDefault(require_en_US());
    var _index3 = _interopRequireDefault(require_subMilliseconds());
    var _index4 = _interopRequireDefault(require_toDate());
    var _index5 = _interopRequireDefault(require_formatters());
    var _index6 = _interopRequireDefault(require_longFormatters());
    var _index7 = _interopRequireDefault(require_getTimezoneOffsetInMilliseconds());
    var _index8 = require_protectedTokens();
    var _index9 = _interopRequireDefault(require_toInteger());
    var _index10 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
    var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
    var escapedStringRegExp = /^'([^]*?)'?$/;
    var doubleQuoteRegExp = /''/g;
    var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
    function format3(dirtyDate, dirtyFormatStr, dirtyOptions) {
      (0, _index10.default)(2, arguments);
      var formatStr = String(dirtyFormatStr);
      var options2 = dirtyOptions || {};
      var locale = options2.locale || _index2.default;
      var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;
      var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : (0, _index9.default)(localeFirstWeekContainsDate);
      var firstWeekContainsDate = options2.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : (0, _index9.default)(options2.firstWeekContainsDate);
      if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
      }
      var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;
      var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : (0, _index9.default)(localeWeekStartsOn);
      var weekStartsOn = options2.weekStartsOn == null ? defaultWeekStartsOn : (0, _index9.default)(options2.weekStartsOn);
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
      }
      if (!locale.localize) {
        throw new RangeError("locale must contain localize property");
      }
      if (!locale.formatLong) {
        throw new RangeError("locale must contain formatLong property");
      }
      var originalDate = (0, _index4.default)(dirtyDate);
      if (!(0, _index.default)(originalDate)) {
        throw new RangeError("Invalid time value");
      }
      var timezoneOffset = (0, _index7.default)(originalDate);
      var utcDate = (0, _index3.default)(originalDate, timezoneOffset);
      var formatterOptions = {
        firstWeekContainsDate,
        weekStartsOn,
        locale,
        _originalDate: originalDate
      };
      var result = formatStr.match(longFormattingTokensRegExp).map(function(substring) {
        var firstCharacter = substring[0];
        if (firstCharacter === "p" || firstCharacter === "P") {
          var longFormatter = _index6.default[firstCharacter];
          return longFormatter(substring, locale.formatLong, formatterOptions);
        }
        return substring;
      }).join("").match(formattingTokensRegExp).map(function(substring) {
        if (substring === "''") {
          return "'";
        }
        var firstCharacter = substring[0];
        if (firstCharacter === "'") {
          return cleanEscapedString(substring);
        }
        var formatter = _index5.default[firstCharacter];
        if (formatter) {
          if (!options2.useAdditionalWeekYearTokens && (0, _index8.isProtectedWeekYearToken)(substring)) {
            (0, _index8.throwProtectedError)(substring, dirtyFormatStr, dirtyDate);
          }
          if (!options2.useAdditionalDayOfYearTokens && (0, _index8.isProtectedDayOfYearToken)(substring)) {
            (0, _index8.throwProtectedError)(substring, dirtyFormatStr, dirtyDate);
          }
          return formatter(utcDate, substring, locale.localize, formatterOptions);
        }
        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
          throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
        }
        return substring;
      }).join("");
      return result;
    }
    function cleanEscapedString(input) {
      return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/assign/index.js
var require_assign = __commonJS({
  "node_modules/date-fns/_lib/assign/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = assign2;
    function assign2(target, dirtyObject) {
      if (target == null) {
        throw new TypeError("assign requires that input parameter not be null or undefined");
      }
      dirtyObject = dirtyObject || {};
      for (var property in dirtyObject) {
        if (dirtyObject.hasOwnProperty(property)) {
          target[property] = dirtyObject[property];
        }
      }
      return target;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/cloneObject/index.js
var require_cloneObject = __commonJS({
  "node_modules/date-fns/_lib/cloneObject/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = cloneObject;
    var _index = _interopRequireDefault(require_assign());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function cloneObject(dirtyObject) {
      return (0, _index.default)({}, dirtyObject);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/formatDistance/index.js
var require_formatDistance2 = __commonJS({
  "node_modules/date-fns/formatDistance/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formatDistance;
    var _index = _interopRequireDefault(require_compareAsc());
    var _index2 = _interopRequireDefault(require_differenceInMonths());
    var _index3 = _interopRequireDefault(require_differenceInSeconds());
    var _index4 = _interopRequireDefault(require_en_US());
    var _index5 = _interopRequireDefault(require_toDate());
    var _index6 = _interopRequireDefault(require_cloneObject());
    var _index7 = _interopRequireDefault(require_getTimezoneOffsetInMilliseconds());
    var _index8 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var MINUTES_IN_DAY = 1440;
    var MINUTES_IN_ALMOST_TWO_DAYS = 2520;
    var MINUTES_IN_MONTH = 43200;
    var MINUTES_IN_TWO_MONTHS = 86400;
    function formatDistance(dirtyDate, dirtyBaseDate, dirtyOptions) {
      (0, _index8.default)(2, arguments);
      var options2 = dirtyOptions || {};
      var locale = options2.locale || _index4.default;
      if (!locale.formatDistance) {
        throw new RangeError("locale must contain formatDistance property");
      }
      var comparison = (0, _index.default)(dirtyDate, dirtyBaseDate);
      if (isNaN(comparison)) {
        throw new RangeError("Invalid time value");
      }
      var localizeOptions = (0, _index6.default)(options2);
      localizeOptions.addSuffix = Boolean(options2.addSuffix);
      localizeOptions.comparison = comparison;
      var dateLeft;
      var dateRight;
      if (comparison > 0) {
        dateLeft = (0, _index5.default)(dirtyBaseDate);
        dateRight = (0, _index5.default)(dirtyDate);
      } else {
        dateLeft = (0, _index5.default)(dirtyDate);
        dateRight = (0, _index5.default)(dirtyBaseDate);
      }
      var seconds = (0, _index3.default)(dateRight, dateLeft);
      var offsetInSeconds = ((0, _index7.default)(dateRight) - (0, _index7.default)(dateLeft)) / 1e3;
      var minutes = Math.round((seconds - offsetInSeconds) / 60);
      var months;
      if (minutes < 2) {
        if (options2.includeSeconds) {
          if (seconds < 5) {
            return locale.formatDistance("lessThanXSeconds", 5, localizeOptions);
          } else if (seconds < 10) {
            return locale.formatDistance("lessThanXSeconds", 10, localizeOptions);
          } else if (seconds < 20) {
            return locale.formatDistance("lessThanXSeconds", 20, localizeOptions);
          } else if (seconds < 40) {
            return locale.formatDistance("halfAMinute", null, localizeOptions);
          } else if (seconds < 60) {
            return locale.formatDistance("lessThanXMinutes", 1, localizeOptions);
          } else {
            return locale.formatDistance("xMinutes", 1, localizeOptions);
          }
        } else {
          if (minutes === 0) {
            return locale.formatDistance("lessThanXMinutes", 1, localizeOptions);
          } else {
            return locale.formatDistance("xMinutes", minutes, localizeOptions);
          }
        }
      } else if (minutes < 45) {
        return locale.formatDistance("xMinutes", minutes, localizeOptions);
      } else if (minutes < 90) {
        return locale.formatDistance("aboutXHours", 1, localizeOptions);
      } else if (minutes < MINUTES_IN_DAY) {
        var hours = Math.round(minutes / 60);
        return locale.formatDistance("aboutXHours", hours, localizeOptions);
      } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {
        return locale.formatDistance("xDays", 1, localizeOptions);
      } else if (minutes < MINUTES_IN_MONTH) {
        var days = Math.round(minutes / MINUTES_IN_DAY);
        return locale.formatDistance("xDays", days, localizeOptions);
      } else if (minutes < MINUTES_IN_TWO_MONTHS) {
        months = Math.round(minutes / MINUTES_IN_MONTH);
        return locale.formatDistance("aboutXMonths", months, localizeOptions);
      }
      months = (0, _index2.default)(dateRight, dateLeft);
      if (months < 12) {
        var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);
        return locale.formatDistance("xMonths", nearestMonth, localizeOptions);
      } else {
        var monthsSinceStartOfYear = months % 12;
        var years = Math.floor(months / 12);
        if (monthsSinceStartOfYear < 3) {
          return locale.formatDistance("aboutXYears", years, localizeOptions);
        } else if (monthsSinceStartOfYear < 9) {
          return locale.formatDistance("overXYears", years, localizeOptions);
        } else {
          return locale.formatDistance("almostXYears", years + 1, localizeOptions);
        }
      }
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/formatDistanceStrict/index.js
var require_formatDistanceStrict = __commonJS({
  "node_modules/date-fns/formatDistanceStrict/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formatDistanceStrict;
    var _index = _interopRequireDefault(require_getTimezoneOffsetInMilliseconds());
    var _index2 = _interopRequireDefault(require_compareAsc());
    var _index3 = _interopRequireDefault(require_toDate());
    var _index4 = _interopRequireDefault(require_cloneObject());
    var _index5 = _interopRequireDefault(require_en_US());
    var _index6 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var MILLISECONDS_IN_MINUTE = 1e3 * 60;
    var MINUTES_IN_DAY = 60 * 24;
    var MINUTES_IN_MONTH = MINUTES_IN_DAY * 30;
    var MINUTES_IN_YEAR = MINUTES_IN_DAY * 365;
    function formatDistanceStrict(dirtyDate, dirtyBaseDate, dirtyOptions) {
      (0, _index6.default)(2, arguments);
      var options2 = dirtyOptions || {};
      var locale = options2.locale || _index5.default;
      if (!locale.formatDistance) {
        throw new RangeError("locale must contain localize.formatDistance property");
      }
      var comparison = (0, _index2.default)(dirtyDate, dirtyBaseDate);
      if (isNaN(comparison)) {
        throw new RangeError("Invalid time value");
      }
      var localizeOptions = (0, _index4.default)(options2);
      localizeOptions.addSuffix = Boolean(options2.addSuffix);
      localizeOptions.comparison = comparison;
      var dateLeft;
      var dateRight;
      if (comparison > 0) {
        dateLeft = (0, _index3.default)(dirtyBaseDate);
        dateRight = (0, _index3.default)(dirtyDate);
      } else {
        dateLeft = (0, _index3.default)(dirtyDate);
        dateRight = (0, _index3.default)(dirtyBaseDate);
      }
      var roundingMethod = options2.roundingMethod == null ? "round" : String(options2.roundingMethod);
      var roundingMethodFn;
      if (roundingMethod === "floor") {
        roundingMethodFn = Math.floor;
      } else if (roundingMethod === "ceil") {
        roundingMethodFn = Math.ceil;
      } else if (roundingMethod === "round") {
        roundingMethodFn = Math.round;
      } else {
        throw new RangeError("roundingMethod must be 'floor', 'ceil' or 'round'");
      }
      var milliseconds = dateRight.getTime() - dateLeft.getTime();
      var minutes = milliseconds / MILLISECONDS_IN_MINUTE;
      var timezoneOffset = (0, _index.default)(dateRight) - (0, _index.default)(dateLeft);
      var dstNormalizedMinutes = (milliseconds - timezoneOffset) / MILLISECONDS_IN_MINUTE;
      var unit;
      if (options2.unit == null) {
        if (minutes < 1) {
          unit = "second";
        } else if (minutes < 60) {
          unit = "minute";
        } else if (minutes < MINUTES_IN_DAY) {
          unit = "hour";
        } else if (dstNormalizedMinutes < MINUTES_IN_MONTH) {
          unit = "day";
        } else if (dstNormalizedMinutes < MINUTES_IN_YEAR) {
          unit = "month";
        } else {
          unit = "year";
        }
      } else {
        unit = String(options2.unit);
      }
      if (unit === "second") {
        var seconds = roundingMethodFn(milliseconds / 1e3);
        return locale.formatDistance("xSeconds", seconds, localizeOptions);
      } else if (unit === "minute") {
        var roundedMinutes = roundingMethodFn(minutes);
        return locale.formatDistance("xMinutes", roundedMinutes, localizeOptions);
      } else if (unit === "hour") {
        var hours = roundingMethodFn(minutes / 60);
        return locale.formatDistance("xHours", hours, localizeOptions);
      } else if (unit === "day") {
        var days = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_DAY);
        return locale.formatDistance("xDays", days, localizeOptions);
      } else if (unit === "month") {
        var months = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_MONTH);
        return months === 12 && options2.unit !== "month" ? locale.formatDistance("xYears", 1, localizeOptions) : locale.formatDistance("xMonths", months, localizeOptions);
      } else if (unit === "year") {
        var years = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_YEAR);
        return locale.formatDistance("xYears", years, localizeOptions);
      }
      throw new RangeError("unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'");
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/formatDistanceToNow/index.js
var require_formatDistanceToNow = __commonJS({
  "node_modules/date-fns/formatDistanceToNow/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formatDistanceToNow;
    var _index = _interopRequireDefault(require_formatDistance2());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function formatDistanceToNow(dirtyDate, dirtyOptions) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate, Date.now(), dirtyOptions);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/formatDistanceToNowStrict/index.js
var require_formatDistanceToNowStrict = __commonJS({
  "node_modules/date-fns/formatDistanceToNowStrict/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formatDistanceToNowStrict;
    var _index = _interopRequireDefault(require_formatDistanceStrict());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function formatDistanceToNowStrict(dirtyDate, dirtyOptions) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate, Date.now(), dirtyOptions);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/formatDuration/index.js
var require_formatDuration = __commonJS({
  "node_modules/date-fns/formatDuration/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formatDuration;
    var _index = _interopRequireDefault(require_en_US());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var defaultFormat = ["years", "months", "weeks", "days", "hours", "minutes", "seconds"];
    function formatDuration(duration, options2) {
      if (arguments.length < 1) {
        throw new TypeError("1 argument required, but only ".concat(arguments.length, " present"));
      }
      var format3 = (options2 === null || options2 === void 0 ? void 0 : options2.format) || defaultFormat;
      var locale = (options2 === null || options2 === void 0 ? void 0 : options2.locale) || _index.default;
      var zero = (options2 === null || options2 === void 0 ? void 0 : options2.zero) || false;
      var delimiter = (options2 === null || options2 === void 0 ? void 0 : options2.delimiter) || " ";
      var result = format3.reduce(function(acc, unit) {
        var token = "x".concat(unit.replace(/(^.)/, function(m) {
          return m.toUpperCase();
        }));
        var addChunk = typeof duration[unit] === "number" && (zero || duration[unit]);
        return addChunk ? acc.concat(locale.formatDistance(token, duration[unit])) : acc;
      }, []).join(delimiter);
      return result;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/formatISO/index.js
var require_formatISO = __commonJS({
  "node_modules/date-fns/formatISO/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formatISO;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_isValid());
    var _index3 = _interopRequireDefault(require_addLeadingZeros());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function formatISO(dirtyDate, dirtyOptions) {
      if (arguments.length < 1) {
        throw new TypeError("1 argument required, but only ".concat(arguments.length, " present"));
      }
      var originalDate = (0, _index.default)(dirtyDate);
      if (!(0, _index2.default)(originalDate)) {
        throw new RangeError("Invalid time value");
      }
      var options2 = dirtyOptions || {};
      var format3 = options2.format == null ? "extended" : String(options2.format);
      var representation = options2.representation == null ? "complete" : String(options2.representation);
      if (format3 !== "extended" && format3 !== "basic") {
        throw new RangeError("format must be 'extended' or 'basic'");
      }
      if (representation !== "date" && representation !== "time" && representation !== "complete") {
        throw new RangeError("representation must be 'date', 'time', or 'complete'");
      }
      var result = "";
      var tzOffset = "";
      var dateDelimiter = format3 === "extended" ? "-" : "";
      var timeDelimiter = format3 === "extended" ? ":" : "";
      if (representation !== "time") {
        var day = (0, _index3.default)(originalDate.getDate(), 2);
        var month = (0, _index3.default)(originalDate.getMonth() + 1, 2);
        var year = (0, _index3.default)(originalDate.getFullYear(), 4);
        result = "".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);
      }
      if (representation !== "date") {
        var offset = originalDate.getTimezoneOffset();
        if (offset !== 0) {
          var absoluteOffset = Math.abs(offset);
          var hourOffset = (0, _index3.default)(Math.floor(absoluteOffset / 60), 2);
          var minuteOffset = (0, _index3.default)(absoluteOffset % 60, 2);
          var sign = offset < 0 ? "+" : "-";
          tzOffset = "".concat(sign).concat(hourOffset, ":").concat(minuteOffset);
        } else {
          tzOffset = "Z";
        }
        var hour = (0, _index3.default)(originalDate.getHours(), 2);
        var minute = (0, _index3.default)(originalDate.getMinutes(), 2);
        var second = (0, _index3.default)(originalDate.getSeconds(), 2);
        var separator = result === "" ? "" : "T";
        var time = [hour, minute, second].join(timeDelimiter);
        result = "".concat(result).concat(separator).concat(time).concat(tzOffset);
      }
      return result;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/formatISO9075/index.js
var require_formatISO9075 = __commonJS({
  "node_modules/date-fns/formatISO9075/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formatISO9075;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_isValid());
    var _index3 = _interopRequireDefault(require_addLeadingZeros());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function formatISO9075(dirtyDate, dirtyOptions) {
      if (arguments.length < 1) {
        throw new TypeError("1 argument required, but only ".concat(arguments.length, " present"));
      }
      var originalDate = (0, _index.default)(dirtyDate);
      if (!(0, _index2.default)(originalDate)) {
        throw new RangeError("Invalid time value");
      }
      var options2 = dirtyOptions || {};
      var format3 = options2.format == null ? "extended" : String(options2.format);
      var representation = options2.representation == null ? "complete" : String(options2.representation);
      if (format3 !== "extended" && format3 !== "basic") {
        throw new RangeError("format must be 'extended' or 'basic'");
      }
      if (representation !== "date" && representation !== "time" && representation !== "complete") {
        throw new RangeError("representation must be 'date', 'time', or 'complete'");
      }
      var result = "";
      var dateDelimiter = format3 === "extended" ? "-" : "";
      var timeDelimiter = format3 === "extended" ? ":" : "";
      if (representation !== "time") {
        var day = (0, _index3.default)(originalDate.getDate(), 2);
        var month = (0, _index3.default)(originalDate.getMonth() + 1, 2);
        var year = (0, _index3.default)(originalDate.getFullYear(), 4);
        result = "".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);
      }
      if (representation !== "date") {
        var hour = (0, _index3.default)(originalDate.getHours(), 2);
        var minute = (0, _index3.default)(originalDate.getMinutes(), 2);
        var second = (0, _index3.default)(originalDate.getSeconds(), 2);
        var separator = result === "" ? "" : " ";
        result = "".concat(result).concat(separator).concat(hour).concat(timeDelimiter).concat(minute).concat(timeDelimiter).concat(second);
      }
      return result;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/formatISODuration/index.js
var require_formatISODuration = __commonJS({
  "node_modules/date-fns/formatISODuration/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formatISODuration;
    var _index = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function formatISODuration(duration) {
      (0, _index.default)(1, arguments);
      if (typeof duration !== "object")
        throw new Error("Duration must be an object");
      var _duration$years = duration.years, years = _duration$years === void 0 ? 0 : _duration$years, _duration$months = duration.months, months = _duration$months === void 0 ? 0 : _duration$months, _duration$days = duration.days, days = _duration$days === void 0 ? 0 : _duration$days, _duration$hours = duration.hours, hours = _duration$hours === void 0 ? 0 : _duration$hours, _duration$minutes = duration.minutes, minutes = _duration$minutes === void 0 ? 0 : _duration$minutes, _duration$seconds = duration.seconds, seconds = _duration$seconds === void 0 ? 0 : _duration$seconds;
      return "P".concat(years, "Y").concat(months, "M").concat(days, "DT").concat(hours, "H").concat(minutes, "M").concat(seconds, "S");
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/formatRFC3339/index.js
var require_formatRFC3339 = __commonJS({
  "node_modules/date-fns/formatRFC3339/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formatRFC3339;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_isValid());
    var _index3 = _interopRequireDefault(require_addLeadingZeros());
    var _index4 = _interopRequireDefault(require_toInteger());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function formatRFC3339(dirtyDate, dirtyOptions) {
      if (arguments.length < 1) {
        throw new TypeError("1 arguments required, but only ".concat(arguments.length, " present"));
      }
      var originalDate = (0, _index.default)(dirtyDate);
      if (!(0, _index2.default)(originalDate)) {
        throw new RangeError("Invalid time value");
      }
      var options2 = dirtyOptions || {};
      var fractionDigits = options2.fractionDigits == null ? 0 : (0, _index4.default)(options2.fractionDigits);
      if (!(fractionDigits >= 0 && fractionDigits <= 3)) {
        throw new RangeError("fractionDigits must be between 0 and 3 inclusively");
      }
      var day = (0, _index3.default)(originalDate.getDate(), 2);
      var month = (0, _index3.default)(originalDate.getMonth() + 1, 2);
      var year = originalDate.getFullYear();
      var hour = (0, _index3.default)(originalDate.getHours(), 2);
      var minute = (0, _index3.default)(originalDate.getMinutes(), 2);
      var second = (0, _index3.default)(originalDate.getSeconds(), 2);
      var fractionalSecond = "";
      if (fractionDigits > 0) {
        var milliseconds = originalDate.getMilliseconds();
        var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, fractionDigits - 3));
        fractionalSecond = "." + (0, _index3.default)(fractionalSeconds, fractionDigits);
      }
      var offset = "";
      var tzOffset = originalDate.getTimezoneOffset();
      if (tzOffset !== 0) {
        var absoluteOffset = Math.abs(tzOffset);
        var hourOffset = (0, _index3.default)((0, _index4.default)(absoluteOffset / 60), 2);
        var minuteOffset = (0, _index3.default)(absoluteOffset % 60, 2);
        var sign = tzOffset < 0 ? "+" : "-";
        offset = "".concat(sign).concat(hourOffset, ":").concat(minuteOffset);
      } else {
        offset = "Z";
      }
      return "".concat(year, "-").concat(month, "-").concat(day, "T").concat(hour, ":").concat(minute, ":").concat(second).concat(fractionalSecond).concat(offset);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/formatRFC7231/index.js
var require_formatRFC7231 = __commonJS({
  "node_modules/date-fns/formatRFC7231/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formatRFC7231;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_isValid());
    var _index3 = _interopRequireDefault(require_addLeadingZeros());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    function formatRFC7231(dirtyDate) {
      if (arguments.length < 1) {
        throw new TypeError("1 arguments required, but only ".concat(arguments.length, " present"));
      }
      var originalDate = (0, _index.default)(dirtyDate);
      if (!(0, _index2.default)(originalDate)) {
        throw new RangeError("Invalid time value");
      }
      var dayName = days[originalDate.getUTCDay()];
      var dayOfMonth = (0, _index3.default)(originalDate.getUTCDate(), 2);
      var monthName = months[originalDate.getUTCMonth()];
      var year = originalDate.getUTCFullYear();
      var hour = (0, _index3.default)(originalDate.getUTCHours(), 2);
      var minute = (0, _index3.default)(originalDate.getUTCMinutes(), 2);
      var second = (0, _index3.default)(originalDate.getUTCSeconds(), 2);
      return "".concat(dayName, ", ").concat(dayOfMonth, " ").concat(monthName, " ").concat(year, " ").concat(hour, ":").concat(minute, ":").concat(second, " GMT");
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/formatRelative/index.js
var require_formatRelative2 = __commonJS({
  "node_modules/date-fns/formatRelative/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formatRelative;
    var _index = _interopRequireDefault(require_differenceInCalendarDays());
    var _index2 = _interopRequireDefault(require_format());
    var _index3 = _interopRequireDefault(require_en_US());
    var _index4 = _interopRequireDefault(require_subMilliseconds());
    var _index5 = _interopRequireDefault(require_toDate());
    var _index6 = _interopRequireDefault(require_getTimezoneOffsetInMilliseconds());
    var _index7 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function formatRelative(dirtyDate, dirtyBaseDate, dirtyOptions) {
      (0, _index7.default)(2, arguments);
      var date = (0, _index5.default)(dirtyDate);
      var baseDate = (0, _index5.default)(dirtyBaseDate);
      var options2 = dirtyOptions || {};
      var locale = options2.locale || _index3.default;
      if (!locale.localize) {
        throw new RangeError("locale must contain localize property");
      }
      if (!locale.formatLong) {
        throw new RangeError("locale must contain formatLong property");
      }
      if (!locale.formatRelative) {
        throw new RangeError("locale must contain formatRelative property");
      }
      var diff = (0, _index.default)(date, baseDate);
      if (isNaN(diff)) {
        throw new RangeError("Invalid time value");
      }
      var token;
      if (diff < -6) {
        token = "other";
      } else if (diff < -1) {
        token = "lastWeek";
      } else if (diff < 0) {
        token = "yesterday";
      } else if (diff < 1) {
        token = "today";
      } else if (diff < 2) {
        token = "tomorrow";
      } else if (diff < 7) {
        token = "nextWeek";
      } else {
        token = "other";
      }
      var utcDate = (0, _index4.default)(date, (0, _index6.default)(date));
      var utcBaseDate = (0, _index4.default)(baseDate, (0, _index6.default)(baseDate));
      var formatStr = locale.formatRelative(token, utcDate, utcBaseDate, options2);
      return (0, _index2.default)(date, formatStr, options2);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/fromUnixTime/index.js
var require_fromUnixTime = __commonJS({
  "node_modules/date-fns/fromUnixTime/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = fromUnixTime;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_toInteger());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function fromUnixTime(dirtyUnixTime) {
      (0, _index3.default)(1, arguments);
      var unixTime = (0, _index2.default)(dirtyUnixTime);
      return (0, _index.default)(unixTime * 1e3);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getDate/index.js
var require_getDate = __commonJS({
  "node_modules/date-fns/getDate/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getDate;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function getDate(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var dayOfMonth = date.getDate();
      return dayOfMonth;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getDay/index.js
var require_getDay = __commonJS({
  "node_modules/date-fns/getDay/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getDay;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function getDay(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var day = date.getDay();
      return day;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getDayOfYear/index.js
var require_getDayOfYear = __commonJS({
  "node_modules/date-fns/getDayOfYear/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getDayOfYear;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_startOfYear());
    var _index3 = _interopRequireDefault(require_differenceInCalendarDays());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function getDayOfYear(dirtyDate) {
      (0, _index4.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var diff = (0, _index3.default)(date, (0, _index2.default)(date));
      var dayOfYear = diff + 1;
      return dayOfYear;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getDaysInMonth/index.js
var require_getDaysInMonth = __commonJS({
  "node_modules/date-fns/getDaysInMonth/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getDaysInMonth;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function getDaysInMonth(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var year = date.getFullYear();
      var monthIndex = date.getMonth();
      var lastDayOfMonth = new Date(0);
      lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);
      lastDayOfMonth.setHours(0, 0, 0, 0);
      return lastDayOfMonth.getDate();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isLeapYear/index.js
var require_isLeapYear = __commonJS({
  "node_modules/date-fns/isLeapYear/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isLeapYear;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isLeapYear(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var year = date.getFullYear();
      return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getDaysInYear/index.js
var require_getDaysInYear = __commonJS({
  "node_modules/date-fns/getDaysInYear/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getDaysInYear;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_isLeapYear());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function getDaysInYear(dirtyDate) {
      (0, _index3.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      if (String(new Date(date)) === "Invalid Date") {
        return NaN;
      }
      return (0, _index2.default)(date) ? 366 : 365;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getDecade/index.js
var require_getDecade = __commonJS({
  "node_modules/date-fns/getDecade/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getDecade;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function getDecade(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var year = date.getFullYear();
      var decade = Math.floor(year / 10) * 10;
      return decade;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getHours/index.js
var require_getHours = __commonJS({
  "node_modules/date-fns/getHours/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getHours;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function getHours(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var hours = date.getHours();
      return hours;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getISODay/index.js
var require_getISODay = __commonJS({
  "node_modules/date-fns/getISODay/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getISODay;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function getISODay(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var day = date.getDay();
      if (day === 0) {
        day = 7;
      }
      return day;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getISOWeek/index.js
var require_getISOWeek = __commonJS({
  "node_modules/date-fns/getISOWeek/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getISOWeek;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_startOfISOWeek());
    var _index3 = _interopRequireDefault(require_startOfISOWeekYear());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var MILLISECONDS_IN_WEEK = 6048e5;
    function getISOWeek(dirtyDate) {
      (0, _index4.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var diff = (0, _index2.default)(date).getTime() - (0, _index3.default)(date).getTime();
      return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getISOWeeksInYear/index.js
var require_getISOWeeksInYear = __commonJS({
  "node_modules/date-fns/getISOWeeksInYear/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getISOWeeksInYear;
    var _index = _interopRequireDefault(require_startOfISOWeekYear());
    var _index2 = _interopRequireDefault(require_addWeeks());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var MILLISECONDS_IN_WEEK = 6048e5;
    function getISOWeeksInYear(dirtyDate) {
      (0, _index3.default)(1, arguments);
      var thisYear = (0, _index.default)(dirtyDate);
      var nextYear = (0, _index.default)((0, _index2.default)(thisYear, 60));
      var diff = nextYear.valueOf() - thisYear.valueOf();
      return Math.round(diff / MILLISECONDS_IN_WEEK);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getMilliseconds/index.js
var require_getMilliseconds = __commonJS({
  "node_modules/date-fns/getMilliseconds/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getMilliseconds;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function getMilliseconds(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var milliseconds = date.getMilliseconds();
      return milliseconds;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getMinutes/index.js
var require_getMinutes = __commonJS({
  "node_modules/date-fns/getMinutes/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getMinutes;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function getMinutes(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var minutes = date.getMinutes();
      return minutes;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getMonth/index.js
var require_getMonth = __commonJS({
  "node_modules/date-fns/getMonth/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getMonth;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function getMonth(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var month = date.getMonth();
      return month;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getOverlappingDaysInIntervals/index.js
var require_getOverlappingDaysInIntervals = __commonJS({
  "node_modules/date-fns/getOverlappingDaysInIntervals/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getOverlappingDaysInIntervals;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var MILLISECONDS_IN_DAY = 24 * 60 * 60 * 1e3;
    function getOverlappingDaysInIntervals(dirtyIntervalLeft, dirtyIntervalRight) {
      (0, _index2.default)(2, arguments);
      var intervalLeft = dirtyIntervalLeft || {};
      var intervalRight = dirtyIntervalRight || {};
      var leftStartTime = (0, _index.default)(intervalLeft.start).getTime();
      var leftEndTime = (0, _index.default)(intervalLeft.end).getTime();
      var rightStartTime = (0, _index.default)(intervalRight.start).getTime();
      var rightEndTime = (0, _index.default)(intervalRight.end).getTime();
      if (!(leftStartTime <= leftEndTime && rightStartTime <= rightEndTime)) {
        throw new RangeError("Invalid interval");
      }
      var isOverlapping = leftStartTime < rightEndTime && rightStartTime < leftEndTime;
      if (!isOverlapping) {
        return 0;
      }
      var overlapStartDate = rightStartTime < leftStartTime ? leftStartTime : rightStartTime;
      var overlapEndDate = rightEndTime > leftEndTime ? leftEndTime : rightEndTime;
      var differenceInMs = overlapEndDate - overlapStartDate;
      return Math.ceil(differenceInMs / MILLISECONDS_IN_DAY);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getSeconds/index.js
var require_getSeconds = __commonJS({
  "node_modules/date-fns/getSeconds/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getSeconds;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function getSeconds(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var seconds = date.getSeconds();
      return seconds;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getTime/index.js
var require_getTime = __commonJS({
  "node_modules/date-fns/getTime/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getTime;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function getTime(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var timestamp = date.getTime();
      return timestamp;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getUnixTime/index.js
var require_getUnixTime = __commonJS({
  "node_modules/date-fns/getUnixTime/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getUnixTime;
    var _index = _interopRequireDefault(require_getTime());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function getUnixTime(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return Math.floor((0, _index.default)(dirtyDate) / 1e3);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getWeekYear/index.js
var require_getWeekYear = __commonJS({
  "node_modules/date-fns/getWeekYear/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getWeekYear;
    var _index = _interopRequireDefault(require_startOfWeek());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_toInteger());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function getWeekYear(dirtyDate, options2) {
      var _options$locale, _options$locale$optio;
      (0, _index4.default)(1, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var year = date.getFullYear();
      var localeFirstWeekContainsDate = options2 === null || options2 === void 0 ? void 0 : (_options$locale = options2.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate;
      var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : (0, _index3.default)(localeFirstWeekContainsDate);
      var firstWeekContainsDate = (options2 === null || options2 === void 0 ? void 0 : options2.firstWeekContainsDate) == null ? defaultFirstWeekContainsDate : (0, _index3.default)(options2.firstWeekContainsDate);
      if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
      }
      var firstWeekOfNextYear = new Date(0);
      firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);
      firstWeekOfNextYear.setHours(0, 0, 0, 0);
      var startOfNextYear = (0, _index.default)(firstWeekOfNextYear, options2);
      var firstWeekOfThisYear = new Date(0);
      firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);
      firstWeekOfThisYear.setHours(0, 0, 0, 0);
      var startOfThisYear = (0, _index.default)(firstWeekOfThisYear, options2);
      if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
      } else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
      } else {
        return year - 1;
      }
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfWeekYear/index.js
var require_startOfWeekYear = __commonJS({
  "node_modules/date-fns/startOfWeekYear/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfWeekYear;
    var _index = _interopRequireDefault(require_getWeekYear());
    var _index2 = _interopRequireDefault(require_startOfWeek());
    var _index3 = _interopRequireDefault(require_toInteger());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function startOfWeekYear(dirtyDate, dirtyOptions) {
      (0, _index4.default)(1, arguments);
      var options2 = dirtyOptions || {};
      var locale = options2.locale;
      var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
      var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : (0, _index3.default)(localeFirstWeekContainsDate);
      var firstWeekContainsDate = options2.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : (0, _index3.default)(options2.firstWeekContainsDate);
      var year = (0, _index.default)(dirtyDate, dirtyOptions);
      var firstWeek = new Date(0);
      firstWeek.setFullYear(year, 0, firstWeekContainsDate);
      firstWeek.setHours(0, 0, 0, 0);
      var date = (0, _index2.default)(firstWeek, dirtyOptions);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getWeek/index.js
var require_getWeek = __commonJS({
  "node_modules/date-fns/getWeek/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getWeek;
    var _index = _interopRequireDefault(require_startOfWeek());
    var _index2 = _interopRequireDefault(require_startOfWeekYear());
    var _index3 = _interopRequireDefault(require_toDate());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var MILLISECONDS_IN_WEEK = 6048e5;
    function getWeek(dirtyDate, options2) {
      (0, _index4.default)(1, arguments);
      var date = (0, _index3.default)(dirtyDate);
      var diff = (0, _index.default)(date, options2).getTime() - (0, _index2.default)(date, options2).getTime();
      return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getWeekOfMonth/index.js
var require_getWeekOfMonth = __commonJS({
  "node_modules/date-fns/getWeekOfMonth/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getWeekOfMonth;
    var _index = _interopRequireDefault(require_getDate());
    var _index2 = _interopRequireDefault(require_getDay());
    var _index3 = _interopRequireDefault(require_startOfMonth());
    var _index4 = _interopRequireDefault(require_toInteger());
    var _index5 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function getWeekOfMonth(date, dirtyOptions) {
      (0, _index5.default)(1, arguments);
      var options2 = dirtyOptions || {};
      var locale = options2.locale;
      var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
      var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : (0, _index4.default)(localeWeekStartsOn);
      var weekStartsOn = options2.weekStartsOn == null ? defaultWeekStartsOn : (0, _index4.default)(options2.weekStartsOn);
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
      }
      var currentDayOfMonth = (0, _index.default)(date);
      if (isNaN(currentDayOfMonth)) {
        return currentDayOfMonth;
      }
      var startWeekDay = (0, _index2.default)((0, _index3.default)(date));
      var lastDayOfFirstWeek = 0;
      if (startWeekDay >= weekStartsOn) {
        lastDayOfFirstWeek = weekStartsOn + 7 - startWeekDay;
      } else {
        lastDayOfFirstWeek = weekStartsOn - startWeekDay;
      }
      var weekNumber = 1;
      if (currentDayOfMonth > lastDayOfFirstWeek) {
        var remainingDaysAfterFirstWeek = currentDayOfMonth - lastDayOfFirstWeek;
        weekNumber = weekNumber + Math.ceil(remainingDaysAfterFirstWeek / 7);
      }
      return weekNumber;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/lastDayOfMonth/index.js
var require_lastDayOfMonth = __commonJS({
  "node_modules/date-fns/lastDayOfMonth/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = lastDayOfMonth;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function lastDayOfMonth(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var month = date.getMonth();
      date.setFullYear(date.getFullYear(), month + 1, 0);
      date.setHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getWeeksInMonth/index.js
var require_getWeeksInMonth = __commonJS({
  "node_modules/date-fns/getWeeksInMonth/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getWeeksInMonth;
    var _index = _interopRequireDefault(require_differenceInCalendarWeeks());
    var _index2 = _interopRequireDefault(require_lastDayOfMonth());
    var _index3 = _interopRequireDefault(require_startOfMonth());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function getWeeksInMonth(date, options2) {
      (0, _index4.default)(1, arguments);
      return (0, _index.default)((0, _index2.default)(date), (0, _index3.default)(date), options2) + 1;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getYear/index.js
var require_getYear = __commonJS({
  "node_modules/date-fns/getYear/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getYear;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function getYear(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var year = date.getFullYear();
      return year;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/subDays/index.js
var require_subDays = __commonJS({
  "node_modules/date-fns/subDays/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = subDays;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addDays());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function subDays(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      return (0, _index2.default)(dirtyDate, -amount);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/subMonths/index.js
var require_subMonths = __commonJS({
  "node_modules/date-fns/subMonths/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = subMonths;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addMonths());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function subMonths(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      return (0, _index2.default)(dirtyDate, -amount);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/sub/index.js
var require_sub = __commonJS({
  "node_modules/date-fns/sub/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = sub;
    var _index = _interopRequireDefault(require_subDays());
    var _index2 = _interopRequireDefault(require_subMonths());
    var _index3 = _interopRequireDefault(require_toDate());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    var _index5 = _interopRequireDefault(require_toInteger());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function sub(dirtyDate, duration) {
      (0, _index4.default)(2, arguments);
      if (!duration || typeof duration !== "object")
        return new Date(NaN);
      var years = "years" in duration ? (0, _index5.default)(duration.years) : 0;
      var months = "months" in duration ? (0, _index5.default)(duration.months) : 0;
      var weeks = "weeks" in duration ? (0, _index5.default)(duration.weeks) : 0;
      var days = "days" in duration ? (0, _index5.default)(duration.days) : 0;
      var hours = "hours" in duration ? (0, _index5.default)(duration.hours) : 0;
      var minutes = "minutes" in duration ? (0, _index5.default)(duration.minutes) : 0;
      var seconds = "seconds" in duration ? (0, _index5.default)(duration.seconds) : 0;
      var dateWithoutMonths = (0, _index2.default)((0, _index3.default)(dirtyDate), months + years * 12);
      var dateWithoutDays = (0, _index.default)(dateWithoutMonths, days + weeks * 7);
      var minutestoSub = minutes + hours * 60;
      var secondstoSub = seconds + minutestoSub * 60;
      var mstoSub = secondstoSub * 1e3;
      var finalDate = new Date(dateWithoutDays.getTime() - mstoSub);
      return finalDate;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/intervalToDuration/index.js
var require_intervalToDuration = __commonJS({
  "node_modules/date-fns/intervalToDuration/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = intervalToDuration;
    var _index = _interopRequireDefault(require_compareAsc());
    var _index2 = _interopRequireDefault(require_differenceInYears());
    var _index3 = _interopRequireDefault(require_differenceInMonths());
    var _index4 = _interopRequireDefault(require_differenceInDays());
    var _index5 = _interopRequireDefault(require_differenceInHours());
    var _index6 = _interopRequireDefault(require_differenceInMinutes());
    var _index7 = _interopRequireDefault(require_differenceInSeconds());
    var _index8 = _interopRequireDefault(require_isValid());
    var _index9 = _interopRequireDefault(require_requiredArgs());
    var _index10 = _interopRequireDefault(require_toDate());
    var _index11 = _interopRequireDefault(require_sub());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function intervalToDuration(_ref) {
      var start = _ref.start, end = _ref.end;
      (0, _index9.default)(1, arguments);
      var dateLeft = (0, _index10.default)(start);
      var dateRight = (0, _index10.default)(end);
      if (!(0, _index8.default)(dateLeft)) {
        throw new RangeError("Start Date is invalid");
      }
      if (!(0, _index8.default)(dateRight)) {
        throw new RangeError("End Date is invalid");
      }
      var duration = {
        years: 0,
        months: 0,
        days: 0,
        hours: 0,
        minutes: 0,
        seconds: 0
      };
      var sign = (0, _index.default)(dateLeft, dateRight);
      duration.years = Math.abs((0, _index2.default)(dateLeft, dateRight));
      var remainingMonths = (0, _index11.default)(dateLeft, {
        years: sign * duration.years
      });
      duration.months = Math.abs((0, _index3.default)(remainingMonths, dateRight));
      var remainingDays = (0, _index11.default)(remainingMonths, {
        months: sign * duration.months
      });
      duration.days = Math.abs((0, _index4.default)(remainingDays, dateRight));
      var remainingHours = (0, _index11.default)(remainingDays, {
        days: sign * duration.days
      });
      duration.hours = Math.abs((0, _index5.default)(remainingHours, dateRight));
      var remainingMinutes = (0, _index11.default)(remainingHours, {
        hours: sign * duration.hours
      });
      duration.minutes = Math.abs((0, _index6.default)(remainingMinutes, dateRight));
      var remainingSeconds = (0, _index11.default)(remainingMinutes, {
        minutes: sign * duration.minutes
      });
      duration.seconds = Math.abs((0, _index7.default)(remainingSeconds, dateRight));
      return duration;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/intlFormat/index.js
var require_intlFormat = __commonJS({
  "node_modules/date-fns/intlFormat/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = intlFormat;
    var _index = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function intlFormat(date, formatOrLocale, localeOptions) {
      var _localeOptions;
      (0, _index.default)(1, arguments);
      var formatOptions;
      if (isFormatOptions(formatOrLocale)) {
        formatOptions = formatOrLocale;
      } else {
        localeOptions = formatOrLocale;
      }
      return new Intl.DateTimeFormat((_localeOptions = localeOptions) === null || _localeOptions === void 0 ? void 0 : _localeOptions.locale, formatOptions).format(date);
    }
    function isFormatOptions(opts) {
      return opts !== void 0 && !("locale" in opts);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isAfter/index.js
var require_isAfter = __commonJS({
  "node_modules/date-fns/isAfter/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isAfter;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isAfter(dirtyDate, dirtyDateToCompare) {
      (0, _index2.default)(2, arguments);
      var date = (0, _index.default)(dirtyDate);
      var dateToCompare = (0, _index.default)(dirtyDateToCompare);
      return date.getTime() > dateToCompare.getTime();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isBefore/index.js
var require_isBefore = __commonJS({
  "node_modules/date-fns/isBefore/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isBefore;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isBefore(dirtyDate, dirtyDateToCompare) {
      (0, _index2.default)(2, arguments);
      var date = (0, _index.default)(dirtyDate);
      var dateToCompare = (0, _index.default)(dirtyDateToCompare);
      return date.getTime() < dateToCompare.getTime();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isDate/index.js
var require_isDate = __commonJS({
  "node_modules/date-fns/isDate/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isDate;
    var _index = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isDate(value) {
      (0, _index.default)(1, arguments);
      return value instanceof Date || typeof value === "object" && Object.prototype.toString.call(value) === "[object Date]";
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isEqual/index.js
var require_isEqual = __commonJS({
  "node_modules/date-fns/isEqual/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isEqual;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isEqual(dirtyLeftDate, dirtyRightDate) {
      (0, _index2.default)(2, arguments);
      var dateLeft = (0, _index.default)(dirtyLeftDate);
      var dateRight = (0, _index.default)(dirtyRightDate);
      return dateLeft.getTime() === dateRight.getTime();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isExists/index.js
var require_isExists = __commonJS({
  "node_modules/date-fns/isExists/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isExists;
    function isExists(year, month, day) {
      if (arguments.length < 3) {
        throw new TypeError("3 argument required, but only " + arguments.length + " present");
      }
      var date = new Date(year, month, day);
      return date.getFullYear() === year && date.getMonth() === month && date.getDate() === day;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isFirstDayOfMonth/index.js
var require_isFirstDayOfMonth = __commonJS({
  "node_modules/date-fns/isFirstDayOfMonth/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isFirstDayOfMonth;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isFirstDayOfMonth(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate).getDate() === 1;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isFriday/index.js
var require_isFriday = __commonJS({
  "node_modules/date-fns/isFriday/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isFriday;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isFriday(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate).getDay() === 5;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isFuture/index.js
var require_isFuture = __commonJS({
  "node_modules/date-fns/isFuture/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isFuture;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isFuture(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate).getTime() > Date.now();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/setUTCDay/index.js
var require_setUTCDay = __commonJS({
  "node_modules/date-fns/_lib/setUTCDay/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setUTCDay;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {
      (0, _index3.default)(2, arguments);
      var options2 = dirtyOptions || {};
      var locale = options2.locale;
      var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
      var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : (0, _index.default)(localeWeekStartsOn);
      var weekStartsOn = options2.weekStartsOn == null ? defaultWeekStartsOn : (0, _index.default)(options2.weekStartsOn);
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
      }
      var date = (0, _index2.default)(dirtyDate);
      var day = (0, _index.default)(dirtyDay);
      var currentDay = date.getUTCDay();
      var remainder = day % 7;
      var dayIndex = (remainder + 7) % 7;
      var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
      date.setUTCDate(date.getUTCDate() + diff);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/setUTCISODay/index.js
var require_setUTCISODay = __commonJS({
  "node_modules/date-fns/_lib/setUTCISODay/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setUTCISODay;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function setUTCISODay(dirtyDate, dirtyDay) {
      (0, _index3.default)(2, arguments);
      var day = (0, _index.default)(dirtyDay);
      if (day % 7 === 0) {
        day = day - 7;
      }
      var weekStartsOn = 1;
      var date = (0, _index2.default)(dirtyDate);
      var currentDay = date.getUTCDay();
      var remainder = day % 7;
      var dayIndex = (remainder + 7) % 7;
      var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
      date.setUTCDate(date.getUTCDate() + diff);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/setUTCISOWeek/index.js
var require_setUTCISOWeek = __commonJS({
  "node_modules/date-fns/_lib/setUTCISOWeek/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setUTCISOWeek;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_getUTCISOWeek());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
      (0, _index4.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var isoWeek = (0, _index.default)(dirtyISOWeek);
      var diff = (0, _index3.default)(date) - isoWeek;
      date.setUTCDate(date.getUTCDate() - diff * 7);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/setUTCWeek/index.js
var require_setUTCWeek = __commonJS({
  "node_modules/date-fns/_lib/setUTCWeek/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setUTCWeek;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_getUTCWeek());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function setUTCWeek(dirtyDate, dirtyWeek, options2) {
      (0, _index4.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var week = (0, _index.default)(dirtyWeek);
      var diff = (0, _index3.default)(date, options2) - week;
      date.setUTCDate(date.getUTCDate() - diff * 7);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/parse/_lib/parsers/index.js
var require_parsers = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _index = _interopRequireDefault(require_getUTCWeekYear());
    var _index2 = _interopRequireDefault(require_setUTCDay());
    var _index3 = _interopRequireDefault(require_setUTCISODay());
    var _index4 = _interopRequireDefault(require_setUTCISOWeek());
    var _index5 = _interopRequireDefault(require_setUTCWeek());
    var _index6 = _interopRequireDefault(require_startOfUTCISOWeek());
    var _index7 = _interopRequireDefault(require_startOfUTCWeek());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var MILLISECONDS_IN_HOUR = 36e5;
    var MILLISECONDS_IN_MINUTE = 6e4;
    var MILLISECONDS_IN_SECOND = 1e3;
    var numericPatterns = {
      month: /^(1[0-2]|0?\d)/,
      date: /^(3[0-1]|[0-2]?\d)/,
      dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
      week: /^(5[0-3]|[0-4]?\d)/,
      hour23h: /^(2[0-3]|[0-1]?\d)/,
      hour24h: /^(2[0-4]|[0-1]?\d)/,
      hour11h: /^(1[0-1]|0?\d)/,
      hour12h: /^(1[0-2]|0?\d)/,
      minute: /^[0-5]?\d/,
      second: /^[0-5]?\d/,
      singleDigit: /^\d/,
      twoDigits: /^\d{1,2}/,
      threeDigits: /^\d{1,3}/,
      fourDigits: /^\d{1,4}/,
      anyDigitsSigned: /^-?\d+/,
      singleDigitSigned: /^-?\d/,
      twoDigitsSigned: /^-?\d{1,2}/,
      threeDigitsSigned: /^-?\d{1,3}/,
      fourDigitsSigned: /^-?\d{1,4}/
    };
    var timezonePatterns = {
      basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
      basic: /^([+-])(\d{2})(\d{2})|Z/,
      basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
      extended: /^([+-])(\d{2}):(\d{2})|Z/,
      extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
    };
    function parseNumericPattern(pattern, string, valueCallback) {
      var matchResult = string.match(pattern);
      if (!matchResult) {
        return null;
      }
      var value = parseInt(matchResult[0], 10);
      return {
        value: valueCallback ? valueCallback(value) : value,
        rest: string.slice(matchResult[0].length)
      };
    }
    function parseTimezonePattern(pattern, string) {
      var matchResult = string.match(pattern);
      if (!matchResult) {
        return null;
      }
      if (matchResult[0] === "Z") {
        return {
          value: 0,
          rest: string.slice(1)
        };
      }
      var sign = matchResult[1] === "+" ? 1 : -1;
      var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
      var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
      var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
      return {
        value: sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * MILLISECONDS_IN_SECOND),
        rest: string.slice(matchResult[0].length)
      };
    }
    function parseAnyDigitsSigned(string, valueCallback) {
      return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);
    }
    function parseNDigits(n, string, valueCallback) {
      switch (n) {
        case 1:
          return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);
        case 2:
          return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);
        case 3:
          return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);
        case 4:
          return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);
        default:
          return parseNumericPattern(new RegExp("^\\d{1," + n + "}"), string, valueCallback);
      }
    }
    function parseNDigitsSigned(n, string, valueCallback) {
      switch (n) {
        case 1:
          return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);
        case 2:
          return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);
        case 3:
          return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);
        case 4:
          return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);
        default:
          return parseNumericPattern(new RegExp("^-?\\d{1," + n + "}"), string, valueCallback);
      }
    }
    function dayPeriodEnumToHours(enumValue) {
      switch (enumValue) {
        case "morning":
          return 4;
        case "evening":
          return 17;
        case "pm":
        case "noon":
        case "afternoon":
          return 12;
        case "am":
        case "midnight":
        case "night":
        default:
          return 0;
      }
    }
    function normalizeTwoDigitYear(twoDigitYear, currentYear) {
      var isCommonEra = currentYear > 0;
      var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
      var result;
      if (absCurrentYear <= 50) {
        result = twoDigitYear || 100;
      } else {
        var rangeEnd = absCurrentYear + 50;
        var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
        var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
        result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
      }
      return isCommonEra ? result : 1 - result;
    }
    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    function isLeapYearIndex(year) {
      return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
    }
    var parsers = {
      G: {
        priority: 140,
        parse: function(string, token, match, _options) {
          switch (token) {
            case "G":
            case "GG":
            case "GGG":
              return match.era(string, {
                width: "abbreviated"
              }) || match.era(string, {
                width: "narrow"
              });
            case "GGGGG":
              return match.era(string, {
                width: "narrow"
              });
            case "GGGG":
            default:
              return match.era(string, {
                width: "wide"
              }) || match.era(string, {
                width: "abbreviated"
              }) || match.era(string, {
                width: "narrow"
              });
          }
        },
        set: function(date, flags, value, _options) {
          flags.era = value;
          date.setUTCFullYear(value, 0, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        },
        incompatibleTokens: ["R", "u", "t", "T"]
      },
      y: {
        priority: 130,
        parse: function(string, token, match, _options) {
          var valueCallback = function(year) {
            return {
              year,
              isTwoDigitYear: token === "yy"
            };
          };
          switch (token) {
            case "y":
              return parseNDigits(4, string, valueCallback);
            case "yo":
              return match.ordinalNumber(string, {
                unit: "year",
                valueCallback
              });
            default:
              return parseNDigits(token.length, string, valueCallback);
          }
        },
        validate: function(_date, value, _options) {
          return value.isTwoDigitYear || value.year > 0;
        },
        set: function(date, flags, value, _options) {
          var currentYear = date.getUTCFullYear();
          if (value.isTwoDigitYear) {
            var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
            date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
            date.setUTCHours(0, 0, 0, 0);
            return date;
          }
          var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
          date.setUTCFullYear(year, 0, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        },
        incompatibleTokens: ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"]
      },
      Y: {
        priority: 130,
        parse: function(string, token, match, _options) {
          var valueCallback = function(year) {
            return {
              year,
              isTwoDigitYear: token === "YY"
            };
          };
          switch (token) {
            case "Y":
              return parseNDigits(4, string, valueCallback);
            case "Yo":
              return match.ordinalNumber(string, {
                unit: "year",
                valueCallback
              });
            default:
              return parseNDigits(token.length, string, valueCallback);
          }
        },
        validate: function(_date, value, _options) {
          return value.isTwoDigitYear || value.year > 0;
        },
        set: function(date, flags, value, options2) {
          var currentYear = (0, _index.default)(date, options2);
          if (value.isTwoDigitYear) {
            var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
            date.setUTCFullYear(normalizedTwoDigitYear, 0, options2.firstWeekContainsDate);
            date.setUTCHours(0, 0, 0, 0);
            return (0, _index7.default)(date, options2);
          }
          var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
          date.setUTCFullYear(year, 0, options2.firstWeekContainsDate);
          date.setUTCHours(0, 0, 0, 0);
          return (0, _index7.default)(date, options2);
        },
        incompatibleTokens: ["y", "R", "u", "Q", "q", "M", "L", "I", "d", "D", "i", "t", "T"]
      },
      R: {
        priority: 130,
        parse: function(string, token, _match, _options) {
          if (token === "R") {
            return parseNDigitsSigned(4, string);
          }
          return parseNDigitsSigned(token.length, string);
        },
        set: function(_date, _flags, value, _options) {
          var firstWeekOfYear = new Date(0);
          firstWeekOfYear.setUTCFullYear(value, 0, 4);
          firstWeekOfYear.setUTCHours(0, 0, 0, 0);
          return (0, _index6.default)(firstWeekOfYear);
        },
        incompatibleTokens: ["G", "y", "Y", "u", "Q", "q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]
      },
      u: {
        priority: 130,
        parse: function(string, token, _match, _options) {
          if (token === "u") {
            return parseNDigitsSigned(4, string);
          }
          return parseNDigitsSigned(token.length, string);
        },
        set: function(date, _flags, value, _options) {
          date.setUTCFullYear(value, 0, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        },
        incompatibleTokens: ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"]
      },
      Q: {
        priority: 120,
        parse: function(string, token, match, _options) {
          switch (token) {
            case "Q":
            case "QQ":
              return parseNDigits(token.length, string);
            case "Qo":
              return match.ordinalNumber(string, {
                unit: "quarter"
              });
            case "QQQ":
              return match.quarter(string, {
                width: "abbreviated",
                context: "formatting"
              }) || match.quarter(string, {
                width: "narrow",
                context: "formatting"
              });
            case "QQQQQ":
              return match.quarter(string, {
                width: "narrow",
                context: "formatting"
              });
            case "QQQQ":
            default:
              return match.quarter(string, {
                width: "wide",
                context: "formatting"
              }) || match.quarter(string, {
                width: "abbreviated",
                context: "formatting"
              }) || match.quarter(string, {
                width: "narrow",
                context: "formatting"
              });
          }
        },
        validate: function(_date, value, _options) {
          return value >= 1 && value <= 4;
        },
        set: function(date, _flags, value, _options) {
          date.setUTCMonth((value - 1) * 3, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        },
        incompatibleTokens: ["Y", "R", "q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]
      },
      q: {
        priority: 120,
        parse: function(string, token, match, _options) {
          switch (token) {
            case "q":
            case "qq":
              return parseNDigits(token.length, string);
            case "qo":
              return match.ordinalNumber(string, {
                unit: "quarter"
              });
            case "qqq":
              return match.quarter(string, {
                width: "abbreviated",
                context: "standalone"
              }) || match.quarter(string, {
                width: "narrow",
                context: "standalone"
              });
            case "qqqqq":
              return match.quarter(string, {
                width: "narrow",
                context: "standalone"
              });
            case "qqqq":
            default:
              return match.quarter(string, {
                width: "wide",
                context: "standalone"
              }) || match.quarter(string, {
                width: "abbreviated",
                context: "standalone"
              }) || match.quarter(string, {
                width: "narrow",
                context: "standalone"
              });
          }
        },
        validate: function(_date, value, _options) {
          return value >= 1 && value <= 4;
        },
        set: function(date, _flags, value, _options) {
          date.setUTCMonth((value - 1) * 3, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        },
        incompatibleTokens: ["Y", "R", "Q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]
      },
      M: {
        priority: 110,
        parse: function(string, token, match, _options) {
          var valueCallback = function(value) {
            return value - 1;
          };
          switch (token) {
            case "M":
              return parseNumericPattern(numericPatterns.month, string, valueCallback);
            case "MM":
              return parseNDigits(2, string, valueCallback);
            case "Mo":
              return match.ordinalNumber(string, {
                unit: "month",
                valueCallback
              });
            case "MMM":
              return match.month(string, {
                width: "abbreviated",
                context: "formatting"
              }) || match.month(string, {
                width: "narrow",
                context: "formatting"
              });
            case "MMMMM":
              return match.month(string, {
                width: "narrow",
                context: "formatting"
              });
            case "MMMM":
            default:
              return match.month(string, {
                width: "wide",
                context: "formatting"
              }) || match.month(string, {
                width: "abbreviated",
                context: "formatting"
              }) || match.month(string, {
                width: "narrow",
                context: "formatting"
              });
          }
        },
        validate: function(_date, value, _options) {
          return value >= 0 && value <= 11;
        },
        set: function(date, _flags, value, _options) {
          date.setUTCMonth(value, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        },
        incompatibleTokens: ["Y", "R", "q", "Q", "L", "w", "I", "D", "i", "e", "c", "t", "T"]
      },
      L: {
        priority: 110,
        parse: function(string, token, match, _options) {
          var valueCallback = function(value) {
            return value - 1;
          };
          switch (token) {
            case "L":
              return parseNumericPattern(numericPatterns.month, string, valueCallback);
            case "LL":
              return parseNDigits(2, string, valueCallback);
            case "Lo":
              return match.ordinalNumber(string, {
                unit: "month",
                valueCallback
              });
            case "LLL":
              return match.month(string, {
                width: "abbreviated",
                context: "standalone"
              }) || match.month(string, {
                width: "narrow",
                context: "standalone"
              });
            case "LLLLL":
              return match.month(string, {
                width: "narrow",
                context: "standalone"
              });
            case "LLLL":
            default:
              return match.month(string, {
                width: "wide",
                context: "standalone"
              }) || match.month(string, {
                width: "abbreviated",
                context: "standalone"
              }) || match.month(string, {
                width: "narrow",
                context: "standalone"
              });
          }
        },
        validate: function(_date, value, _options) {
          return value >= 0 && value <= 11;
        },
        set: function(date, _flags, value, _options) {
          date.setUTCMonth(value, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        },
        incompatibleTokens: ["Y", "R", "q", "Q", "M", "w", "I", "D", "i", "e", "c", "t", "T"]
      },
      w: {
        priority: 100,
        parse: function(string, token, match, _options) {
          switch (token) {
            case "w":
              return parseNumericPattern(numericPatterns.week, string);
            case "wo":
              return match.ordinalNumber(string, {
                unit: "week"
              });
            default:
              return parseNDigits(token.length, string);
          }
        },
        validate: function(_date, value, _options) {
          return value >= 1 && value <= 53;
        },
        set: function(date, _flags, value, options2) {
          return (0, _index7.default)((0, _index5.default)(date, value, options2), options2);
        },
        incompatibleTokens: ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "i", "t", "T"]
      },
      I: {
        priority: 100,
        parse: function(string, token, match, _options) {
          switch (token) {
            case "I":
              return parseNumericPattern(numericPatterns.week, string);
            case "Io":
              return match.ordinalNumber(string, {
                unit: "week"
              });
            default:
              return parseNDigits(token.length, string);
          }
        },
        validate: function(_date, value, _options) {
          return value >= 1 && value <= 53;
        },
        set: function(date, _flags, value, options2) {
          return (0, _index6.default)((0, _index4.default)(date, value, options2), options2);
        },
        incompatibleTokens: ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]
      },
      d: {
        priority: 90,
        subPriority: 1,
        parse: function(string, token, match, _options) {
          switch (token) {
            case "d":
              return parseNumericPattern(numericPatterns.date, string);
            case "do":
              return match.ordinalNumber(string, {
                unit: "date"
              });
            default:
              return parseNDigits(token.length, string);
          }
        },
        validate: function(date, value, _options) {
          var year = date.getUTCFullYear();
          var isLeapYear = isLeapYearIndex(year);
          var month = date.getUTCMonth();
          if (isLeapYear) {
            return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
          } else {
            return value >= 1 && value <= DAYS_IN_MONTH[month];
          }
        },
        set: function(date, _flags, value, _options) {
          date.setUTCDate(value);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        },
        incompatibleTokens: ["Y", "R", "q", "Q", "w", "I", "D", "i", "e", "c", "t", "T"]
      },
      D: {
        priority: 90,
        subPriority: 1,
        parse: function(string, token, match, _options) {
          switch (token) {
            case "D":
            case "DD":
              return parseNumericPattern(numericPatterns.dayOfYear, string);
            case "Do":
              return match.ordinalNumber(string, {
                unit: "date"
              });
            default:
              return parseNDigits(token.length, string);
          }
        },
        validate: function(date, value, _options) {
          var year = date.getUTCFullYear();
          var isLeapYear = isLeapYearIndex(year);
          if (isLeapYear) {
            return value >= 1 && value <= 366;
          } else {
            return value >= 1 && value <= 365;
          }
        },
        set: function(date, _flags, value, _options) {
          date.setUTCMonth(0, value);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        },
        incompatibleTokens: ["Y", "R", "q", "Q", "M", "L", "w", "I", "d", "E", "i", "e", "c", "t", "T"]
      },
      E: {
        priority: 90,
        parse: function(string, token, match, _options) {
          switch (token) {
            case "E":
            case "EE":
            case "EEE":
              return match.day(string, {
                width: "abbreviated",
                context: "formatting"
              }) || match.day(string, {
                width: "short",
                context: "formatting"
              }) || match.day(string, {
                width: "narrow",
                context: "formatting"
              });
            case "EEEEE":
              return match.day(string, {
                width: "narrow",
                context: "formatting"
              });
            case "EEEEEE":
              return match.day(string, {
                width: "short",
                context: "formatting"
              }) || match.day(string, {
                width: "narrow",
                context: "formatting"
              });
            case "EEEE":
            default:
              return match.day(string, {
                width: "wide",
                context: "formatting"
              }) || match.day(string, {
                width: "abbreviated",
                context: "formatting"
              }) || match.day(string, {
                width: "short",
                context: "formatting"
              }) || match.day(string, {
                width: "narrow",
                context: "formatting"
              });
          }
        },
        validate: function(_date, value, _options) {
          return value >= 0 && value <= 6;
        },
        set: function(date, _flags, value, options2) {
          date = (0, _index2.default)(date, value, options2);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        },
        incompatibleTokens: ["D", "i", "e", "c", "t", "T"]
      },
      e: {
        priority: 90,
        parse: function(string, token, match, options2) {
          var valueCallback = function(value) {
            var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
            return (value + options2.weekStartsOn + 6) % 7 + wholeWeekDays;
          };
          switch (token) {
            case "e":
            case "ee":
              return parseNDigits(token.length, string, valueCallback);
            case "eo":
              return match.ordinalNumber(string, {
                unit: "day",
                valueCallback
              });
            case "eee":
              return match.day(string, {
                width: "abbreviated",
                context: "formatting"
              }) || match.day(string, {
                width: "short",
                context: "formatting"
              }) || match.day(string, {
                width: "narrow",
                context: "formatting"
              });
            case "eeeee":
              return match.day(string, {
                width: "narrow",
                context: "formatting"
              });
            case "eeeeee":
              return match.day(string, {
                width: "short",
                context: "formatting"
              }) || match.day(string, {
                width: "narrow",
                context: "formatting"
              });
            case "eeee":
            default:
              return match.day(string, {
                width: "wide",
                context: "formatting"
              }) || match.day(string, {
                width: "abbreviated",
                context: "formatting"
              }) || match.day(string, {
                width: "short",
                context: "formatting"
              }) || match.day(string, {
                width: "narrow",
                context: "formatting"
              });
          }
        },
        validate: function(_date, value, _options) {
          return value >= 0 && value <= 6;
        },
        set: function(date, _flags, value, options2) {
          date = (0, _index2.default)(date, value, options2);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        },
        incompatibleTokens: ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "c", "t", "T"]
      },
      c: {
        priority: 90,
        parse: function(string, token, match, options2) {
          var valueCallback = function(value) {
            var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
            return (value + options2.weekStartsOn + 6) % 7 + wholeWeekDays;
          };
          switch (token) {
            case "c":
            case "cc":
              return parseNDigits(token.length, string, valueCallback);
            case "co":
              return match.ordinalNumber(string, {
                unit: "day",
                valueCallback
              });
            case "ccc":
              return match.day(string, {
                width: "abbreviated",
                context: "standalone"
              }) || match.day(string, {
                width: "short",
                context: "standalone"
              }) || match.day(string, {
                width: "narrow",
                context: "standalone"
              });
            case "ccccc":
              return match.day(string, {
                width: "narrow",
                context: "standalone"
              });
            case "cccccc":
              return match.day(string, {
                width: "short",
                context: "standalone"
              }) || match.day(string, {
                width: "narrow",
                context: "standalone"
              });
            case "cccc":
            default:
              return match.day(string, {
                width: "wide",
                context: "standalone"
              }) || match.day(string, {
                width: "abbreviated",
                context: "standalone"
              }) || match.day(string, {
                width: "short",
                context: "standalone"
              }) || match.day(string, {
                width: "narrow",
                context: "standalone"
              });
          }
        },
        validate: function(_date, value, _options) {
          return value >= 0 && value <= 6;
        },
        set: function(date, _flags, value, options2) {
          date = (0, _index2.default)(date, value, options2);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        },
        incompatibleTokens: ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "e", "t", "T"]
      },
      i: {
        priority: 90,
        parse: function(string, token, match, _options) {
          var valueCallback = function(value) {
            if (value === 0) {
              return 7;
            }
            return value;
          };
          switch (token) {
            case "i":
            case "ii":
              return parseNDigits(token.length, string);
            case "io":
              return match.ordinalNumber(string, {
                unit: "day"
              });
            case "iii":
              return match.day(string, {
                width: "abbreviated",
                context: "formatting",
                valueCallback
              }) || match.day(string, {
                width: "short",
                context: "formatting",
                valueCallback
              }) || match.day(string, {
                width: "narrow",
                context: "formatting",
                valueCallback
              });
            case "iiiii":
              return match.day(string, {
                width: "narrow",
                context: "formatting",
                valueCallback
              });
            case "iiiiii":
              return match.day(string, {
                width: "short",
                context: "formatting",
                valueCallback
              }) || match.day(string, {
                width: "narrow",
                context: "formatting",
                valueCallback
              });
            case "iiii":
            default:
              return match.day(string, {
                width: "wide",
                context: "formatting",
                valueCallback
              }) || match.day(string, {
                width: "abbreviated",
                context: "formatting",
                valueCallback
              }) || match.day(string, {
                width: "short",
                context: "formatting",
                valueCallback
              }) || match.day(string, {
                width: "narrow",
                context: "formatting",
                valueCallback
              });
          }
        },
        validate: function(_date, value, _options) {
          return value >= 1 && value <= 7;
        },
        set: function(date, _flags, value, options2) {
          date = (0, _index3.default)(date, value, options2);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        },
        incompatibleTokens: ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "E", "e", "c", "t", "T"]
      },
      a: {
        priority: 80,
        parse: function(string, token, match, _options) {
          switch (token) {
            case "a":
            case "aa":
            case "aaa":
              return match.dayPeriod(string, {
                width: "abbreviated",
                context: "formatting"
              }) || match.dayPeriod(string, {
                width: "narrow",
                context: "formatting"
              });
            case "aaaaa":
              return match.dayPeriod(string, {
                width: "narrow",
                context: "formatting"
              });
            case "aaaa":
            default:
              return match.dayPeriod(string, {
                width: "wide",
                context: "formatting"
              }) || match.dayPeriod(string, {
                width: "abbreviated",
                context: "formatting"
              }) || match.dayPeriod(string, {
                width: "narrow",
                context: "formatting"
              });
          }
        },
        set: function(date, _flags, value, _options) {
          date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
          return date;
        },
        incompatibleTokens: ["b", "B", "H", "K", "k", "t", "T"]
      },
      b: {
        priority: 80,
        parse: function(string, token, match, _options) {
          switch (token) {
            case "b":
            case "bb":
            case "bbb":
              return match.dayPeriod(string, {
                width: "abbreviated",
                context: "formatting"
              }) || match.dayPeriod(string, {
                width: "narrow",
                context: "formatting"
              });
            case "bbbbb":
              return match.dayPeriod(string, {
                width: "narrow",
                context: "formatting"
              });
            case "bbbb":
            default:
              return match.dayPeriod(string, {
                width: "wide",
                context: "formatting"
              }) || match.dayPeriod(string, {
                width: "abbreviated",
                context: "formatting"
              }) || match.dayPeriod(string, {
                width: "narrow",
                context: "formatting"
              });
          }
        },
        set: function(date, _flags, value, _options) {
          date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
          return date;
        },
        incompatibleTokens: ["a", "B", "H", "K", "k", "t", "T"]
      },
      B: {
        priority: 80,
        parse: function(string, token, match, _options) {
          switch (token) {
            case "B":
            case "BB":
            case "BBB":
              return match.dayPeriod(string, {
                width: "abbreviated",
                context: "formatting"
              }) || match.dayPeriod(string, {
                width: "narrow",
                context: "formatting"
              });
            case "BBBBB":
              return match.dayPeriod(string, {
                width: "narrow",
                context: "formatting"
              });
            case "BBBB":
            default:
              return match.dayPeriod(string, {
                width: "wide",
                context: "formatting"
              }) || match.dayPeriod(string, {
                width: "abbreviated",
                context: "formatting"
              }) || match.dayPeriod(string, {
                width: "narrow",
                context: "formatting"
              });
          }
        },
        set: function(date, _flags, value, _options) {
          date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
          return date;
        },
        incompatibleTokens: ["a", "b", "t", "T"]
      },
      h: {
        priority: 70,
        parse: function(string, token, match, _options) {
          switch (token) {
            case "h":
              return parseNumericPattern(numericPatterns.hour12h, string);
            case "ho":
              return match.ordinalNumber(string, {
                unit: "hour"
              });
            default:
              return parseNDigits(token.length, string);
          }
        },
        validate: function(_date, value, _options) {
          return value >= 1 && value <= 12;
        },
        set: function(date, _flags, value, _options) {
          var isPM = date.getUTCHours() >= 12;
          if (isPM && value < 12) {
            date.setUTCHours(value + 12, 0, 0, 0);
          } else if (!isPM && value === 12) {
            date.setUTCHours(0, 0, 0, 0);
          } else {
            date.setUTCHours(value, 0, 0, 0);
          }
          return date;
        },
        incompatibleTokens: ["H", "K", "k", "t", "T"]
      },
      H: {
        priority: 70,
        parse: function(string, token, match, _options) {
          switch (token) {
            case "H":
              return parseNumericPattern(numericPatterns.hour23h, string);
            case "Ho":
              return match.ordinalNumber(string, {
                unit: "hour"
              });
            default:
              return parseNDigits(token.length, string);
          }
        },
        validate: function(_date, value, _options) {
          return value >= 0 && value <= 23;
        },
        set: function(date, _flags, value, _options) {
          date.setUTCHours(value, 0, 0, 0);
          return date;
        },
        incompatibleTokens: ["a", "b", "h", "K", "k", "t", "T"]
      },
      K: {
        priority: 70,
        parse: function(string, token, match, _options) {
          switch (token) {
            case "K":
              return parseNumericPattern(numericPatterns.hour11h, string);
            case "Ko":
              return match.ordinalNumber(string, {
                unit: "hour"
              });
            default:
              return parseNDigits(token.length, string);
          }
        },
        validate: function(_date, value, _options) {
          return value >= 0 && value <= 11;
        },
        set: function(date, _flags, value, _options) {
          var isPM = date.getUTCHours() >= 12;
          if (isPM && value < 12) {
            date.setUTCHours(value + 12, 0, 0, 0);
          } else {
            date.setUTCHours(value, 0, 0, 0);
          }
          return date;
        },
        incompatibleTokens: ["a", "b", "h", "H", "k", "t", "T"]
      },
      k: {
        priority: 70,
        parse: function(string, token, match, _options) {
          switch (token) {
            case "k":
              return parseNumericPattern(numericPatterns.hour24h, string);
            case "ko":
              return match.ordinalNumber(string, {
                unit: "hour"
              });
            default:
              return parseNDigits(token.length, string);
          }
        },
        validate: function(_date, value, _options) {
          return value >= 1 && value <= 24;
        },
        set: function(date, _flags, value, _options) {
          var hours = value <= 24 ? value % 24 : value;
          date.setUTCHours(hours, 0, 0, 0);
          return date;
        },
        incompatibleTokens: ["a", "b", "h", "H", "K", "t", "T"]
      },
      m: {
        priority: 60,
        parse: function(string, token, match, _options) {
          switch (token) {
            case "m":
              return parseNumericPattern(numericPatterns.minute, string);
            case "mo":
              return match.ordinalNumber(string, {
                unit: "minute"
              });
            default:
              return parseNDigits(token.length, string);
          }
        },
        validate: function(_date, value, _options) {
          return value >= 0 && value <= 59;
        },
        set: function(date, _flags, value, _options) {
          date.setUTCMinutes(value, 0, 0);
          return date;
        },
        incompatibleTokens: ["t", "T"]
      },
      s: {
        priority: 50,
        parse: function(string, token, match, _options) {
          switch (token) {
            case "s":
              return parseNumericPattern(numericPatterns.second, string);
            case "so":
              return match.ordinalNumber(string, {
                unit: "second"
              });
            default:
              return parseNDigits(token.length, string);
          }
        },
        validate: function(_date, value, _options) {
          return value >= 0 && value <= 59;
        },
        set: function(date, _flags, value, _options) {
          date.setUTCSeconds(value, 0);
          return date;
        },
        incompatibleTokens: ["t", "T"]
      },
      S: {
        priority: 30,
        parse: function(string, token, _match, _options) {
          var valueCallback = function(value) {
            return Math.floor(value * Math.pow(10, -token.length + 3));
          };
          return parseNDigits(token.length, string, valueCallback);
        },
        set: function(date, _flags, value, _options) {
          date.setUTCMilliseconds(value);
          return date;
        },
        incompatibleTokens: ["t", "T"]
      },
      X: {
        priority: 10,
        parse: function(string, token, _match, _options) {
          switch (token) {
            case "X":
              return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);
            case "XX":
              return parseTimezonePattern(timezonePatterns.basic, string);
            case "XXXX":
              return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);
            case "XXXXX":
              return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);
            case "XXX":
            default:
              return parseTimezonePattern(timezonePatterns.extended, string);
          }
        },
        set: function(date, flags, value, _options) {
          if (flags.timestampIsSet) {
            return date;
          }
          return new Date(date.getTime() - value);
        },
        incompatibleTokens: ["t", "T", "x"]
      },
      x: {
        priority: 10,
        parse: function(string, token, _match, _options) {
          switch (token) {
            case "x":
              return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);
            case "xx":
              return parseTimezonePattern(timezonePatterns.basic, string);
            case "xxxx":
              return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);
            case "xxxxx":
              return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);
            case "xxx":
            default:
              return parseTimezonePattern(timezonePatterns.extended, string);
          }
        },
        set: function(date, flags, value, _options) {
          if (flags.timestampIsSet) {
            return date;
          }
          return new Date(date.getTime() - value);
        },
        incompatibleTokens: ["t", "T", "X"]
      },
      t: {
        priority: 40,
        parse: function(string, _token, _match, _options) {
          return parseAnyDigitsSigned(string);
        },
        set: function(_date, _flags, value, _options) {
          return [new Date(value * 1e3), {
            timestampIsSet: true
          }];
        },
        incompatibleTokens: "*"
      },
      T: {
        priority: 20,
        parse: function(string, _token, _match, _options) {
          return parseAnyDigitsSigned(string);
        },
        set: function(_date, _flags, value, _options) {
          return [new Date(value), {
            timestampIsSet: true
          }];
        },
        incompatibleTokens: "*"
      }
    };
    var _default = parsers;
    exports2.default = _default;
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/parse/index.js
var require_parse2 = __commonJS({
  "node_modules/date-fns/parse/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = parse;
    var _index = _interopRequireDefault(require_en_US());
    var _index2 = _interopRequireDefault(require_subMilliseconds());
    var _index3 = _interopRequireDefault(require_toDate());
    var _index4 = _interopRequireDefault(require_assign());
    var _index5 = _interopRequireDefault(require_longFormatters());
    var _index6 = _interopRequireDefault(require_getTimezoneOffsetInMilliseconds());
    var _index7 = require_protectedTokens();
    var _index8 = _interopRequireDefault(require_toInteger());
    var _index9 = _interopRequireDefault(require_parsers());
    var _index10 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var TIMEZONE_UNIT_PRIORITY = 10;
    var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
    var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
    var escapedStringRegExp = /^'([^]*?)'?$/;
    var doubleQuoteRegExp = /''/g;
    var notWhitespaceRegExp = /\S/;
    var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
    function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {
      (0, _index10.default)(3, arguments);
      var dateString = String(dirtyDateString);
      var formatString = String(dirtyFormatString);
      var options2 = dirtyOptions || {};
      var locale = options2.locale || _index.default;
      if (!locale.match) {
        throw new RangeError("locale must contain match property");
      }
      var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;
      var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : (0, _index8.default)(localeFirstWeekContainsDate);
      var firstWeekContainsDate = options2.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : (0, _index8.default)(options2.firstWeekContainsDate);
      if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
      }
      var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;
      var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : (0, _index8.default)(localeWeekStartsOn);
      var weekStartsOn = options2.weekStartsOn == null ? defaultWeekStartsOn : (0, _index8.default)(options2.weekStartsOn);
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
      }
      if (formatString === "") {
        if (dateString === "") {
          return (0, _index3.default)(dirtyReferenceDate);
        } else {
          return new Date(NaN);
        }
      }
      var subFnOptions = {
        firstWeekContainsDate,
        weekStartsOn,
        locale
      };
      var setters = [{
        priority: TIMEZONE_UNIT_PRIORITY,
        subPriority: -1,
        set: dateToSystemTimezone,
        index: 0
      }];
      var i;
      var tokens = formatString.match(longFormattingTokensRegExp).map(function(substring) {
        var firstCharacter2 = substring[0];
        if (firstCharacter2 === "p" || firstCharacter2 === "P") {
          var longFormatter = _index5.default[firstCharacter2];
          return longFormatter(substring, locale.formatLong, subFnOptions);
        }
        return substring;
      }).join("").match(formattingTokensRegExp);
      var usedTokens = [];
      for (i = 0; i < tokens.length; i++) {
        var token = tokens[i];
        if (!options2.useAdditionalWeekYearTokens && (0, _index7.isProtectedWeekYearToken)(token)) {
          (0, _index7.throwProtectedError)(token, formatString, dirtyDateString);
        }
        if (!options2.useAdditionalDayOfYearTokens && (0, _index7.isProtectedDayOfYearToken)(token)) {
          (0, _index7.throwProtectedError)(token, formatString, dirtyDateString);
        }
        var firstCharacter = token[0];
        var parser = _index9.default[firstCharacter];
        if (parser) {
          var incompatibleTokens = parser.incompatibleTokens;
          if (Array.isArray(incompatibleTokens)) {
            var incompatibleToken = void 0;
            for (var _i = 0; _i < usedTokens.length; _i++) {
              var usedToken = usedTokens[_i].token;
              if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {
                incompatibleToken = usedTokens[_i];
                break;
              }
            }
            if (incompatibleToken) {
              throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
            }
          } else if (parser.incompatibleTokens === "*" && usedTokens.length) {
            throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
          }
          usedTokens.push({
            token: firstCharacter,
            fullToken: token
          });
          var parseResult = parser.parse(dateString, token, locale.match, subFnOptions);
          if (!parseResult) {
            return new Date(NaN);
          }
          setters.push({
            priority: parser.priority,
            subPriority: parser.subPriority || 0,
            set: parser.set,
            validate: parser.validate,
            value: parseResult.value,
            index: setters.length
          });
          dateString = parseResult.rest;
        } else {
          if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
            throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
          }
          if (token === "''") {
            token = "'";
          } else if (firstCharacter === "'") {
            token = cleanEscapedString(token);
          }
          if (dateString.indexOf(token) === 0) {
            dateString = dateString.slice(token.length);
          } else {
            return new Date(NaN);
          }
        }
      }
      if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
        return new Date(NaN);
      }
      var uniquePrioritySetters = setters.map(function(setter2) {
        return setter2.priority;
      }).sort(function(a, b) {
        return b - a;
      }).filter(function(priority, index2, array) {
        return array.indexOf(priority) === index2;
      }).map(function(priority) {
        return setters.filter(function(setter2) {
          return setter2.priority === priority;
        }).sort(function(a, b) {
          return b.subPriority - a.subPriority;
        });
      }).map(function(setterArray) {
        return setterArray[0];
      });
      var date = (0, _index3.default)(dirtyReferenceDate);
      if (isNaN(date)) {
        return new Date(NaN);
      }
      var utcDate = (0, _index2.default)(date, (0, _index6.default)(date));
      var flags = {};
      for (i = 0; i < uniquePrioritySetters.length; i++) {
        var setter = uniquePrioritySetters[i];
        if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {
          return new Date(NaN);
        }
        var result = setter.set(utcDate, flags, setter.value, subFnOptions);
        if (result[0]) {
          utcDate = result[0];
          (0, _index4.default)(flags, result[1]);
        } else {
          utcDate = result;
        }
      }
      return utcDate;
    }
    function dateToSystemTimezone(date, flags) {
      if (flags.timestampIsSet) {
        return date;
      }
      var convertedDate = new Date(0);
      convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
      convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
      return convertedDate;
    }
    function cleanEscapedString(input) {
      return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isMatch/index.js
var require_isMatch = __commonJS({
  "node_modules/date-fns/isMatch/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isMatch;
    var _index = _interopRequireDefault(require_parse2());
    var _index2 = _interopRequireDefault(require_isValid());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isMatch(dateString, formatString, dirtyOptions) {
      (0, _index3.default)(2, arguments);
      return (0, _index2.default)((0, _index.default)(dateString, formatString, new Date(), dirtyOptions));
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isMonday/index.js
var require_isMonday = __commonJS({
  "node_modules/date-fns/isMonday/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isMonday;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isMonday(date) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(date).getDay() === 1;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isPast/index.js
var require_isPast = __commonJS({
  "node_modules/date-fns/isPast/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isPast;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isPast(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate).getTime() < Date.now();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfHour/index.js
var require_startOfHour = __commonJS({
  "node_modules/date-fns/startOfHour/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfHour;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function startOfHour(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      date.setMinutes(0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isSameHour/index.js
var require_isSameHour = __commonJS({
  "node_modules/date-fns/isSameHour/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isSameHour;
    var _index = _interopRequireDefault(require_startOfHour());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isSameHour(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var dateLeftStartOfHour = (0, _index.default)(dirtyDateLeft);
      var dateRightStartOfHour = (0, _index.default)(dirtyDateRight);
      return dateLeftStartOfHour.getTime() === dateRightStartOfHour.getTime();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isSameWeek/index.js
var require_isSameWeek = __commonJS({
  "node_modules/date-fns/isSameWeek/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isSameWeek;
    var _index = _interopRequireDefault(require_startOfWeek());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isSameWeek(dirtyDateLeft, dirtyDateRight, dirtyOptions) {
      (0, _index2.default)(2, arguments);
      var dateLeftStartOfWeek = (0, _index.default)(dirtyDateLeft, dirtyOptions);
      var dateRightStartOfWeek = (0, _index.default)(dirtyDateRight, dirtyOptions);
      return dateLeftStartOfWeek.getTime() === dateRightStartOfWeek.getTime();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isSameISOWeek/index.js
var require_isSameISOWeek = __commonJS({
  "node_modules/date-fns/isSameISOWeek/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isSameISOWeek;
    var _index = _interopRequireDefault(require_isSameWeek());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isSameISOWeek(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      return (0, _index.default)(dirtyDateLeft, dirtyDateRight, {
        weekStartsOn: 1
      });
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isSameISOWeekYear/index.js
var require_isSameISOWeekYear = __commonJS({
  "node_modules/date-fns/isSameISOWeekYear/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isSameISOWeekYear;
    var _index = _interopRequireDefault(require_startOfISOWeekYear());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isSameISOWeekYear(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var dateLeftStartOfYear = (0, _index.default)(dirtyDateLeft);
      var dateRightStartOfYear = (0, _index.default)(dirtyDateRight);
      return dateLeftStartOfYear.getTime() === dateRightStartOfYear.getTime();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isSameMinute/index.js
var require_isSameMinute = __commonJS({
  "node_modules/date-fns/isSameMinute/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isSameMinute;
    var _index = _interopRequireDefault(require_startOfMinute());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isSameMinute(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var dateLeftStartOfMinute = (0, _index.default)(dirtyDateLeft);
      var dateRightStartOfMinute = (0, _index.default)(dirtyDateRight);
      return dateLeftStartOfMinute.getTime() === dateRightStartOfMinute.getTime();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isSameMonth/index.js
var require_isSameMonth = __commonJS({
  "node_modules/date-fns/isSameMonth/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isSameMonth;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isSameMonth(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var dateLeft = (0, _index.default)(dirtyDateLeft);
      var dateRight = (0, _index.default)(dirtyDateRight);
      return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isSameQuarter/index.js
var require_isSameQuarter = __commonJS({
  "node_modules/date-fns/isSameQuarter/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isSameQuarter;
    var _index = _interopRequireDefault(require_startOfQuarter());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isSameQuarter(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var dateLeftStartOfQuarter = (0, _index.default)(dirtyDateLeft);
      var dateRightStartOfQuarter = (0, _index.default)(dirtyDateRight);
      return dateLeftStartOfQuarter.getTime() === dateRightStartOfQuarter.getTime();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfSecond/index.js
var require_startOfSecond = __commonJS({
  "node_modules/date-fns/startOfSecond/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfSecond;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function startOfSecond(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      date.setMilliseconds(0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isSameSecond/index.js
var require_isSameSecond = __commonJS({
  "node_modules/date-fns/isSameSecond/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isSameSecond;
    var _index = _interopRequireDefault(require_startOfSecond());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isSameSecond(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var dateLeftStartOfSecond = (0, _index.default)(dirtyDateLeft);
      var dateRightStartOfSecond = (0, _index.default)(dirtyDateRight);
      return dateLeftStartOfSecond.getTime() === dateRightStartOfSecond.getTime();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isSameYear/index.js
var require_isSameYear = __commonJS({
  "node_modules/date-fns/isSameYear/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isSameYear;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isSameYear(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var dateLeft = (0, _index.default)(dirtyDateLeft);
      var dateRight = (0, _index.default)(dirtyDateRight);
      return dateLeft.getFullYear() === dateRight.getFullYear();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isThisHour/index.js
var require_isThisHour = __commonJS({
  "node_modules/date-fns/isThisHour/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isThisHour;
    var _index = _interopRequireDefault(require_isSameHour());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isThisHour(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(Date.now(), dirtyDate);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isThisISOWeek/index.js
var require_isThisISOWeek = __commonJS({
  "node_modules/date-fns/isThisISOWeek/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isThisISOWeek;
    var _index = _interopRequireDefault(require_isSameISOWeek());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isThisISOWeek(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate, Date.now());
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isThisMinute/index.js
var require_isThisMinute = __commonJS({
  "node_modules/date-fns/isThisMinute/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isThisMinute;
    var _index = _interopRequireDefault(require_isSameMinute());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isThisMinute(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(Date.now(), dirtyDate);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isThisMonth/index.js
var require_isThisMonth = __commonJS({
  "node_modules/date-fns/isThisMonth/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isThisMonth;
    var _index = _interopRequireDefault(require_isSameMonth());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isThisMonth(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(Date.now(), dirtyDate);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isThisQuarter/index.js
var require_isThisQuarter = __commonJS({
  "node_modules/date-fns/isThisQuarter/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isThisQuarter;
    var _index = _interopRequireDefault(require_isSameQuarter());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isThisQuarter(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(Date.now(), dirtyDate);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isThisSecond/index.js
var require_isThisSecond = __commonJS({
  "node_modules/date-fns/isThisSecond/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isThisSecond;
    var _index = _interopRequireDefault(require_isSameSecond());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isThisSecond(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(Date.now(), dirtyDate);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isThisWeek/index.js
var require_isThisWeek = __commonJS({
  "node_modules/date-fns/isThisWeek/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isThisWeek;
    var _index = _interopRequireDefault(require_isSameWeek());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isThisWeek(dirtyDate, options2) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate, Date.now(), options2);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isThisYear/index.js
var require_isThisYear = __commonJS({
  "node_modules/date-fns/isThisYear/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isThisYear;
    var _index = _interopRequireDefault(require_isSameYear());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isThisYear(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate, Date.now());
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isThursday/index.js
var require_isThursday = __commonJS({
  "node_modules/date-fns/isThursday/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isThursday;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isThursday(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate).getDay() === 4;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isToday/index.js
var require_isToday = __commonJS({
  "node_modules/date-fns/isToday/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isToday;
    var _index = _interopRequireDefault(require_isSameDay());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isToday(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate, Date.now());
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isTomorrow/index.js
var require_isTomorrow = __commonJS({
  "node_modules/date-fns/isTomorrow/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isTomorrow;
    var _index = _interopRequireDefault(require_addDays());
    var _index2 = _interopRequireDefault(require_isSameDay());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isTomorrow(dirtyDate) {
      (0, _index3.default)(1, arguments);
      return (0, _index2.default)(dirtyDate, (0, _index.default)(Date.now(), 1));
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isTuesday/index.js
var require_isTuesday = __commonJS({
  "node_modules/date-fns/isTuesday/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isTuesday;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isTuesday(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate).getDay() === 2;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isWednesday/index.js
var require_isWednesday = __commonJS({
  "node_modules/date-fns/isWednesday/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isWednesday;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isWednesday(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate).getDay() === 3;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isWithinInterval/index.js
var require_isWithinInterval = __commonJS({
  "node_modules/date-fns/isWithinInterval/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isWithinInterval;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isWithinInterval(dirtyDate, interval) {
      (0, _index2.default)(2, arguments);
      var time = (0, _index.default)(dirtyDate).getTime();
      var startTime = (0, _index.default)(interval.start).getTime();
      var endTime = (0, _index.default)(interval.end).getTime();
      if (!(startTime <= endTime)) {
        throw new RangeError("Invalid interval");
      }
      return time >= startTime && time <= endTime;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isYesterday/index.js
var require_isYesterday = __commonJS({
  "node_modules/date-fns/isYesterday/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isYesterday;
    var _index = _interopRequireDefault(require_isSameDay());
    var _index2 = _interopRequireDefault(require_subDays());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function isYesterday(dirtyDate) {
      (0, _index3.default)(1, arguments);
      return (0, _index.default)(dirtyDate, (0, _index2.default)(Date.now(), 1));
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/lastDayOfDecade/index.js
var require_lastDayOfDecade = __commonJS({
  "node_modules/date-fns/lastDayOfDecade/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = lastDayOfDecade;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function lastDayOfDecade(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var year = date.getFullYear();
      var decade = 9 + Math.floor(year / 10) * 10;
      date.setFullYear(decade + 1, 0, 0);
      date.setHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/lastDayOfWeek/index.js
var require_lastDayOfWeek = __commonJS({
  "node_modules/date-fns/lastDayOfWeek/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = lastDayOfWeek;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_toInteger());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function lastDayOfWeek(dirtyDate, dirtyOptions) {
      (0, _index3.default)(1, arguments);
      var options2 = dirtyOptions || {};
      var locale = options2.locale;
      var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
      var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : (0, _index2.default)(localeWeekStartsOn);
      var weekStartsOn = options2.weekStartsOn == null ? defaultWeekStartsOn : (0, _index2.default)(options2.weekStartsOn);
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError("weekStartsOn must be between 0 and 6");
      }
      var date = (0, _index.default)(dirtyDate);
      var day = date.getDay();
      var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
      date.setHours(0, 0, 0, 0);
      date.setDate(date.getDate() + diff);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/lastDayOfISOWeek/index.js
var require_lastDayOfISOWeek = __commonJS({
  "node_modules/date-fns/lastDayOfISOWeek/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = lastDayOfISOWeek;
    var _index = _interopRequireDefault(require_lastDayOfWeek());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function lastDayOfISOWeek(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate, {
        weekStartsOn: 1
      });
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/lastDayOfISOWeekYear/index.js
var require_lastDayOfISOWeekYear = __commonJS({
  "node_modules/date-fns/lastDayOfISOWeekYear/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = lastDayOfISOWeekYear;
    var _index = _interopRequireDefault(require_getISOWeekYear());
    var _index2 = _interopRequireDefault(require_startOfISOWeek());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function lastDayOfISOWeekYear(dirtyDate) {
      (0, _index3.default)(1, arguments);
      var year = (0, _index.default)(dirtyDate);
      var fourthOfJanuary = new Date(0);
      fourthOfJanuary.setFullYear(year + 1, 0, 4);
      fourthOfJanuary.setHours(0, 0, 0, 0);
      var date = (0, _index2.default)(fourthOfJanuary);
      date.setDate(date.getDate() - 1);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/lastDayOfQuarter/index.js
var require_lastDayOfQuarter = __commonJS({
  "node_modules/date-fns/lastDayOfQuarter/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = lastDayOfQuarter;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function lastDayOfQuarter(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var currentMonth = date.getMonth();
      var month = currentMonth - currentMonth % 3 + 3;
      date.setMonth(month, 0);
      date.setHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/lastDayOfYear/index.js
var require_lastDayOfYear = __commonJS({
  "node_modules/date-fns/lastDayOfYear/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = lastDayOfYear;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function lastDayOfYear(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var year = date.getFullYear();
      date.setFullYear(year + 1, 0, 0);
      date.setHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/lightFormat/index.js
var require_lightFormat = __commonJS({
  "node_modules/date-fns/lightFormat/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = lightFormat;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_lightFormatters());
    var _index3 = _interopRequireDefault(require_getTimezoneOffsetInMilliseconds());
    var _index4 = _interopRequireDefault(require_isValid());
    var _index5 = _interopRequireDefault(require_subMilliseconds());
    var _index6 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var formattingTokensRegExp = /(\w)\1*|''|'(''|[^'])+('|$)|./g;
    var escapedStringRegExp = /^'([^]*?)'?$/;
    var doubleQuoteRegExp = /''/g;
    var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
    function lightFormat(dirtyDate, dirtyFormatStr) {
      (0, _index6.default)(2, arguments);
      var formatStr = String(dirtyFormatStr);
      var originalDate = (0, _index.default)(dirtyDate);
      if (!(0, _index4.default)(originalDate)) {
        throw new RangeError("Invalid time value");
      }
      var timezoneOffset = (0, _index3.default)(originalDate);
      var utcDate = (0, _index5.default)(originalDate, timezoneOffset);
      var result = formatStr.match(formattingTokensRegExp).map(function(substring) {
        if (substring === "''") {
          return "'";
        }
        var firstCharacter = substring[0];
        if (firstCharacter === "'") {
          return cleanEscapedString(substring);
        }
        var formatter = _index2.default[firstCharacter];
        if (formatter) {
          return formatter(utcDate, substring, null, {});
        }
        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
          throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
        }
        return substring;
      }).join("");
      return result;
    }
    function cleanEscapedString(input) {
      return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/max/index.js
var require_max = __commonJS({
  "node_modules/date-fns/max/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = max;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function max(dirtyDatesArray) {
      (0, _index2.default)(1, arguments);
      var datesArray;
      if (dirtyDatesArray && typeof dirtyDatesArray.forEach === "function") {
        datesArray = dirtyDatesArray;
      } else if (typeof dirtyDatesArray === "object" && dirtyDatesArray !== null) {
        datesArray = Array.prototype.slice.call(dirtyDatesArray);
      } else {
        return new Date(NaN);
      }
      var result;
      datesArray.forEach(function(dirtyDate) {
        var currentDate = (0, _index.default)(dirtyDate);
        if (result === void 0 || result < currentDate || isNaN(Number(currentDate))) {
          result = currentDate;
        }
      });
      return result || new Date(NaN);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/milliseconds/index.js
var require_milliseconds = __commonJS({
  "node_modules/date-fns/milliseconds/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = milliseconds;
    var _index = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var yearInDays = 365.2425;
    function milliseconds(_ref) {
      var years = _ref.years, months = _ref.months, weeks = _ref.weeks, days = _ref.days, hours = _ref.hours, minutes = _ref.minutes, seconds = _ref.seconds;
      (0, _index.default)(1, arguments);
      var totalDays = 0;
      if (years)
        totalDays += years * yearInDays;
      if (months)
        totalDays += months * (yearInDays / 12);
      if (weeks)
        totalDays += weeks * 7;
      if (days)
        totalDays += days;
      var totalSeconds = totalDays * 24 * 60 * 60;
      if (hours)
        totalSeconds += hours * 60 * 60;
      if (minutes)
        totalSeconds += minutes * 60;
      if (seconds)
        totalSeconds += seconds;
      return Math.round(totalSeconds * 1e3);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/min/index.js
var require_min = __commonJS({
  "node_modules/date-fns/min/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = min;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function min(dirtyDatesArray) {
      (0, _index2.default)(1, arguments);
      var datesArray;
      if (dirtyDatesArray && typeof dirtyDatesArray.forEach === "function") {
        datesArray = dirtyDatesArray;
      } else if (typeof dirtyDatesArray === "object" && dirtyDatesArray !== null) {
        datesArray = Array.prototype.slice.call(dirtyDatesArray);
      } else {
        return new Date(NaN);
      }
      var result;
      datesArray.forEach(function(dirtyDate) {
        var currentDate = (0, _index.default)(dirtyDate);
        if (result === void 0 || result > currentDate || isNaN(currentDate.getDate())) {
          result = currentDate;
        }
      });
      return result || new Date(NaN);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/nextDay/index.js
var require_nextDay = __commonJS({
  "node_modules/date-fns/nextDay/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = nextDay;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = _interopRequireDefault(require_getDay());
    var _index3 = _interopRequireDefault(require_addDays());
    var _index4 = _interopRequireDefault(require_toDate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var baseMap = [7, 6, 5, 4, 3, 2, 1];
    function nextDay(date, day) {
      (0, _index.default)(2, arguments);
      var map = genMap(day);
      return (0, _index3.default)((0, _index4.default)(date), map[(0, _index2.default)((0, _index4.default)(date))]);
    }
    function genMap(daysToMove) {
      if (daysToMove === 0) {
        return baseMap;
      } else {
        var mapStart = baseMap.slice(-daysToMove);
        var mapEnd = baseMap.slice(0, baseMap.length - daysToMove);
        return mapStart.concat(mapEnd);
      }
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/nextFriday/index.js
var require_nextFriday = __commonJS({
  "node_modules/date-fns/nextFriday/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = nextFriday;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = _interopRequireDefault(require_nextDay());
    var _index3 = _interopRequireDefault(require_toDate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function nextFriday(date) {
      (0, _index.default)(1, arguments);
      return (0, _index2.default)((0, _index3.default)(date), 5);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/nextMonday/index.js
var require_nextMonday = __commonJS({
  "node_modules/date-fns/nextMonday/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = nextMonday;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = _interopRequireDefault(require_nextDay());
    var _index3 = _interopRequireDefault(require_toDate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function nextMonday(date) {
      (0, _index.default)(1, arguments);
      return (0, _index2.default)((0, _index3.default)(date), 1);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/nextSaturday/index.js
var require_nextSaturday = __commonJS({
  "node_modules/date-fns/nextSaturday/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = nextSaturday;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = _interopRequireDefault(require_nextDay());
    var _index3 = _interopRequireDefault(require_toDate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function nextSaturday(date) {
      (0, _index.default)(1, arguments);
      return (0, _index2.default)((0, _index3.default)(date), 6);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/nextSunday/index.js
var require_nextSunday = __commonJS({
  "node_modules/date-fns/nextSunday/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = nextSunday;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = _interopRequireDefault(require_nextDay());
    var _index3 = _interopRequireDefault(require_toDate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function nextSunday(date) {
      (0, _index.default)(1, arguments);
      return (0, _index2.default)((0, _index3.default)(date), 0);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/nextThursday/index.js
var require_nextThursday = __commonJS({
  "node_modules/date-fns/nextThursday/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = nextThursday;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = _interopRequireDefault(require_nextDay());
    var _index3 = _interopRequireDefault(require_toDate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function nextThursday(date) {
      (0, _index.default)(1, arguments);
      return (0, _index2.default)((0, _index3.default)(date), 4);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/nextTuesday/index.js
var require_nextTuesday = __commonJS({
  "node_modules/date-fns/nextTuesday/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = nextTuesday;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = _interopRequireDefault(require_nextDay());
    var _index3 = _interopRequireDefault(require_toDate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function nextTuesday(date) {
      (0, _index.default)(1, arguments);
      return (0, _index2.default)((0, _index3.default)(date), 2);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/nextWednesday/index.js
var require_nextWednesday = __commonJS({
  "node_modules/date-fns/nextWednesday/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = nextWednesday;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = _interopRequireDefault(require_nextDay());
    var _index3 = _interopRequireDefault(require_toDate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function nextWednesday(date) {
      (0, _index.default)(1, arguments);
      return (0, _index2.default)((0, _index3.default)(date), 3);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/parseISO/index.js
var require_parseISO = __commonJS({
  "node_modules/date-fns/parseISO/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = parseISO;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    var MILLISECONDS_IN_HOUR = 36e5;
    var MILLISECONDS_IN_MINUTE = 6e4;
    var DEFAULT_ADDITIONAL_DIGITS = 2;
    var patterns = {
      dateTimeDelimiter: /[T ]/,
      timeZoneDelimiter: /[Z ]/i,
      timezone: /([Z+-].*)$/
    };
    var dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
    var timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
    var timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;
    function parseISO(argument, dirtyOptions) {
      (0, _index2.default)(1, arguments);
      var options2 = dirtyOptions || {};
      var additionalDigits = options2.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : (0, _index.default)(options2.additionalDigits);
      if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {
        throw new RangeError("additionalDigits must be 0, 1 or 2");
      }
      if (!(typeof argument === "string" || Object.prototype.toString.call(argument) === "[object String]")) {
        return new Date(NaN);
      }
      var dateStrings = splitDateString(argument);
      var date;
      if (dateStrings.date) {
        var parseYearResult = parseYear(dateStrings.date, additionalDigits);
        date = parseDate(parseYearResult.restDateString, parseYearResult.year);
      }
      if (isNaN(date) || !date) {
        return new Date(NaN);
      }
      var timestamp = date.getTime();
      var time = 0;
      var offset;
      if (dateStrings.time) {
        time = parseTime(dateStrings.time);
        if (isNaN(time) || time === null) {
          return new Date(NaN);
        }
      }
      if (dateStrings.timezone) {
        offset = parseTimezone(dateStrings.timezone);
        if (isNaN(offset)) {
          return new Date(NaN);
        }
      } else {
        var dirtyDate = new Date(timestamp + time);
        var result = new Date(0);
        result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());
        result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());
        return result;
      }
      return new Date(timestamp + time + offset);
    }
    function splitDateString(dateString) {
      var dateStrings = {};
      var array = dateString.split(patterns.dateTimeDelimiter);
      var timeString;
      if (array.length > 2) {
        return dateStrings;
      }
      if (/:/.test(array[0])) {
        dateStrings.date = null;
        timeString = array[0];
      } else {
        dateStrings.date = array[0];
        timeString = array[1];
        if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
          dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
          timeString = dateString.substr(dateStrings.date.length, dateString.length);
        }
      }
      if (timeString) {
        var token = patterns.timezone.exec(timeString);
        if (token) {
          dateStrings.time = timeString.replace(token[1], "");
          dateStrings.timezone = token[1];
        } else {
          dateStrings.time = timeString;
        }
      }
      return dateStrings;
    }
    function parseYear(dateString, additionalDigits) {
      var regex = new RegExp("^(?:(\\d{4}|[+-]\\d{" + (4 + additionalDigits) + "})|(\\d{2}|[+-]\\d{" + (2 + additionalDigits) + "})$)");
      var captures = dateString.match(regex);
      if (!captures)
        return {
          year: null
        };
      var year = captures[1] && parseInt(captures[1]);
      var century = captures[2] && parseInt(captures[2]);
      return {
        year: century == null ? year : century * 100,
        restDateString: dateString.slice((captures[1] || captures[2]).length)
      };
    }
    function parseDate(dateString, year) {
      if (year === null)
        return null;
      var captures = dateString.match(dateRegex);
      if (!captures)
        return null;
      var isWeekDate = !!captures[4];
      var dayOfYear = parseDateUnit(captures[1]);
      var month = parseDateUnit(captures[2]) - 1;
      var day = parseDateUnit(captures[3]);
      var week = parseDateUnit(captures[4]);
      var dayOfWeek = parseDateUnit(captures[5]) - 1;
      if (isWeekDate) {
        if (!validateWeekDate(year, week, dayOfWeek)) {
          return new Date(NaN);
        }
        return dayOfISOWeekYear(year, week, dayOfWeek);
      } else {
        var date = new Date(0);
        if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {
          return new Date(NaN);
        }
        date.setUTCFullYear(year, month, Math.max(dayOfYear, day));
        return date;
      }
    }
    function parseDateUnit(value) {
      return value ? parseInt(value) : 1;
    }
    function parseTime(timeString) {
      var captures = timeString.match(timeRegex);
      if (!captures)
        return null;
      var hours = parseTimeUnit(captures[1]);
      var minutes = parseTimeUnit(captures[2]);
      var seconds = parseTimeUnit(captures[3]);
      if (!validateTime(hours, minutes, seconds)) {
        return NaN;
      }
      return hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1e3;
    }
    function parseTimeUnit(value) {
      return value && parseFloat(value.replace(",", ".")) || 0;
    }
    function parseTimezone(timezoneString) {
      if (timezoneString === "Z")
        return 0;
      var captures = timezoneString.match(timezoneRegex);
      if (!captures)
        return 0;
      var sign = captures[1] === "+" ? -1 : 1;
      var hours = parseInt(captures[2]);
      var minutes = captures[3] && parseInt(captures[3]) || 0;
      if (!validateTimezone(hours, minutes)) {
        return NaN;
      }
      return sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE);
    }
    function dayOfISOWeekYear(isoWeekYear, week, day) {
      var date = new Date(0);
      date.setUTCFullYear(isoWeekYear, 0, 4);
      var fourthOfJanuaryDay = date.getUTCDay() || 7;
      var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
      date.setUTCDate(date.getUTCDate() + diff);
      return date;
    }
    var daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    function isLeapYearIndex(year) {
      return year % 400 === 0 || year % 4 === 0 && year % 100;
    }
    function validateDate(year, month, date) {
      return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));
    }
    function validateDayOfYearDate(year, dayOfYear) {
      return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);
    }
    function validateWeekDate(_year, week, day) {
      return week >= 1 && week <= 53 && day >= 0 && day <= 6;
    }
    function validateTime(hours, minutes, seconds) {
      if (hours === 24) {
        return minutes === 0 && seconds === 0;
      }
      return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;
    }
    function validateTimezone(_hours, minutes) {
      return minutes >= 0 && minutes <= 59;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/parseJSON/index.js
var require_parseJSON = __commonJS({
  "node_modules/date-fns/parseJSON/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = parseJSON;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function parseJSON(argument) {
      (0, _index2.default)(1, arguments);
      if (typeof argument === "string") {
        var parts = argument.match(/(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2})(?:\.(\d{0,7}))?(?:Z|(.)(\d{2}):?(\d{2})?)?/);
        if (parts) {
          return new Date(Date.UTC(+parts[1], parts[2] - 1, +parts[3], +parts[4] - (parts[9] || 0) * (parts[8] == "-" ? -1 : 1), +parts[5] - (parts[10] || 0) * (parts[8] == "-" ? -1 : 1), +parts[6], +((parts[7] || "0") + "00").substring(0, 3)));
        }
        return new Date(NaN);
      }
      return (0, _index.default)(argument);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/roundToNearestMinutes/index.js
var require_roundToNearestMinutes = __commonJS({
  "node_modules/date-fns/roundToNearestMinutes/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = roundToNearestMinutes;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_toInteger());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function roundToNearestMinutes(dirtyDate, options2) {
      if (arguments.length < 1) {
        throw new TypeError("1 argument required, but only none provided present");
      }
      var nearestTo = options2 && "nearestTo" in options2 ? (0, _index2.default)(options2.nearestTo) : 1;
      if (nearestTo < 1 || nearestTo > 30) {
        throw new RangeError("`options.nearestTo` must be between 1 and 30");
      }
      var date = (0, _index.default)(dirtyDate);
      var seconds = date.getSeconds();
      var minutes = date.getMinutes() + seconds / 60;
      var roundedMinutes = Math.floor(minutes / nearestTo) * nearestTo;
      var remainderMinutes = minutes % nearestTo;
      var addedMinutes = Math.round(remainderMinutes / nearestTo) * nearestTo;
      return new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), roundedMinutes + addedMinutes);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setMonth/index.js
var require_setMonth = __commonJS({
  "node_modules/date-fns/setMonth/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setMonth;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_getDaysInMonth());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function setMonth(dirtyDate, dirtyMonth) {
      (0, _index4.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var month = (0, _index.default)(dirtyMonth);
      var year = date.getFullYear();
      var day = date.getDate();
      var dateWithDesiredMonth = new Date(0);
      dateWithDesiredMonth.setFullYear(year, month, 15);
      dateWithDesiredMonth.setHours(0, 0, 0, 0);
      var daysInMonth = (0, _index3.default)(dateWithDesiredMonth);
      date.setMonth(month, Math.min(day, daysInMonth));
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/set/index.js
var require_set = __commonJS({
  "node_modules/date-fns/set/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = set;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_setMonth());
    var _index3 = _interopRequireDefault(require_toInteger());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function set(dirtyDate, values) {
      (0, _index4.default)(2, arguments);
      if (typeof values !== "object" || values === null) {
        throw new RangeError("values parameter must be an object");
      }
      var date = (0, _index.default)(dirtyDate);
      if (isNaN(date.getTime())) {
        return new Date(NaN);
      }
      if (values.year != null) {
        date.setFullYear(values.year);
      }
      if (values.month != null) {
        date = (0, _index2.default)(date, values.month);
      }
      if (values.date != null) {
        date.setDate((0, _index3.default)(values.date));
      }
      if (values.hours != null) {
        date.setHours((0, _index3.default)(values.hours));
      }
      if (values.minutes != null) {
        date.setMinutes((0, _index3.default)(values.minutes));
      }
      if (values.seconds != null) {
        date.setSeconds((0, _index3.default)(values.seconds));
      }
      if (values.milliseconds != null) {
        date.setMilliseconds((0, _index3.default)(values.milliseconds));
      }
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setDate/index.js
var require_setDate = __commonJS({
  "node_modules/date-fns/setDate/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setDate;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function setDate(dirtyDate, dirtyDayOfMonth) {
      (0, _index3.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var dayOfMonth = (0, _index.default)(dirtyDayOfMonth);
      date.setDate(dayOfMonth);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setDay/index.js
var require_setDay = __commonJS({
  "node_modules/date-fns/setDay/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setDay;
    var _index = _interopRequireDefault(require_addDays());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_toInteger());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function setDay(dirtyDate, dirtyDay, dirtyOptions) {
      (0, _index4.default)(2, arguments);
      var options2 = dirtyOptions || {};
      var locale = options2.locale;
      var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
      var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : (0, _index3.default)(localeWeekStartsOn);
      var weekStartsOn = options2.weekStartsOn == null ? defaultWeekStartsOn : (0, _index3.default)(options2.weekStartsOn);
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
      }
      var date = (0, _index2.default)(dirtyDate, options2);
      var day = (0, _index3.default)(dirtyDay);
      var currentDay = date.getDay();
      var remainder = day % 7;
      var dayIndex = (remainder + 7) % 7;
      var delta = 7 - weekStartsOn;
      var diff = day < 0 || day > 6 ? day - (currentDay + delta) % 7 : (dayIndex + delta) % 7 - (currentDay + delta) % 7;
      return (0, _index.default)(date, diff, options2);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setDayOfYear/index.js
var require_setDayOfYear = __commonJS({
  "node_modules/date-fns/setDayOfYear/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setDayOfYear;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function setDayOfYear(dirtyDate, dirtyDayOfYear) {
      (0, _index3.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var dayOfYear = (0, _index.default)(dirtyDayOfYear);
      date.setMonth(0);
      date.setDate(dayOfYear);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setHours/index.js
var require_setHours = __commonJS({
  "node_modules/date-fns/setHours/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setHours;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function setHours(dirtyDate, dirtyHours) {
      (0, _index3.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var hours = (0, _index.default)(dirtyHours);
      date.setHours(hours);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setISODay/index.js
var require_setISODay = __commonJS({
  "node_modules/date-fns/setISODay/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setISODay;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_addDays());
    var _index4 = _interopRequireDefault(require_getISODay());
    var _index5 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function setISODay(dirtyDate, dirtyDay) {
      (0, _index5.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var day = (0, _index.default)(dirtyDay);
      var currentDay = (0, _index4.default)(date);
      var diff = day - currentDay;
      return (0, _index3.default)(date, diff);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setISOWeek/index.js
var require_setISOWeek = __commonJS({
  "node_modules/date-fns/setISOWeek/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setISOWeek;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_getISOWeek());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function setISOWeek(dirtyDate, dirtyISOWeek) {
      (0, _index4.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var isoWeek = (0, _index.default)(dirtyISOWeek);
      var diff = (0, _index3.default)(date) - isoWeek;
      date.setDate(date.getDate() - diff * 7);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setMilliseconds/index.js
var require_setMilliseconds = __commonJS({
  "node_modules/date-fns/setMilliseconds/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setMilliseconds;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function setMilliseconds(dirtyDate, dirtyMilliseconds) {
      (0, _index3.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var milliseconds = (0, _index.default)(dirtyMilliseconds);
      date.setMilliseconds(milliseconds);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setMinutes/index.js
var require_setMinutes = __commonJS({
  "node_modules/date-fns/setMinutes/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setMinutes;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function setMinutes(dirtyDate, dirtyMinutes) {
      (0, _index3.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var minutes = (0, _index.default)(dirtyMinutes);
      date.setMinutes(minutes);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setQuarter/index.js
var require_setQuarter = __commonJS({
  "node_modules/date-fns/setQuarter/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setQuarter;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_setMonth());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function setQuarter(dirtyDate, dirtyQuarter) {
      (0, _index4.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var quarter = (0, _index.default)(dirtyQuarter);
      var oldQuarter = Math.floor(date.getMonth() / 3) + 1;
      var diff = quarter - oldQuarter;
      return (0, _index3.default)(date, date.getMonth() + diff * 3);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setSeconds/index.js
var require_setSeconds = __commonJS({
  "node_modules/date-fns/setSeconds/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setSeconds;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function setSeconds(dirtyDate, dirtySeconds) {
      (0, _index3.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var seconds = (0, _index.default)(dirtySeconds);
      date.setSeconds(seconds);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setWeek/index.js
var require_setWeek = __commonJS({
  "node_modules/date-fns/setWeek/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setWeek;
    var _index = _interopRequireDefault(require_getWeek());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_toInteger());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function setWeek(dirtyDate, dirtyWeek, dirtyOptions) {
      (0, _index4.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var week = (0, _index3.default)(dirtyWeek);
      var diff = (0, _index.default)(date, dirtyOptions) - week;
      date.setDate(date.getDate() - diff * 7);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setWeekYear/index.js
var require_setWeekYear = __commonJS({
  "node_modules/date-fns/setWeekYear/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setWeekYear;
    var _index = _interopRequireDefault(require_differenceInCalendarDays());
    var _index2 = _interopRequireDefault(require_startOfWeekYear());
    var _index3 = _interopRequireDefault(require_toDate());
    var _index4 = _interopRequireDefault(require_toInteger());
    var _index5 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function setWeekYear(dirtyDate, dirtyWeekYear, dirtyOptions) {
      (0, _index5.default)(2, arguments);
      var options2 = dirtyOptions || {};
      var locale = options2.locale;
      var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
      var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : (0, _index4.default)(localeFirstWeekContainsDate);
      var firstWeekContainsDate = options2.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : (0, _index4.default)(options2.firstWeekContainsDate);
      var date = (0, _index3.default)(dirtyDate);
      var weekYear = (0, _index4.default)(dirtyWeekYear);
      var diff = (0, _index.default)(date, (0, _index2.default)(date, dirtyOptions));
      var firstWeek = new Date(0);
      firstWeek.setFullYear(weekYear, 0, firstWeekContainsDate);
      firstWeek.setHours(0, 0, 0, 0);
      date = (0, _index2.default)(firstWeek, dirtyOptions);
      date.setDate(date.getDate() + diff);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setYear/index.js
var require_setYear = __commonJS({
  "node_modules/date-fns/setYear/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setYear;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function setYear(dirtyDate, dirtyYear) {
      (0, _index3.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var year = (0, _index.default)(dirtyYear);
      if (isNaN(date.getTime())) {
        return new Date(NaN);
      }
      date.setFullYear(year);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfDecade/index.js
var require_startOfDecade = __commonJS({
  "node_modules/date-fns/startOfDecade/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfDecade;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function startOfDecade(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var year = date.getFullYear();
      var decade = Math.floor(year / 10) * 10;
      date.setFullYear(decade, 0, 1);
      date.setHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfToday/index.js
var require_startOfToday = __commonJS({
  "node_modules/date-fns/startOfToday/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfToday;
    var _index = _interopRequireDefault(require_startOfDay());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function startOfToday() {
      return (0, _index.default)(Date.now());
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfTomorrow/index.js
var require_startOfTomorrow = __commonJS({
  "node_modules/date-fns/startOfTomorrow/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfTomorrow;
    function startOfTomorrow() {
      var now = new Date();
      var year = now.getFullYear();
      var month = now.getMonth();
      var day = now.getDate();
      var date = new Date(0);
      date.setFullYear(year, month, day + 1);
      date.setHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfYesterday/index.js
var require_startOfYesterday = __commonJS({
  "node_modules/date-fns/startOfYesterday/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfYesterday;
    function startOfYesterday() {
      var now = new Date();
      var year = now.getFullYear();
      var month = now.getMonth();
      var day = now.getDate();
      var date = new Date(0);
      date.setFullYear(year, month, day - 1);
      date.setHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/subBusinessDays/index.js
var require_subBusinessDays = __commonJS({
  "node_modules/date-fns/subBusinessDays/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = subBusinessDays;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addBusinessDays());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function subBusinessDays(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      return (0, _index2.default)(dirtyDate, -amount);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/subHours/index.js
var require_subHours = __commonJS({
  "node_modules/date-fns/subHours/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = subHours;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addHours());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function subHours(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      return (0, _index2.default)(dirtyDate, -amount);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/subMinutes/index.js
var require_subMinutes = __commonJS({
  "node_modules/date-fns/subMinutes/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = subMinutes;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addMinutes());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function subMinutes(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      return (0, _index2.default)(dirtyDate, -amount);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/subQuarters/index.js
var require_subQuarters = __commonJS({
  "node_modules/date-fns/subQuarters/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = subQuarters;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addQuarters());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function subQuarters(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      return (0, _index2.default)(dirtyDate, -amount);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/subSeconds/index.js
var require_subSeconds = __commonJS({
  "node_modules/date-fns/subSeconds/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = subSeconds;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addSeconds());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function subSeconds(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      return (0, _index2.default)(dirtyDate, -amount);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/subWeeks/index.js
var require_subWeeks = __commonJS({
  "node_modules/date-fns/subWeeks/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = subWeeks;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addWeeks());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function subWeeks(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      return (0, _index2.default)(dirtyDate, -amount);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/subYears/index.js
var require_subYears = __commonJS({
  "node_modules/date-fns/subYears/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = subYears;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addYears());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
    function subYears(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      return (0, _index2.default)(dirtyDate, -amount);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/constants/index.js
var require_constants2 = __commonJS({
  "node_modules/date-fns/constants/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.minTime = exports2.maxTime = void 0;
    var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1e3;
    exports2.maxTime = maxTime;
    var minTime = -maxTime;
    exports2.minTime = minTime;
  }
});

// node_modules/date-fns/index.js
var require_date_fns = __commonJS({
  "node_modules/date-fns/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      add: true,
      addBusinessDays: true,
      addDays: true,
      addHours: true,
      addISOWeekYears: true,
      addMilliseconds: true,
      addMinutes: true,
      addMonths: true,
      addQuarters: true,
      addSeconds: true,
      addWeeks: true,
      addYears: true,
      areIntervalsOverlapping: true,
      closestIndexTo: true,
      closestTo: true,
      compareAsc: true,
      compareDesc: true,
      differenceInBusinessDays: true,
      differenceInCalendarDays: true,
      differenceInCalendarISOWeekYears: true,
      differenceInCalendarISOWeeks: true,
      differenceInCalendarMonths: true,
      differenceInCalendarQuarters: true,
      differenceInCalendarWeeks: true,
      differenceInCalendarYears: true,
      differenceInDays: true,
      differenceInHours: true,
      differenceInISOWeekYears: true,
      differenceInMilliseconds: true,
      differenceInMinutes: true,
      differenceInMonths: true,
      differenceInQuarters: true,
      differenceInSeconds: true,
      differenceInWeeks: true,
      differenceInYears: true,
      eachDayOfInterval: true,
      eachHourOfInterval: true,
      eachMinuteOfInterval: true,
      eachMonthOfInterval: true,
      eachQuarterOfInterval: true,
      eachWeekOfInterval: true,
      eachWeekendOfInterval: true,
      eachWeekendOfMonth: true,
      eachWeekendOfYear: true,
      eachYearOfInterval: true,
      endOfDay: true,
      endOfDecade: true,
      endOfHour: true,
      endOfISOWeek: true,
      endOfISOWeekYear: true,
      endOfMinute: true,
      endOfMonth: true,
      endOfQuarter: true,
      endOfSecond: true,
      endOfToday: true,
      endOfTomorrow: true,
      endOfWeek: true,
      endOfYear: true,
      endOfYesterday: true,
      format: true,
      formatDistance: true,
      formatDistanceStrict: true,
      formatDistanceToNow: true,
      formatDistanceToNowStrict: true,
      formatDuration: true,
      formatISO: true,
      formatISO9075: true,
      formatISODuration: true,
      formatRFC3339: true,
      formatRFC7231: true,
      formatRelative: true,
      fromUnixTime: true,
      getDate: true,
      getDay: true,
      getDayOfYear: true,
      getDaysInMonth: true,
      getDaysInYear: true,
      getDecade: true,
      getHours: true,
      getISODay: true,
      getISOWeek: true,
      getISOWeekYear: true,
      getISOWeeksInYear: true,
      getMilliseconds: true,
      getMinutes: true,
      getMonth: true,
      getOverlappingDaysInIntervals: true,
      getQuarter: true,
      getSeconds: true,
      getTime: true,
      getUnixTime: true,
      getWeek: true,
      getWeekOfMonth: true,
      getWeekYear: true,
      getWeeksInMonth: true,
      getYear: true,
      intervalToDuration: true,
      intlFormat: true,
      isAfter: true,
      isBefore: true,
      isDate: true,
      isEqual: true,
      isExists: true,
      isFirstDayOfMonth: true,
      isFriday: true,
      isFuture: true,
      isLastDayOfMonth: true,
      isLeapYear: true,
      isMatch: true,
      isMonday: true,
      isPast: true,
      isSameDay: true,
      isSameHour: true,
      isSameISOWeek: true,
      isSameISOWeekYear: true,
      isSameMinute: true,
      isSameMonth: true,
      isSameQuarter: true,
      isSameSecond: true,
      isSameWeek: true,
      isSameYear: true,
      isSaturday: true,
      isSunday: true,
      isThisHour: true,
      isThisISOWeek: true,
      isThisMinute: true,
      isThisMonth: true,
      isThisQuarter: true,
      isThisSecond: true,
      isThisWeek: true,
      isThisYear: true,
      isThursday: true,
      isToday: true,
      isTomorrow: true,
      isTuesday: true,
      isValid: true,
      isWednesday: true,
      isWeekend: true,
      isWithinInterval: true,
      isYesterday: true,
      lastDayOfDecade: true,
      lastDayOfISOWeek: true,
      lastDayOfISOWeekYear: true,
      lastDayOfMonth: true,
      lastDayOfQuarter: true,
      lastDayOfWeek: true,
      lastDayOfYear: true,
      lightFormat: true,
      max: true,
      milliseconds: true,
      min: true,
      nextDay: true,
      nextFriday: true,
      nextMonday: true,
      nextSaturday: true,
      nextSunday: true,
      nextThursday: true,
      nextTuesday: true,
      nextWednesday: true,
      parse: true,
      parseISO: true,
      parseJSON: true,
      roundToNearestMinutes: true,
      set: true,
      setDate: true,
      setDay: true,
      setDayOfYear: true,
      setHours: true,
      setISODay: true,
      setISOWeek: true,
      setISOWeekYear: true,
      setMilliseconds: true,
      setMinutes: true,
      setMonth: true,
      setQuarter: true,
      setSeconds: true,
      setWeek: true,
      setWeekYear: true,
      setYear: true,
      startOfDay: true,
      startOfDecade: true,
      startOfHour: true,
      startOfISOWeek: true,
      startOfISOWeekYear: true,
      startOfMinute: true,
      startOfMonth: true,
      startOfQuarter: true,
      startOfSecond: true,
      startOfToday: true,
      startOfTomorrow: true,
      startOfWeek: true,
      startOfWeekYear: true,
      startOfYear: true,
      startOfYesterday: true,
      sub: true,
      subBusinessDays: true,
      subDays: true,
      subHours: true,
      subISOWeekYears: true,
      subMilliseconds: true,
      subMinutes: true,
      subMonths: true,
      subQuarters: true,
      subSeconds: true,
      subWeeks: true,
      subYears: true,
      toDate: true
    };
    Object.defineProperty(exports2, "add", {
      enumerable: true,
      get: function() {
        return _index.default;
      }
    });
    Object.defineProperty(exports2, "addBusinessDays", {
      enumerable: true,
      get: function() {
        return _index2.default;
      }
    });
    Object.defineProperty(exports2, "addDays", {
      enumerable: true,
      get: function() {
        return _index3.default;
      }
    });
    Object.defineProperty(exports2, "addHours", {
      enumerable: true,
      get: function() {
        return _index4.default;
      }
    });
    Object.defineProperty(exports2, "addISOWeekYears", {
      enumerable: true,
      get: function() {
        return _index5.default;
      }
    });
    Object.defineProperty(exports2, "addMilliseconds", {
      enumerable: true,
      get: function() {
        return _index6.default;
      }
    });
    Object.defineProperty(exports2, "addMinutes", {
      enumerable: true,
      get: function() {
        return _index7.default;
      }
    });
    Object.defineProperty(exports2, "addMonths", {
      enumerable: true,
      get: function() {
        return _index8.default;
      }
    });
    Object.defineProperty(exports2, "addQuarters", {
      enumerable: true,
      get: function() {
        return _index9.default;
      }
    });
    Object.defineProperty(exports2, "addSeconds", {
      enumerable: true,
      get: function() {
        return _index10.default;
      }
    });
    Object.defineProperty(exports2, "addWeeks", {
      enumerable: true,
      get: function() {
        return _index11.default;
      }
    });
    Object.defineProperty(exports2, "addYears", {
      enumerable: true,
      get: function() {
        return _index12.default;
      }
    });
    Object.defineProperty(exports2, "areIntervalsOverlapping", {
      enumerable: true,
      get: function() {
        return _index13.default;
      }
    });
    Object.defineProperty(exports2, "closestIndexTo", {
      enumerable: true,
      get: function() {
        return _index14.default;
      }
    });
    Object.defineProperty(exports2, "closestTo", {
      enumerable: true,
      get: function() {
        return _index15.default;
      }
    });
    Object.defineProperty(exports2, "compareAsc", {
      enumerable: true,
      get: function() {
        return _index16.default;
      }
    });
    Object.defineProperty(exports2, "compareDesc", {
      enumerable: true,
      get: function() {
        return _index17.default;
      }
    });
    Object.defineProperty(exports2, "differenceInBusinessDays", {
      enumerable: true,
      get: function() {
        return _index18.default;
      }
    });
    Object.defineProperty(exports2, "differenceInCalendarDays", {
      enumerable: true,
      get: function() {
        return _index19.default;
      }
    });
    Object.defineProperty(exports2, "differenceInCalendarISOWeekYears", {
      enumerable: true,
      get: function() {
        return _index20.default;
      }
    });
    Object.defineProperty(exports2, "differenceInCalendarISOWeeks", {
      enumerable: true,
      get: function() {
        return _index21.default;
      }
    });
    Object.defineProperty(exports2, "differenceInCalendarMonths", {
      enumerable: true,
      get: function() {
        return _index22.default;
      }
    });
    Object.defineProperty(exports2, "differenceInCalendarQuarters", {
      enumerable: true,
      get: function() {
        return _index23.default;
      }
    });
    Object.defineProperty(exports2, "differenceInCalendarWeeks", {
      enumerable: true,
      get: function() {
        return _index24.default;
      }
    });
    Object.defineProperty(exports2, "differenceInCalendarYears", {
      enumerable: true,
      get: function() {
        return _index25.default;
      }
    });
    Object.defineProperty(exports2, "differenceInDays", {
      enumerable: true,
      get: function() {
        return _index26.default;
      }
    });
    Object.defineProperty(exports2, "differenceInHours", {
      enumerable: true,
      get: function() {
        return _index27.default;
      }
    });
    Object.defineProperty(exports2, "differenceInISOWeekYears", {
      enumerable: true,
      get: function() {
        return _index28.default;
      }
    });
    Object.defineProperty(exports2, "differenceInMilliseconds", {
      enumerable: true,
      get: function() {
        return _index29.default;
      }
    });
    Object.defineProperty(exports2, "differenceInMinutes", {
      enumerable: true,
      get: function() {
        return _index30.default;
      }
    });
    Object.defineProperty(exports2, "differenceInMonths", {
      enumerable: true,
      get: function() {
        return _index31.default;
      }
    });
    Object.defineProperty(exports2, "differenceInQuarters", {
      enumerable: true,
      get: function() {
        return _index32.default;
      }
    });
    Object.defineProperty(exports2, "differenceInSeconds", {
      enumerable: true,
      get: function() {
        return _index33.default;
      }
    });
    Object.defineProperty(exports2, "differenceInWeeks", {
      enumerable: true,
      get: function() {
        return _index34.default;
      }
    });
    Object.defineProperty(exports2, "differenceInYears", {
      enumerable: true,
      get: function() {
        return _index35.default;
      }
    });
    Object.defineProperty(exports2, "eachDayOfInterval", {
      enumerable: true,
      get: function() {
        return _index36.default;
      }
    });
    Object.defineProperty(exports2, "eachHourOfInterval", {
      enumerable: true,
      get: function() {
        return _index37.default;
      }
    });
    Object.defineProperty(exports2, "eachMinuteOfInterval", {
      enumerable: true,
      get: function() {
        return _index38.default;
      }
    });
    Object.defineProperty(exports2, "eachMonthOfInterval", {
      enumerable: true,
      get: function() {
        return _index39.default;
      }
    });
    Object.defineProperty(exports2, "eachQuarterOfInterval", {
      enumerable: true,
      get: function() {
        return _index40.default;
      }
    });
    Object.defineProperty(exports2, "eachWeekOfInterval", {
      enumerable: true,
      get: function() {
        return _index41.default;
      }
    });
    Object.defineProperty(exports2, "eachWeekendOfInterval", {
      enumerable: true,
      get: function() {
        return _index42.default;
      }
    });
    Object.defineProperty(exports2, "eachWeekendOfMonth", {
      enumerable: true,
      get: function() {
        return _index43.default;
      }
    });
    Object.defineProperty(exports2, "eachWeekendOfYear", {
      enumerable: true,
      get: function() {
        return _index44.default;
      }
    });
    Object.defineProperty(exports2, "eachYearOfInterval", {
      enumerable: true,
      get: function() {
        return _index45.default;
      }
    });
    Object.defineProperty(exports2, "endOfDay", {
      enumerable: true,
      get: function() {
        return _index46.default;
      }
    });
    Object.defineProperty(exports2, "endOfDecade", {
      enumerable: true,
      get: function() {
        return _index47.default;
      }
    });
    Object.defineProperty(exports2, "endOfHour", {
      enumerable: true,
      get: function() {
        return _index48.default;
      }
    });
    Object.defineProperty(exports2, "endOfISOWeek", {
      enumerable: true,
      get: function() {
        return _index49.default;
      }
    });
    Object.defineProperty(exports2, "endOfISOWeekYear", {
      enumerable: true,
      get: function() {
        return _index50.default;
      }
    });
    Object.defineProperty(exports2, "endOfMinute", {
      enumerable: true,
      get: function() {
        return _index51.default;
      }
    });
    Object.defineProperty(exports2, "endOfMonth", {
      enumerable: true,
      get: function() {
        return _index52.default;
      }
    });
    Object.defineProperty(exports2, "endOfQuarter", {
      enumerable: true,
      get: function() {
        return _index53.default;
      }
    });
    Object.defineProperty(exports2, "endOfSecond", {
      enumerable: true,
      get: function() {
        return _index54.default;
      }
    });
    Object.defineProperty(exports2, "endOfToday", {
      enumerable: true,
      get: function() {
        return _index55.default;
      }
    });
    Object.defineProperty(exports2, "endOfTomorrow", {
      enumerable: true,
      get: function() {
        return _index56.default;
      }
    });
    Object.defineProperty(exports2, "endOfWeek", {
      enumerable: true,
      get: function() {
        return _index57.default;
      }
    });
    Object.defineProperty(exports2, "endOfYear", {
      enumerable: true,
      get: function() {
        return _index58.default;
      }
    });
    Object.defineProperty(exports2, "endOfYesterday", {
      enumerable: true,
      get: function() {
        return _index59.default;
      }
    });
    Object.defineProperty(exports2, "format", {
      enumerable: true,
      get: function() {
        return _index60.default;
      }
    });
    Object.defineProperty(exports2, "formatDistance", {
      enumerable: true,
      get: function() {
        return _index61.default;
      }
    });
    Object.defineProperty(exports2, "formatDistanceStrict", {
      enumerable: true,
      get: function() {
        return _index62.default;
      }
    });
    Object.defineProperty(exports2, "formatDistanceToNow", {
      enumerable: true,
      get: function() {
        return _index63.default;
      }
    });
    Object.defineProperty(exports2, "formatDistanceToNowStrict", {
      enumerable: true,
      get: function() {
        return _index64.default;
      }
    });
    Object.defineProperty(exports2, "formatDuration", {
      enumerable: true,
      get: function() {
        return _index65.default;
      }
    });
    Object.defineProperty(exports2, "formatISO", {
      enumerable: true,
      get: function() {
        return _index66.default;
      }
    });
    Object.defineProperty(exports2, "formatISO9075", {
      enumerable: true,
      get: function() {
        return _index67.default;
      }
    });
    Object.defineProperty(exports2, "formatISODuration", {
      enumerable: true,
      get: function() {
        return _index68.default;
      }
    });
    Object.defineProperty(exports2, "formatRFC3339", {
      enumerable: true,
      get: function() {
        return _index69.default;
      }
    });
    Object.defineProperty(exports2, "formatRFC7231", {
      enumerable: true,
      get: function() {
        return _index70.default;
      }
    });
    Object.defineProperty(exports2, "formatRelative", {
      enumerable: true,
      get: function() {
        return _index71.default;
      }
    });
    Object.defineProperty(exports2, "fromUnixTime", {
      enumerable: true,
      get: function() {
        return _index72.default;
      }
    });
    Object.defineProperty(exports2, "getDate", {
      enumerable: true,
      get: function() {
        return _index73.default;
      }
    });
    Object.defineProperty(exports2, "getDay", {
      enumerable: true,
      get: function() {
        return _index74.default;
      }
    });
    Object.defineProperty(exports2, "getDayOfYear", {
      enumerable: true,
      get: function() {
        return _index75.default;
      }
    });
    Object.defineProperty(exports2, "getDaysInMonth", {
      enumerable: true,
      get: function() {
        return _index76.default;
      }
    });
    Object.defineProperty(exports2, "getDaysInYear", {
      enumerable: true,
      get: function() {
        return _index77.default;
      }
    });
    Object.defineProperty(exports2, "getDecade", {
      enumerable: true,
      get: function() {
        return _index78.default;
      }
    });
    Object.defineProperty(exports2, "getHours", {
      enumerable: true,
      get: function() {
        return _index79.default;
      }
    });
    Object.defineProperty(exports2, "getISODay", {
      enumerable: true,
      get: function() {
        return _index80.default;
      }
    });
    Object.defineProperty(exports2, "getISOWeek", {
      enumerable: true,
      get: function() {
        return _index81.default;
      }
    });
    Object.defineProperty(exports2, "getISOWeekYear", {
      enumerable: true,
      get: function() {
        return _index82.default;
      }
    });
    Object.defineProperty(exports2, "getISOWeeksInYear", {
      enumerable: true,
      get: function() {
        return _index83.default;
      }
    });
    Object.defineProperty(exports2, "getMilliseconds", {
      enumerable: true,
      get: function() {
        return _index84.default;
      }
    });
    Object.defineProperty(exports2, "getMinutes", {
      enumerable: true,
      get: function() {
        return _index85.default;
      }
    });
    Object.defineProperty(exports2, "getMonth", {
      enumerable: true,
      get: function() {
        return _index86.default;
      }
    });
    Object.defineProperty(exports2, "getOverlappingDaysInIntervals", {
      enumerable: true,
      get: function() {
        return _index87.default;
      }
    });
    Object.defineProperty(exports2, "getQuarter", {
      enumerable: true,
      get: function() {
        return _index88.default;
      }
    });
    Object.defineProperty(exports2, "getSeconds", {
      enumerable: true,
      get: function() {
        return _index89.default;
      }
    });
    Object.defineProperty(exports2, "getTime", {
      enumerable: true,
      get: function() {
        return _index90.default;
      }
    });
    Object.defineProperty(exports2, "getUnixTime", {
      enumerable: true,
      get: function() {
        return _index91.default;
      }
    });
    Object.defineProperty(exports2, "getWeek", {
      enumerable: true,
      get: function() {
        return _index92.default;
      }
    });
    Object.defineProperty(exports2, "getWeekOfMonth", {
      enumerable: true,
      get: function() {
        return _index93.default;
      }
    });
    Object.defineProperty(exports2, "getWeekYear", {
      enumerable: true,
      get: function() {
        return _index94.default;
      }
    });
    Object.defineProperty(exports2, "getWeeksInMonth", {
      enumerable: true,
      get: function() {
        return _index95.default;
      }
    });
    Object.defineProperty(exports2, "getYear", {
      enumerable: true,
      get: function() {
        return _index96.default;
      }
    });
    Object.defineProperty(exports2, "intervalToDuration", {
      enumerable: true,
      get: function() {
        return _index97.default;
      }
    });
    Object.defineProperty(exports2, "intlFormat", {
      enumerable: true,
      get: function() {
        return _index98.default;
      }
    });
    Object.defineProperty(exports2, "isAfter", {
      enumerable: true,
      get: function() {
        return _index99.default;
      }
    });
    Object.defineProperty(exports2, "isBefore", {
      enumerable: true,
      get: function() {
        return _index100.default;
      }
    });
    Object.defineProperty(exports2, "isDate", {
      enumerable: true,
      get: function() {
        return _index101.default;
      }
    });
    Object.defineProperty(exports2, "isEqual", {
      enumerable: true,
      get: function() {
        return _index102.default;
      }
    });
    Object.defineProperty(exports2, "isExists", {
      enumerable: true,
      get: function() {
        return _index103.default;
      }
    });
    Object.defineProperty(exports2, "isFirstDayOfMonth", {
      enumerable: true,
      get: function() {
        return _index104.default;
      }
    });
    Object.defineProperty(exports2, "isFriday", {
      enumerable: true,
      get: function() {
        return _index105.default;
      }
    });
    Object.defineProperty(exports2, "isFuture", {
      enumerable: true,
      get: function() {
        return _index106.default;
      }
    });
    Object.defineProperty(exports2, "isLastDayOfMonth", {
      enumerable: true,
      get: function() {
        return _index107.default;
      }
    });
    Object.defineProperty(exports2, "isLeapYear", {
      enumerable: true,
      get: function() {
        return _index108.default;
      }
    });
    Object.defineProperty(exports2, "isMatch", {
      enumerable: true,
      get: function() {
        return _index109.default;
      }
    });
    Object.defineProperty(exports2, "isMonday", {
      enumerable: true,
      get: function() {
        return _index110.default;
      }
    });
    Object.defineProperty(exports2, "isPast", {
      enumerable: true,
      get: function() {
        return _index111.default;
      }
    });
    Object.defineProperty(exports2, "isSameDay", {
      enumerable: true,
      get: function() {
        return _index112.default;
      }
    });
    Object.defineProperty(exports2, "isSameHour", {
      enumerable: true,
      get: function() {
        return _index113.default;
      }
    });
    Object.defineProperty(exports2, "isSameISOWeek", {
      enumerable: true,
      get: function() {
        return _index114.default;
      }
    });
    Object.defineProperty(exports2, "isSameISOWeekYear", {
      enumerable: true,
      get: function() {
        return _index115.default;
      }
    });
    Object.defineProperty(exports2, "isSameMinute", {
      enumerable: true,
      get: function() {
        return _index116.default;
      }
    });
    Object.defineProperty(exports2, "isSameMonth", {
      enumerable: true,
      get: function() {
        return _index117.default;
      }
    });
    Object.defineProperty(exports2, "isSameQuarter", {
      enumerable: true,
      get: function() {
        return _index118.default;
      }
    });
    Object.defineProperty(exports2, "isSameSecond", {
      enumerable: true,
      get: function() {
        return _index119.default;
      }
    });
    Object.defineProperty(exports2, "isSameWeek", {
      enumerable: true,
      get: function() {
        return _index120.default;
      }
    });
    Object.defineProperty(exports2, "isSameYear", {
      enumerable: true,
      get: function() {
        return _index121.default;
      }
    });
    Object.defineProperty(exports2, "isSaturday", {
      enumerable: true,
      get: function() {
        return _index122.default;
      }
    });
    Object.defineProperty(exports2, "isSunday", {
      enumerable: true,
      get: function() {
        return _index123.default;
      }
    });
    Object.defineProperty(exports2, "isThisHour", {
      enumerable: true,
      get: function() {
        return _index124.default;
      }
    });
    Object.defineProperty(exports2, "isThisISOWeek", {
      enumerable: true,
      get: function() {
        return _index125.default;
      }
    });
    Object.defineProperty(exports2, "isThisMinute", {
      enumerable: true,
      get: function() {
        return _index126.default;
      }
    });
    Object.defineProperty(exports2, "isThisMonth", {
      enumerable: true,
      get: function() {
        return _index127.default;
      }
    });
    Object.defineProperty(exports2, "isThisQuarter", {
      enumerable: true,
      get: function() {
        return _index128.default;
      }
    });
    Object.defineProperty(exports2, "isThisSecond", {
      enumerable: true,
      get: function() {
        return _index129.default;
      }
    });
    Object.defineProperty(exports2, "isThisWeek", {
      enumerable: true,
      get: function() {
        return _index130.default;
      }
    });
    Object.defineProperty(exports2, "isThisYear", {
      enumerable: true,
      get: function() {
        return _index131.default;
      }
    });
    Object.defineProperty(exports2, "isThursday", {
      enumerable: true,
      get: function() {
        return _index132.default;
      }
    });
    Object.defineProperty(exports2, "isToday", {
      enumerable: true,
      get: function() {
        return _index133.default;
      }
    });
    Object.defineProperty(exports2, "isTomorrow", {
      enumerable: true,
      get: function() {
        return _index134.default;
      }
    });
    Object.defineProperty(exports2, "isTuesday", {
      enumerable: true,
      get: function() {
        return _index135.default;
      }
    });
    Object.defineProperty(exports2, "isValid", {
      enumerable: true,
      get: function() {
        return _index136.default;
      }
    });
    Object.defineProperty(exports2, "isWednesday", {
      enumerable: true,
      get: function() {
        return _index137.default;
      }
    });
    Object.defineProperty(exports2, "isWeekend", {
      enumerable: true,
      get: function() {
        return _index138.default;
      }
    });
    Object.defineProperty(exports2, "isWithinInterval", {
      enumerable: true,
      get: function() {
        return _index139.default;
      }
    });
    Object.defineProperty(exports2, "isYesterday", {
      enumerable: true,
      get: function() {
        return _index140.default;
      }
    });
    Object.defineProperty(exports2, "lastDayOfDecade", {
      enumerable: true,
      get: function() {
        return _index141.default;
      }
    });
    Object.defineProperty(exports2, "lastDayOfISOWeek", {
      enumerable: true,
      get: function() {
        return _index142.default;
      }
    });
    Object.defineProperty(exports2, "lastDayOfISOWeekYear", {
      enumerable: true,
      get: function() {
        return _index143.default;
      }
    });
    Object.defineProperty(exports2, "lastDayOfMonth", {
      enumerable: true,
      get: function() {
        return _index144.default;
      }
    });
    Object.defineProperty(exports2, "lastDayOfQuarter", {
      enumerable: true,
      get: function() {
        return _index145.default;
      }
    });
    Object.defineProperty(exports2, "lastDayOfWeek", {
      enumerable: true,
      get: function() {
        return _index146.default;
      }
    });
    Object.defineProperty(exports2, "lastDayOfYear", {
      enumerable: true,
      get: function() {
        return _index147.default;
      }
    });
    Object.defineProperty(exports2, "lightFormat", {
      enumerable: true,
      get: function() {
        return _index148.default;
      }
    });
    Object.defineProperty(exports2, "max", {
      enumerable: true,
      get: function() {
        return _index149.default;
      }
    });
    Object.defineProperty(exports2, "milliseconds", {
      enumerable: true,
      get: function() {
        return _index150.default;
      }
    });
    Object.defineProperty(exports2, "min", {
      enumerable: true,
      get: function() {
        return _index151.default;
      }
    });
    Object.defineProperty(exports2, "nextDay", {
      enumerable: true,
      get: function() {
        return _index152.default;
      }
    });
    Object.defineProperty(exports2, "nextFriday", {
      enumerable: true,
      get: function() {
        return _index153.default;
      }
    });
    Object.defineProperty(exports2, "nextMonday", {
      enumerable: true,
      get: function() {
        return _index154.default;
      }
    });
    Object.defineProperty(exports2, "nextSaturday", {
      enumerable: true,
      get: function() {
        return _index155.default;
      }
    });
    Object.defineProperty(exports2, "nextSunday", {
      enumerable: true,
      get: function() {
        return _index156.default;
      }
    });
    Object.defineProperty(exports2, "nextThursday", {
      enumerable: true,
      get: function() {
        return _index157.default;
      }
    });
    Object.defineProperty(exports2, "nextTuesday", {
      enumerable: true,
      get: function() {
        return _index158.default;
      }
    });
    Object.defineProperty(exports2, "nextWednesday", {
      enumerable: true,
      get: function() {
        return _index159.default;
      }
    });
    Object.defineProperty(exports2, "parse", {
      enumerable: true,
      get: function() {
        return _index160.default;
      }
    });
    Object.defineProperty(exports2, "parseISO", {
      enumerable: true,
      get: function() {
        return _index161.default;
      }
    });
    Object.defineProperty(exports2, "parseJSON", {
      enumerable: true,
      get: function() {
        return _index162.default;
      }
    });
    Object.defineProperty(exports2, "roundToNearestMinutes", {
      enumerable: true,
      get: function() {
        return _index163.default;
      }
    });
    Object.defineProperty(exports2, "set", {
      enumerable: true,
      get: function() {
        return _index164.default;
      }
    });
    Object.defineProperty(exports2, "setDate", {
      enumerable: true,
      get: function() {
        return _index165.default;
      }
    });
    Object.defineProperty(exports2, "setDay", {
      enumerable: true,
      get: function() {
        return _index166.default;
      }
    });
    Object.defineProperty(exports2, "setDayOfYear", {
      enumerable: true,
      get: function() {
        return _index167.default;
      }
    });
    Object.defineProperty(exports2, "setHours", {
      enumerable: true,
      get: function() {
        return _index168.default;
      }
    });
    Object.defineProperty(exports2, "setISODay", {
      enumerable: true,
      get: function() {
        return _index169.default;
      }
    });
    Object.defineProperty(exports2, "setISOWeek", {
      enumerable: true,
      get: function() {
        return _index170.default;
      }
    });
    Object.defineProperty(exports2, "setISOWeekYear", {
      enumerable: true,
      get: function() {
        return _index171.default;
      }
    });
    Object.defineProperty(exports2, "setMilliseconds", {
      enumerable: true,
      get: function() {
        return _index172.default;
      }
    });
    Object.defineProperty(exports2, "setMinutes", {
      enumerable: true,
      get: function() {
        return _index173.default;
      }
    });
    Object.defineProperty(exports2, "setMonth", {
      enumerable: true,
      get: function() {
        return _index174.default;
      }
    });
    Object.defineProperty(exports2, "setQuarter", {
      enumerable: true,
      get: function() {
        return _index175.default;
      }
    });
    Object.defineProperty(exports2, "setSeconds", {
      enumerable: true,
      get: function() {
        return _index176.default;
      }
    });
    Object.defineProperty(exports2, "setWeek", {
      enumerable: true,
      get: function() {
        return _index177.default;
      }
    });
    Object.defineProperty(exports2, "setWeekYear", {
      enumerable: true,
      get: function() {
        return _index178.default;
      }
    });
    Object.defineProperty(exports2, "setYear", {
      enumerable: true,
      get: function() {
        return _index179.default;
      }
    });
    Object.defineProperty(exports2, "startOfDay", {
      enumerable: true,
      get: function() {
        return _index180.default;
      }
    });
    Object.defineProperty(exports2, "startOfDecade", {
      enumerable: true,
      get: function() {
        return _index181.default;
      }
    });
    Object.defineProperty(exports2, "startOfHour", {
      enumerable: true,
      get: function() {
        return _index182.default;
      }
    });
    Object.defineProperty(exports2, "startOfISOWeek", {
      enumerable: true,
      get: function() {
        return _index183.default;
      }
    });
    Object.defineProperty(exports2, "startOfISOWeekYear", {
      enumerable: true,
      get: function() {
        return _index184.default;
      }
    });
    Object.defineProperty(exports2, "startOfMinute", {
      enumerable: true,
      get: function() {
        return _index185.default;
      }
    });
    Object.defineProperty(exports2, "startOfMonth", {
      enumerable: true,
      get: function() {
        return _index186.default;
      }
    });
    Object.defineProperty(exports2, "startOfQuarter", {
      enumerable: true,
      get: function() {
        return _index187.default;
      }
    });
    Object.defineProperty(exports2, "startOfSecond", {
      enumerable: true,
      get: function() {
        return _index188.default;
      }
    });
    Object.defineProperty(exports2, "startOfToday", {
      enumerable: true,
      get: function() {
        return _index189.default;
      }
    });
    Object.defineProperty(exports2, "startOfTomorrow", {
      enumerable: true,
      get: function() {
        return _index190.default;
      }
    });
    Object.defineProperty(exports2, "startOfWeek", {
      enumerable: true,
      get: function() {
        return _index191.default;
      }
    });
    Object.defineProperty(exports2, "startOfWeekYear", {
      enumerable: true,
      get: function() {
        return _index192.default;
      }
    });
    Object.defineProperty(exports2, "startOfYear", {
      enumerable: true,
      get: function() {
        return _index193.default;
      }
    });
    Object.defineProperty(exports2, "startOfYesterday", {
      enumerable: true,
      get: function() {
        return _index194.default;
      }
    });
    Object.defineProperty(exports2, "sub", {
      enumerable: true,
      get: function() {
        return _index195.default;
      }
    });
    Object.defineProperty(exports2, "subBusinessDays", {
      enumerable: true,
      get: function() {
        return _index196.default;
      }
    });
    Object.defineProperty(exports2, "subDays", {
      enumerable: true,
      get: function() {
        return _index197.default;
      }
    });
    Object.defineProperty(exports2, "subHours", {
      enumerable: true,
      get: function() {
        return _index198.default;
      }
    });
    Object.defineProperty(exports2, "subISOWeekYears", {
      enumerable: true,
      get: function() {
        return _index199.default;
      }
    });
    Object.defineProperty(exports2, "subMilliseconds", {
      enumerable: true,
      get: function() {
        return _index200.default;
      }
    });
    Object.defineProperty(exports2, "subMinutes", {
      enumerable: true,
      get: function() {
        return _index201.default;
      }
    });
    Object.defineProperty(exports2, "subMonths", {
      enumerable: true,
      get: function() {
        return _index202.default;
      }
    });
    Object.defineProperty(exports2, "subQuarters", {
      enumerable: true,
      get: function() {
        return _index203.default;
      }
    });
    Object.defineProperty(exports2, "subSeconds", {
      enumerable: true,
      get: function() {
        return _index204.default;
      }
    });
    Object.defineProperty(exports2, "subWeeks", {
      enumerable: true,
      get: function() {
        return _index205.default;
      }
    });
    Object.defineProperty(exports2, "subYears", {
      enumerable: true,
      get: function() {
        return _index206.default;
      }
    });
    Object.defineProperty(exports2, "toDate", {
      enumerable: true,
      get: function() {
        return _index207.default;
      }
    });
    var _index = _interopRequireDefault(require_add());
    var _index2 = _interopRequireDefault(require_addBusinessDays());
    var _index3 = _interopRequireDefault(require_addDays());
    var _index4 = _interopRequireDefault(require_addHours());
    var _index5 = _interopRequireDefault(require_addISOWeekYears());
    var _index6 = _interopRequireDefault(require_addMilliseconds());
    var _index7 = _interopRequireDefault(require_addMinutes());
    var _index8 = _interopRequireDefault(require_addMonths());
    var _index9 = _interopRequireDefault(require_addQuarters());
    var _index10 = _interopRequireDefault(require_addSeconds());
    var _index11 = _interopRequireDefault(require_addWeeks());
    var _index12 = _interopRequireDefault(require_addYears());
    var _index13 = _interopRequireDefault(require_areIntervalsOverlapping());
    var _index14 = _interopRequireDefault(require_closestIndexTo());
    var _index15 = _interopRequireDefault(require_closestTo());
    var _index16 = _interopRequireDefault(require_compareAsc());
    var _index17 = _interopRequireDefault(require_compareDesc());
    var _index18 = _interopRequireDefault(require_differenceInBusinessDays());
    var _index19 = _interopRequireDefault(require_differenceInCalendarDays());
    var _index20 = _interopRequireDefault(require_differenceInCalendarISOWeekYears());
    var _index21 = _interopRequireDefault(require_differenceInCalendarISOWeeks());
    var _index22 = _interopRequireDefault(require_differenceInCalendarMonths());
    var _index23 = _interopRequireDefault(require_differenceInCalendarQuarters());
    var _index24 = _interopRequireDefault(require_differenceInCalendarWeeks());
    var _index25 = _interopRequireDefault(require_differenceInCalendarYears());
    var _index26 = _interopRequireDefault(require_differenceInDays());
    var _index27 = _interopRequireDefault(require_differenceInHours());
    var _index28 = _interopRequireDefault(require_differenceInISOWeekYears());
    var _index29 = _interopRequireDefault(require_differenceInMilliseconds());
    var _index30 = _interopRequireDefault(require_differenceInMinutes());
    var _index31 = _interopRequireDefault(require_differenceInMonths());
    var _index32 = _interopRequireDefault(require_differenceInQuarters());
    var _index33 = _interopRequireDefault(require_differenceInSeconds());
    var _index34 = _interopRequireDefault(require_differenceInWeeks());
    var _index35 = _interopRequireDefault(require_differenceInYears());
    var _index36 = _interopRequireDefault(require_eachDayOfInterval());
    var _index37 = _interopRequireDefault(require_eachHourOfInterval());
    var _index38 = _interopRequireDefault(require_eachMinuteOfInterval());
    var _index39 = _interopRequireDefault(require_eachMonthOfInterval());
    var _index40 = _interopRequireDefault(require_eachQuarterOfInterval());
    var _index41 = _interopRequireDefault(require_eachWeekOfInterval());
    var _index42 = _interopRequireDefault(require_eachWeekendOfInterval());
    var _index43 = _interopRequireDefault(require_eachWeekendOfMonth());
    var _index44 = _interopRequireDefault(require_eachWeekendOfYear());
    var _index45 = _interopRequireDefault(require_eachYearOfInterval());
    var _index46 = _interopRequireDefault(require_endOfDay());
    var _index47 = _interopRequireDefault(require_endOfDecade());
    var _index48 = _interopRequireDefault(require_endOfHour());
    var _index49 = _interopRequireDefault(require_endOfISOWeek());
    var _index50 = _interopRequireDefault(require_endOfISOWeekYear());
    var _index51 = _interopRequireDefault(require_endOfMinute());
    var _index52 = _interopRequireDefault(require_endOfMonth());
    var _index53 = _interopRequireDefault(require_endOfQuarter());
    var _index54 = _interopRequireDefault(require_endOfSecond());
    var _index55 = _interopRequireDefault(require_endOfToday());
    var _index56 = _interopRequireDefault(require_endOfTomorrow());
    var _index57 = _interopRequireDefault(require_endOfWeek());
    var _index58 = _interopRequireDefault(require_endOfYear());
    var _index59 = _interopRequireDefault(require_endOfYesterday());
    var _index60 = _interopRequireDefault(require_format());
    var _index61 = _interopRequireDefault(require_formatDistance2());
    var _index62 = _interopRequireDefault(require_formatDistanceStrict());
    var _index63 = _interopRequireDefault(require_formatDistanceToNow());
    var _index64 = _interopRequireDefault(require_formatDistanceToNowStrict());
    var _index65 = _interopRequireDefault(require_formatDuration());
    var _index66 = _interopRequireDefault(require_formatISO());
    var _index67 = _interopRequireDefault(require_formatISO9075());
    var _index68 = _interopRequireDefault(require_formatISODuration());
    var _index69 = _interopRequireDefault(require_formatRFC3339());
    var _index70 = _interopRequireDefault(require_formatRFC7231());
    var _index71 = _interopRequireDefault(require_formatRelative2());
    var _index72 = _interopRequireDefault(require_fromUnixTime());
    var _index73 = _interopRequireDefault(require_getDate());
    var _index74 = _interopRequireDefault(require_getDay());
    var _index75 = _interopRequireDefault(require_getDayOfYear());
    var _index76 = _interopRequireDefault(require_getDaysInMonth());
    var _index77 = _interopRequireDefault(require_getDaysInYear());
    var _index78 = _interopRequireDefault(require_getDecade());
    var _index79 = _interopRequireDefault(require_getHours());
    var _index80 = _interopRequireDefault(require_getISODay());
    var _index81 = _interopRequireDefault(require_getISOWeek());
    var _index82 = _interopRequireDefault(require_getISOWeekYear());
    var _index83 = _interopRequireDefault(require_getISOWeeksInYear());
    var _index84 = _interopRequireDefault(require_getMilliseconds());
    var _index85 = _interopRequireDefault(require_getMinutes());
    var _index86 = _interopRequireDefault(require_getMonth());
    var _index87 = _interopRequireDefault(require_getOverlappingDaysInIntervals());
    var _index88 = _interopRequireDefault(require_getQuarter());
    var _index89 = _interopRequireDefault(require_getSeconds());
    var _index90 = _interopRequireDefault(require_getTime());
    var _index91 = _interopRequireDefault(require_getUnixTime());
    var _index92 = _interopRequireDefault(require_getWeek());
    var _index93 = _interopRequireDefault(require_getWeekOfMonth());
    var _index94 = _interopRequireDefault(require_getWeekYear());
    var _index95 = _interopRequireDefault(require_getWeeksInMonth());
    var _index96 = _interopRequireDefault(require_getYear());
    var _index97 = _interopRequireDefault(require_intervalToDuration());
    var _index98 = _interopRequireDefault(require_intlFormat());
    var _index99 = _interopRequireDefault(require_isAfter());
    var _index100 = _interopRequireDefault(require_isBefore());
    var _index101 = _interopRequireDefault(require_isDate());
    var _index102 = _interopRequireDefault(require_isEqual());
    var _index103 = _interopRequireDefault(require_isExists());
    var _index104 = _interopRequireDefault(require_isFirstDayOfMonth());
    var _index105 = _interopRequireDefault(require_isFriday());
    var _index106 = _interopRequireDefault(require_isFuture());
    var _index107 = _interopRequireDefault(require_isLastDayOfMonth());
    var _index108 = _interopRequireDefault(require_isLeapYear());
    var _index109 = _interopRequireDefault(require_isMatch());
    var _index110 = _interopRequireDefault(require_isMonday());
    var _index111 = _interopRequireDefault(require_isPast());
    var _index112 = _interopRequireDefault(require_isSameDay());
    var _index113 = _interopRequireDefault(require_isSameHour());
    var _index114 = _interopRequireDefault(require_isSameISOWeek());
    var _index115 = _interopRequireDefault(require_isSameISOWeekYear());
    var _index116 = _interopRequireDefault(require_isSameMinute());
    var _index117 = _interopRequireDefault(require_isSameMonth());
    var _index118 = _interopRequireDefault(require_isSameQuarter());
    var _index119 = _interopRequireDefault(require_isSameSecond());
    var _index120 = _interopRequireDefault(require_isSameWeek());
    var _index121 = _interopRequireDefault(require_isSameYear());
    var _index122 = _interopRequireDefault(require_isSaturday());
    var _index123 = _interopRequireDefault(require_isSunday());
    var _index124 = _interopRequireDefault(require_isThisHour());
    var _index125 = _interopRequireDefault(require_isThisISOWeek());
    var _index126 = _interopRequireDefault(require_isThisMinute());
    var _index127 = _interopRequireDefault(require_isThisMonth());
    var _index128 = _interopRequireDefault(require_isThisQuarter());
    var _index129 = _interopRequireDefault(require_isThisSecond());
    var _index130 = _interopRequireDefault(require_isThisWeek());
    var _index131 = _interopRequireDefault(require_isThisYear());
    var _index132 = _interopRequireDefault(require_isThursday());
    var _index133 = _interopRequireDefault(require_isToday());
    var _index134 = _interopRequireDefault(require_isTomorrow());
    var _index135 = _interopRequireDefault(require_isTuesday());
    var _index136 = _interopRequireDefault(require_isValid());
    var _index137 = _interopRequireDefault(require_isWednesday());
    var _index138 = _interopRequireDefault(require_isWeekend());
    var _index139 = _interopRequireDefault(require_isWithinInterval());
    var _index140 = _interopRequireDefault(require_isYesterday());
    var _index141 = _interopRequireDefault(require_lastDayOfDecade());
    var _index142 = _interopRequireDefault(require_lastDayOfISOWeek());
    var _index143 = _interopRequireDefault(require_lastDayOfISOWeekYear());
    var _index144 = _interopRequireDefault(require_lastDayOfMonth());
    var _index145 = _interopRequireDefault(require_lastDayOfQuarter());
    var _index146 = _interopRequireDefault(require_lastDayOfWeek());
    var _index147 = _interopRequireDefault(require_lastDayOfYear());
    var _index148 = _interopRequireDefault(require_lightFormat());
    var _index149 = _interopRequireDefault(require_max());
    var _index150 = _interopRequireDefault(require_milliseconds());
    var _index151 = _interopRequireDefault(require_min());
    var _index152 = _interopRequireDefault(require_nextDay());
    var _index153 = _interopRequireDefault(require_nextFriday());
    var _index154 = _interopRequireDefault(require_nextMonday());
    var _index155 = _interopRequireDefault(require_nextSaturday());
    var _index156 = _interopRequireDefault(require_nextSunday());
    var _index157 = _interopRequireDefault(require_nextThursday());
    var _index158 = _interopRequireDefault(require_nextTuesday());
    var _index159 = _interopRequireDefault(require_nextWednesday());
    var _index160 = _interopRequireDefault(require_parse2());
    var _index161 = _interopRequireDefault(require_parseISO());
    var _index162 = _interopRequireDefault(require_parseJSON());
    var _index163 = _interopRequireDefault(require_roundToNearestMinutes());
    var _index164 = _interopRequireDefault(require_set());
    var _index165 = _interopRequireDefault(require_setDate());
    var _index166 = _interopRequireDefault(require_setDay());
    var _index167 = _interopRequireDefault(require_setDayOfYear());
    var _index168 = _interopRequireDefault(require_setHours());
    var _index169 = _interopRequireDefault(require_setISODay());
    var _index170 = _interopRequireDefault(require_setISOWeek());
    var _index171 = _interopRequireDefault(require_setISOWeekYear());
    var _index172 = _interopRequireDefault(require_setMilliseconds());
    var _index173 = _interopRequireDefault(require_setMinutes());
    var _index174 = _interopRequireDefault(require_setMonth());
    var _index175 = _interopRequireDefault(require_setQuarter());
    var _index176 = _interopRequireDefault(require_setSeconds());
    var _index177 = _interopRequireDefault(require_setWeek());
    var _index178 = _interopRequireDefault(require_setWeekYear());
    var _index179 = _interopRequireDefault(require_setYear());
    var _index180 = _interopRequireDefault(require_startOfDay());
    var _index181 = _interopRequireDefault(require_startOfDecade());
    var _index182 = _interopRequireDefault(require_startOfHour());
    var _index183 = _interopRequireDefault(require_startOfISOWeek());
    var _index184 = _interopRequireDefault(require_startOfISOWeekYear());
    var _index185 = _interopRequireDefault(require_startOfMinute());
    var _index186 = _interopRequireDefault(require_startOfMonth());
    var _index187 = _interopRequireDefault(require_startOfQuarter());
    var _index188 = _interopRequireDefault(require_startOfSecond());
    var _index189 = _interopRequireDefault(require_startOfToday());
    var _index190 = _interopRequireDefault(require_startOfTomorrow());
    var _index191 = _interopRequireDefault(require_startOfWeek());
    var _index192 = _interopRequireDefault(require_startOfWeekYear());
    var _index193 = _interopRequireDefault(require_startOfYear());
    var _index194 = _interopRequireDefault(require_startOfYesterday());
    var _index195 = _interopRequireDefault(require_sub());
    var _index196 = _interopRequireDefault(require_subBusinessDays());
    var _index197 = _interopRequireDefault(require_subDays());
    var _index198 = _interopRequireDefault(require_subHours());
    var _index199 = _interopRequireDefault(require_subISOWeekYears());
    var _index200 = _interopRequireDefault(require_subMilliseconds());
    var _index201 = _interopRequireDefault(require_subMinutes());
    var _index202 = _interopRequireDefault(require_subMonths());
    var _index203 = _interopRequireDefault(require_subQuarters());
    var _index204 = _interopRequireDefault(require_subSeconds());
    var _index205 = _interopRequireDefault(require_subWeeks());
    var _index206 = _interopRequireDefault(require_subYears());
    var _index207 = _interopRequireDefault(require_toDate());
    var _index208 = require_constants2();
    Object.keys(_index208).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key))
        return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _index208[key];
        }
      });
    });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {default: obj};
    }
  }
});

// .svelte-kit/vercel/entry.js
__markAsModule(exports);
__export(exports, {
  default: () => entry_default
});

// node_modules/@sveltejs/kit/dist/node.js
function getRawBody(req) {
  return new Promise((fulfil, reject) => {
    const h = req.headers;
    if (!h["content-type"]) {
      fulfil(null);
      return;
    }
    req.on("error", reject);
    const length = Number(h["content-length"]);
    let data;
    if (!isNaN(length)) {
      data = new Uint8Array(length);
      let i = 0;
      req.on("data", (chunk) => {
        data.set(chunk, i);
        i += chunk.length;
      });
    } else {
      if (h["transfer-encoding"] === void 0) {
        fulfil(null);
        return;
      }
      data = new Uint8Array(0);
      req.on("data", (chunk) => {
        const new_data = new Uint8Array(data.length + chunk.length);
        new_data.set(data);
        new_data.set(chunk, data.length);
        data = new_data;
      });
    }
    req.on("end", () => {
      const [type] = h["content-type"].split(/;\s*/);
      if (type === "application/octet-stream") {
        fulfil(data);
      }
      const decoder = new TextDecoder(h["content-encoding"] || "utf-8");
      fulfil(decoder.decode(data));
    });
  });
}

// node_modules/@sveltejs/kit/dist/install-fetch.js
var import_http = __toModule(require("http"));
var import_https = __toModule(require("https"));
var import_zlib = __toModule(require("zlib"));
var import_stream = __toModule(require("stream"));
var import_util = __toModule(require("util"));
var import_crypto = __toModule(require("crypto"));
var import_url = __toModule(require("url"));
function dataUriToBuffer(uri) {
  if (!/^data:/i.test(uri)) {
    throw new TypeError('`uri` does not appear to be a Data URI (must begin with "data:")');
  }
  uri = uri.replace(/\r?\n/g, "");
  const firstComma = uri.indexOf(",");
  if (firstComma === -1 || firstComma <= 4) {
    throw new TypeError("malformed data: URI");
  }
  const meta = uri.substring(5, firstComma).split(";");
  let charset = "";
  let base64 = false;
  const type = meta[0] || "text/plain";
  let typeFull = type;
  for (let i = 1; i < meta.length; i++) {
    if (meta[i] === "base64") {
      base64 = true;
    } else {
      typeFull += `;${meta[i]}`;
      if (meta[i].indexOf("charset=") === 0) {
        charset = meta[i].substring(8);
      }
    }
  }
  if (!meta[0] && !charset.length) {
    typeFull += ";charset=US-ASCII";
    charset = "US-ASCII";
  }
  const encoding = base64 ? "base64" : "ascii";
  const data = unescape(uri.substring(firstComma + 1));
  const buffer = Buffer.from(data, encoding);
  buffer.type = type;
  buffer.typeFull = typeFull;
  buffer.charset = charset;
  return buffer;
}
var src = dataUriToBuffer;
var {Readable} = import_stream.default;
var wm = new WeakMap();
async function* read(parts) {
  for (const part of parts) {
    if ("stream" in part) {
      yield* part.stream();
    } else {
      yield part;
    }
  }
}
var Blob = class {
  constructor(blobParts = [], options2 = {}) {
    let size = 0;
    const parts = blobParts.map((element) => {
      let buffer;
      if (element instanceof Buffer) {
        buffer = element;
      } else if (ArrayBuffer.isView(element)) {
        buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
      } else if (element instanceof ArrayBuffer) {
        buffer = Buffer.from(element);
      } else if (element instanceof Blob) {
        buffer = element;
      } else {
        buffer = Buffer.from(typeof element === "string" ? element : String(element));
      }
      size += buffer.length || buffer.size || 0;
      return buffer;
    });
    const type = options2.type === void 0 ? "" : String(options2.type).toLowerCase();
    wm.set(this, {
      type: /[^\u0020-\u007E]/.test(type) ? "" : type,
      size,
      parts
    });
  }
  get size() {
    return wm.get(this).size;
  }
  get type() {
    return wm.get(this).type;
  }
  async text() {
    return Buffer.from(await this.arrayBuffer()).toString();
  }
  async arrayBuffer() {
    const data = new Uint8Array(this.size);
    let offset = 0;
    for await (const chunk of this.stream()) {
      data.set(chunk, offset);
      offset += chunk.length;
    }
    return data.buffer;
  }
  stream() {
    return Readable.from(read(wm.get(this).parts));
  }
  slice(start = 0, end = this.size, type = "") {
    const {size} = this;
    let relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size);
    let relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size);
    const span = Math.max(relativeEnd - relativeStart, 0);
    const parts = wm.get(this).parts.values();
    const blobParts = [];
    let added = 0;
    for (const part of parts) {
      const size2 = ArrayBuffer.isView(part) ? part.byteLength : part.size;
      if (relativeStart && size2 <= relativeStart) {
        relativeStart -= size2;
        relativeEnd -= size2;
      } else {
        const chunk = part.slice(relativeStart, Math.min(size2, relativeEnd));
        blobParts.push(chunk);
        added += ArrayBuffer.isView(chunk) ? chunk.byteLength : chunk.size;
        relativeStart = 0;
        if (added >= span) {
          break;
        }
      }
    }
    const blob = new Blob([], {type: String(type).toLowerCase()});
    Object.assign(wm.get(blob), {size: span, parts: blobParts});
    return blob;
  }
  get [Symbol.toStringTag]() {
    return "Blob";
  }
  static [Symbol.hasInstance](object) {
    return object && typeof object === "object" && typeof object.stream === "function" && object.stream.length === 0 && typeof object.constructor === "function" && /^(Blob|File)$/.test(object[Symbol.toStringTag]);
  }
};
Object.defineProperties(Blob.prototype, {
  size: {enumerable: true},
  type: {enumerable: true},
  slice: {enumerable: true}
});
var fetchBlob = Blob;
var FetchBaseError = class extends Error {
  constructor(message, type) {
    super(message);
    Error.captureStackTrace(this, this.constructor);
    this.type = type;
  }
  get name() {
    return this.constructor.name;
  }
  get [Symbol.toStringTag]() {
    return this.constructor.name;
  }
};
var FetchError = class extends FetchBaseError {
  constructor(message, type, systemError) {
    super(message, type);
    if (systemError) {
      this.code = this.errno = systemError.code;
      this.erroredSysCall = systemError.syscall;
    }
  }
};
var NAME = Symbol.toStringTag;
var isURLSearchParameters = (object) => {
  return typeof object === "object" && typeof object.append === "function" && typeof object.delete === "function" && typeof object.get === "function" && typeof object.getAll === "function" && typeof object.has === "function" && typeof object.set === "function" && typeof object.sort === "function" && object[NAME] === "URLSearchParams";
};
var isBlob = (object) => {
  return typeof object === "object" && typeof object.arrayBuffer === "function" && typeof object.type === "string" && typeof object.stream === "function" && typeof object.constructor === "function" && /^(Blob|File)$/.test(object[NAME]);
};
function isFormData(object) {
  return typeof object === "object" && typeof object.append === "function" && typeof object.set === "function" && typeof object.get === "function" && typeof object.getAll === "function" && typeof object.delete === "function" && typeof object.keys === "function" && typeof object.values === "function" && typeof object.entries === "function" && typeof object.constructor === "function" && object[NAME] === "FormData";
}
var isAbortSignal = (object) => {
  return typeof object === "object" && object[NAME] === "AbortSignal";
};
var carriage = "\r\n";
var dashes = "-".repeat(2);
var carriageLength = Buffer.byteLength(carriage);
var getFooter = (boundary) => `${dashes}${boundary}${dashes}${carriage.repeat(2)}`;
function getHeader(boundary, name, field) {
  let header = "";
  header += `${dashes}${boundary}${carriage}`;
  header += `Content-Disposition: form-data; name="${name}"`;
  if (isBlob(field)) {
    header += `; filename="${field.name}"${carriage}`;
    header += `Content-Type: ${field.type || "application/octet-stream"}`;
  }
  return `${header}${carriage.repeat(2)}`;
}
var getBoundary = () => (0, import_crypto.randomBytes)(8).toString("hex");
async function* formDataIterator(form, boundary) {
  for (const [name, value] of form) {
    yield getHeader(boundary, name, value);
    if (isBlob(value)) {
      yield* value.stream();
    } else {
      yield value;
    }
    yield carriage;
  }
  yield getFooter(boundary);
}
function getFormDataLength(form, boundary) {
  let length = 0;
  for (const [name, value] of form) {
    length += Buffer.byteLength(getHeader(boundary, name, value));
    if (isBlob(value)) {
      length += value.size;
    } else {
      length += Buffer.byteLength(String(value));
    }
    length += carriageLength;
  }
  length += Buffer.byteLength(getFooter(boundary));
  return length;
}
var INTERNALS$2 = Symbol("Body internals");
var Body = class {
  constructor(body, {
    size = 0
  } = {}) {
    let boundary = null;
    if (body === null) {
      body = null;
    } else if (isURLSearchParameters(body)) {
      body = Buffer.from(body.toString());
    } else if (isBlob(body))
      ;
    else if (Buffer.isBuffer(body))
      ;
    else if (import_util.types.isAnyArrayBuffer(body)) {
      body = Buffer.from(body);
    } else if (ArrayBuffer.isView(body)) {
      body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
    } else if (body instanceof import_stream.default)
      ;
    else if (isFormData(body)) {
      boundary = `NodeFetchFormDataBoundary${getBoundary()}`;
      body = import_stream.default.Readable.from(formDataIterator(body, boundary));
    } else {
      body = Buffer.from(String(body));
    }
    this[INTERNALS$2] = {
      body,
      boundary,
      disturbed: false,
      error: null
    };
    this.size = size;
    if (body instanceof import_stream.default) {
      body.on("error", (err) => {
        const error3 = err instanceof FetchBaseError ? err : new FetchError(`Invalid response body while trying to fetch ${this.url}: ${err.message}`, "system", err);
        this[INTERNALS$2].error = error3;
      });
    }
  }
  get body() {
    return this[INTERNALS$2].body;
  }
  get bodyUsed() {
    return this[INTERNALS$2].disturbed;
  }
  async arrayBuffer() {
    const {buffer, byteOffset, byteLength} = await consumeBody(this);
    return buffer.slice(byteOffset, byteOffset + byteLength);
  }
  async blob() {
    const ct = this.headers && this.headers.get("content-type") || this[INTERNALS$2].body && this[INTERNALS$2].body.type || "";
    const buf = await this.buffer();
    return new fetchBlob([buf], {
      type: ct
    });
  }
  async json() {
    const buffer = await consumeBody(this);
    return JSON.parse(buffer.toString());
  }
  async text() {
    const buffer = await consumeBody(this);
    return buffer.toString();
  }
  buffer() {
    return consumeBody(this);
  }
};
Object.defineProperties(Body.prototype, {
  body: {enumerable: true},
  bodyUsed: {enumerable: true},
  arrayBuffer: {enumerable: true},
  blob: {enumerable: true},
  json: {enumerable: true},
  text: {enumerable: true}
});
async function consumeBody(data) {
  if (data[INTERNALS$2].disturbed) {
    throw new TypeError(`body used already for: ${data.url}`);
  }
  data[INTERNALS$2].disturbed = true;
  if (data[INTERNALS$2].error) {
    throw data[INTERNALS$2].error;
  }
  let {body} = data;
  if (body === null) {
    return Buffer.alloc(0);
  }
  if (isBlob(body)) {
    body = body.stream();
  }
  if (Buffer.isBuffer(body)) {
    return body;
  }
  if (!(body instanceof import_stream.default)) {
    return Buffer.alloc(0);
  }
  const accum = [];
  let accumBytes = 0;
  try {
    for await (const chunk of body) {
      if (data.size > 0 && accumBytes + chunk.length > data.size) {
        const err = new FetchError(`content size at ${data.url} over limit: ${data.size}`, "max-size");
        body.destroy(err);
        throw err;
      }
      accumBytes += chunk.length;
      accum.push(chunk);
    }
  } catch (error3) {
    if (error3 instanceof FetchBaseError) {
      throw error3;
    } else {
      throw new FetchError(`Invalid response body while trying to fetch ${data.url}: ${error3.message}`, "system", error3);
    }
  }
  if (body.readableEnded === true || body._readableState.ended === true) {
    try {
      if (accum.every((c) => typeof c === "string")) {
        return Buffer.from(accum.join(""));
      }
      return Buffer.concat(accum, accumBytes);
    } catch (error3) {
      throw new FetchError(`Could not create Buffer from response body for ${data.url}: ${error3.message}`, "system", error3);
    }
  } else {
    throw new FetchError(`Premature close of server response while trying to fetch ${data.url}`);
  }
}
var clone = (instance, highWaterMark) => {
  let p1;
  let p2;
  let {body} = instance;
  if (instance.bodyUsed) {
    throw new Error("cannot clone body after it is used");
  }
  if (body instanceof import_stream.default && typeof body.getBoundary !== "function") {
    p1 = new import_stream.PassThrough({highWaterMark});
    p2 = new import_stream.PassThrough({highWaterMark});
    body.pipe(p1);
    body.pipe(p2);
    instance[INTERNALS$2].body = p1;
    body = p2;
  }
  return body;
};
var extractContentType = (body, request) => {
  if (body === null) {
    return null;
  }
  if (typeof body === "string") {
    return "text/plain;charset=UTF-8";
  }
  if (isURLSearchParameters(body)) {
    return "application/x-www-form-urlencoded;charset=UTF-8";
  }
  if (isBlob(body)) {
    return body.type || null;
  }
  if (Buffer.isBuffer(body) || import_util.types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {
    return null;
  }
  if (body && typeof body.getBoundary === "function") {
    return `multipart/form-data;boundary=${body.getBoundary()}`;
  }
  if (isFormData(body)) {
    return `multipart/form-data; boundary=${request[INTERNALS$2].boundary}`;
  }
  if (body instanceof import_stream.default) {
    return null;
  }
  return "text/plain;charset=UTF-8";
};
var getTotalBytes = (request) => {
  const {body} = request;
  if (body === null) {
    return 0;
  }
  if (isBlob(body)) {
    return body.size;
  }
  if (Buffer.isBuffer(body)) {
    return body.length;
  }
  if (body && typeof body.getLengthSync === "function") {
    return body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;
  }
  if (isFormData(body)) {
    return getFormDataLength(request[INTERNALS$2].boundary);
  }
  return null;
};
var writeToStream = (dest, {body}) => {
  if (body === null) {
    dest.end();
  } else if (isBlob(body)) {
    body.stream().pipe(dest);
  } else if (Buffer.isBuffer(body)) {
    dest.write(body);
    dest.end();
  } else {
    body.pipe(dest);
  }
};
var validateHeaderName = typeof import_http.default.validateHeaderName === "function" ? import_http.default.validateHeaderName : (name) => {
  if (!/^[\^`\-\w!#$%&'*+.|~]+$/.test(name)) {
    const err = new TypeError(`Header name must be a valid HTTP token [${name}]`);
    Object.defineProperty(err, "code", {value: "ERR_INVALID_HTTP_TOKEN"});
    throw err;
  }
};
var validateHeaderValue = typeof import_http.default.validateHeaderValue === "function" ? import_http.default.validateHeaderValue : (name, value) => {
  if (/[^\t\u0020-\u007E\u0080-\u00FF]/.test(value)) {
    const err = new TypeError(`Invalid character in header content ["${name}"]`);
    Object.defineProperty(err, "code", {value: "ERR_INVALID_CHAR"});
    throw err;
  }
};
var Headers = class extends URLSearchParams {
  constructor(init2) {
    let result = [];
    if (init2 instanceof Headers) {
      const raw = init2.raw();
      for (const [name, values] of Object.entries(raw)) {
        result.push(...values.map((value) => [name, value]));
      }
    } else if (init2 == null)
      ;
    else if (typeof init2 === "object" && !import_util.types.isBoxedPrimitive(init2)) {
      const method = init2[Symbol.iterator];
      if (method == null) {
        result.push(...Object.entries(init2));
      } else {
        if (typeof method !== "function") {
          throw new TypeError("Header pairs must be iterable");
        }
        result = [...init2].map((pair) => {
          if (typeof pair !== "object" || import_util.types.isBoxedPrimitive(pair)) {
            throw new TypeError("Each header pair must be an iterable object");
          }
          return [...pair];
        }).map((pair) => {
          if (pair.length !== 2) {
            throw new TypeError("Each header pair must be a name/value tuple");
          }
          return [...pair];
        });
      }
    } else {
      throw new TypeError("Failed to construct 'Headers': The provided value is not of type '(sequence<sequence<ByteString>> or record<ByteString, ByteString>)");
    }
    result = result.length > 0 ? result.map(([name, value]) => {
      validateHeaderName(name);
      validateHeaderValue(name, String(value));
      return [String(name).toLowerCase(), String(value)];
    }) : void 0;
    super(result);
    return new Proxy(this, {
      get(target, p, receiver) {
        switch (p) {
          case "append":
          case "set":
            return (name, value) => {
              validateHeaderName(name);
              validateHeaderValue(name, String(value));
              return URLSearchParams.prototype[p].call(receiver, String(name).toLowerCase(), String(value));
            };
          case "delete":
          case "has":
          case "getAll":
            return (name) => {
              validateHeaderName(name);
              return URLSearchParams.prototype[p].call(receiver, String(name).toLowerCase());
            };
          case "keys":
            return () => {
              target.sort();
              return new Set(URLSearchParams.prototype.keys.call(target)).keys();
            };
          default:
            return Reflect.get(target, p, receiver);
        }
      }
    });
  }
  get [Symbol.toStringTag]() {
    return this.constructor.name;
  }
  toString() {
    return Object.prototype.toString.call(this);
  }
  get(name) {
    const values = this.getAll(name);
    if (values.length === 0) {
      return null;
    }
    let value = values.join(", ");
    if (/^content-encoding$/i.test(name)) {
      value = value.toLowerCase();
    }
    return value;
  }
  forEach(callback) {
    for (const name of this.keys()) {
      callback(this.get(name), name);
    }
  }
  *values() {
    for (const name of this.keys()) {
      yield this.get(name);
    }
  }
  *entries() {
    for (const name of this.keys()) {
      yield [name, this.get(name)];
    }
  }
  [Symbol.iterator]() {
    return this.entries();
  }
  raw() {
    return [...this.keys()].reduce((result, key) => {
      result[key] = this.getAll(key);
      return result;
    }, {});
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return [...this.keys()].reduce((result, key) => {
      const values = this.getAll(key);
      if (key === "host") {
        result[key] = values[0];
      } else {
        result[key] = values.length > 1 ? values : values[0];
      }
      return result;
    }, {});
  }
};
Object.defineProperties(Headers.prototype, ["get", "entries", "forEach", "values"].reduce((result, property) => {
  result[property] = {enumerable: true};
  return result;
}, {}));
function fromRawHeaders(headers = []) {
  return new Headers(headers.reduce((result, value, index2, array) => {
    if (index2 % 2 === 0) {
      result.push(array.slice(index2, index2 + 2));
    }
    return result;
  }, []).filter(([name, value]) => {
    try {
      validateHeaderName(name);
      validateHeaderValue(name, String(value));
      return true;
    } catch {
      return false;
    }
  }));
}
var redirectStatus = new Set([301, 302, 303, 307, 308]);
var isRedirect = (code) => {
  return redirectStatus.has(code);
};
var INTERNALS$1 = Symbol("Response internals");
var Response2 = class extends Body {
  constructor(body = null, options2 = {}) {
    super(body, options2);
    const status = options2.status || 200;
    const headers = new Headers(options2.headers);
    if (body !== null && !headers.has("Content-Type")) {
      const contentType = extractContentType(body);
      if (contentType) {
        headers.append("Content-Type", contentType);
      }
    }
    this[INTERNALS$1] = {
      url: options2.url,
      status,
      statusText: options2.statusText || "",
      headers,
      counter: options2.counter,
      highWaterMark: options2.highWaterMark
    };
  }
  get url() {
    return this[INTERNALS$1].url || "";
  }
  get status() {
    return this[INTERNALS$1].status;
  }
  get ok() {
    return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
  }
  get redirected() {
    return this[INTERNALS$1].counter > 0;
  }
  get statusText() {
    return this[INTERNALS$1].statusText;
  }
  get headers() {
    return this[INTERNALS$1].headers;
  }
  get highWaterMark() {
    return this[INTERNALS$1].highWaterMark;
  }
  clone() {
    return new Response2(clone(this, this.highWaterMark), {
      url: this.url,
      status: this.status,
      statusText: this.statusText,
      headers: this.headers,
      ok: this.ok,
      redirected: this.redirected,
      size: this.size
    });
  }
  static redirect(url, status = 302) {
    if (!isRedirect(status)) {
      throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');
    }
    return new Response2(null, {
      headers: {
        location: new URL(url).toString()
      },
      status
    });
  }
  get [Symbol.toStringTag]() {
    return "Response";
  }
};
Object.defineProperties(Response2.prototype, {
  url: {enumerable: true},
  status: {enumerable: true},
  ok: {enumerable: true},
  redirected: {enumerable: true},
  statusText: {enumerable: true},
  headers: {enumerable: true},
  clone: {enumerable: true}
});
var getSearch = (parsedURL) => {
  if (parsedURL.search) {
    return parsedURL.search;
  }
  const lastOffset = parsedURL.href.length - 1;
  const hash2 = parsedURL.hash || (parsedURL.href[lastOffset] === "#" ? "#" : "");
  return parsedURL.href[lastOffset - hash2.length] === "?" ? "?" : "";
};
var INTERNALS = Symbol("Request internals");
var isRequest = (object) => {
  return typeof object === "object" && typeof object[INTERNALS] === "object";
};
var Request = class extends Body {
  constructor(input, init2 = {}) {
    let parsedURL;
    if (isRequest(input)) {
      parsedURL = new URL(input.url);
    } else {
      parsedURL = new URL(input);
      input = {};
    }
    let method = init2.method || input.method || "GET";
    method = method.toUpperCase();
    if ((init2.body != null || isRequest(input)) && input.body !== null && (method === "GET" || method === "HEAD")) {
      throw new TypeError("Request with GET/HEAD method cannot have body");
    }
    const inputBody = init2.body ? init2.body : isRequest(input) && input.body !== null ? clone(input) : null;
    super(inputBody, {
      size: init2.size || input.size || 0
    });
    const headers = new Headers(init2.headers || input.headers || {});
    if (inputBody !== null && !headers.has("Content-Type")) {
      const contentType = extractContentType(inputBody, this);
      if (contentType) {
        headers.append("Content-Type", contentType);
      }
    }
    let signal = isRequest(input) ? input.signal : null;
    if ("signal" in init2) {
      signal = init2.signal;
    }
    if (signal !== null && !isAbortSignal(signal)) {
      throw new TypeError("Expected signal to be an instanceof AbortSignal");
    }
    this[INTERNALS] = {
      method,
      redirect: init2.redirect || input.redirect || "follow",
      headers,
      parsedURL,
      signal
    };
    this.follow = init2.follow === void 0 ? input.follow === void 0 ? 20 : input.follow : init2.follow;
    this.compress = init2.compress === void 0 ? input.compress === void 0 ? true : input.compress : init2.compress;
    this.counter = init2.counter || input.counter || 0;
    this.agent = init2.agent || input.agent;
    this.highWaterMark = init2.highWaterMark || input.highWaterMark || 16384;
    this.insecureHTTPParser = init2.insecureHTTPParser || input.insecureHTTPParser || false;
  }
  get method() {
    return this[INTERNALS].method;
  }
  get url() {
    return (0, import_url.format)(this[INTERNALS].parsedURL);
  }
  get headers() {
    return this[INTERNALS].headers;
  }
  get redirect() {
    return this[INTERNALS].redirect;
  }
  get signal() {
    return this[INTERNALS].signal;
  }
  clone() {
    return new Request(this);
  }
  get [Symbol.toStringTag]() {
    return "Request";
  }
};
Object.defineProperties(Request.prototype, {
  method: {enumerable: true},
  url: {enumerable: true},
  headers: {enumerable: true},
  redirect: {enumerable: true},
  clone: {enumerable: true},
  signal: {enumerable: true}
});
var getNodeRequestOptions = (request) => {
  const {parsedURL} = request[INTERNALS];
  const headers = new Headers(request[INTERNALS].headers);
  if (!headers.has("Accept")) {
    headers.set("Accept", "*/*");
  }
  let contentLengthValue = null;
  if (request.body === null && /^(post|put)$/i.test(request.method)) {
    contentLengthValue = "0";
  }
  if (request.body !== null) {
    const totalBytes = getTotalBytes(request);
    if (typeof totalBytes === "number" && !Number.isNaN(totalBytes)) {
      contentLengthValue = String(totalBytes);
    }
  }
  if (contentLengthValue) {
    headers.set("Content-Length", contentLengthValue);
  }
  if (!headers.has("User-Agent")) {
    headers.set("User-Agent", "node-fetch");
  }
  if (request.compress && !headers.has("Accept-Encoding")) {
    headers.set("Accept-Encoding", "gzip,deflate,br");
  }
  let {agent} = request;
  if (typeof agent === "function") {
    agent = agent(parsedURL);
  }
  if (!headers.has("Connection") && !agent) {
    headers.set("Connection", "close");
  }
  const search = getSearch(parsedURL);
  const requestOptions = {
    path: parsedURL.pathname + search,
    pathname: parsedURL.pathname,
    hostname: parsedURL.hostname,
    protocol: parsedURL.protocol,
    port: parsedURL.port,
    hash: parsedURL.hash,
    search: parsedURL.search,
    query: parsedURL.query,
    href: parsedURL.href,
    method: request.method,
    headers: headers[Symbol.for("nodejs.util.inspect.custom")](),
    insecureHTTPParser: request.insecureHTTPParser,
    agent
  };
  return requestOptions;
};
var AbortError = class extends FetchBaseError {
  constructor(message, type = "aborted") {
    super(message, type);
  }
};
var supportedSchemas = new Set(["data:", "http:", "https:"]);
async function fetch2(url, options_) {
  return new Promise((resolve2, reject) => {
    const request = new Request(url, options_);
    const options2 = getNodeRequestOptions(request);
    if (!supportedSchemas.has(options2.protocol)) {
      throw new TypeError(`node-fetch cannot load ${url}. URL scheme "${options2.protocol.replace(/:$/, "")}" is not supported.`);
    }
    if (options2.protocol === "data:") {
      const data = src(request.url);
      const response2 = new Response2(data, {headers: {"Content-Type": data.typeFull}});
      resolve2(response2);
      return;
    }
    const send = (options2.protocol === "https:" ? import_https.default : import_http.default).request;
    const {signal} = request;
    let response = null;
    const abort = () => {
      const error3 = new AbortError("The operation was aborted.");
      reject(error3);
      if (request.body && request.body instanceof import_stream.default.Readable) {
        request.body.destroy(error3);
      }
      if (!response || !response.body) {
        return;
      }
      response.body.emit("error", error3);
    };
    if (signal && signal.aborted) {
      abort();
      return;
    }
    const abortAndFinalize = () => {
      abort();
      finalize();
    };
    const request_ = send(options2);
    if (signal) {
      signal.addEventListener("abort", abortAndFinalize);
    }
    const finalize = () => {
      request_.abort();
      if (signal) {
        signal.removeEventListener("abort", abortAndFinalize);
      }
    };
    request_.on("error", (err) => {
      reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, "system", err));
      finalize();
    });
    request_.on("response", (response_) => {
      request_.setTimeout(0);
      const headers = fromRawHeaders(response_.rawHeaders);
      if (isRedirect(response_.statusCode)) {
        const location = headers.get("Location");
        const locationURL = location === null ? null : new URL(location, request.url);
        switch (request.redirect) {
          case "error":
            reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect"));
            finalize();
            return;
          case "manual":
            if (locationURL !== null) {
              try {
                headers.set("Location", locationURL);
              } catch (error3) {
                reject(error3);
              }
            }
            break;
          case "follow": {
            if (locationURL === null) {
              break;
            }
            if (request.counter >= request.follow) {
              reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect"));
              finalize();
              return;
            }
            const requestOptions = {
              headers: new Headers(request.headers),
              follow: request.follow,
              counter: request.counter + 1,
              agent: request.agent,
              compress: request.compress,
              method: request.method,
              body: request.body,
              signal: request.signal,
              size: request.size
            };
            if (response_.statusCode !== 303 && request.body && options_.body instanceof import_stream.default.Readable) {
              reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
              finalize();
              return;
            }
            if (response_.statusCode === 303 || (response_.statusCode === 301 || response_.statusCode === 302) && request.method === "POST") {
              requestOptions.method = "GET";
              requestOptions.body = void 0;
              requestOptions.headers.delete("content-length");
            }
            resolve2(fetch2(new Request(locationURL, requestOptions)));
            finalize();
            return;
          }
        }
      }
      response_.once("end", () => {
        if (signal) {
          signal.removeEventListener("abort", abortAndFinalize);
        }
      });
      let body = (0, import_stream.pipeline)(response_, new import_stream.PassThrough(), (error3) => {
        reject(error3);
      });
      if (process.version < "v12.10") {
        response_.on("aborted", abortAndFinalize);
      }
      const responseOptions = {
        url: request.url,
        status: response_.statusCode,
        statusText: response_.statusMessage,
        headers,
        size: request.size,
        counter: request.counter,
        highWaterMark: request.highWaterMark
      };
      const codings = headers.get("Content-Encoding");
      if (!request.compress || request.method === "HEAD" || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {
        response = new Response2(body, responseOptions);
        resolve2(response);
        return;
      }
      const zlibOptions = {
        flush: import_zlib.default.Z_SYNC_FLUSH,
        finishFlush: import_zlib.default.Z_SYNC_FLUSH
      };
      if (codings === "gzip" || codings === "x-gzip") {
        body = (0, import_stream.pipeline)(body, import_zlib.default.createGunzip(zlibOptions), (error3) => {
          reject(error3);
        });
        response = new Response2(body, responseOptions);
        resolve2(response);
        return;
      }
      if (codings === "deflate" || codings === "x-deflate") {
        const raw = (0, import_stream.pipeline)(response_, new import_stream.PassThrough(), (error3) => {
          reject(error3);
        });
        raw.once("data", (chunk) => {
          if ((chunk[0] & 15) === 8) {
            body = (0, import_stream.pipeline)(body, import_zlib.default.createInflate(), (error3) => {
              reject(error3);
            });
          } else {
            body = (0, import_stream.pipeline)(body, import_zlib.default.createInflateRaw(), (error3) => {
              reject(error3);
            });
          }
          response = new Response2(body, responseOptions);
          resolve2(response);
        });
        return;
      }
      if (codings === "br") {
        body = (0, import_stream.pipeline)(body, import_zlib.default.createBrotliDecompress(), (error3) => {
          reject(error3);
        });
        response = new Response2(body, responseOptions);
        resolve2(response);
        return;
      }
      response = new Response2(body, responseOptions);
      resolve2(response);
    });
    writeToStream(request_, request);
  });
}
globalThis.fetch = fetch2;
globalThis.Response = Response2;
globalThis.Request = Request;
globalThis.Headers = Headers;

// node_modules/@sveltejs/kit/dist/ssr.js
var chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_$";
var unsafeChars = /[<>\b\f\n\r\t\0\u2028\u2029]/g;
var reserved = /^(?:do|if|in|for|int|let|new|try|var|byte|case|char|else|enum|goto|long|this|void|with|await|break|catch|class|const|final|float|short|super|throw|while|yield|delete|double|export|import|native|return|switch|throws|typeof|boolean|default|extends|finally|package|private|abstract|continue|debugger|function|volatile|interface|protected|transient|implements|instanceof|synchronized)$/;
var escaped$1 = {
  "<": "\\u003C",
  ">": "\\u003E",
  "/": "\\u002F",
  "\\": "\\\\",
  "\b": "\\b",
  "\f": "\\f",
  "\n": "\\n",
  "\r": "\\r",
  "	": "\\t",
  "\0": "\\0",
  "\u2028": "\\u2028",
  "\u2029": "\\u2029"
};
var objectProtoOwnPropertyNames = Object.getOwnPropertyNames(Object.prototype).sort().join("\0");
function devalue(value) {
  var counts = new Map();
  function walk(thing) {
    if (typeof thing === "function") {
      throw new Error("Cannot stringify a function");
    }
    if (counts.has(thing)) {
      counts.set(thing, counts.get(thing) + 1);
      return;
    }
    counts.set(thing, 1);
    if (!isPrimitive(thing)) {
      var type = getType(thing);
      switch (type) {
        case "Number":
        case "String":
        case "Boolean":
        case "Date":
        case "RegExp":
          return;
        case "Array":
          thing.forEach(walk);
          break;
        case "Set":
        case "Map":
          Array.from(thing).forEach(walk);
          break;
        default:
          var proto = Object.getPrototypeOf(thing);
          if (proto !== Object.prototype && proto !== null && Object.getOwnPropertyNames(proto).sort().join("\0") !== objectProtoOwnPropertyNames) {
            throw new Error("Cannot stringify arbitrary non-POJOs");
          }
          if (Object.getOwnPropertySymbols(thing).length > 0) {
            throw new Error("Cannot stringify POJOs with symbolic keys");
          }
          Object.keys(thing).forEach(function(key) {
            return walk(thing[key]);
          });
      }
    }
  }
  walk(value);
  var names = new Map();
  Array.from(counts).filter(function(entry) {
    return entry[1] > 1;
  }).sort(function(a, b) {
    return b[1] - a[1];
  }).forEach(function(entry, i) {
    names.set(entry[0], getName(i));
  });
  function stringify(thing) {
    if (names.has(thing)) {
      return names.get(thing);
    }
    if (isPrimitive(thing)) {
      return stringifyPrimitive(thing);
    }
    var type = getType(thing);
    switch (type) {
      case "Number":
      case "String":
      case "Boolean":
        return "Object(" + stringify(thing.valueOf()) + ")";
      case "RegExp":
        return "new RegExp(" + stringifyString(thing.source) + ', "' + thing.flags + '")';
      case "Date":
        return "new Date(" + thing.getTime() + ")";
      case "Array":
        var members = thing.map(function(v, i) {
          return i in thing ? stringify(v) : "";
        });
        var tail = thing.length === 0 || thing.length - 1 in thing ? "" : ",";
        return "[" + members.join(",") + tail + "]";
      case "Set":
      case "Map":
        return "new " + type + "([" + Array.from(thing).map(stringify).join(",") + "])";
      default:
        var obj = "{" + Object.keys(thing).map(function(key) {
          return safeKey(key) + ":" + stringify(thing[key]);
        }).join(",") + "}";
        var proto = Object.getPrototypeOf(thing);
        if (proto === null) {
          return Object.keys(thing).length > 0 ? "Object.assign(Object.create(null)," + obj + ")" : "Object.create(null)";
        }
        return obj;
    }
  }
  var str = stringify(value);
  if (names.size) {
    var params_1 = [];
    var statements_1 = [];
    var values_1 = [];
    names.forEach(function(name, thing) {
      params_1.push(name);
      if (isPrimitive(thing)) {
        values_1.push(stringifyPrimitive(thing));
        return;
      }
      var type = getType(thing);
      switch (type) {
        case "Number":
        case "String":
        case "Boolean":
          values_1.push("Object(" + stringify(thing.valueOf()) + ")");
          break;
        case "RegExp":
          values_1.push(thing.toString());
          break;
        case "Date":
          values_1.push("new Date(" + thing.getTime() + ")");
          break;
        case "Array":
          values_1.push("Array(" + thing.length + ")");
          thing.forEach(function(v, i) {
            statements_1.push(name + "[" + i + "]=" + stringify(v));
          });
          break;
        case "Set":
          values_1.push("new Set");
          statements_1.push(name + "." + Array.from(thing).map(function(v) {
            return "add(" + stringify(v) + ")";
          }).join("."));
          break;
        case "Map":
          values_1.push("new Map");
          statements_1.push(name + "." + Array.from(thing).map(function(_a) {
            var k = _a[0], v = _a[1];
            return "set(" + stringify(k) + ", " + stringify(v) + ")";
          }).join("."));
          break;
        default:
          values_1.push(Object.getPrototypeOf(thing) === null ? "Object.create(null)" : "{}");
          Object.keys(thing).forEach(function(key) {
            statements_1.push("" + name + safeProp(key) + "=" + stringify(thing[key]));
          });
      }
    });
    statements_1.push("return " + str);
    return "(function(" + params_1.join(",") + "){" + statements_1.join(";") + "}(" + values_1.join(",") + "))";
  } else {
    return str;
  }
}
function getName(num) {
  var name = "";
  do {
    name = chars[num % chars.length] + name;
    num = ~~(num / chars.length) - 1;
  } while (num >= 0);
  return reserved.test(name) ? name + "_" : name;
}
function isPrimitive(thing) {
  return Object(thing) !== thing;
}
function stringifyPrimitive(thing) {
  if (typeof thing === "string")
    return stringifyString(thing);
  if (thing === void 0)
    return "void 0";
  if (thing === 0 && 1 / thing < 0)
    return "-0";
  var str = String(thing);
  if (typeof thing === "number")
    return str.replace(/^(-)?0\./, "$1.");
  return str;
}
function getType(thing) {
  return Object.prototype.toString.call(thing).slice(8, -1);
}
function escapeUnsafeChar(c) {
  return escaped$1[c] || c;
}
function escapeUnsafeChars(str) {
  return str.replace(unsafeChars, escapeUnsafeChar);
}
function safeKey(key) {
  return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key) ? key : escapeUnsafeChars(JSON.stringify(key));
}
function safeProp(key) {
  return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key) ? "." + key : "[" + escapeUnsafeChars(JSON.stringify(key)) + "]";
}
function stringifyString(str) {
  var result = '"';
  for (var i = 0; i < str.length; i += 1) {
    var char = str.charAt(i);
    var code = char.charCodeAt(0);
    if (char === '"') {
      result += '\\"';
    } else if (char in escaped$1) {
      result += escaped$1[char];
    } else if (code >= 55296 && code <= 57343) {
      var next = str.charCodeAt(i + 1);
      if (code <= 56319 && (next >= 56320 && next <= 57343)) {
        result += char + str[++i];
      } else {
        result += "\\u" + code.toString(16).toUpperCase();
      }
    } else {
      result += char;
    }
  }
  result += '"';
  return result;
}
function noop() {
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
var subscriber_queue = [];
function writable(value, start = noop) {
  let stop;
  const subscribers = [];
  function set(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue.length;
        for (let i = 0; i < subscribers.length; i += 1) {
          const s2 = subscribers[i];
          s2[1]();
          subscriber_queue.push(s2, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue.length; i += 2) {
            subscriber_queue[i][0](subscriber_queue[i + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update(fn) {
    set(fn(value));
  }
  function subscribe2(run2, invalidate = noop) {
    const subscriber = [run2, invalidate];
    subscribers.push(subscriber);
    if (subscribers.length === 1) {
      stop = start(set) || noop;
    }
    run2(value);
    return () => {
      const index2 = subscribers.indexOf(subscriber);
      if (index2 !== -1) {
        subscribers.splice(index2, 1);
      }
      if (subscribers.length === 0) {
        stop();
        stop = null;
      }
    };
  }
  return {set, update, subscribe: subscribe2};
}
function hash(value) {
  let hash2 = 5381;
  let i = value.length;
  if (typeof value === "string") {
    while (i)
      hash2 = hash2 * 33 ^ value.charCodeAt(--i);
  } else {
    while (i)
      hash2 = hash2 * 33 ^ value[--i];
  }
  return (hash2 >>> 0).toString(36);
}
var s$1 = JSON.stringify;
async function render_response({
  options: options2,
  $session,
  page_config,
  status,
  error: error3,
  branch,
  page
}) {
  const css2 = new Set(options2.entry.css);
  const js = new Set(options2.entry.js);
  const styles = new Set();
  const serialized_data = [];
  let rendered;
  let is_private = false;
  let maxage;
  if (error3) {
    error3.stack = options2.get_stack(error3);
  }
  if (branch) {
    branch.forEach(({node, loaded, fetched, uses_credentials}) => {
      if (node.css)
        node.css.forEach((url) => css2.add(url));
      if (node.js)
        node.js.forEach((url) => js.add(url));
      if (node.styles)
        node.styles.forEach((content) => styles.add(content));
      if (fetched && page_config.hydrate)
        serialized_data.push(...fetched);
      if (uses_credentials)
        is_private = true;
      maxage = loaded.maxage;
    });
    const session2 = writable($session);
    const props = {
      stores: {
        page: writable(null),
        navigating: writable(null),
        session: session2
      },
      page,
      components: branch.map(({node}) => node.module.default)
    };
    for (let i = 0; i < branch.length; i += 1) {
      props[`props_${i}`] = await branch[i].loaded.props;
    }
    let session_tracking_active = false;
    const unsubscribe = session2.subscribe(() => {
      if (session_tracking_active)
        is_private = true;
    });
    session_tracking_active = true;
    try {
      rendered = options2.root.render(props);
    } finally {
      unsubscribe();
    }
  } else {
    rendered = {head: "", html: "", css: ""};
  }
  const include_js = page_config.router || page_config.hydrate;
  if (!include_js)
    js.clear();
  const links = options2.amp ? styles.size > 0 ? `<style amp-custom>${Array.from(styles).join("\n")}</style>` : "" : [
    ...Array.from(js).map((dep) => `<link rel="modulepreload" href="${dep}">`),
    ...Array.from(css2).map((dep) => `<link rel="stylesheet" href="${dep}">`)
  ].join("\n		");
  let init2 = "";
  if (options2.amp) {
    init2 = `
		<style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style>
		<noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>
		<script async src="https://cdn.ampproject.org/v0.js"></script>`;
  } else if (include_js) {
    init2 = `<script type="module">
			import { start } from ${s$1(options2.entry.file)};
			start({
				target: ${options2.target ? `document.querySelector(${s$1(options2.target)})` : "document.body"},
				paths: ${s$1(options2.paths)},
				session: ${try_serialize($session, (error4) => {
      throw new Error(`Failed to serialize session data: ${error4.message}`);
    })},
				host: ${page && page.host ? s$1(page.host) : "location.host"},
				route: ${!!page_config.router},
				spa: ${!page_config.ssr},
				hydrate: ${page_config.ssr && page_config.hydrate ? `{
					status: ${status},
					error: ${serialize_error(error3)},
					nodes: [
						${branch.map(({node}) => `import(${s$1(node.entry)})`).join(",\n						")}
					],
					page: {
						host: ${page.host ? s$1(page.host) : "location.host"}, // TODO this is redundant
						path: ${s$1(page.path)},
						query: new URLSearchParams(${s$1(page.query.toString())}),
						params: ${s$1(page.params)}
					}
				}` : "null"}
			});
		</script>`;
  }
  const head = [
    rendered.head,
    styles.size && !options2.amp ? `<style data-svelte>${Array.from(styles).join("\n")}</style>` : "",
    links,
    init2
  ].join("\n\n		");
  const body = options2.amp ? rendered.html : `${rendered.html}

			${serialized_data.map(({url, body: body2, json}) => {
    return body2 ? `<script type="svelte-data" url="${url}" body="${hash(body2)}">${json}</script>` : `<script type="svelte-data" url="${url}">${json}</script>`;
  }).join("\n\n			")}
		`.replace(/^\t{2}/gm, "");
  const headers = {
    "content-type": "text/html"
  };
  if (maxage) {
    headers["cache-control"] = `${is_private ? "private" : "public"}, max-age=${maxage}`;
  }
  if (!options2.floc) {
    headers["permissions-policy"] = "interest-cohort=()";
  }
  return {
    status,
    headers,
    body: options2.template({head, body})
  };
}
function try_serialize(data, fail) {
  try {
    return devalue(data);
  } catch (err) {
    if (fail)
      fail(err);
    return null;
  }
}
function serialize_error(error3) {
  if (!error3)
    return null;
  let serialized = try_serialize(error3);
  if (!serialized) {
    const {name, message, stack} = error3;
    serialized = try_serialize({name, message, stack});
  }
  if (!serialized) {
    serialized = "{}";
  }
  return serialized;
}
function normalize(loaded) {
  if (loaded.error) {
    const error3 = typeof loaded.error === "string" ? new Error(loaded.error) : loaded.error;
    const status = loaded.status;
    if (!(error3 instanceof Error)) {
      return {
        status: 500,
        error: new Error(`"error" property returned from load() must be a string or instance of Error, received type "${typeof error3}"`)
      };
    }
    if (!status || status < 400 || status > 599) {
      console.warn('"error" returned from load() without a valid status code \u2014 defaulting to 500');
      return {status: 500, error: error3};
    }
    return {status, error: error3};
  }
  if (loaded.redirect) {
    if (!loaded.status || Math.floor(loaded.status / 100) !== 3) {
      return {
        status: 500,
        error: new Error('"redirect" property returned from load() must be accompanied by a 3xx status code')
      };
    }
    if (typeof loaded.redirect !== "string") {
      return {
        status: 500,
        error: new Error('"redirect" property returned from load() must be a string')
      };
    }
  }
  return loaded;
}
function resolve(base, path) {
  const baseparts = path[0] === "/" ? [] : base.slice(1).split("/");
  const pathparts = path[0] === "/" ? path.slice(1).split("/") : path.split("/");
  baseparts.pop();
  for (let i = 0; i < pathparts.length; i += 1) {
    const part = pathparts[i];
    if (part === ".")
      continue;
    else if (part === "..")
      baseparts.pop();
    else
      baseparts.push(part);
  }
  return `/${baseparts.join("/")}`;
}
var s = JSON.stringify;
async function load_node({
  request,
  options: options2,
  state,
  route,
  page,
  node,
  $session,
  context,
  is_leaf,
  is_error,
  status,
  error: error3
}) {
  const {module: module2} = node;
  let uses_credentials = false;
  const fetched = [];
  let loaded;
  if (module2.load) {
    const load_input = {
      page,
      get session() {
        uses_credentials = true;
        return $session;
      },
      fetch: async (resource, opts = {}) => {
        let url;
        if (typeof resource === "string") {
          url = resource;
        } else {
          url = resource.url;
          opts = {
            method: resource.method,
            headers: resource.headers,
            body: resource.body,
            mode: resource.mode,
            credentials: resource.credentials,
            cache: resource.cache,
            redirect: resource.redirect,
            referrer: resource.referrer,
            integrity: resource.integrity,
            ...opts
          };
        }
        if (options2.read && url.startsWith(options2.paths.assets)) {
          url = url.replace(options2.paths.assets, "");
        }
        if (url.startsWith("//")) {
          throw new Error(`Cannot request protocol-relative URL (${url}) in server-side fetch`);
        }
        let response;
        if (/^[a-zA-Z]+:/.test(url)) {
          response = await fetch(url, opts);
        } else {
          const [path, search] = url.split("?");
          const resolved = resolve(request.path, path);
          const filename = resolved.slice(1);
          const filename_html = `${filename}/index.html`;
          const asset = options2.manifest.assets.find((d) => d.file === filename || d.file === filename_html);
          if (asset) {
            if (options2.read) {
              response = new Response(options2.read(asset.file), {
                headers: {
                  "content-type": asset.type
                }
              });
            } else {
              response = await fetch(`http://${page.host}/${asset.file}`, opts);
            }
          }
          if (!response) {
            const headers = {...opts.headers};
            if (opts.credentials !== "omit") {
              uses_credentials = true;
              headers.cookie = request.headers.cookie;
              if (!headers.authorization) {
                headers.authorization = request.headers.authorization;
              }
            }
            if (opts.body && typeof opts.body !== "string") {
              throw new Error("Request body must be a string");
            }
            const rendered = await respond({
              host: request.host,
              method: opts.method || "GET",
              headers,
              path: resolved,
              rawBody: opts.body,
              query: new URLSearchParams(search)
            }, options2, {
              fetched: url,
              initiator: route
            });
            if (rendered) {
              if (state.prerender) {
                state.prerender.dependencies.set(resolved, rendered);
              }
              response = new Response(rendered.body, {
                status: rendered.status,
                headers: rendered.headers
              });
            }
          }
        }
        if (response) {
          const proxy = new Proxy(response, {
            get(response2, key, receiver) {
              async function text() {
                const body = await response2.text();
                const headers = {};
                for (const [key2, value] of response2.headers) {
                  if (key2 !== "etag" && key2 !== "set-cookie")
                    headers[key2] = value;
                }
                if (!opts.body || typeof opts.body === "string") {
                  fetched.push({
                    url,
                    body: opts.body,
                    json: `{"status":${response2.status},"statusText":${s(response2.statusText)},"headers":${s(headers)},"body":${escape2(body)}}`
                  });
                }
                return body;
              }
              if (key === "text") {
                return text;
              }
              if (key === "json") {
                return async () => {
                  return JSON.parse(await text());
                };
              }
              return Reflect.get(response2, key, response2);
            }
          });
          return proxy;
        }
        return response || new Response("Not found", {
          status: 404
        });
      },
      context: {...context}
    };
    if (is_error) {
      load_input.status = status;
      load_input.error = error3;
    }
    loaded = await module2.load.call(null, load_input);
  } else {
    loaded = {};
  }
  if (!loaded && is_leaf && !is_error)
    return;
  return {
    node,
    loaded: normalize(loaded),
    context: loaded.context || context,
    fetched,
    uses_credentials
  };
}
var escaped = {
  "<": "\\u003C",
  ">": "\\u003E",
  "/": "\\u002F",
  "\\": "\\\\",
  "\b": "\\b",
  "\f": "\\f",
  "\n": "\\n",
  "\r": "\\r",
  "	": "\\t",
  "\0": "\\0",
  "\u2028": "\\u2028",
  "\u2029": "\\u2029"
};
function escape2(str) {
  let result = '"';
  for (let i = 0; i < str.length; i += 1) {
    const char = str.charAt(i);
    const code = char.charCodeAt(0);
    if (char === '"') {
      result += '\\"';
    } else if (char in escaped) {
      result += escaped[char];
    } else if (code >= 55296 && code <= 57343) {
      const next = str.charCodeAt(i + 1);
      if (code <= 56319 && next >= 56320 && next <= 57343) {
        result += char + str[++i];
      } else {
        result += `\\u${code.toString(16).toUpperCase()}`;
      }
    } else {
      result += char;
    }
  }
  result += '"';
  return result;
}
async function respond_with_error({request, options: options2, state, $session, status, error: error3}) {
  const default_layout = await options2.load_component(options2.manifest.layout);
  const default_error = await options2.load_component(options2.manifest.error);
  const page = {
    host: request.host,
    path: request.path,
    query: request.query,
    params: {}
  };
  const loaded = await load_node({
    request,
    options: options2,
    state,
    route: null,
    page,
    node: default_layout,
    $session,
    context: {},
    is_leaf: false,
    is_error: false
  });
  const branch = [
    loaded,
    await load_node({
      request,
      options: options2,
      state,
      route: null,
      page,
      node: default_error,
      $session,
      context: loaded.context,
      is_leaf: false,
      is_error: true,
      status,
      error: error3
    })
  ];
  try {
    return await render_response({
      options: options2,
      $session,
      page_config: {
        hydrate: options2.hydrate,
        router: options2.router,
        ssr: options2.ssr
      },
      status,
      error: error3,
      branch,
      page
    });
  } catch (error4) {
    options2.handle_error(error4);
    return {
      status: 500,
      headers: {},
      body: error4.stack
    };
  }
}
async function respond$1({request, options: options2, state, $session, route}) {
  const match = route.pattern.exec(request.path);
  const params = route.params(match);
  const page = {
    host: request.host,
    path: request.path,
    query: request.query,
    params
  };
  let nodes;
  try {
    nodes = await Promise.all(route.a.map((id) => id && options2.load_component(id)));
  } catch (error4) {
    options2.handle_error(error4);
    return await respond_with_error({
      request,
      options: options2,
      state,
      $session,
      status: 500,
      error: error4
    });
  }
  const leaf = nodes[nodes.length - 1].module;
  const page_config = {
    ssr: "ssr" in leaf ? leaf.ssr : options2.ssr,
    router: "router" in leaf ? leaf.router : options2.router,
    hydrate: "hydrate" in leaf ? leaf.hydrate : options2.hydrate
  };
  if (!leaf.prerender && state.prerender && !state.prerender.all) {
    return {
      status: 204,
      headers: {},
      body: null
    };
  }
  let branch;
  let status = 200;
  let error3;
  ssr:
    if (page_config.ssr) {
      let context = {};
      branch = [];
      for (let i = 0; i < nodes.length; i += 1) {
        const node = nodes[i];
        let loaded;
        if (node) {
          try {
            loaded = await load_node({
              request,
              options: options2,
              state,
              route,
              page,
              node,
              $session,
              context,
              is_leaf: i === nodes.length - 1,
              is_error: false
            });
            if (!loaded)
              return;
            if (loaded.loaded.redirect) {
              return {
                status: loaded.loaded.status,
                headers: {
                  location: encodeURI(loaded.loaded.redirect)
                }
              };
            }
            if (loaded.loaded.error) {
              ({status, error: error3} = loaded.loaded);
            }
          } catch (e) {
            options2.handle_error(e);
            status = 500;
            error3 = e;
          }
          if (error3) {
            while (i--) {
              if (route.b[i]) {
                const error_node = await options2.load_component(route.b[i]);
                let error_loaded;
                let node_loaded;
                let j = i;
                while (!(node_loaded = branch[j])) {
                  j -= 1;
                }
                try {
                  error_loaded = await load_node({
                    request,
                    options: options2,
                    state,
                    route,
                    page,
                    node: error_node,
                    $session,
                    context: node_loaded.context,
                    is_leaf: false,
                    is_error: true,
                    status,
                    error: error3
                  });
                  if (error_loaded.loaded.error) {
                    continue;
                  }
                  branch = branch.slice(0, j + 1).concat(error_loaded);
                  break ssr;
                } catch (e) {
                  options2.handle_error(e);
                  continue;
                }
              }
            }
            return await respond_with_error({
              request,
              options: options2,
              state,
              $session,
              status,
              error: error3
            });
          }
        }
        branch.push(loaded);
        if (loaded && loaded.loaded.context) {
          context = {
            ...context,
            ...loaded.loaded.context
          };
        }
      }
    }
  try {
    return await render_response({
      options: options2,
      $session,
      page_config,
      status,
      error: error3,
      branch: branch && branch.filter(Boolean),
      page
    });
  } catch (error4) {
    options2.handle_error(error4);
    return await respond_with_error({
      request,
      options: options2,
      state,
      $session,
      status: 500,
      error: error4
    });
  }
}
async function render_page(request, route, options2, state) {
  if (state.initiator === route) {
    return {
      status: 404,
      headers: {},
      body: `Not found: ${request.path}`
    };
  }
  const $session = await options2.hooks.getSession(request);
  if (route) {
    const response = await respond$1({
      request,
      options: options2,
      state,
      $session,
      route
    });
    if (response) {
      return response;
    }
    if (state.fetched) {
      return {
        status: 500,
        headers: {},
        body: `Bad request in load function: failed to fetch ${state.fetched}`
      };
    }
  } else {
    return await respond_with_error({
      request,
      options: options2,
      state,
      $session,
      status: 404,
      error: new Error(`Not found: ${request.path}`)
    });
  }
}
function lowercase_keys(obj) {
  const clone2 = {};
  for (const key in obj) {
    clone2[key.toLowerCase()] = obj[key];
  }
  return clone2;
}
function error(body) {
  return {
    status: 500,
    body,
    headers: {}
  };
}
async function render_route(request, route) {
  const mod = await route.load();
  const handler = mod[request.method.toLowerCase().replace("delete", "del")];
  if (handler) {
    const match = route.pattern.exec(request.path);
    const params = route.params(match);
    const response = await handler({...request, params});
    if (response) {
      if (typeof response !== "object") {
        return error(`Invalid response from route ${request.path}: expected an object, got ${typeof response}`);
      }
      let {status = 200, body, headers = {}} = response;
      headers = lowercase_keys(headers);
      const type = headers["content-type"];
      if (type === "application/octet-stream" && !(body instanceof Uint8Array)) {
        return error(`Invalid response from route ${request.path}: body must be an instance of Uint8Array if content type is application/octet-stream`);
      }
      if (body instanceof Uint8Array && type !== "application/octet-stream") {
        return error(`Invalid response from route ${request.path}: Uint8Array body must be accompanied by content-type: application/octet-stream header`);
      }
      let normalized_body;
      if (typeof body === "object" && (!type || type === "application/json")) {
        headers = {...headers, "content-type": "application/json"};
        normalized_body = JSON.stringify(body);
      } else {
        normalized_body = body;
      }
      return {status, body: normalized_body, headers};
    }
  }
}
function read_only_form_data() {
  const map = new Map();
  return {
    append(key, value) {
      if (map.has(key)) {
        map.get(key).push(value);
      } else {
        map.set(key, [value]);
      }
    },
    data: new ReadOnlyFormData(map)
  };
}
var ReadOnlyFormData = class {
  #map;
  constructor(map) {
    this.#map = map;
  }
  get(key) {
    const value = this.#map.get(key);
    return value && value[0];
  }
  getAll(key) {
    return this.#map.get(key);
  }
  has(key) {
    return this.#map.has(key);
  }
  *[Symbol.iterator]() {
    for (const [key, value] of this.#map) {
      for (let i = 0; i < value.length; i += 1) {
        yield [key, value[i]];
      }
    }
  }
  *entries() {
    for (const [key, value] of this.#map) {
      for (let i = 0; i < value.length; i += 1) {
        yield [key, value[i]];
      }
    }
  }
  *keys() {
    for (const [key, value] of this.#map) {
      for (let i = 0; i < value.length; i += 1) {
        yield key;
      }
    }
  }
  *values() {
    for (const [, value] of this.#map) {
      for (let i = 0; i < value.length; i += 1) {
        yield value;
      }
    }
  }
};
function parse_body(req) {
  const raw = req.rawBody;
  if (!raw)
    return raw;
  const [type, ...directives] = req.headers["content-type"].split(/;\s*/);
  if (typeof raw === "string") {
    switch (type) {
      case "text/plain":
        return raw;
      case "application/json":
        return JSON.parse(raw);
      case "application/x-www-form-urlencoded":
        return get_urlencoded(raw);
      case "multipart/form-data": {
        const boundary = directives.find((directive) => directive.startsWith("boundary="));
        if (!boundary)
          throw new Error("Missing boundary");
        return get_multipart(raw, boundary.slice("boundary=".length));
      }
      default:
        throw new Error(`Invalid Content-Type ${type}`);
    }
  }
  return raw;
}
function get_urlencoded(text) {
  const {data, append} = read_only_form_data();
  text.replace(/\+/g, " ").split("&").forEach((str) => {
    const [key, value] = str.split("=");
    append(decodeURIComponent(key), decodeURIComponent(value));
  });
  return data;
}
function get_multipart(text, boundary) {
  const parts = text.split(`--${boundary}`);
  const nope = () => {
    throw new Error("Malformed form data");
  };
  if (parts[0] !== "" || parts[parts.length - 1].trim() !== "--") {
    nope();
  }
  const {data, append} = read_only_form_data();
  parts.slice(1, -1).forEach((part) => {
    const match = /\s*([\s\S]+?)\r\n\r\n([\s\S]*)\s*/.exec(part);
    const raw_headers = match[1];
    const body = match[2].trim();
    let key;
    raw_headers.split("\r\n").forEach((str) => {
      const [raw_header, ...raw_directives] = str.split("; ");
      let [name, value] = raw_header.split(": ");
      name = name.toLowerCase();
      const directives = {};
      raw_directives.forEach((raw_directive) => {
        const [name2, value2] = raw_directive.split("=");
        directives[name2] = JSON.parse(value2);
      });
      if (name === "content-disposition") {
        if (value !== "form-data")
          nope();
        if (directives.filename) {
          throw new Error("File upload is not yet implemented");
        }
        if (directives.name) {
          key = directives.name;
        }
      }
    });
    if (!key)
      nope();
    append(key, body);
  });
  return data;
}
async function respond(incoming, options2, state = {}) {
  if (incoming.path.endsWith("/") && incoming.path !== "/") {
    const q = incoming.query.toString();
    return {
      status: 301,
      headers: {
        location: encodeURI(incoming.path.slice(0, -1) + (q ? `?${q}` : ""))
      }
    };
  }
  try {
    return await options2.hooks.handle({
      request: {
        ...incoming,
        headers: lowercase_keys(incoming.headers),
        body: parse_body(incoming),
        params: null,
        locals: {}
      },
      render: async (request) => {
        if (state.prerender && state.prerender.fallback) {
          return await render_response({
            options: options2,
            $session: await options2.hooks.getSession(request),
            page_config: {ssr: false, router: true, hydrate: true},
            status: 200,
            error: null,
            branch: [],
            page: null
          });
        }
        for (const route of options2.manifest.routes) {
          if (!route.pattern.test(request.path))
            continue;
          const response = route.type === "endpoint" ? await render_route(request, route) : await render_page(request, route, options2, state);
          if (response) {
            if (response.status === 200) {
              if (!/(no-store|immutable)/.test(response.headers["cache-control"])) {
                const etag = `"${hash(response.body)}"`;
                if (request.headers["if-none-match"] === etag) {
                  return {
                    status: 304,
                    headers: {},
                    body: null
                  };
                }
                response.headers["etag"] = etag;
              }
            }
            return response;
          }
        }
        return await render_page(request, null, options2, state);
      }
    });
  } catch (e) {
    options2.handle_error(e);
    return {
      status: 500,
      headers: {},
      body: options2.dev ? e.stack : e.message
    };
  }
}

// node_modules/svelte/internal/index.mjs
function noop2() {
}
function run(fn) {
  return fn();
}
function blank_object() {
  return Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal2(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
function subscribe(store, ...callbacks) {
  if (store == null) {
    return noop2;
  }
  const unsub = store.subscribe(...callbacks);
  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function set_store_value(store, ret, value = ret) {
  store.set(value);
  return ret;
}
var tasks = new Set();
var nodes_to_detach = new Set();
function custom_event(type, detail) {
  const e = document.createEvent("CustomEvent");
  e.initCustomEvent(type, false, false, detail);
  return e;
}
var active_docs = new Set();
var current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function onMount(fn) {
  get_current_component().$$.on_mount.push(fn);
}
function afterUpdate(fn) {
  get_current_component().$$.after_update.push(fn);
}
function createEventDispatcher() {
  const component = get_current_component();
  return (type, detail) => {
    const callbacks = component.$$.callbacks[type];
    if (callbacks) {
      const event = custom_event(type, detail);
      callbacks.slice().forEach((fn) => {
        fn.call(component, event);
      });
    }
  };
}
function setContext(key, context) {
  get_current_component().$$.context.set(key, context);
}
function getContext(key) {
  return get_current_component().$$.context.get(key);
}
var resolved_promise = Promise.resolve();
var seen_callbacks = new Set();
var outroing = new Set();
var globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : global;
var boolean_attributes = new Set([
  "allowfullscreen",
  "allowpaymentrequest",
  "async",
  "autofocus",
  "autoplay",
  "checked",
  "controls",
  "default",
  "defer",
  "disabled",
  "formnovalidate",
  "hidden",
  "ismap",
  "loop",
  "multiple",
  "muted",
  "nomodule",
  "novalidate",
  "open",
  "playsinline",
  "readonly",
  "required",
  "reversed",
  "selected"
]);
var escaped2 = {
  '"': "&quot;",
  "'": "&#39;",
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;"
};
function escape3(html) {
  return String(html).replace(/["'&<>]/g, (match) => escaped2[match]);
}
function each(items, fn) {
  let str = "";
  for (let i = 0; i < items.length; i += 1) {
    str += fn(items[i], i);
  }
  return str;
}
var missing_component = {
  $$render: () => ""
};
function validate_component(component, name) {
  if (!component || !component.$$render) {
    if (name === "svelte:component")
      name += " this={...}";
    throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);
  }
  return component;
}
var on_destroy;
function create_ssr_component(fn) {
  function $$render(result, props, bindings, slots, context) {
    const parent_component = current_component;
    const $$ = {
      on_destroy,
      context: new Map(parent_component ? parent_component.$$.context : context || []),
      on_mount: [],
      before_update: [],
      after_update: [],
      callbacks: blank_object()
    };
    set_current_component({$$});
    const html = fn(result, props, bindings, slots);
    set_current_component(parent_component);
    return html;
  }
  return {
    render: (props = {}, {$$slots = {}, context = new Map()} = {}) => {
      on_destroy = [];
      const result = {title: "", head: "", css: new Set()};
      const html = $$render(result, props, {}, $$slots, context);
      run_all(on_destroy);
      return {
        html,
        css: {
          code: Array.from(result.css).map((css2) => css2.code).join("\n"),
          map: null
        },
        head: result.title + result.head
      };
    },
    $$render
  };
}
function add_attribute(name, value, boolean) {
  if (value == null || boolean && !value)
    return "";
  return ` ${name}${value === true ? "" : `=${typeof value === "string" ? JSON.stringify(escape3(value)) : `"${value}"`}`}`;
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
var SvelteElement;
if (typeof HTMLElement === "function") {
  SvelteElement = class extends HTMLElement {
    constructor() {
      super();
      this.attachShadow({mode: "open"});
    }
    connectedCallback() {
      const {on_mount} = this.$$;
      this.$$.on_disconnect = on_mount.map(run).filter(is_function);
      for (const key in this.$$.slotted) {
        this.appendChild(this.$$.slotted[key]);
      }
    }
    attributeChangedCallback(attr, _oldValue, newValue) {
      this[attr] = newValue;
    }
    disconnectedCallback() {
      run_all(this.$$.on_disconnect);
    }
    $destroy() {
      destroy_component(this, 1);
      this.$destroy = noop2;
    }
    $on(type, callback) {
      const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
      callbacks.push(callback);
      return () => {
        const index2 = callbacks.indexOf(callback);
        if (index2 !== -1)
          callbacks.splice(index2, 1);
      };
    }
    $set($$props) {
      if (this.$$set && !is_empty($$props)) {
        this.$$.skip_bound = true;
        this.$$set($$props);
        this.$$.skip_bound = false;
      }
    }
  };
}

// .svelte-kit/output/server/app.js
var import_js_cookie = __toModule(require_js_cookie());
var import_app = __toModule(require_index_cjs4());
var import_auth = __toModule(require_index_cjs5());
var import_firestore = __toModule(require_index_cjs6());
var import_auth2 = __toModule(require_node());
var import_date_fns = __toModule(require_date_fns());

// node_modules/svelte/store/index.mjs
var subscriber_queue2 = [];
function writable2(value, start = noop2) {
  let stop;
  const subscribers = [];
  function set(new_value) {
    if (safe_not_equal2(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue2.length;
        for (let i = 0; i < subscribers.length; i += 1) {
          const s2 = subscribers[i];
          s2[1]();
          subscriber_queue2.push(s2, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue2.length; i += 2) {
            subscriber_queue2[i][0](subscriber_queue2[i + 1]);
          }
          subscriber_queue2.length = 0;
        }
      }
    }
  }
  function update(fn) {
    set(fn(value));
  }
  function subscribe2(run2, invalidate = noop2) {
    const subscriber = [run2, invalidate];
    subscribers.push(subscriber);
    if (subscribers.length === 1) {
      stop = start(set) || noop2;
    }
    run2(value);
    return () => {
      const index2 = subscribers.indexOf(subscriber);
      if (index2 !== -1) {
        subscribers.splice(index2, 1);
      }
      if (subscribers.length === 0) {
        stop();
        stop = null;
      }
    };
  }
  return {set, update, subscribe: subscribe2};
}

// .svelte-kit/output/server/app.js
var css$e = {
  code: "#svelte-announcer.svelte-1pdgbjn{clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;left:0;overflow:hidden;position:absolute;top:0;white-space:nowrap;width:1px}",
  map: `{"version":3,"file":"root.svelte","sources":["root.svelte"],"sourcesContent":["<!-- This file is generated by @sveltejs/kit \u2014 do not edit it! -->\\n<script>\\n\\timport { setContext, afterUpdate, onMount } from 'svelte';\\n\\n\\t// stores\\n\\texport let stores;\\n\\texport let page;\\n\\n\\texport let components;\\n\\texport let props_0 = null;\\n\\texport let props_1 = null;\\n\\texport let props_2 = null;\\n\\n\\tsetContext('__svelte__', stores);\\n\\n\\t$: stores.page.set(page);\\n\\tafterUpdate(stores.page.notify);\\n\\n\\tlet mounted = false;\\n\\tlet navigated = false;\\n\\tlet title = null;\\n\\n\\tonMount(() => {\\n\\t\\tconst unsubscribe = stores.page.subscribe(() => {\\n\\t\\t\\tif (mounted) {\\n\\t\\t\\t\\tnavigated = true;\\n\\t\\t\\t\\ttitle = document.title || 'untitled page';\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tmounted = true;\\n\\t\\treturn unsubscribe;\\n\\t});\\n</script>\\n\\n<svelte:component this={components[0]} {...(props_0 || {})}>\\n\\t{#if components[1]}\\n\\t\\t<svelte:component this={components[1]} {...(props_1 || {})}>\\n\\t\\t\\t{#if components[2]}\\n\\t\\t\\t\\t<svelte:component this={components[2]} {...(props_2 || {})}/>\\n\\t\\t\\t{/if}\\n\\t\\t</svelte:component>\\n\\t{/if}\\n</svelte:component>\\n\\n{#if mounted}\\n\\t<div id=\\"svelte-announcer\\" aria-live=\\"assertive\\" aria-atomic=\\"true\\">\\n\\t\\t{#if navigated}\\n\\t\\t\\t{title}\\n\\t\\t{/if}\\n\\t</div>\\n{/if}\\n\\n<style>#svelte-announcer{clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;left:0;overflow:hidden;position:absolute;top:0;white-space:nowrap;width:1px}</style>"],"names":[],"mappings":"AAqDO,gCAAiB,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,kBAAkB,MAAM,GAAG,CAAC,CAAC,UAAU,MAAM,GAAG,CAAC,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,CAAC,SAAS,MAAM,CAAC,SAAS,QAAQ,CAAC,IAAI,CAAC,CAAC,YAAY,MAAM,CAAC,MAAM,GAAG,CAAC"}`
};
var Root = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {stores} = $$props;
  let {page} = $$props;
  let {components} = $$props;
  let {props_0 = null} = $$props;
  let {props_1 = null} = $$props;
  let {props_2 = null} = $$props;
  setContext("__svelte__", stores);
  afterUpdate(stores.page.notify);
  let mounted = false;
  let navigated = false;
  let title = null;
  onMount(() => {
    const unsubscribe = stores.page.subscribe(() => {
      if (mounted) {
        navigated = true;
        title = document.title || "untitled page";
      }
    });
    mounted = true;
    return unsubscribe;
  });
  if ($$props.stores === void 0 && $$bindings.stores && stores !== void 0)
    $$bindings.stores(stores);
  if ($$props.page === void 0 && $$bindings.page && page !== void 0)
    $$bindings.page(page);
  if ($$props.components === void 0 && $$bindings.components && components !== void 0)
    $$bindings.components(components);
  if ($$props.props_0 === void 0 && $$bindings.props_0 && props_0 !== void 0)
    $$bindings.props_0(props_0);
  if ($$props.props_1 === void 0 && $$bindings.props_1 && props_1 !== void 0)
    $$bindings.props_1(props_1);
  if ($$props.props_2 === void 0 && $$bindings.props_2 && props_2 !== void 0)
    $$bindings.props_2(props_2);
  $$result.css.add(css$e);
  {
    stores.page.set(page);
  }
  return `


${validate_component(components[0] || missing_component, "svelte:component").$$render($$result, Object.assign(props_0 || {}), {}, {
    default: () => `${components[1] ? `${validate_component(components[1] || missing_component, "svelte:component").$$render($$result, Object.assign(props_1 || {}), {}, {
      default: () => `${components[2] ? `${validate_component(components[2] || missing_component, "svelte:component").$$render($$result, Object.assign(props_2 || {}), {}, {})}` : ``}`
    })}` : ``}`
  })}

${mounted ? `<div id="${"svelte-announcer"}" aria-live="${"assertive"}" aria-atomic="${"true"}" class="${"svelte-1pdgbjn"}">${navigated ? `${escape3(title)}` : ``}</div>` : ``}`;
});
function set_paths(paths) {
}
function set_prerendering(value) {
}
var user_hooks = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module"
});
var template = ({head, body}) => '<!DOCTYPE html>\n<html lang="en">\n	<head>\n		<meta charset="utf-8" />\n		<link rel="icon" href="/favicon.ico" />\n\n		<link rel="preconnect" href="https://fonts.gstatic.com">\n		<link href="https://fonts.googleapis.com/css2?family=Teko:wght@300;400;500;600;700&display=swap" rel="stylesheet">\n\n		\n		<meta name="viewport" content="width=device-width, initial-scale=1" />\n		' + head + '\n	</head>\n	<body>\n		<div id="svelte">' + body + "</div>\n	</body>\n</html>\n";
var options = null;
function init(settings) {
  set_paths(settings.paths);
  set_prerendering(settings.prerendering || false);
  options = {
    amp: false,
    dev: false,
    entry: {
      file: "/./_app/start-3ba165c6.js",
      css: ["/./_app/assets/start-0826e215.css", "/./_app/assets/vendor-d4876607.css"],
      js: ["/./_app/start-3ba165c6.js", "/./_app/chunks/vendor-ce82561a.js", "/./_app/chunks/singletons-bb9012b7.js"]
    },
    fetched: void 0,
    floc: false,
    get_component_path: (id) => "/./_app/" + entry_lookup[id],
    get_stack: (error22) => String(error22),
    handle_error: (error22) => {
      console.error(error22.stack);
      error22.stack = options.get_stack(error22);
    },
    hooks: get_hooks(user_hooks),
    hydrate: true,
    initiator: void 0,
    load_component,
    manifest,
    paths: settings.paths,
    read: settings.read,
    root: Root,
    router: true,
    ssr: true,
    target: "#svelte",
    template
  };
}
var empty = () => ({});
var manifest = {
  assets: [],
  layout: "src/routes/__layout.svelte",
  error: ".svelte-kit/build/components/error.svelte",
  routes: [
    {
      type: "page",
      pattern: /^\/$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/index.svelte"],
      b: [".svelte-kit/build/components/error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/dashboard\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/dashboard/index.svelte"],
      b: [".svelte-kit/build/components/error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/register\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/register/index.svelte"],
      b: [".svelte-kit/build/components/error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/login\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/login/index.svelte"],
      b: [".svelte-kit/build/components/error.svelte"]
    }
  ]
};
var get_hooks = (hooks) => ({
  getSession: hooks.getSession || (() => ({})),
  handle: hooks.handle || (({request, render: render2}) => render2(request))
});
var module_lookup = {
  "src/routes/__layout.svelte": () => Promise.resolve().then(function() {
    return __layout;
  }),
  ".svelte-kit/build/components/error.svelte": () => Promise.resolve().then(function() {
    return error2;
  }),
  "src/routes/index.svelte": () => Promise.resolve().then(function() {
    return index$3;
  }),
  "src/routes/dashboard/index.svelte": () => Promise.resolve().then(function() {
    return index$2;
  }),
  "src/routes/register/index.svelte": () => Promise.resolve().then(function() {
    return index$1;
  }),
  "src/routes/login/index.svelte": () => Promise.resolve().then(function() {
    return index;
  })
};
var metadata_lookup = {"src/routes/__layout.svelte": {entry: "/./_app/pages/__layout.svelte-d0913c1d.js", css: ["/./_app/assets/pages/__layout.svelte-1a74d921.css", "/./_app/assets/vendor-d4876607.css"], js: ["/./_app/pages/__layout.svelte-d0913c1d.js", "/./_app/chunks/vendor-ce82561a.js", "/./_app/chunks/stores-62b324a6.js"], styles: null}, ".svelte-kit/build/components/error.svelte": {entry: "/./_app/error.svelte-d0609c39.js", css: ["/./_app/assets/vendor-d4876607.css"], js: ["/./_app/error.svelte-d0609c39.js", "/./_app/chunks/vendor-ce82561a.js"], styles: null}, "src/routes/index.svelte": {entry: "/./_app/pages/index.svelte-a81ac6f1.js", css: ["/./_app/assets/vendor-d4876607.css"], js: ["/./_app/pages/index.svelte-a81ac6f1.js", "/./_app/chunks/vendor-ce82561a.js", "/./_app/chunks/navigation-20968cc5.js", "/./_app/chunks/singletons-bb9012b7.js", "/./_app/chunks/stores-62b324a6.js"], styles: null}, "src/routes/dashboard/index.svelte": {entry: "/./_app/pages/dashboard/index.svelte-648e7aac.js", css: ["/./_app/assets/pages/dashboard/index.svelte-609861fa.css", "/./_app/assets/vendor-d4876607.css"], js: ["/./_app/pages/dashboard/index.svelte-648e7aac.js", "/./_app/chunks/vendor-ce82561a.js", "/./_app/chunks/stores-62b324a6.js"], styles: null}, "src/routes/register/index.svelte": {entry: "/./_app/pages/register/index.svelte-e9db1a5a.js", css: ["/./_app/assets/pages/register/index.svelte-5d556980.css", "/./_app/assets/vendor-d4876607.css"], js: ["/./_app/pages/register/index.svelte-e9db1a5a.js", "/./_app/chunks/vendor-ce82561a.js", "/./_app/chunks/navigation-20968cc5.js", "/./_app/chunks/singletons-bb9012b7.js", "/./_app/chunks/stores-62b324a6.js"], styles: null}, "src/routes/login/index.svelte": {entry: "/./_app/pages/login/index.svelte-dc5b5de8.js", css: ["/./_app/assets/pages/register/index.svelte-5d556980.css", "/./_app/assets/vendor-d4876607.css"], js: ["/./_app/pages/login/index.svelte-dc5b5de8.js", "/./_app/chunks/vendor-ce82561a.js", "/./_app/chunks/navigation-20968cc5.js", "/./_app/chunks/singletons-bb9012b7.js", "/./_app/chunks/stores-62b324a6.js"], styles: null}};
async function load_component(file) {
  return {
    module: await module_lookup[file](),
    ...metadata_lookup[file]
  };
}
init({paths: {base: "", assets: "/."}});
function render(request, {
  prerender
} = {}) {
  const host = request.headers["host"];
  return respond({...request, host}, options, {prerender});
}
var ssr = typeof window === "undefined";
var getStores = () => {
  const stores = getContext("__svelte__");
  return {
    page: {
      subscribe: stores.page.subscribe
    },
    navigating: {
      subscribe: stores.navigating.subscribe
    },
    get preloading() {
      console.error("stores.preloading is deprecated; use stores.navigating instead");
      return {
        subscribe: stores.navigating.subscribe
      };
    },
    session: stores.session
  };
};
var error$1 = (verb) => {
  throw new Error(ssr ? `Can only ${verb} session store in browser` : `Cannot ${verb} session store before subscribing`);
};
var session = {
  subscribe(fn) {
    const store = getStores().session;
    if (!ssr) {
      session.set = store.set;
      session.update = store.update;
    }
    return store.subscribe(fn);
  },
  set: (value) => {
    error$1("set");
  },
  update: (updater) => {
    error$1("update");
  }
};
var css$d = {
  code: "nav.svelte-tyrqwg{background-color:#0b0c10;border-bottom:1px solid #1f2833;z-index:999}p.svelte-tyrqwg{color:#66fcf1;flex:1 1 0%;font-size:1.125rem;font-weight:700;line-height:1.75rem}ul.svelte-tyrqwg{align-items:center;display:flex;flex-direction:row;justify-content:flex-end}li.svelte-tyrqwg{font-size:.875rem;font-weight:400;line-height:1.25rem;margin-left:1.25rem;margin-right:1.25rem;text-transform:uppercase}a.svelte-tyrqwg{--tw-text-opacity:1;color:rgba(255,255,255,var(--tw-text-opacity));transition-duration:.15s;transition-duration:.2s;transition-property:all;transition-timing-function:cubic-bezier(.4,0,.2,1)}a.svelte-tyrqwg:hover{color:#66fcf1}",
  map: `{"version":3,"file":"Nav.svelte","sources":["Nav.svelte"],"sourcesContent":["<script>\\n  import { goto } from \\"$app/navigation\\";\\n  import { session } from \\"$app/stores\\";\\n  import { getAuth, signOut } from \\"firebase/auth\\";\\n\\n  // Props\\n  export let user;\\n\\n  // Functions\\n  async function handleLogout() {\\n    const auth = await getAuth();\\n    signOut(auth)\\n      .then(() => {\\n        console.log(\\"Sign out successful\\");\\n      })\\n      .catch((error) => {\\n        console.log(error);\\n      });\\n  }\\n</script>\\n\\n<nav\\n  class=\\"fixed w-full p-5 flex flex-row justify-between items-center shadow-md {user\\n    ? ''\\n    : 'hidden'}\\"\\n>\\n  <p>Ride Share Stats</p>\\n  <ul>\\n    {#if user}\\n      <li>\\n        <a sveltekit:prefetch href=\\"/\\">Home</a>\\n      </li>\\n      <li>\\n        <a sveltekit:prefetch href=\\"dashboard\\">Dashboard</a>\\n      </li>\\n      <!-- <li>\\n        <a sveltekit:prefetch href=\\"shifts\\">Shifts</a>\\n      </li>\\n      <li>\\n        <a sveltekit:prefetch href=\\"settings\\">Settings</a>\\n      </li> -->\\n      <li>\\n        <a href=\\".\\" on:click|preventDefault={handleLogout}>Logout</a>\\n      </li>\\n    {:else}\\n      <li>\\n        <a sveltekit:prefetch href=\\"register\\">Register</a>\\n      </li>\\n      <li>\\n        <a sveltekit:prefetch href=\\"login\\">Login</a>\\n      </li>\\n    {/if}\\n  </ul>\\n</nav>\\n\\n<style>nav{background-color:#0b0c10;border-bottom:1px solid #1f2833;z-index:999}p{color:#66fcf1;flex:1 1 0%;font-size:1.125rem;font-weight:700;line-height:1.75rem}ul{align-items:center;display:flex;flex-direction:row;justify-content:flex-end}li{font-size:.875rem;font-weight:400;line-height:1.25rem;margin-left:1.25rem;margin-right:1.25rem;text-transform:uppercase}a{--tw-text-opacity:1;color:rgba(255,255,255,var(--tw-text-opacity));transition-duration:.15s;transition-duration:.2s;transition-property:all;transition-timing-function:cubic-bezier(.4,0,.2,1)}a:hover{color:#66fcf1}</style>\\n"],"names":[],"mappings":"AAuDO,iBAAG,CAAC,iBAAiB,OAAO,CAAC,cAAc,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,eAAC,CAAC,MAAM,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,QAAQ,CAAC,YAAY,GAAG,CAAC,YAAY,OAAO,CAAC,gBAAE,CAAC,YAAY,MAAM,CAAC,QAAQ,IAAI,CAAC,eAAe,GAAG,CAAC,gBAAgB,QAAQ,CAAC,gBAAE,CAAC,UAAU,OAAO,CAAC,YAAY,GAAG,CAAC,YAAY,OAAO,CAAC,YAAY,OAAO,CAAC,aAAa,OAAO,CAAC,eAAe,SAAS,CAAC,eAAC,CAAC,kBAAkB,CAAC,CAAC,MAAM,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,iBAAiB,CAAC,CAAC,CAAC,oBAAoB,IAAI,CAAC,oBAAoB,GAAG,CAAC,oBAAoB,GAAG,CAAC,2BAA2B,aAAa,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,eAAC,MAAM,CAAC,MAAM,OAAO,CAAC"}`
};
var Nav = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {user} = $$props;
  if ($$props.user === void 0 && $$bindings.user && user !== void 0)
    $$bindings.user(user);
  $$result.css.add(css$d);
  return `<nav class="${"fixed w-full p-5 flex flex-row justify-between items-center shadow-md " + escape3(user ? "" : "hidden") + " svelte-tyrqwg"}"><p class="${"svelte-tyrqwg"}">Ride Share Stats</p>
  <ul class="${"svelte-tyrqwg"}">${user ? `<li class="${"svelte-tyrqwg"}"><a sveltekit:prefetch href="${"/"}" class="${"svelte-tyrqwg"}">Home</a></li>
      <li class="${"svelte-tyrqwg"}"><a sveltekit:prefetch href="${"dashboard"}" class="${"svelte-tyrqwg"}">Dashboard</a></li>
      
      <li class="${"svelte-tyrqwg"}"><a href="${"."}" class="${"svelte-tyrqwg"}">Logout</a></li>` : `<li class="${"svelte-tyrqwg"}"><a sveltekit:prefetch href="${"register"}" class="${"svelte-tyrqwg"}">Register</a></li>
      <li class="${"svelte-tyrqwg"}"><a sveltekit:prefetch href="${"login"}" class="${"svelte-tyrqwg"}">Login</a></li>`}</ul>
</nav>`;
});
var _layout = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $session, $$unsubscribe_session;
  $$unsubscribe_session = subscribe(session, (value) => $session = value);
  let hasUser = false;
  let apps = (0, import_app.getApps)();
  if (apps.length === 0) {
    (0, import_app.initializeApp)({
      apiKey: "AIzaSyDgyYBEHnbkQZrDuRHQjo21bjn3KY8RiVA",
      authDomain: "ride-share-app-5938e.firebaseapp.com",
      projectId: "ride-share-app-5938e",
      storageBucket: "ride-share-app-5938e.appspot.com",
      messagingSenderId: "854596678112",
      appId: "1:854596678112:web:b2bb3244ff27ed74127b85"
    });
  }
  onMount(async () => {
    const auth = await (0, import_auth.getAuth)();
    await (0, import_auth.onAuthStateChanged)(auth, async (user) => {
      if (user) {
        set_store_value(session, $session.user = user.uid, $session);
        hasUser = true;
      } else {
        set_store_value(session, $session.user = false, $session);
        hasUser = false;
        return;
      }
    });
  });
  $$unsubscribe_session();
  return `${validate_component(Nav, "Nav").$$render($$result, {user: hasUser}, {}, {})}

${slots.default ? slots.default({}) : ``}`;
});
var __layout = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: _layout
});
function load$4({error: error22, status}) {
  return {props: {error: error22, status}};
}
var Error$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {status} = $$props;
  let {error: error22} = $$props;
  if ($$props.status === void 0 && $$bindings.status && status !== void 0)
    $$bindings.status(status);
  if ($$props.error === void 0 && $$bindings.error && error22 !== void 0)
    $$bindings.error(error22);
  return `<h1>${escape3(status)}</h1>

<p>${escape3(error22.message)}</p>


${error22.stack ? `<pre>${escape3(error22.stack)}</pre>` : ``}`;
});
var error2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Error$1,
  load: load$4
});
async function load$3({session: session2}) {
  let {user} = session2;
  if (!user) {
    return {status: 302, redirect: "login"};
  }
  return {};
}
var Routes = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$unsubscribe_session;
  $$unsubscribe_session = subscribe(session, (value) => value);
  $$unsubscribe_session();
  return `<div class="${"w-full max-w-3xl mx-auto py-20"}"><a class="${"text-white"}" href="${"."}">Logout</a></div>`;
});
var index$3 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Routes,
  load: load$3
});
var currentWeekShifts = writable2([]);
var customCurrentWeekShiftsStore = {
  subscribe: currentWeekShifts.subscribe,
  setCurrentWeekShifts: (shiftArray) => {
    currentWeekShifts.set(shiftArray);
  },
  addCurrentWeekShift: (shiftData) => {
    const newShift = {
      ...shiftData
    };
    currentWeekShifts.update((items) => {
      return [...items, newShift];
    });
  }
};
var css$c = {
  code: ".box.svelte-17l3umk{align-items:center;background-color:#1f2833;border-color:#1f2833;border-radius:.25rem;border-width:2px;display:flex;flex-direction:column;justify-content:center;padding:2rem 1.5rem}h3.svelte-17l3umk{color:#66fcf1;font-size:1.25rem;font-weight:300;letter-spacing:.025em;line-height:1.75rem;margin-top:.5rem;opacity:.5;text-transform:uppercase}h3.svelte-17l3umk,p.svelte-17l3umk{font-family:Teko,sans-serif;text-align:center}p.svelte-17l3umk{--tw-text-opacity:1;color:rgba(255,255,255,var(--tw-text-opacity));font-size:3rem;font-weight:700;line-height:1}",
  map: '{"version":3,"file":"StatBox.svelte","sources":["StatBox.svelte"],"sourcesContent":["<script>\\n  // Props\\n  export let title = \\"Gas Price\\";\\n  export let value = 3.22;\\n  export let isDollarValue = false;\\n</script>\\n\\n<div class=\\"box\\">\\n  <p><span class=\\"font-light\\">{isDollarValue ? \\"$\\" : \\"\\"}</span>{value}</p>\\n  <h3>{title}</h3>\\n</div>\\n\\n<style>.box{align-items:center;background-color:#1f2833;border-color:#1f2833;border-radius:.25rem;border-width:2px;display:flex;flex-direction:column;justify-content:center;padding:2rem 1.5rem}h3{color:#66fcf1;font-size:1.25rem;font-weight:300;letter-spacing:.025em;line-height:1.75rem;margin-top:.5rem;opacity:.5;text-transform:uppercase}h3,p{font-family:Teko,sans-serif;text-align:center}p{--tw-text-opacity:1;color:rgba(255,255,255,var(--tw-text-opacity));font-size:3rem;font-weight:700;line-height:1}</style>\\n"],"names":[],"mappings":"AAYO,mBAAI,CAAC,YAAY,MAAM,CAAC,iBAAiB,OAAO,CAAC,aAAa,OAAO,CAAC,cAAc,MAAM,CAAC,aAAa,GAAG,CAAC,QAAQ,IAAI,CAAC,eAAe,MAAM,CAAC,gBAAgB,MAAM,CAAC,QAAQ,IAAI,CAAC,MAAM,CAAC,iBAAE,CAAC,MAAM,OAAO,CAAC,UAAU,OAAO,CAAC,YAAY,GAAG,CAAC,eAAe,MAAM,CAAC,YAAY,OAAO,CAAC,WAAW,KAAK,CAAC,QAAQ,EAAE,CAAC,eAAe,SAAS,CAAC,iBAAE,CAAC,gBAAC,CAAC,YAAY,IAAI,CAAC,UAAU,CAAC,WAAW,MAAM,CAAC,gBAAC,CAAC,kBAAkB,CAAC,CAAC,MAAM,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,iBAAiB,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC,YAAY,GAAG,CAAC,YAAY,CAAC,CAAC"}'
};
var StatBox = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {title = "Gas Price"} = $$props;
  let {value = 3.22} = $$props;
  let {isDollarValue = false} = $$props;
  if ($$props.title === void 0 && $$bindings.title && title !== void 0)
    $$bindings.title(title);
  if ($$props.value === void 0 && $$bindings.value && value !== void 0)
    $$bindings.value(value);
  if ($$props.isDollarValue === void 0 && $$bindings.isDollarValue && isDollarValue !== void 0)
    $$bindings.isDollarValue(isDollarValue);
  $$result.css.add(css$c);
  return `<div class="${"box svelte-17l3umk"}"><p class="${"svelte-17l3umk"}"><span class="${"font-light"}">${escape3(isDollarValue ? "$" : "")}</span>${escape3(value)}</p>
  <h3 class="${"svelte-17l3umk"}">${escape3(title)}</h3>
</div>`;
});
var getCalendarPage = (month, year, dayProps, weekStart = 0) => {
  let date = new Date(year, month, 1);
  date.setDate(date.getDate() - date.getDay() + weekStart);
  let nextMonth = month === 11 ? 0 : month + 1;
  let weeks = [];
  while (date.getMonth() !== nextMonth || date.getDay() !== weekStart || weeks.length !== 6) {
    if (date.getDay() === weekStart)
      weeks.unshift({days: [], id: `${year}${month}${year}${weeks.length}`});
    const updated = Object.assign({
      partOfMonth: date.getMonth() === month,
      day: date.getDate(),
      month: date.getMonth(),
      year: date.getFullYear(),
      date: new Date(date)
    }, dayProps(date));
    weeks[0].days.push(updated);
    date.setDate(date.getDate() + 1);
  }
  weeks.reverse();
  return {month, year, weeks};
};
var getDayPropsHandler = (start, end, selectableCallback) => {
  let today = new Date();
  today.setHours(0, 0, 0, 0);
  return (date) => {
    const isInRange = date >= start && date <= end;
    return {
      isInRange,
      selectable: isInRange && (!selectableCallback || selectableCallback(date)),
      isToday: date.getTime() === today.getTime()
    };
  };
};
function getMonths(start, end, selectableCallback = null, weekStart = 0) {
  start.setHours(0, 0, 0, 0);
  end.setHours(0, 0, 0, 0);
  let endDate = new Date(end.getFullYear(), end.getMonth() + 1, 1);
  let months = [];
  let date = new Date(start.getFullYear(), start.getMonth(), 1);
  let dayPropsHandler = getDayPropsHandler(start, end, selectableCallback);
  while (date < endDate) {
    months.push(getCalendarPage(date.getMonth(), date.getFullYear(), dayPropsHandler, weekStart));
    date.setMonth(date.getMonth() + 1);
  }
  return months;
}
var areDatesEquivalent = (a, b) => a.getDate() === b.getDate() && a.getMonth() === b.getMonth() && a.getFullYear() === b.getFullYear();
var css$b = {
  code: '.week.svelte-tl62dg.svelte-tl62dg{display:flex;flex-flow:row;-ms-grid-column:1;grid-column:1;justify-content:space-around;margin:0;padding:0}.week.svelte-tl62dg.svelte-tl62dg:nth-child(6n+1){-ms-grid-row:1;grid-row:1}.week.svelte-tl62dg.svelte-tl62dg:nth-child(6n+2){-ms-grid-row:2;grid-row:2}.week.svelte-tl62dg.svelte-tl62dg:nth-child(6n+3){-ms-grid-row:3;grid-row:3}.week.svelte-tl62dg.svelte-tl62dg:nth-child(6n+4){-ms-grid-row:4;grid-row:4}.week.svelte-tl62dg.svelte-tl62dg:nth-child(6n+5){-ms-grid-row:5;grid-row:5}.week.svelte-tl62dg.svelte-tl62dg:nth-child(6n+6){-ms-grid-row:6;grid-row:6}.day.svelte-tl62dg.svelte-tl62dg{color:var(--day-text-color);display:flex;flex:1 0 auto;flex-basis:0;font-size:16px;font-weight:700;height:auto;margin:2px;text-align:center}.day.is-disabled.svelte-tl62dg.svelte-tl62dg,.day.outside-month.svelte-tl62dg.svelte-tl62dg{opacity:.35}.day.svelte-tl62dg.svelte-tl62dg:before{content:"";float:left;padding-top:100%}.day--label.svelte-tl62dg.svelte-tl62dg{align-items:center;background:var(--day-background-color);border:1px solid #fff;border-radius:50%;color:var(--day-text-color);cursor:pointer;display:flex;flex-direction:column;font-weight:400;justify-content:center;margin:10%;padding:0;position:relative;transition:all .1s linear;width:100%}.day--label.disabled.svelte-tl62dg.svelte-tl62dg{cursor:default}@media(min-width:480px){.day--label.highlighted.svelte-tl62dg.svelte-tl62dg,.day--label.svelte-tl62dg.svelte-tl62dg:not(.disabled):hover{background:var(--day-highlighted-background-color);border-color:var(--day-highlighted-background-color);color:var(--day-highlighted-text-color)}}.day--label.shake-date.svelte-tl62dg.svelte-tl62dg{-webkit-animation:svelte-tl62dg-shake .4s linear 1;animation:svelte-tl62dg-shake .4s linear 1}.day--label.selected.svelte-tl62dg.svelte-tl62dg,.day--label.selected.svelte-tl62dg.svelte-tl62dg:hover,.day--label.svelte-tl62dg.svelte-tl62dg:active:not(.disabled){background-color:var(--highlight-color);border-color:var(--highlight-color);color:#fff}.day.is-today.svelte-tl62dg .day--label.svelte-tl62dg,.day.is-today.svelte-tl62dg .day--label.svelte-tl62dg:hover{background:none;border-color:var(--highlight-color);color:#000;opacity:1}@-webkit-keyframes svelte-tl62dg-shake{0%{transform:translate(7px)}20%{transform:translate(-7px)}40%{transform:translate(3px)}60%{transform:translate(-3px)}80%{transform:translate(1px)}to{transform:translate(0)}}@keyframes svelte-tl62dg-shake{0%{transform:translate(7px)}20%{transform:translate(-7px)}40%{transform:translate(3px)}60%{transform:translate(-3px)}80%{transform:translate(1px)}to{transform:translate(0)}}',
  map: `{"version":3,"file":"Week.svelte","sources":["Week.svelte"],"sourcesContent":["<script>\\n  import { areDatesEquivalent } from './lib/helpers';\\n  import { fly, fade } from 'svelte/transition';\\n  import { createEventDispatcher } from 'svelte';\\n\\n  const dispatch = createEventDispatcher();\\n\\n  export let days;\\n  export let selected;\\n  export let highlighted;\\n  export let shouldShakeDate;\\n  export let direction;\\n</script>\\n\\n<div \\n  class=\\"week\\" \\n  in:fly|local={{ x: direction * 50, duration: 180, delay: 90 }}\\n  out:fade|local={{ duration: 180 }}\\n>\\n  {#each days as day}\\n    <div \\n      class=\\"day\\" \\n      class:outside-month={!day.partOfMonth}\\n      class:is-today={day.isToday}\\n      class:is-disabled={!day.selectable}\\n    >\\n      <button \\n        class=\\"day--label\\" \\n        class:selected={areDatesEquivalent(day.date, selected)}\\n        class:highlighted={areDatesEquivalent(day.date, highlighted)}\\n        class:shake-date={shouldShakeDate && areDatesEquivalent(day.date, shouldShakeDate)}\\n        class:disabled={!day.selectable}\\n        type=\\"button\\"\\n        on:click={() => dispatch('dateSelected', day.date)}\\n      >\\n        {day.date.getDate()}\\n      </button>\\n    </div>\\n  {/each}\\n</div>\\n\\n<style>.week{display:flex;flex-flow:row;-ms-grid-column:1;grid-column:1;justify-content:space-around;margin:0;padding:0}.week:nth-child(6n+1){-ms-grid-row:1;grid-row:1}.week:nth-child(6n+2){-ms-grid-row:2;grid-row:2}.week:nth-child(6n+3){-ms-grid-row:3;grid-row:3}.week:nth-child(6n+4){-ms-grid-row:4;grid-row:4}.week:nth-child(6n+5){-ms-grid-row:5;grid-row:5}.week:nth-child(6n+6){-ms-grid-row:6;grid-row:6}.day{color:var(--day-text-color);display:flex;flex:1 0 auto;flex-basis:0;font-size:16px;font-weight:700;height:auto;margin:2px;text-align:center}.day.is-disabled,.day.outside-month{opacity:.35}.day:before{content:\\"\\";float:left;padding-top:100%}.day--label{align-items:center;background:var(--day-background-color);border:1px solid #fff;border-radius:50%;color:var(--day-text-color);cursor:pointer;display:flex;flex-direction:column;font-weight:400;justify-content:center;margin:10%;padding:0;position:relative;transition:all .1s linear;width:100%}.day--label.disabled{cursor:default}@media (min-width:480px){.day--label.highlighted,.day--label:not(.disabled):hover{background:var(--day-highlighted-background-color);border-color:var(--day-highlighted-background-color);color:var(--day-highlighted-text-color)}}.day--label.shake-date{-webkit-animation:shake .4s linear 1;animation:shake .4s linear 1}.day--label.selected,.day--label.selected:hover,.day--label:active:not(.disabled){background-color:var(--highlight-color);border-color:var(--highlight-color);color:#fff}.day.is-today .day--label,.day.is-today .day--label:hover{background:none;border-color:var(--highlight-color);color:#000;opacity:1}@-webkit-keyframes shake{0%{transform:translate(7px)}20%{transform:translate(-7px)}40%{transform:translate(3px)}60%{transform:translate(-3px)}80%{transform:translate(1px)}to{transform:translate(0)}}@keyframes shake{0%{transform:translate(7px)}20%{transform:translate(-7px)}40%{transform:translate(3px)}60%{transform:translate(-3px)}80%{transform:translate(1px)}to{transform:translate(0)}}</style>\\n"],"names":[],"mappings":"AAyCO,iCAAK,CAAC,QAAQ,IAAI,CAAC,UAAU,GAAG,CAAC,gBAAgB,CAAC,CAAC,YAAY,CAAC,CAAC,gBAAgB,YAAY,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC,iCAAK,WAAW,IAAI,CAAC,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,CAAC,iCAAK,WAAW,IAAI,CAAC,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,CAAC,iCAAK,WAAW,IAAI,CAAC,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,CAAC,iCAAK,WAAW,IAAI,CAAC,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,CAAC,iCAAK,WAAW,IAAI,CAAC,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,CAAC,iCAAK,WAAW,IAAI,CAAC,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,CAAC,gCAAI,CAAC,MAAM,IAAI,gBAAgB,CAAC,CAAC,QAAQ,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,UAAU,IAAI,CAAC,YAAY,GAAG,CAAC,OAAO,IAAI,CAAC,OAAO,GAAG,CAAC,WAAW,MAAM,CAAC,IAAI,wCAAY,CAAC,IAAI,0CAAc,CAAC,QAAQ,GAAG,CAAC,gCAAI,OAAO,CAAC,QAAQ,EAAE,CAAC,MAAM,IAAI,CAAC,YAAY,IAAI,CAAC,uCAAW,CAAC,YAAY,MAAM,CAAC,WAAW,IAAI,sBAAsB,CAAC,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,GAAG,CAAC,MAAM,IAAI,gBAAgB,CAAC,CAAC,OAAO,OAAO,CAAC,QAAQ,IAAI,CAAC,eAAe,MAAM,CAAC,YAAY,GAAG,CAAC,gBAAgB,MAAM,CAAC,OAAO,GAAG,CAAC,QAAQ,CAAC,CAAC,SAAS,QAAQ,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,WAAW,qCAAS,CAAC,OAAO,OAAO,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,WAAW,wCAAY,CAAC,uCAAW,KAAK,SAAS,CAAC,MAAM,CAAC,WAAW,IAAI,kCAAkC,CAAC,CAAC,aAAa,IAAI,kCAAkC,CAAC,CAAC,MAAM,IAAI,4BAA4B,CAAC,CAAC,CAAC,WAAW,uCAAW,CAAC,kBAAkB,mBAAK,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,UAAU,mBAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,GAAG,qCAAS,CAAC,WAAW,qCAAS,MAAM,CAAC,QAAQ,+BAAG,OAAO,KAAK,SAAS,CAAC,CAAC,iBAAiB,IAAI,CAAC,gBAAgB,CAAC,CAAC,aAAa,IAAI,aAAa,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,IAAI,uBAAS,CAAC,yBAAW,CAAC,IAAI,CAAC,sBAAQ,CAAC,yBAAW,MAAM,CAAC,WAAW,IAAI,CAAC,aAAa,IAAI,iBAAiB,CAAC,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,CAAC,mBAAmB,mBAAK,CAAC,EAAE,CAAC,UAAU,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,UAAU,UAAU,IAAI,CAAC,CAAC,GAAG,CAAC,UAAU,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,UAAU,UAAU,IAAI,CAAC,CAAC,GAAG,CAAC,UAAU,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,UAAU,UAAU,CAAC,CAAC,CAAC,CAAC,WAAW,mBAAK,CAAC,EAAE,CAAC,UAAU,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,UAAU,UAAU,IAAI,CAAC,CAAC,GAAG,CAAC,UAAU,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,UAAU,UAAU,IAAI,CAAC,CAAC,GAAG,CAAC,UAAU,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,UAAU,UAAU,CAAC,CAAC,CAAC,CAAC"}`
};
var Week = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  createEventDispatcher();
  let {days} = $$props;
  let {selected} = $$props;
  let {highlighted} = $$props;
  let {shouldShakeDate} = $$props;
  let {direction} = $$props;
  if ($$props.days === void 0 && $$bindings.days && days !== void 0)
    $$bindings.days(days);
  if ($$props.selected === void 0 && $$bindings.selected && selected !== void 0)
    $$bindings.selected(selected);
  if ($$props.highlighted === void 0 && $$bindings.highlighted && highlighted !== void 0)
    $$bindings.highlighted(highlighted);
  if ($$props.shouldShakeDate === void 0 && $$bindings.shouldShakeDate && shouldShakeDate !== void 0)
    $$bindings.shouldShakeDate(shouldShakeDate);
  if ($$props.direction === void 0 && $$bindings.direction && direction !== void 0)
    $$bindings.direction(direction);
  $$result.css.add(css$b);
  return `<div class="${"week svelte-tl62dg"}">${each(days, (day) => `<div class="${[
    "day svelte-tl62dg",
    (!day.partOfMonth ? "outside-month" : "") + " " + (day.isToday ? "is-today" : "") + " " + (!day.selectable ? "is-disabled" : "")
  ].join(" ").trim()}"><button class="${[
    "day--label svelte-tl62dg",
    (areDatesEquivalent(day.date, selected) ? "selected" : "") + " " + (areDatesEquivalent(day.date, highlighted) ? "highlighted" : "") + " " + (shouldShakeDate && areDatesEquivalent(day.date, shouldShakeDate) ? "shake-date" : "") + " " + (!day.selectable ? "disabled" : "")
  ].join(" ").trim()}" type="${"button"}">${escape3(day.date.getDate())}</button>
    </div>`)}
</div>`;
});
var css$a = {
  code: ".month-container.svelte-1kfve3b{-ms-grid-columns:1fr;-ms-grid-rows:1fr;display:-ms-grid;display:grid;width:100%}",
  map: `{"version":3,"file":"Month.svelte","sources":["Month.svelte"],"sourcesContent":["<script>\\n  import Week from './Week.svelte';\\n\\n  export let id;\\n  export let visibleMonth;\\n  export let selected;\\n  export let highlighted;\\n  export let shouldShakeDate;\\n\\n  let lastId = id;\\n  let direction;\\n\\n  $: {\\n    direction = lastId < id ? 1 : -1;\\n    lastId = id;\\n  }\\n</script>\\n\\n<div class=\\"month-container\\">\\n  {#each visibleMonth.weeks as week (week.id) }\\n    <Week \\n      days={week.days} \\n      {selected} \\n      {highlighted} \\n      {shouldShakeDate} \\n      {direction}\\n      on:dateSelected \\n    />\\n  {/each}\\n</div>\\n\\n<style>.month-container{-ms-grid-columns:1fr;-ms-grid-rows:1fr;display:-ms-grid;display:grid;width:100%}</style>\\n"],"names":[],"mappings":"AA+BO,+BAAgB,CAAC,iBAAiB,GAAG,CAAC,cAAc,GAAG,CAAC,QAAQ,QAAQ,CAAC,QAAQ,IAAI,CAAC,MAAM,IAAI,CAAC"}`
};
var Month = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {id} = $$props;
  let {visibleMonth} = $$props;
  let {selected} = $$props;
  let {highlighted} = $$props;
  let {shouldShakeDate} = $$props;
  let lastId = id;
  let direction;
  if ($$props.id === void 0 && $$bindings.id && id !== void 0)
    $$bindings.id(id);
  if ($$props.visibleMonth === void 0 && $$bindings.visibleMonth && visibleMonth !== void 0)
    $$bindings.visibleMonth(visibleMonth);
  if ($$props.selected === void 0 && $$bindings.selected && selected !== void 0)
    $$bindings.selected(selected);
  if ($$props.highlighted === void 0 && $$bindings.highlighted && highlighted !== void 0)
    $$bindings.highlighted(highlighted);
  if ($$props.shouldShakeDate === void 0 && $$bindings.shouldShakeDate && shouldShakeDate !== void 0)
    $$bindings.shouldShakeDate(shouldShakeDate);
  $$result.css.add(css$a);
  {
    {
      direction = lastId < id ? 1 : -1;
      lastId = id;
    }
  }
  return `<div class="${"month-container svelte-1kfve3b"}">${each(visibleMonth.weeks, (week) => `${validate_component(Week, "Week").$$render($$result, {
    days: week.days,
    selected,
    highlighted,
    shouldShakeDate,
    direction
  }, {}, {})}`)}
</div>`;
});
var css$9 = {
  code: '.heading-section.svelte-1l7yt84.svelte-1l7yt84{color:#3d4548;display:flex;font-size:20px;font-weight:700;justify-content:space-between;padding:24px 15px}.label.svelte-1l7yt84.svelte-1l7yt84{cursor:pointer}.month-selector.svelte-1l7yt84.svelte-1l7yt84{background-color:#fff;bottom:0;left:0;opacity:0;position:absolute;right:0;text-align:center;top:75px;transform:scale(1.2);transition:all .3s;visibility:hidden;z-index:1}.month-selector.open.svelte-1l7yt84.svelte-1l7yt84{opacity:1;transform:scale(1);visibility:visible}.month-selector--month.svelte-1l7yt84.svelte-1l7yt84{border:1px solid #efefef;color:#4a4a4a;display:inline-block;height:23%;margin:.5%;opacity:.2;width:31.333%}.month-selector--month.selectable.svelte-1l7yt84.svelte-1l7yt84{opacity:1}.month-selector--month.selectable.svelte-1l7yt84.svelte-1l7yt84:hover{box-shadow:0 0 3px rgba(0,0,0,.15);cursor:pointer}.month-selector--month.selected.svelte-1l7yt84.svelte-1l7yt84{background:var(--highlight-color);color:#fff}.month-selector--month.svelte-1l7yt84.svelte-1l7yt84:before{content:" ";height:100%}.month-selector--month.svelte-1l7yt84.svelte-1l7yt84:before,.month-selector--month.svelte-1l7yt84 span.svelte-1l7yt84{display:inline-block;vertical-align:middle}.control.svelte-1l7yt84.svelte-1l7yt84{opacity:.2;padding:0 8px;transform:translateY(3px)}.control.enabled.svelte-1l7yt84.svelte-1l7yt84{cursor:pointer;opacity:1}.arrow.svelte-1l7yt84.svelte-1l7yt84{border-color:#a9a9a9;border-style:solid;border-width:0 2px 2px 0;display:inline-block;height:18px;width:18px}.arrow.right.svelte-1l7yt84.svelte-1l7yt84{transform:rotate(-45deg);-webkit-transform:rotate(-45deg)}.arrow.left.svelte-1l7yt84.svelte-1l7yt84{transform:rotate(135deg);-webkit-transform:rotate(135deg)}',
  map: `{"version":3,"file":"NavBar.svelte","sources":["NavBar.svelte"],"sourcesContent":["<script>\\n  import { createEventDispatcher } from 'svelte';\\n\\n  const dispatch = createEventDispatcher();\\n\\n  export let month;\\n  export let year;\\n  export let start;\\n  export let end;\\n  export let canIncrementMonth;\\n  export let canDecrementMonth;\\n  export let monthsOfYear;\\n\\n  let monthSelectorOpen = false;\\n  let availableMonths;\\n\\n  $: {\\n    let isOnLowerBoundary = start.getFullYear() === year;\\n    let isOnUpperBoundary = end.getFullYear() === year;\\n    availableMonths = monthsOfYear.map((m, i) => {\\n      return Object.assign({}, {\\n        name: m[0],\\n        abbrev: m[1]\\n      }, {\\n        selectable:\\n          (!isOnLowerBoundary && !isOnUpperBoundary)\\n          || (\\n            (!isOnLowerBoundary || i >= start.getMonth())\\n            && (!isOnUpperBoundary || i <= end.getMonth())\\n          )\\n      });\\n    });\\n  }\\n\\n  function toggleMonthSelectorOpen() {\\n    monthSelectorOpen = !monthSelectorOpen;\\n  }\\n\\n  function monthSelected(event, { m, i }) {\\n    event.stopPropagation();\\n    if (!m.selectable) return;\\n    dispatch('monthSelected', i);\\n    toggleMonthSelectorOpen();\\n  }\\n</script>\\n\\n<div class=\\"title\\">\\n  <div class=\\"heading-section\\">\\n    <div class=\\"control\\" \\n      class:enabled={canDecrementMonth}\\n      on:click={() => dispatch('incrementMonth', -1)}>\\n      <i class=\\"arrow left\\"></i>\\n    </div>\\n    <div class=\\"label\\" on:click={toggleMonthSelectorOpen}>\\n      {monthsOfYear[month][0]} {year}\\n    </div> \\n    <div class=\\"control\\"\\n      class:enabled={canIncrementMonth}\\n      on:click={() => dispatch('incrementMonth', 1)}>\\n      <i class=\\"arrow right\\"></i>\\n    </div>\\n  </div>\\n  <div class=\\"month-selector\\" class:open={monthSelectorOpen}>\\n    {#each availableMonths as monthDefinition, index}\\n      <div \\n        class=\\"month-selector--month\\" \\n        class:selected={index === month}\\n        class:selectable={monthDefinition.selectable}\\n        on:click={e => monthSelected(e, { m: monthDefinition, i: index })}\\n      >\\n        <span>{monthDefinition.abbrev}</span>\\n      </div>\\n    {/each}\\n  </div>\\n</div>\\n\\n<style>.heading-section{color:#3d4548;display:flex;font-size:20px;font-weight:700;justify-content:space-between;padding:24px 15px}.label{cursor:pointer}.month-selector{background-color:#fff;bottom:0;left:0;opacity:0;position:absolute;right:0;text-align:center;top:75px;transform:scale(1.2);transition:all .3s;visibility:hidden;z-index:1}.month-selector.open{opacity:1;transform:scale(1);visibility:visible}.month-selector--month{border:1px solid #efefef;color:#4a4a4a;display:inline-block;height:23%;margin:.5%;opacity:.2;width:31.333%}.month-selector--month.selectable{opacity:1}.month-selector--month.selectable:hover{box-shadow:0 0 3px rgba(0,0,0,.15);cursor:pointer}.month-selector--month.selected{background:var(--highlight-color);color:#fff}.month-selector--month:before{content:\\" \\";height:100%}.month-selector--month:before,.month-selector--month span{display:inline-block;vertical-align:middle}.control{opacity:.2;padding:0 8px;transform:translateY(3px)}.control.enabled{cursor:pointer;opacity:1}.arrow{border-color:#a9a9a9;border-style:solid;border-width:0 2px 2px 0;display:inline-block;height:18px;width:18px}.arrow.right{transform:rotate(-45deg);-webkit-transform:rotate(-45deg)}.arrow.left{transform:rotate(135deg);-webkit-transform:rotate(135deg)}</style>\\n"],"names":[],"mappings":"AA4EO,8CAAgB,CAAC,MAAM,OAAO,CAAC,QAAQ,IAAI,CAAC,UAAU,IAAI,CAAC,YAAY,GAAG,CAAC,gBAAgB,aAAa,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,oCAAM,CAAC,OAAO,OAAO,CAAC,6CAAe,CAAC,iBAAiB,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC,SAAS,QAAQ,CAAC,MAAM,CAAC,CAAC,WAAW,MAAM,CAAC,IAAI,IAAI,CAAC,UAAU,MAAM,GAAG,CAAC,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,WAAW,MAAM,CAAC,QAAQ,CAAC,CAAC,eAAe,mCAAK,CAAC,QAAQ,CAAC,CAAC,UAAU,MAAM,CAAC,CAAC,CAAC,WAAW,OAAO,CAAC,oDAAsB,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,OAAO,CAAC,QAAQ,YAAY,CAAC,OAAO,GAAG,CAAC,OAAO,GAAG,CAAC,QAAQ,EAAE,CAAC,MAAM,OAAO,CAAC,sBAAsB,yCAAW,CAAC,QAAQ,CAAC,CAAC,sBAAsB,yCAAW,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,OAAO,CAAC,sBAAsB,uCAAS,CAAC,WAAW,IAAI,iBAAiB,CAAC,CAAC,MAAM,IAAI,CAAC,oDAAsB,OAAO,CAAC,QAAQ,GAAG,CAAC,OAAO,IAAI,CAAC,oDAAsB,OAAO,CAAC,qCAAsB,CAAC,mBAAI,CAAC,QAAQ,YAAY,CAAC,eAAe,MAAM,CAAC,sCAAQ,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,UAAU,WAAW,GAAG,CAAC,CAAC,QAAQ,sCAAQ,CAAC,OAAO,OAAO,CAAC,QAAQ,CAAC,CAAC,oCAAM,CAAC,aAAa,OAAO,CAAC,aAAa,KAAK,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,YAAY,CAAC,OAAO,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,oCAAM,CAAC,UAAU,OAAO,MAAM,CAAC,CAAC,kBAAkB,OAAO,MAAM,CAAC,CAAC,MAAM,mCAAK,CAAC,UAAU,OAAO,MAAM,CAAC,CAAC,kBAAkB,OAAO,MAAM,CAAC,CAAC"}`
};
var NavBar = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  createEventDispatcher();
  let {month} = $$props;
  let {year} = $$props;
  let {start} = $$props;
  let {end} = $$props;
  let {canIncrementMonth} = $$props;
  let {canDecrementMonth} = $$props;
  let {monthsOfYear: monthsOfYear2} = $$props;
  let availableMonths;
  if ($$props.month === void 0 && $$bindings.month && month !== void 0)
    $$bindings.month(month);
  if ($$props.year === void 0 && $$bindings.year && year !== void 0)
    $$bindings.year(year);
  if ($$props.start === void 0 && $$bindings.start && start !== void 0)
    $$bindings.start(start);
  if ($$props.end === void 0 && $$bindings.end && end !== void 0)
    $$bindings.end(end);
  if ($$props.canIncrementMonth === void 0 && $$bindings.canIncrementMonth && canIncrementMonth !== void 0)
    $$bindings.canIncrementMonth(canIncrementMonth);
  if ($$props.canDecrementMonth === void 0 && $$bindings.canDecrementMonth && canDecrementMonth !== void 0)
    $$bindings.canDecrementMonth(canDecrementMonth);
  if ($$props.monthsOfYear === void 0 && $$bindings.monthsOfYear && monthsOfYear2 !== void 0)
    $$bindings.monthsOfYear(monthsOfYear2);
  $$result.css.add(css$9);
  {
    {
      let isOnLowerBoundary = start.getFullYear() === year;
      let isOnUpperBoundary = end.getFullYear() === year;
      availableMonths = monthsOfYear2.map((m, i) => {
        return Object.assign({}, {name: m[0], abbrev: m[1]}, {
          selectable: !isOnLowerBoundary && !isOnUpperBoundary || (!isOnLowerBoundary || i >= start.getMonth()) && (!isOnUpperBoundary || i <= end.getMonth())
        });
      });
    }
  }
  return `<div class="${"title"}"><div class="${"heading-section svelte-1l7yt84"}"><div class="${["control svelte-1l7yt84", canDecrementMonth ? "enabled" : ""].join(" ").trim()}"><i class="${"arrow left svelte-1l7yt84"}"></i></div>
    <div class="${"label svelte-1l7yt84"}">${escape3(monthsOfYear2[month][0])} ${escape3(year)}</div> 
    <div class="${["control svelte-1l7yt84", canIncrementMonth ? "enabled" : ""].join(" ").trim()}"><i class="${"arrow right svelte-1l7yt84"}"></i></div></div>
  <div class="${["month-selector svelte-1l7yt84", ""].join(" ").trim()}">${each(availableMonths, (monthDefinition, index2) => `<div class="${[
    "month-selector--month svelte-1l7yt84",
    (index2 === month ? "selected" : "") + " " + (monthDefinition.selectable ? "selectable" : "")
  ].join(" ").trim()}"><span class="${"svelte-1l7yt84"}">${escape3(monthDefinition.abbrev)}</span>
      </div>`)}</div>
</div>`;
});
var css$8 = {
  code: ".sc-popover.svelte-x1t286.svelte-x1t286{position:relative}.contents-wrapper.svelte-x1t286.svelte-x1t286{display:none;left:50%;position:absolute;top:50%;transform:translate(-50%,-50%);transition:none;z-index:2}.contents.svelte-x1t286.svelte-x1t286{-webkit-animation:svelte-x1t286-grow .2s cubic-bezier(.92,.09,.18,1.05) forwards;animation:svelte-x1t286-grow .2s cubic-bezier(.92,.09,.18,1.05) forwards;background:#fff;box-shadow:0 10px 26px rgba(0,0,0,.4);display:none;opacity:.8;padding-top:0}.contents-inner.svelte-x1t286.svelte-x1t286{-webkit-animation:svelte-x1t286-fadeIn .4s forwards;animation:svelte-x1t286-fadeIn .4s forwards}.contents-wrapper.visible.svelte-x1t286.svelte-x1t286{display:block}.contents-wrapper.visible.svelte-x1t286 .contents.svelte-x1t286{display:block;opacity:1;transform:scale(1)}.contents-wrapper.shrink.svelte-x1t286 .contents.svelte-x1t286{-webkit-animation:svelte-x1t286-shrink .15s cubic-bezier(.92,.09,.18,1.05) forwards;animation:svelte-x1t286-shrink .15s cubic-bezier(.92,.09,.18,1.05) forwards}@-webkit-keyframes svelte-x1t286-grow{0%{opacity:0;transform:scale(.9,.1)}30%{opacity:1}to{transform:scale(1)}}@keyframes svelte-x1t286-grow{0%{opacity:0;transform:scale(.9,.1)}30%{opacity:1}to{transform:scale(1)}}@-webkit-keyframes svelte-x1t286-shrink{0%{opacity:1;transform:scale(1)}70%{opacity:1}to{opacity:0;transform:scale(.9,.1)}}@keyframes svelte-x1t286-shrink{0%{opacity:1;transform:scale(1)}70%{opacity:1}to{opacity:0;transform:scale(.9,.1)}}@-webkit-keyframes svelte-x1t286-fadeIn{0%{opacity:0}50%{opacity:0}to{opacity:1}}@keyframes svelte-x1t286-fadeIn{0%{opacity:0}50%{opacity:0}to{opacity:1}}",
  map: `{"version":3,"file":"Popover.svelte","sources":["Popover.svelte"],"sourcesContent":["<script>\\n  import { onMount, createEventDispatcher, tick } from 'svelte';\\n\\n  const dispatch = createEventDispatcher();\\n\\n  let once = (el, evt, cb) => {\\n    function handler() {\\n      cb.apply(this, arguments);\\n      el.removeEventListener(evt, handler);\\n    }\\n    el.addEventListener(evt, handler);\\n  };\\n\\n  let popover;\\n  let w;\\n  let triggerContainer;\\n  let contentsAnimated;\\n  let contentsWrapper;\\n  let translateY = 0;\\n  let translateX = 0;\\n\\n  export let open = false;\\n  export let shrink;\\n  export let trigger;\\n  export const close = () => {\\n    shrink = true;\\n    once(contentsAnimated, 'animationend', () => {\\n      shrink = false;\\n      open = false;\\n      dispatch('closed');\\n    });\\n  };\\n\\n  function checkForFocusLoss(evt) {\\n    if (!open) return;\\n    let el = evt.target;\\n    // eslint-disable-next-line\\n    do {\\n      if (el === popover) return;\\n    // eslint-disable-next-line\\n    } while (el = el.parentNode);\\n    close();\\n  }\\n\\n  onMount(() => {\\n    document.addEventListener('click', checkForFocusLoss);\\n    if (!trigger) return;\\n    triggerContainer.appendChild(trigger.parentNode.removeChild(trigger));\\n\\n    // eslint-disable-next-line\\n    return () => {\\n      document.removeEventListener('click', checkForFocusLoss);\\n    };\\n  });\\n\\n  const getDistanceToEdges = async () => {\\n    if (!open) { open = true; }\\n    await tick();\\n    let rect = contentsWrapper.getBoundingClientRect();\\n    return {\\n      top: rect.top + (-1 * translateY),\\n      bottom: window.innerHeight - rect.bottom + translateY,\\n      left: rect.left + (-1 * translateX),\\n      right: document.body.clientWidth - rect.right + translateX\\n    };\\n  };\\n\\n  const getTranslate = async () => {\\n    let dist = await getDistanceToEdges();\\n    let x; let\\n      y;\\n    if (w < 480) {\\n      y = dist.bottom;\\n    } else if (dist.top < 0) {\\n      y = Math.abs(dist.top);\\n    } else if (dist.bottom < 0) {\\n      y = dist.bottom;\\n    } else {\\n      y = 0;\\n    }\\n    if (dist.left < 0) {\\n      x = Math.abs(dist.left);\\n    } else if (dist.right < 0) {\\n      x = dist.right;\\n    } else {\\n      x = 0;\\n    }\\n    return { x, y };\\n  };\\n\\n  const doOpen = async () => {\\n    const { x, y } = await getTranslate();\\n\\n    translateX = x;\\n    translateY = y;\\n    open = true;\\n\\n    dispatch('opened');\\n  };\\n</script>\\n\\n<svelte:window bind:innerWidth={w} />\\n<div class=\\"sc-popover\\" bind:this={popover}>\\n  <div class=\\"trigger\\" on:click={doOpen} bind:this={triggerContainer}>\\n    <slot name=\\"trigger\\">\\n    </slot>\\n  </div>\\n  <div \\n    class=\\"contents-wrapper\\" \\n    class:visible={open}\\n    class:shrink={shrink}\\n    style=\\"transform: translate(-50%,-50%) translate({translateX}px, {translateY}px)\\" \\n    bind:this={contentsWrapper}>\\n    <div class=\\"contents\\" bind:this={contentsAnimated}>\\n      <div class=\\"contents-inner\\">\\n        <slot name=\\"contents\\"></slot>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n<style>.sc-popover{position:relative}.contents-wrapper{display:none;left:50%;position:absolute;top:50%;transform:translate(-50%,-50%);transition:none;z-index:2}.contents{-webkit-animation:grow .2s cubic-bezier(.92,.09,.18,1.05) forwards;animation:grow .2s cubic-bezier(.92,.09,.18,1.05) forwards;background:#fff;box-shadow:0 10px 26px rgba(0,0,0,.4);display:none;opacity:.8;padding-top:0}.contents-inner{-webkit-animation:fadeIn .4s forwards;animation:fadeIn .4s forwards}.contents-wrapper.visible{display:block}.contents-wrapper.visible .contents{display:block;opacity:1;transform:scale(1)}.contents-wrapper.shrink .contents{-webkit-animation:shrink .15s cubic-bezier(.92,.09,.18,1.05) forwards;animation:shrink .15s cubic-bezier(.92,.09,.18,1.05) forwards}@-webkit-keyframes grow{0%{opacity:0;transform:scale(.9,.1)}30%{opacity:1}to{transform:scale(1)}}@keyframes grow{0%{opacity:0;transform:scale(.9,.1)}30%{opacity:1}to{transform:scale(1)}}@-webkit-keyframes shrink{0%{opacity:1;transform:scale(1)}70%{opacity:1}to{opacity:0;transform:scale(.9,.1)}}@keyframes shrink{0%{opacity:1;transform:scale(1)}70%{opacity:1}to{opacity:0;transform:scale(.9,.1)}}@-webkit-keyframes fadeIn{0%{opacity:0}50%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}50%{opacity:0}to{opacity:1}}</style>\\n"],"names":[],"mappings":"AAyHO,uCAAW,CAAC,SAAS,QAAQ,CAAC,6CAAiB,CAAC,QAAQ,IAAI,CAAC,KAAK,GAAG,CAAC,SAAS,QAAQ,CAAC,IAAI,GAAG,CAAC,UAAU,UAAU,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,IAAI,CAAC,QAAQ,CAAC,CAAC,qCAAS,CAAC,kBAAkB,kBAAI,CAAC,GAAG,CAAC,aAAa,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,UAAU,kBAAI,CAAC,GAAG,CAAC,aAAa,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,QAAQ,IAAI,CAAC,QAAQ,EAAE,CAAC,YAAY,CAAC,CAAC,2CAAe,CAAC,kBAAkB,oBAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,oBAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,iBAAiB,oCAAQ,CAAC,QAAQ,KAAK,CAAC,iBAAiB,sBAAQ,CAAC,uBAAS,CAAC,QAAQ,KAAK,CAAC,QAAQ,CAAC,CAAC,UAAU,MAAM,CAAC,CAAC,CAAC,iBAAiB,qBAAO,CAAC,uBAAS,CAAC,kBAAkB,oBAAM,CAAC,IAAI,CAAC,aAAa,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,UAAU,oBAAM,CAAC,IAAI,CAAC,aAAa,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,mBAAmB,kBAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,UAAU,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,UAAU,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,kBAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,UAAU,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,UAAU,MAAM,CAAC,CAAC,CAAC,CAAC,mBAAmB,oBAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,UAAU,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,UAAU,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,oBAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,UAAU,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,UAAU,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,oBAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,WAAW,oBAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC"}`
};
var Popover = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const dispatch = createEventDispatcher();
  let once = (el, evt, cb) => {
    function handler() {
      cb.apply(this, arguments);
      el.removeEventListener(evt, handler);
    }
    el.addEventListener(evt, handler);
  };
  let popover;
  let triggerContainer;
  let contentsAnimated;
  let contentsWrapper;
  let translateY = 0;
  let translateX = 0;
  let {open = false} = $$props;
  let {shrink} = $$props;
  let {trigger} = $$props;
  const close = () => {
    shrink = true;
    once(contentsAnimated, "animationend", () => {
      shrink = false;
      open = false;
      dispatch("closed");
    });
  };
  function checkForFocusLoss(evt) {
    if (!open)
      return;
    let el = evt.target;
    do {
      if (el === popover)
        return;
    } while (el = el.parentNode);
    close();
  }
  onMount(() => {
    document.addEventListener("click", checkForFocusLoss);
    if (!trigger)
      return;
    triggerContainer.appendChild(trigger.parentNode.removeChild(trigger));
    return () => {
      document.removeEventListener("click", checkForFocusLoss);
    };
  });
  if ($$props.open === void 0 && $$bindings.open && open !== void 0)
    $$bindings.open(open);
  if ($$props.shrink === void 0 && $$bindings.shrink && shrink !== void 0)
    $$bindings.shrink(shrink);
  if ($$props.trigger === void 0 && $$bindings.trigger && trigger !== void 0)
    $$bindings.trigger(trigger);
  if ($$props.close === void 0 && $$bindings.close && close !== void 0)
    $$bindings.close(close);
  $$result.css.add(css$8);
  return `
<div class="${"sc-popover svelte-x1t286"}"${add_attribute("this", popover, 1)}><div class="${"trigger"}"${add_attribute("this", triggerContainer, 1)}>${slots.trigger ? slots.trigger({}) : `
    `}</div>
  <div class="${[
    "contents-wrapper svelte-x1t286",
    (open ? "visible" : "") + " " + (shrink ? "shrink" : "")
  ].join(" ").trim()}" style="${"transform: translate(-50%,-50%) translate(" + escape3(translateX) + "px, " + escape3(translateY) + "px)"}"${add_attribute("this", contentsWrapper, 1)}><div class="${"contents svelte-x1t286"}"${add_attribute("this", contentsAnimated, 1)}><div class="${"contents-inner svelte-x1t286"}">${slots.contents ? slots.contents({}) : ``}</div></div></div>
</div>`;
});
var injectStringData = (str, name, value) => str.replace(new RegExp("#{" + name + "}", "g"), value);
var enforceLength = function(str, length, fromBack) {
  str = str.toString();
  if (typeof length == "undefined")
    return str;
  if (str.length == length)
    return str;
  fromBack = typeof fromBack == "undefined" ? false : fromBack;
  if (str.length < length) {
    while (length - str.length > 0)
      str = "0" + str;
  } else if (str.length > length) {
    if (fromBack) {
      str = str.substring(str.length - length);
    } else {
      str = str.substring(0, length);
    }
  }
  return str;
};
var daysOfWeek = [
  ["Sunday", "Sun"],
  ["Monday", "Mon"],
  ["Tuesday", "Tue"],
  ["Wednesday", "Wed"],
  ["Thursday", "Thu"],
  ["Friday", "Fri"],
  ["Saturday", "Sat"]
];
var monthsOfYear = [
  ["January", "Jan"],
  ["February", "Feb"],
  ["March", "Mar"],
  ["April", "Apr"],
  ["May", "May"],
  ["June", "Jun"],
  ["July", "Jul"],
  ["August", "Aug"],
  ["September", "Sep"],
  ["October", "Oct"],
  ["November", "Nov"],
  ["December", "Dec"]
];
var dictionary = {
  daysOfWeek,
  monthsOfYear
};
var extendDictionary = (conf) => Object.keys(conf).forEach((key) => {
  if (dictionary[key] && dictionary[key].length == conf[key].length) {
    dictionary[key] = conf[key];
  }
});
var acceptedDateTokens = [
  {
    key: "d",
    method: function(date) {
      return enforceLength(date.getDate(), 2);
    }
  },
  {
    key: "D",
    method: function(date) {
      return dictionary.daysOfWeek[date.getDay()][1];
    }
  },
  {
    key: "j",
    method: function(date) {
      return date.getDate();
    }
  },
  {
    key: "l",
    method: function(date) {
      return dictionary.daysOfWeek[date.getDay()][0];
    }
  },
  {
    key: "F",
    method: function(date) {
      return dictionary.monthsOfYear[date.getMonth()][0];
    }
  },
  {
    key: "m",
    method: function(date) {
      return enforceLength(date.getMonth() + 1, 2);
    }
  },
  {
    key: "M",
    method: function(date) {
      return dictionary.monthsOfYear[date.getMonth()][1];
    }
  },
  {
    key: "n",
    method: function(date) {
      return date.getMonth() + 1;
    }
  },
  {
    key: "Y",
    method: function(date) {
      return date.getFullYear();
    }
  },
  {
    key: "y",
    method: function(date) {
      return enforceLength(date.getFullYear(), 2, true);
    }
  }
];
var acceptedTimeTokens = [
  {
    key: "a",
    method: function(date) {
      return date.getHours() > 11 ? "pm" : "am";
    }
  },
  {
    key: "A",
    method: function(date) {
      return date.getHours() > 11 ? "PM" : "AM";
    }
  },
  {
    key: "g",
    method: function(date) {
      return date.getHours() % 12 || 12;
    }
  },
  {
    key: "G",
    method: function(date) {
      return date.getHours();
    }
  },
  {
    key: "h",
    method: function(date) {
      return enforceLength(date.getHours() % 12 || 12, 2);
    }
  },
  {
    key: "H",
    method: function(date) {
      return enforceLength(date.getHours(), 2);
    }
  },
  {
    key: "i",
    method: function(date) {
      return enforceLength(date.getMinutes(), 2);
    }
  },
  {
    key: "s",
    method: function(date) {
      return enforceLength(date.getSeconds(), 2);
    }
  }
];
var internationalize = (conf = {}) => {
  extendDictionary(conf);
};
var formatDate = (date, template2 = "#{m}/#{d}/#{Y}") => {
  acceptedDateTokens.forEach((token) => {
    if (template2.indexOf(`#{${token.key}}`) == -1)
      return;
    template2 = injectStringData(template2, token.key, token.method(date));
  });
  acceptedTimeTokens.forEach((token) => {
    if (template2.indexOf(`#{${token.key}}`) == -1)
      return;
    template2 = injectStringData(template2, token.key, token.method(date));
  });
  return template2;
};
var keyCodes = {
  left: 37,
  up: 38,
  right: 39,
  down: 40,
  pgup: 33,
  pgdown: 34,
  enter: 13,
  escape: 27,
  tab: 9
};
Object.keys(keyCodes).map((k) => keyCodes[k]);
var css$7 = {
  code: ".datepicker.svelte-1jpaezg.svelte-1jpaezg{display:inline-block;margin:0 auto;overflow:visible;text-align:center}.calendar-button.svelte-1jpaezg.svelte-1jpaezg{background:var(--button-background-color);border:1px solid var(--button-border-color);border-radius:7px;box-shadow:0 0 3px rgba(0,0,0,.1);color:var(--button-text-color);cursor:pointer;display:block;padding:10px 20px;text-align:center;text-decoration:none;width:300px}.svelte-1jpaezg.svelte-1jpaezg,.svelte-1jpaezg.svelte-1jpaezg:after,.svelte-1jpaezg.svelte-1jpaezg:before{box-sizing:inherit}.calendar.svelte-1jpaezg.svelte-1jpaezg{box-sizing:border-box;overflow:hidden;padding:0 10px 10px;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:100vw}@media(min-width:480px){.calendar.svelte-1jpaezg.svelte-1jpaezg{height:auto;max-width:100%;width:340px}}.legend.svelte-1jpaezg.svelte-1jpaezg{color:#4a4a4a;margin-bottom:5px;padding:10px 0}.legend.svelte-1jpaezg span.svelte-1jpaezg{display:inline-block;text-align:center;width:14.285714%}",
  map: `{"version":3,"file":"Datepicker.svelte","sources":["Datepicker.svelte"],"sourcesContent":["<script>\\n  import Month from './Month.svelte';\\n  import NavBar from './NavBar.svelte';\\n  import Popover from './Popover.svelte';\\n  import { getMonths } from './lib/helpers';\\n  import { formatDate, internationalize } from 'timeUtils';\\n  import { keyCodes, keyCodesArray } from './lib/keyCodes';\\n  import { onMount, createEventDispatcher } from 'svelte';\\n\\n  const dispatch = createEventDispatcher();\\n  const today = new Date();\\n  const oneYear = 1000 * 60 * 60 * 24 * 365;\\n\\n  let popover;\\n\\n  export let format = '#{m}/#{d}/#{Y}';\\n  export let start = new Date(Date.now() - oneYear);\\n  export let end = new Date(Date.now() + oneYear);\\n  export let selected = today;\\n  export let dateChosen = false;\\n  export let trigger = null;\\n  export let selectableCallback = null;\\n  export let weekStart = 0;\\n  export let daysOfWeek = [\\n    ['Sunday', 'Sun'],\\n    ['Monday', 'Mon'],\\n    ['Tuesday', 'Tue'],\\n    ['Wednesday', 'Wed'],\\n    ['Thursday', 'Thu'],\\n    ['Friday', 'Fri'],\\n    ['Saturday', 'Sat']\\n  ];\\n  export let monthsOfYear = [\\n    ['January', 'Jan'],\\n    ['February', 'Feb'],\\n    ['March', 'Mar'],\\n    ['April', 'Apr'],\\n    ['May', 'May'],\\n    ['June', 'Jun'],\\n    ['July', 'Jul'],\\n    ['August', 'Aug'],\\n    ['September', 'Sep'],\\n    ['October', 'Oct'],\\n    ['November', 'Nov'],\\n    ['December', 'Dec']\\n  ];\\n\\n  selected = (\\n    selected.getTime() < start.getTime()\\n    || selected.getTime() > end.getTime()\\n  ) ? start : selected;\\n\\n  export let style = '';\\n\\n  // theming variables:\\n  export let buttonBackgroundColor = '#fff';\\n  export let buttonBorderColor = '#eee';\\n  export let buttonTextColor = '#333';\\n  export let highlightColor = '#f7901e';\\n  export let dayBackgroundColor = 'none';\\n  export let dayTextColor = '#4a4a4a';\\n  export let dayHighlightedBackgroundColor = '#efefef';\\n  export let dayHighlightedTextColor = '#4a4a4a';\\n\\n  internationalize({ daysOfWeek, monthsOfYear });\\n  let sortedDaysOfWeek = weekStart === 0 ? daysOfWeek : (() => {\\n    let dow = daysOfWeek.slice();\\n    dow.push(dow.shift());\\n    return dow;\\n  })();\\n\\n  let highlighted = today;\\n  let shouldShakeDate = false;\\n  let shakeHighlightTimeout;\\n  let month = today.getMonth();\\n  let year = today.getFullYear();\\n\\n  let isOpen = false;\\n  let isClosing = false;\\n\\n  today.setHours(0, 0, 0, 0);\\n\\n  function assignmentHandler(formatted) {\\n    if (!trigger) return;\\n    trigger.innerHTML = formatted;\\n  }\\n\\n  $: months = getMonths(start, end, selectableCallback, weekStart);\\n\\n  let monthIndex = 0;\\n  $: {\\n    monthIndex = 0;\\n    for (let i = 0; i < months.length; i += 1) {\\n      if (months[i].month === month && months[i].year === year) {\\n        monthIndex = i;\\n      }\\n    }\\n  }\\n  $: visibleMonth = months[monthIndex];\\n\\n  $: visibleMonthId = year + month / 100;\\n  $: lastVisibleDate = visibleMonth.weeks[visibleMonth.weeks.length - 1].days[6].date;\\n  $: firstVisibleDate = visibleMonth.weeks[0].days[0].date;\\n  $: canIncrementMonth = monthIndex < months.length - 1;\\n  $: canDecrementMonth = monthIndex > 0;\\n  $: wrapperStyle = \`\\n    --button-background-color: \${buttonBackgroundColor};\\n    --button-border-color: \${buttonBorderColor};\\n    --button-text-color: \${buttonTextColor};\\n    --highlight-color: \${highlightColor};\\n    --day-background-color: \${dayBackgroundColor};\\n    --day-text-color: \${dayTextColor};\\n    --day-highlighted-background-color: \${dayHighlightedBackgroundColor};\\n    --day-highlighted-text-color: \${dayHighlightedTextColor};\\n    \${style}\\n  \`;\\n\\n  export let formattedSelected;\\n  $: {\\n    formattedSelected = typeof format === 'function'\\n      ? format(selected)\\n      : formatDate(selected, format);\\n  }\\n\\n  onMount(() => {\\n    month = selected.getMonth();\\n    year = selected.getFullYear();\\n  });\\n\\n  function changeMonth(selectedMonth) {\\n    month = selectedMonth;\\n    highlighted = new Date(year, month, 1);\\n  }\\n\\n  function incrementMonth(direction, day = 1) {\\n    if (direction === 1 && !canIncrementMonth) return;\\n    if (direction === -1 && !canDecrementMonth) return;\\n    let current = new Date(year, month, 1);\\n    current.setMonth(current.getMonth() + direction);\\n    month = current.getMonth();\\n    year = current.getFullYear();\\n    highlighted = new Date(year, month, day);\\n  }\\n\\n  function getDefaultHighlighted() {\\n    return new Date(selected);\\n  }\\n\\n  const getDay = (m, d, y) => {\\n    let theMonth = months.find(aMonth => aMonth.month === m && aMonth.year === y);\\n    if (!theMonth) return null;\\n    // eslint-disable-next-line\\n    for (let i = 0; i < theMonth.weeks.length; ++i) {\\n      // eslint-disable-next-line\\n      for (let j = 0; j < theMonth.weeks[i].days.length; ++j) {\\n        let aDay = theMonth.weeks[i].days[j];\\n        if (aDay.month === m && aDay.day === d && aDay.year === y) return aDay;\\n      }\\n    }\\n    return null;\\n  };\\n\\n  function incrementDayHighlighted(amount) {\\n    let proposedDate = new Date(highlighted);\\n    proposedDate.setDate(highlighted.getDate() + amount);\\n    let correspondingDayObj = getDay(\\n      proposedDate.getMonth(),\\n      proposedDate.getDate(),\\n      proposedDate.getFullYear()\\n    );\\n    if (!correspondingDayObj || !correspondingDayObj.isInRange) return;\\n    highlighted = proposedDate;\\n    if (amount > 0 && highlighted > lastVisibleDate) {\\n      incrementMonth(1, highlighted.getDate());\\n    }\\n    if (amount < 0 && highlighted < firstVisibleDate) {\\n      incrementMonth(-1, highlighted.getDate());\\n    }\\n  }\\n\\n  function checkIfVisibleDateIsSelectable(date) {\\n    const proposedDay = getDay(date.getMonth(), date.getDate(), date.getFullYear());\\n    return proposedDay && proposedDay.selectable;\\n  }\\n\\n  function shakeDate(date) {\\n    clearTimeout(shakeHighlightTimeout);\\n    shouldShakeDate = date;\\n    shakeHighlightTimeout = setTimeout(() => {\\n      shouldShakeDate = false;\\n    }, 700);\\n  }\\n\\n  function assignValueToTrigger(formatted) {\\n    assignmentHandler(formatted);\\n  }\\n\\n  function registerSelection(chosen) {\\n    if (!checkIfVisibleDateIsSelectable(chosen)) return shakeDate(chosen);\\n    // eslint-disable-next-line\\n    close();\\n    selected = chosen;\\n    dateChosen = true;\\n    assignValueToTrigger(formattedSelected);\\n    return dispatch('dateSelected', { date: chosen });\\n  }\\n\\n  function handleKeyPress(evt) {\\n    if (keyCodesArray.indexOf(evt.keyCode) === -1) return;\\n    evt.preventDefault();\\n    switch (evt.keyCode) {\\n      case keyCodes.left:\\n        incrementDayHighlighted(-1);\\n        break;\\n      case keyCodes.up:\\n        incrementDayHighlighted(-7);\\n        break;\\n      case keyCodes.right:\\n        incrementDayHighlighted(1);\\n        break;\\n      case keyCodes.down:\\n        incrementDayHighlighted(7);\\n        break;\\n      case keyCodes.pgup:\\n        incrementMonth(-1);\\n        break;\\n      case keyCodes.pgdown:\\n        incrementMonth(1);\\n        break;\\n      case keyCodes.escape:\\n        // eslint-disable-next-line\\n        close();\\n        break;\\n      case keyCodes.enter:\\n        registerSelection(highlighted);\\n        break;\\n      default:\\n        break;\\n    }\\n  }\\n\\n  function registerClose() {\\n    document.removeEventListener('keydown', handleKeyPress);\\n    dispatch('close');\\n  }\\n\\n  function close() {\\n    popover.close();\\n    registerClose();\\n  }\\n\\n  function registerOpen() {\\n    highlighted = getDefaultHighlighted();\\n    month = selected.getMonth();\\n    year = selected.getFullYear();\\n    document.addEventListener('keydown', handleKeyPress);\\n    dispatch('open');\\n  }\\n</script>\\n\\n<div\\n  class=\\"datepicker\\"\\n  class:open=\\"{isOpen}\\"\\n  class:closing=\\"{isClosing}\\"\\n  style={wrapperStyle}\\n>\\n  <Popover\\n    bind:this=\\"{popover}\\"\\n    bind:open=\\"{isOpen}\\"\\n    bind:shrink=\\"{isClosing}\\"\\n    {trigger}\\n    on:opened=\\"{registerOpen}\\"\\n    on:closed=\\"{registerClose}\\"\\n  >\\n    <div slot=\\"trigger\\">\\n      <slot {selected} {formattedSelected}>\\n        {#if !trigger}\\n        <button class=\\"calendar-button\\" type=\\"button\\">\\n          {formattedSelected}\\n        </button>\\n        {/if}\\n      </slot>\\n    </div>\\n    <div slot=\\"contents\\">\\n      <div class=\\"calendar\\">\\n        <NavBar\\n          {month}\\n          {year}\\n          {canIncrementMonth}\\n          {canDecrementMonth}\\n          {start}\\n          {end}\\n          {monthsOfYear}\\n          on:monthSelected={e => changeMonth(e.detail)}\\n          on:incrementMonth={e => incrementMonth(e.detail)}\\n        />\\n        <div class=\\"legend\\">\\n          {#each sortedDaysOfWeek as day}\\n          <span>{day[1]}</span>\\n          {/each}\\n        </div>\\n        <Month\\n          {visibleMonth}\\n          {selected}\\n          {highlighted}\\n          {shouldShakeDate}\\n          id={visibleMonthId}\\n          on:dateSelected={e => registerSelection(e.detail)}\\n        />\\n      </div>\\n    </div>\\n  </Popover>\\n</div>\\n\\n<style>.datepicker{display:inline-block;margin:0 auto;overflow:visible;text-align:center}.calendar-button{background:var(--button-background-color);border:1px solid var(--button-border-color);border-radius:7px;box-shadow:0 0 3px rgba(0,0,0,.1);color:var(--button-text-color);cursor:pointer;display:block;padding:10px 20px;text-align:center;text-decoration:none;width:300px}*,:after,:before{box-sizing:inherit}.calendar{box-sizing:border-box;overflow:hidden;padding:0 10px 10px;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:100vw}@media (min-width:480px){.calendar{height:auto;max-width:100%;width:340px}}.legend{color:#4a4a4a;margin-bottom:5px;padding:10px 0}.legend span{display:inline-block;text-align:center;width:14.285714%}</style>\\n"],"names":[],"mappings":"AA0TO,yCAAW,CAAC,QAAQ,YAAY,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,SAAS,OAAO,CAAC,WAAW,MAAM,CAAC,8CAAgB,CAAC,WAAW,IAAI,yBAAyB,CAAC,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,IAAI,qBAAqB,CAAC,CAAC,cAAc,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,IAAI,mBAAmB,CAAC,CAAC,OAAO,OAAO,CAAC,QAAQ,KAAK,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,WAAW,MAAM,CAAC,gBAAgB,IAAI,CAAC,MAAM,KAAK,CAAC,8BAAC,+BAAC,MAAM,+BAAC,OAAO,CAAC,WAAW,OAAO,CAAC,uCAAS,CAAC,WAAW,UAAU,CAAC,SAAS,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,QAAQ,CAAC,oBAAoB,IAAI,CAAC,iBAAiB,IAAI,CAAC,gBAAgB,IAAI,CAAC,YAAY,IAAI,CAAC,MAAM,KAAK,CAAC,MAAM,AAAC,WAAW,KAAK,CAAC,CAAC,uCAAS,CAAC,OAAO,IAAI,CAAC,UAAU,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,qCAAO,CAAC,MAAM,OAAO,CAAC,cAAc,GAAG,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC,sBAAO,CAAC,mBAAI,CAAC,QAAQ,YAAY,CAAC,WAAW,MAAM,CAAC,MAAM,UAAU,CAAC"}`
};
var Datepicker = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let months;
  let visibleMonth;
  let visibleMonthId;
  let canIncrementMonth;
  let canDecrementMonth;
  let wrapperStyle;
  createEventDispatcher();
  const today = new Date();
  const oneYear = 1e3 * 60 * 60 * 24 * 365;
  let popover;
  let {format: format22 = "#{m}/#{d}/#{Y}"} = $$props;
  let {start = new Date(Date.now() - oneYear)} = $$props;
  let {end = new Date(Date.now() + oneYear)} = $$props;
  let {selected = today} = $$props;
  let {dateChosen = false} = $$props;
  let {trigger = null} = $$props;
  let {selectableCallback = null} = $$props;
  let {weekStart = 0} = $$props;
  let {daysOfWeek: daysOfWeek2 = [
    ["Sunday", "Sun"],
    ["Monday", "Mon"],
    ["Tuesday", "Tue"],
    ["Wednesday", "Wed"],
    ["Thursday", "Thu"],
    ["Friday", "Fri"],
    ["Saturday", "Sat"]
  ]} = $$props;
  let {monthsOfYear: monthsOfYear2 = [
    ["January", "Jan"],
    ["February", "Feb"],
    ["March", "Mar"],
    ["April", "Apr"],
    ["May", "May"],
    ["June", "Jun"],
    ["July", "Jul"],
    ["August", "Aug"],
    ["September", "Sep"],
    ["October", "Oct"],
    ["November", "Nov"],
    ["December", "Dec"]
  ]} = $$props;
  selected = selected.getTime() < start.getTime() || selected.getTime() > end.getTime() ? start : selected;
  let {style = ""} = $$props;
  let {buttonBackgroundColor = "#fff"} = $$props;
  let {buttonBorderColor = "#eee"} = $$props;
  let {buttonTextColor = "#333"} = $$props;
  let {highlightColor = "#f7901e"} = $$props;
  let {dayBackgroundColor = "none"} = $$props;
  let {dayTextColor = "#4a4a4a"} = $$props;
  let {dayHighlightedBackgroundColor = "#efefef"} = $$props;
  let {dayHighlightedTextColor = "#4a4a4a"} = $$props;
  internationalize({daysOfWeek: daysOfWeek2, monthsOfYear: monthsOfYear2});
  let sortedDaysOfWeek = weekStart === 0 ? daysOfWeek2 : (() => {
    let dow = daysOfWeek2.slice();
    dow.push(dow.shift());
    return dow;
  })();
  let highlighted = today;
  let shouldShakeDate = false;
  let month = today.getMonth();
  let year = today.getFullYear();
  let isOpen = false;
  let isClosing = false;
  today.setHours(0, 0, 0, 0);
  let monthIndex = 0;
  let {formattedSelected} = $$props;
  onMount(() => {
    month = selected.getMonth();
    year = selected.getFullYear();
  });
  if ($$props.format === void 0 && $$bindings.format && format22 !== void 0)
    $$bindings.format(format22);
  if ($$props.start === void 0 && $$bindings.start && start !== void 0)
    $$bindings.start(start);
  if ($$props.end === void 0 && $$bindings.end && end !== void 0)
    $$bindings.end(end);
  if ($$props.selected === void 0 && $$bindings.selected && selected !== void 0)
    $$bindings.selected(selected);
  if ($$props.dateChosen === void 0 && $$bindings.dateChosen && dateChosen !== void 0)
    $$bindings.dateChosen(dateChosen);
  if ($$props.trigger === void 0 && $$bindings.trigger && trigger !== void 0)
    $$bindings.trigger(trigger);
  if ($$props.selectableCallback === void 0 && $$bindings.selectableCallback && selectableCallback !== void 0)
    $$bindings.selectableCallback(selectableCallback);
  if ($$props.weekStart === void 0 && $$bindings.weekStart && weekStart !== void 0)
    $$bindings.weekStart(weekStart);
  if ($$props.daysOfWeek === void 0 && $$bindings.daysOfWeek && daysOfWeek2 !== void 0)
    $$bindings.daysOfWeek(daysOfWeek2);
  if ($$props.monthsOfYear === void 0 && $$bindings.monthsOfYear && monthsOfYear2 !== void 0)
    $$bindings.monthsOfYear(monthsOfYear2);
  if ($$props.style === void 0 && $$bindings.style && style !== void 0)
    $$bindings.style(style);
  if ($$props.buttonBackgroundColor === void 0 && $$bindings.buttonBackgroundColor && buttonBackgroundColor !== void 0)
    $$bindings.buttonBackgroundColor(buttonBackgroundColor);
  if ($$props.buttonBorderColor === void 0 && $$bindings.buttonBorderColor && buttonBorderColor !== void 0)
    $$bindings.buttonBorderColor(buttonBorderColor);
  if ($$props.buttonTextColor === void 0 && $$bindings.buttonTextColor && buttonTextColor !== void 0)
    $$bindings.buttonTextColor(buttonTextColor);
  if ($$props.highlightColor === void 0 && $$bindings.highlightColor && highlightColor !== void 0)
    $$bindings.highlightColor(highlightColor);
  if ($$props.dayBackgroundColor === void 0 && $$bindings.dayBackgroundColor && dayBackgroundColor !== void 0)
    $$bindings.dayBackgroundColor(dayBackgroundColor);
  if ($$props.dayTextColor === void 0 && $$bindings.dayTextColor && dayTextColor !== void 0)
    $$bindings.dayTextColor(dayTextColor);
  if ($$props.dayHighlightedBackgroundColor === void 0 && $$bindings.dayHighlightedBackgroundColor && dayHighlightedBackgroundColor !== void 0)
    $$bindings.dayHighlightedBackgroundColor(dayHighlightedBackgroundColor);
  if ($$props.dayHighlightedTextColor === void 0 && $$bindings.dayHighlightedTextColor && dayHighlightedTextColor !== void 0)
    $$bindings.dayHighlightedTextColor(dayHighlightedTextColor);
  if ($$props.formattedSelected === void 0 && $$bindings.formattedSelected && formattedSelected !== void 0)
    $$bindings.formattedSelected(formattedSelected);
  $$result.css.add(css$7);
  let $$settled;
  let $$rendered;
  do {
    $$settled = true;
    months = getMonths(start, end, selectableCallback, weekStart);
    {
      {
        monthIndex = 0;
        for (let i = 0; i < months.length; i += 1) {
          if (months[i].month === month && months[i].year === year) {
            monthIndex = i;
          }
        }
      }
    }
    visibleMonth = months[monthIndex];
    visibleMonthId = year + month / 100;
    visibleMonth.weeks[visibleMonth.weeks.length - 1].days[6].date;
    visibleMonth.weeks[0].days[0].date;
    canIncrementMonth = monthIndex < months.length - 1;
    canDecrementMonth = monthIndex > 0;
    wrapperStyle = `
    --button-background-color: ${buttonBackgroundColor};
    --button-border-color: ${buttonBorderColor};
    --button-text-color: ${buttonTextColor};
    --highlight-color: ${highlightColor};
    --day-background-color: ${dayBackgroundColor};
    --day-text-color: ${dayTextColor};
    --day-highlighted-background-color: ${dayHighlightedBackgroundColor};
    --day-highlighted-text-color: ${dayHighlightedTextColor};
    ${style}
  `;
    {
      {
        formattedSelected = typeof format22 === "function" ? format22(selected) : formatDate(selected, format22);
      }
    }
    $$rendered = `<div class="${[
      "datepicker svelte-1jpaezg",
      (isOpen ? "open" : "") + " " + (isClosing ? "closing" : "")
    ].join(" ").trim()}"${add_attribute("style", wrapperStyle, 0)}>${validate_component(Popover, "Popover").$$render($$result, {
      trigger,
      this: popover,
      open: isOpen,
      shrink: isClosing
    }, {
      this: ($$value) => {
        popover = $$value;
        $$settled = false;
      },
      open: ($$value) => {
        isOpen = $$value;
        $$settled = false;
      },
      shrink: ($$value) => {
        isClosing = $$value;
        $$settled = false;
      }
    }, {
      contents: () => `<div slot="${"contents"}" class="${"svelte-1jpaezg"}"><div class="${"calendar svelte-1jpaezg"}">${validate_component(NavBar, "NavBar").$$render($$result, {
        month,
        year,
        canIncrementMonth,
        canDecrementMonth,
        start,
        end,
        monthsOfYear: monthsOfYear2
      }, {}, {})}
        <div class="${"legend svelte-1jpaezg"}">${each(sortedDaysOfWeek, (day) => `<span class="${"svelte-1jpaezg"}">${escape3(day[1])}</span>`)}</div>
        ${validate_component(Month, "Month").$$render($$result, {
        visibleMonth,
        selected,
        highlighted,
        shouldShakeDate,
        id: visibleMonthId
      }, {}, {})}</div></div>`,
      trigger: () => `<div slot="${"trigger"}" class="${"svelte-1jpaezg"}">${slots.default ? slots.default({selected, formattedSelected}) : `
        ${!trigger ? `<button class="${"calendar-button svelte-1jpaezg"}" type="${"button"}">${escape3(formattedSelected)}</button>` : ``}
      `}</div>`
    })}
</div>`;
  } while (!$$settled);
  return $$rendered;
});
var css$6 = {
  code: ".container.svelte-1u2yj6b{--tw-shadow:0 10px 15px -3px rgba(0,0,0,0.1),0 4px 6px -2px rgba(0,0,0,0.05);background:#fff;border-radius:.5rem;box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow);max-width:300px;padding:2rem;position:absolute;right:0;top:0;width:100%;z-index:20}h3.svelte-1u2yj6b{font-size:1.5rem;font-weight:700;line-height:2rem;margin-bottom:.75rem}input.svelte-1u2yj6b{--tw-border-opacity:1;border-color:rgba(229,231,235,var(--tw-border-opacity));border-radius:.25rem;border-width:1px;font-size:1rem;font-weight:300;line-height:1.5rem;padding:.5rem;width:100%}input.svelte-1u2yj6b:focus{outline:2px solid transparent;outline-offset:2px}button.svelte-1u2yj6b{--tw-border-opacity:1;--tw-bg-opacity:1;--tw-text-opacity:1;background-color:rgba(0,0,0,var(--tw-bg-opacity));border-color:rgba(0,0,0,var(--tw-border-opacity));border-radius:.25rem;border-width:1px;color:rgba(255,255,255,var(--tw-text-opacity));font-size:.875rem;font-weight:500;line-height:1.25rem;padding:.75rem 2rem}button.svelte-1u2yj6b:focus{outline:2px solid transparent;outline-offset:2px}",
  map: '{"version":3,"file":"AddShiftForm.svelte","sources":["AddShiftForm.svelte"],"sourcesContent":["<script>\\n  import { createEventDispatcher, onMount } from \\"svelte\\";\\n  import { fade } from \\"svelte/transition\\";\\n  import Datepicker from \\"svelte-calendar\\";\\n\\n  const dispatch = createEventDispatcher();\\n\\n  // Props\\n  export let miles,\\n    milesPerGallon,\\n    gasPrice,\\n    grossEarned,\\n    shiftLength,\\n    milesInput;\\n\\n  // Functions\\n  onMount(() => {\\n    setTimeout(() => {\\n      milesInput.focus();\\n    }, 200);\\n  });\\n\\n  function add() {\\n    const gasUsed = miles / milesPerGallon;\\n    const gasCost = gasUsed * gasPrice;\\n    const netEarned = grossEarned - gasCost;\\n    const netPerHour = netEarned / shiftLength;\\n    const netPerMile = netEarned / miles;\\n\\n    dispatch(\\"addShift\\", {\\n      miles,\\n      milesPerGallon,\\n      gasPrice,\\n      grossEarned,\\n      shiftLength,\\n      gasUsed,\\n      gasCost,\\n      netEarned,\\n      netPerHour,\\n      netPerMile,\\n    });\\n  }\\n\\n  function cancel() {\\n    dispatch(\\"cancelAddShift\\");\\n  }\\n</script>\\n\\n<div in:fade={{ duration: 200 }} class=\\"container\\">\\n  <h3>Add Shift Info:</h3>\\n  <form on:submit|preventDefault={add}>\\n    <div class=\\"mb-3\\">\\n      <input\\n        type=\\"text\\"\\n        placeholder=\\"Miles driven\\"\\n        bind:this={milesInput}\\n        bind:value={miles}\\n      />\\n    </div>\\n    <div class=\\"mb-3\\">\\n      <input\\n        type=\\"text\\"\\n        placeholder=\\"Miles per gallon\\"\\n        bind:value={milesPerGallon}\\n      />\\n    </div>\\n    <div class=\\"mb-3\\">\\n      <input type=\\"text\\" placeholder=\\"Shift Length\\" bind:value={shiftLength} />\\n    </div>\\n    <div class=\\"mb-3\\">\\n      <input type=\\"text\\" placeholder=\\"Gas Price\\" bind:value={gasPrice} />\\n    </div>\\n    <div class=\\"mb-3\\">\\n      <input type=\\"text\\" placeholder=\\"Gross Earned\\" bind:value={grossEarned} />\\n    </div>\\n    <div class=\\"mb-3\\">\\n      <Datepicker />\\n    </div>\\n    <div class=\\"flex flex-row justify-between items-center\\">\\n      <button type=\\"submit\\">Add Shift</button>\\n      <a href=\\".\\" on:click|preventDefault={cancel}>Cancel</a>\\n    </div>\\n  </form>\\n</div>\\n\\n<style>.container{--tw-shadow:0 10px 15px -3px rgba(0,0,0,0.1),0 4px 6px -2px rgba(0,0,0,0.05);background:#fff;border-radius:.5rem;box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow);max-width:300px;padding:2rem;position:absolute;right:0;top:0;width:100%;z-index:20}h3{font-size:1.5rem;font-weight:700;line-height:2rem;margin-bottom:.75rem}input{--tw-border-opacity:1;border-color:rgba(229,231,235,var(--tw-border-opacity));border-radius:.25rem;border-width:1px;font-size:1rem;font-weight:300;line-height:1.5rem;padding:.5rem;width:100%}input:focus{outline:2px solid transparent;outline-offset:2px}button{--tw-border-opacity:1;--tw-bg-opacity:1;--tw-text-opacity:1;background-color:rgba(0,0,0,var(--tw-bg-opacity));border-color:rgba(0,0,0,var(--tw-border-opacity));border-radius:.25rem;border-width:1px;color:rgba(255,255,255,var(--tw-text-opacity));font-size:.875rem;font-weight:500;line-height:1.25rem;padding:.75rem 2rem}button:focus{outline:2px solid transparent;outline-offset:2px}</style>\\n"],"names":[],"mappings":"AAqFO,yBAAU,CAAC,YAAY,gEAAgE,CAAC,WAAW,IAAI,CAAC,cAAc,KAAK,CAAC,WAAW,IAAI,uBAAuB,CAAC,eAAe,CAAC,CAAC,IAAI,gBAAgB,CAAC,eAAe,CAAC,CAAC,IAAI,WAAW,CAAC,CAAC,UAAU,KAAK,CAAC,QAAQ,IAAI,CAAC,SAAS,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC,iBAAE,CAAC,UAAU,MAAM,CAAC,YAAY,GAAG,CAAC,YAAY,IAAI,CAAC,cAAc,MAAM,CAAC,oBAAK,CAAC,oBAAoB,CAAC,CAAC,aAAa,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,mBAAmB,CAAC,CAAC,CAAC,cAAc,MAAM,CAAC,aAAa,GAAG,CAAC,UAAU,IAAI,CAAC,YAAY,GAAG,CAAC,YAAY,MAAM,CAAC,QAAQ,KAAK,CAAC,MAAM,IAAI,CAAC,oBAAK,MAAM,CAAC,QAAQ,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,eAAe,GAAG,CAAC,qBAAM,CAAC,oBAAoB,CAAC,CAAC,gBAAgB,CAAC,CAAC,kBAAkB,CAAC,CAAC,iBAAiB,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,eAAe,CAAC,CAAC,CAAC,aAAa,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,mBAAmB,CAAC,CAAC,CAAC,cAAc,MAAM,CAAC,aAAa,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,iBAAiB,CAAC,CAAC,CAAC,UAAU,OAAO,CAAC,YAAY,GAAG,CAAC,YAAY,OAAO,CAAC,QAAQ,MAAM,CAAC,IAAI,CAAC,qBAAM,MAAM,CAAC,QAAQ,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,eAAe,GAAG,CAAC"}'
};
create_ssr_component(($$result, $$props, $$bindings, slots) => {
  createEventDispatcher();
  let {miles} = $$props, {milesPerGallon} = $$props, {gasPrice} = $$props, {grossEarned} = $$props, {shiftLength} = $$props, {milesInput} = $$props;
  onMount(() => {
    setTimeout(() => {
      milesInput.focus();
    }, 200);
  });
  if ($$props.miles === void 0 && $$bindings.miles && miles !== void 0)
    $$bindings.miles(miles);
  if ($$props.milesPerGallon === void 0 && $$bindings.milesPerGallon && milesPerGallon !== void 0)
    $$bindings.milesPerGallon(milesPerGallon);
  if ($$props.gasPrice === void 0 && $$bindings.gasPrice && gasPrice !== void 0)
    $$bindings.gasPrice(gasPrice);
  if ($$props.grossEarned === void 0 && $$bindings.grossEarned && grossEarned !== void 0)
    $$bindings.grossEarned(grossEarned);
  if ($$props.shiftLength === void 0 && $$bindings.shiftLength && shiftLength !== void 0)
    $$bindings.shiftLength(shiftLength);
  if ($$props.milesInput === void 0 && $$bindings.milesInput && milesInput !== void 0)
    $$bindings.milesInput(milesInput);
  $$result.css.add(css$6);
  return `<div class="${"container svelte-1u2yj6b"}"><h3 class="${"svelte-1u2yj6b"}">Add Shift Info:</h3>
  <form><div class="${"mb-3"}"><input type="${"text"}" placeholder="${"Miles driven"}" class="${"svelte-1u2yj6b"}"${add_attribute("this", milesInput, 1)}${add_attribute("value", miles, 1)}></div>
    <div class="${"mb-3"}"><input type="${"text"}" placeholder="${"Miles per gallon"}" class="${"svelte-1u2yj6b"}"${add_attribute("value", milesPerGallon, 1)}></div>
    <div class="${"mb-3"}"><input type="${"text"}" placeholder="${"Shift Length"}" class="${"svelte-1u2yj6b"}"${add_attribute("value", shiftLength, 1)}></div>
    <div class="${"mb-3"}"><input type="${"text"}" placeholder="${"Gas Price"}" class="${"svelte-1u2yj6b"}"${add_attribute("value", gasPrice, 1)}></div>
    <div class="${"mb-3"}"><input type="${"text"}" placeholder="${"Gross Earned"}" class="${"svelte-1u2yj6b"}"${add_attribute("value", grossEarned, 1)}></div>
    <div class="${"mb-3"}">${validate_component(Datepicker, "Datepicker").$$render($$result, {}, {}, {})}</div>
    <div class="${"flex flex-row justify-between items-center"}"><button type="${"submit"}" class="${"svelte-1u2yj6b"}">Add Shift</button>
      <a href="${"."}">Cancel</a></div></form>
</div>`;
});
var css$5 = {
  code: "p.svelte-ffwlhg{font-family:Teko,sans-serif;font-size:1.5rem;line-height:2rem;text-align:center}p.svelte-ffwlhg:first-child{text-align:left}",
  map: '{"version":3,"file":"ShiftDetail.svelte","sources":["ShiftDetail.svelte"],"sourcesContent":["<script>\\n  import { format } from \\"date-fns\\";\\n\\n  // PROPS\\n  export let shift;\\n</script>\\n\\n<div class=\\"item flex flex-row items-center px-5 py-3 rounded mb-3\\">\\n  <div class=\\"flex-1\\">\\n    <p class=\\"text-white\\">\\n      {format(new Date(shift.shiftDate.toDate()), \\"MMM d\\")}\\n    </p>\\n  </div>\\n  <div class=\\"flex-1\\">\\n    <p class=\\"text-white\\">\\n      {shift.miles} miles\\n    </p>\\n  </div>\\n  <div class=\\"flex-1\\">\\n    <p class=\\"text-white\\">\\n      {shift.milesPerGallon} MPG\\n    </p>\\n  </div>\\n  <div class=\\"flex-1\\">\\n    <p class=\\"text-white\\">\\n      {shift.gasCost.toFixed(2)} Gas Cost\\n    </p>\\n  </div>\\n  <div class=\\"flex-1\\">\\n    <p class=\\"text-white\\">\\n      {shift.grossEarned} Gross\\n    </p>\\n  </div>\\n  <div class=\\"flex-1\\">\\n    <p class=\\"text-white\\">\\n      {shift.netPerHour.toFixed(2)} Net Per Hour\\n    </p>\\n  </div>\\n</div>\\n\\n<style>p{font-family:Teko,sans-serif;font-size:1.5rem;line-height:2rem;text-align:center}p:first-child{text-align:left}</style>\\n"],"names":[],"mappings":"AAwCO,eAAC,CAAC,YAAY,IAAI,CAAC,UAAU,CAAC,UAAU,MAAM,CAAC,YAAY,IAAI,CAAC,WAAW,MAAM,CAAC,eAAC,YAAY,CAAC,WAAW,IAAI,CAAC"}'
};
var ShiftDetail = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {shift} = $$props;
  if ($$props.shift === void 0 && $$bindings.shift && shift !== void 0)
    $$bindings.shift(shift);
  $$result.css.add(css$5);
  return `<div class="${"item flex flex-row items-center px-5 py-3 rounded mb-3"}"><div class="${"flex-1"}"><p class="${"text-white svelte-ffwlhg"}">${escape3((0, import_date_fns.format)(new Date(shift.shiftDate.toDate()), "MMM d"))}</p></div>
  <div class="${"flex-1"}"><p class="${"text-white svelte-ffwlhg"}">${escape3(shift.miles)} miles
    </p></div>
  <div class="${"flex-1"}"><p class="${"text-white svelte-ffwlhg"}">${escape3(shift.milesPerGallon)} MPG
    </p></div>
  <div class="${"flex-1"}"><p class="${"text-white svelte-ffwlhg"}">${escape3(shift.gasCost.toFixed(2))} Gas Cost
    </p></div>
  <div class="${"flex-1"}"><p class="${"text-white svelte-ffwlhg"}">${escape3(shift.grossEarned)} Gross
    </p></div>
  <div class="${"flex-1"}"><p class="${"text-white svelte-ffwlhg"}">${escape3(shift.netPerHour.toFixed(2))} Net Per Hour
    </p></div>
</div>`;
});
var css$4 = {
  code: "h3.svelte-1wmwb3s{--tw-text-opacity:1;color:rgba(255,255,255,var(--tw-text-opacity));font-size:1.5rem;font-weight:300;line-height:2rem;padding-bottom:.75rem;padding-top:.75rem;position:relative}.page.svelte-1wmwb3s{background-color:#0b0c10}button.svelte-1wmwb3s{background-color:#66fcf1;border-color:#66fcf1;border-radius:.25rem;border-width:1px;color:#1f2833;font-size:.875rem;font-weight:500;line-height:1.25rem;padding:.5rem 1.5rem;position:relative}button.svelte-1wmwb3s:focus{outline:2px solid transparent;outline-offset:2px}",
  map: '{"version":3,"file":"index.svelte","sources":["index.svelte"],"sourcesContent":["<script context=\\"module\\">\\n  export async function load({ session }) {\\n    const { user } = session;\\n    if (!user) {\\n      return {\\n        status: 302,\\n        redirect: \\"/login\\",\\n      };\\n    }\\n    return {};\\n  }\\n</script>\\n\\n<script>\\n  import { onMount } from \\"svelte\\";\\n  import { session } from \\"$app/stores\\";\\n  import { format, startOfWeek, endOfWeek } from \\"date-fns\\";\\n  import { fade } from \\"svelte/transition\\";\\n  import {\\n    collection,\\n    addDoc,\\n    getFirestore,\\n    query,\\n    where,\\n    getDocs,\\n  } from \\"firebase/firestore\\";\\n\\n  // *** DATA STORES ***\\n  import currentWeekShifts from \\"$lib/stores/current-shifts\\";\\n\\n  // *** COMPONENTS ***\\n  import StatBox from \\"$lib/components/StatBox.svelte\\";\\n  import AddShiftForm from \\"$lib/components/AddShiftForm.svelte\\";\\n  import ShiftDetail from \\"$lib/components/ShiftDetail.svelte\\";\\n\\n  // *** VARS ***\\n  let shiftArray = [];\\n  let shiftMiles = [];\\n  let shiftMpgs = [];\\n  let shiftGasCost = [];\\n  let shiftGrossEarned = [];\\n  let shiftNetPerHour = [];\\n  let showAddShiftForm = false;\\n  let miles, milesPerGallon, gasPrice, grossEarned, shiftLength;\\n  let currentUser = $session.user;\\n\\n  // *** FUNCTIONS ***\\n  onMount(async () => {\\n    const currentWeekStart = format(\\n      startOfWeek(new Date(), { weekStartsOn: 1 }),\\n      \\"T\\"\\n    );\\n    const currentWeekEnd = format(\\n      endOfWeek(new Date(), { weekStartsOn: 1 }),\\n      \\"T\\"\\n    );\\n\\n    console.log(\\"Week: \\", currentWeekStart, currentWeekEnd);\\n    console.log(\\"User: \\", $session.user);\\n\\n    const db = await getFirestore();\\n    const q = await query(\\n      collection(db, \\"shifts\\"),\\n      where(\\n        \\"user\\",\\n        \\"==\\",\\n        $session.user,\\n        \\"&&\\",\\n        \\"`shiftDate`\\",\\n        \\">=\\",\\n        `${currentWeekStart}`,\\n        \\"&&\\",\\n        \\"shiftDate\\",\\n        \\"<=\\",\\n        `${currentWeekEnd}`\\n      )\\n    );\\n    const querySnapshot = await getDocs(q);\\n\\n    querySnapshot.forEach((doc) => {\\n      console.log(\\"Doc 1: \\", doc.data());\\n      const newShift = doc.data();\\n      shiftArray = [...shiftArray, newShift];\\n      shiftArray = shiftArray;\\n    });\\n    currentWeekShifts.setCurrentWeekShifts(shiftArray);\\n  });\\n\\n  function clearState() {\\n    miles = \\"\\";\\n    milesPerGallon = \\"\\";\\n    gasPrice = \\"\\";\\n    grossEarned = \\"\\";\\n    shiftLength = \\"\\";\\n  }\\n\\n  async function handleAddShift(event) {\\n    event.preventDefault();\\n    const shiftData = {\\n      gasUsed: event.detail.gasUsed,\\n      gasCost: event.detail.gasCost,\\n      netEarned: event.detail.netEarned,\\n      netPerHour: event.detail.netPerHour,\\n      miles: event.detail.miles,\\n      milesPerGallon: event.detail.milesPerGallon,\\n      gasPrice: event.detail.gasPrice,\\n      grossEarned: event.detail.grossEarned,\\n      shiftLength: event.detail.shiftLength,\\n      netPerMile: event.detail.netPerMile,\\n      user: $session.user,\\n      shiftDate: new Date(),\\n    };\\n    const db = await getFirestore();\\n    const docRef = await addDoc(collection(db, `shifts`), shiftData);\\n    currentWeekShifts.addCurrentWeekShift(shiftData);\\n    showAddShiftForm = false;\\n    clearState();\\n    console.log(docRef);\\n  }\\n\\n  //  REACTIVITY\\n\\n  // Calculating total miles\\n  $: {\\n    shiftMiles = [];\\n    $currentWeekShifts.forEach((s) => {\\n      shiftMiles = [...shiftMiles, parseFloat(s.miles)];\\n      shiftMiles = shiftMiles;\\n    });\\n  }\\n  $: totalMiles = shiftMiles.reduce((a, b) => a + b, 0);\\n\\n  // Calculating average MPG\\n  $: {\\n    shiftMpgs = [];\\n    $currentWeekShifts.forEach((s) => {\\n      shiftMpgs = [...shiftMpgs, parseFloat(s.milesPerGallon)];\\n      shiftMpgs = shiftMpgs;\\n    });\\n  }\\n  $: mpgs = shiftMpgs.reduce((a, b) => a + b, 0);\\n  $: averageMilesPerGallon = (mpgs / shiftMpgs.length).toFixed(1);\\n\\n  // Calculating gas cost\\n  $: {\\n    shiftGasCost = [];\\n    $currentWeekShifts.forEach((s) => {\\n      shiftGasCost = [...shiftGasCost, s.gasCost];\\n      shiftGasCost = shiftGasCost;\\n    });\\n  }\\n  $: totalGasCost = shiftGasCost.reduce((a, b) => a + b, 0).toFixed(2);\\n\\n  // Calculating gross earned\\n  $: {\\n    shiftGrossEarned = [];\\n    $currentWeekShifts.forEach((s) => {\\n      shiftGrossEarned = [...shiftGrossEarned, parseFloat(s.grossEarned)];\\n      shiftGrossEarned = shiftGrossEarned;\\n    });\\n  }\\n  $: totalGrossEarned = shiftGrossEarned.reduce((a, b) => a + b, 0).toFixed(2);\\n\\n  // Calculating net earned per gour\\n  $: {\\n    shiftNetPerHour = [];\\n    $currentWeekShifts.forEach((s) => {\\n      shiftNetPerHour = [...shiftNetPerHour, parseFloat(s.netPerHour)];\\n      shiftNetPerHour = shiftNetPerHour;\\n    });\\n  }\\n  $: net = shiftNetPerHour.reduce((a, b) => a + b, 0);\\n  $: averageNetPerHour = (net / shiftNetPerHour.length).toFixed(2);\\n</script>\\n\\n<div class=\\"page relative h-screen\\">\\n  <div class=\\"relative w-full max-w-5xl mx-auto pt-28 pb-20\\">\\n    <div class=\\"relative flex flex-row justify-between items-center mb-5\\">\\n      <h3>\\n        This Week\'s Totals & Averages -\\n        {format(startOfWeek(new Date(), { weekStartsOn: 1 }), \\"MMM d\\")}\\n        - {format(\\n          new Date(endOfWeek(new Date(), { weekStartsOn: 1 })),\\n          \\"MMM d\\"\\n        )}\\n      </h3>\\n      {#if !showAddShiftForm}\\n        <button\\n          in:fade={{ delay: 100, duration: 200 }}\\n          on:click={() => (showAddShiftForm = true)}>Add Shift</button\\n        >\\n      {/if}\\n      {#if showAddShiftForm}\\n        <AddShiftForm\\n          on:cancelAddShift={() => (showAddShiftForm = false)}\\n          on:addShift={handleAddShift}\\n          {miles}\\n          {milesPerGallon}\\n          {gasPrice}\\n          {grossEarned}\\n          {shiftLength}\\n        />\\n      {/if}\\n    </div>\\n\\n    <div class=\\"grid grid-cols-5 gap-3 mb-5\\">\\n      <StatBox title=\\"Miles\\" value={totalMiles > 0 ? totalMiles : 0} />\\n      <StatBox\\n        title=\\"MPG\\"\\n        value={averageMilesPerGallon > 0 ? averageMilesPerGallon : 0}\\n      />\\n      <StatBox\\n        title=\\"Gas Cost\\"\\n        value={totalGasCost > 0 ? totalGasCost : 0.0}\\n        isDollarValue\\n      />\\n      <StatBox\\n        title=\\"Gross Earned\\"\\n        value={totalGrossEarned > 0 ? totalGrossEarned : 0.0}\\n        isDollarValue\\n      />\\n      <StatBox\\n        title=\\"Net per Hour\\"\\n        value={averageNetPerHour > 0 ? averageNetPerHour : 0.0}\\n        isDollarValue\\n      />\\n    </div>\\n\\n    <h3>This Week\'s Shifts</h3>\\n\\n    {#each $currentWeekShifts as shift, i}\\n      <ShiftDetail {shift} />\\n    {/each}\\n  </div>\\n</div>\\n\\n<style>h3{--tw-text-opacity:1;color:rgba(255,255,255,var(--tw-text-opacity));font-size:1.5rem;font-weight:300;line-height:2rem;padding-bottom:.75rem;padding-top:.75rem;position:relative}.page{background-color:#0b0c10}button{background-color:#66fcf1;border-color:#66fcf1;border-radius:.25rem;border-width:1px;color:#1f2833;font-size:.875rem;font-weight:500;line-height:1.25rem;padding:.5rem 1.5rem;position:relative}button:focus{outline:2px solid transparent;outline-offset:2px}canvas{background-color:#fff;width:100%}.item{background-color:#1f2833;border-color:#1f2833}</style>\\n"],"names":[],"mappings":"AA4OO,iBAAE,CAAC,kBAAkB,CAAC,CAAC,MAAM,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,iBAAiB,CAAC,CAAC,CAAC,UAAU,MAAM,CAAC,YAAY,GAAG,CAAC,YAAY,IAAI,CAAC,eAAe,MAAM,CAAC,YAAY,MAAM,CAAC,SAAS,QAAQ,CAAC,oBAAK,CAAC,iBAAiB,OAAO,CAAC,qBAAM,CAAC,iBAAiB,OAAO,CAAC,aAAa,OAAO,CAAC,cAAc,MAAM,CAAC,aAAa,GAAG,CAAC,MAAM,OAAO,CAAC,UAAU,OAAO,CAAC,YAAY,GAAG,CAAC,YAAY,OAAO,CAAC,QAAQ,KAAK,CAAC,MAAM,CAAC,SAAS,QAAQ,CAAC,qBAAM,MAAM,CAAC,QAAQ,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,eAAe,GAAG,CAAC"}'
};
async function load$2({session: session2}) {
  const {user} = session2;
  if (!user) {
    return {status: 302, redirect: "/login"};
  }
  return {};
}
var Dashboard = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let totalMiles;
  let mpgs;
  let averageMilesPerGallon;
  let totalGasCost;
  let totalGrossEarned;
  let net;
  let averageNetPerHour;
  let $session, $$unsubscribe_session;
  let $currentWeekShifts, $$unsubscribe_currentWeekShifts;
  $$unsubscribe_session = subscribe(session, (value) => $session = value);
  $$unsubscribe_currentWeekShifts = subscribe(customCurrentWeekShiftsStore, (value) => $currentWeekShifts = value);
  let shiftArray = [];
  let shiftMiles = [];
  let shiftMpgs = [];
  let shiftGasCost = [];
  let shiftGrossEarned = [];
  let shiftNetPerHour = [];
  $session.user;
  onMount(async () => {
    const currentWeekStart = (0, import_date_fns.format)((0, import_date_fns.startOfWeek)(new Date(), {weekStartsOn: 1}), "T");
    const currentWeekEnd = (0, import_date_fns.format)((0, import_date_fns.endOfWeek)(new Date(), {weekStartsOn: 1}), "T");
    console.log("Week: ", currentWeekStart, currentWeekEnd);
    console.log("User: ", $session.user);
    const db = await (0, import_firestore.getFirestore)();
    const q = await (0, import_firestore.query)((0, import_firestore.collection)(db, "shifts"), (0, import_firestore.where)("user", "==", $session.user, "&&", "`shiftDate`", ">=", `${currentWeekStart}`, "&&", "shiftDate", "<=", `${currentWeekEnd}`));
    const querySnapshot = await (0, import_firestore.getDocs)(q);
    querySnapshot.forEach((doc) => {
      console.log("Doc 1: ", doc.data());
      const newShift = doc.data();
      shiftArray = [...shiftArray, newShift];
      shiftArray = shiftArray;
    });
    customCurrentWeekShiftsStore.setCurrentWeekShifts(shiftArray);
  });
  $$result.css.add(css$4);
  {
    {
      shiftMiles = [];
      $currentWeekShifts.forEach((s2) => {
        shiftMiles = [...shiftMiles, parseFloat(s2.miles)];
        shiftMiles = shiftMiles;
      });
    }
  }
  totalMiles = shiftMiles.reduce((a, b) => a + b, 0);
  {
    {
      shiftMpgs = [];
      $currentWeekShifts.forEach((s2) => {
        shiftMpgs = [...shiftMpgs, parseFloat(s2.milesPerGallon)];
        shiftMpgs = shiftMpgs;
      });
    }
  }
  mpgs = shiftMpgs.reduce((a, b) => a + b, 0);
  averageMilesPerGallon = (mpgs / shiftMpgs.length).toFixed(1);
  {
    {
      shiftGasCost = [];
      $currentWeekShifts.forEach((s2) => {
        shiftGasCost = [...shiftGasCost, s2.gasCost];
        shiftGasCost = shiftGasCost;
      });
    }
  }
  totalGasCost = shiftGasCost.reduce((a, b) => a + b, 0).toFixed(2);
  {
    {
      shiftGrossEarned = [];
      $currentWeekShifts.forEach((s2) => {
        shiftGrossEarned = [...shiftGrossEarned, parseFloat(s2.grossEarned)];
        shiftGrossEarned = shiftGrossEarned;
      });
    }
  }
  totalGrossEarned = shiftGrossEarned.reduce((a, b) => a + b, 0).toFixed(2);
  {
    {
      shiftNetPerHour = [];
      $currentWeekShifts.forEach((s2) => {
        shiftNetPerHour = [...shiftNetPerHour, parseFloat(s2.netPerHour)];
        shiftNetPerHour = shiftNetPerHour;
      });
    }
  }
  net = shiftNetPerHour.reduce((a, b) => a + b, 0);
  averageNetPerHour = (net / shiftNetPerHour.length).toFixed(2);
  $$unsubscribe_session();
  $$unsubscribe_currentWeekShifts();
  return `<div class="${"page relative h-screen svelte-1wmwb3s"}"><div class="${"relative w-full max-w-5xl mx-auto pt-28 pb-20"}"><div class="${"relative flex flex-row justify-between items-center mb-5"}"><h3 class="${"svelte-1wmwb3s"}">This Week&#39;s Totals &amp; Averages -
        ${escape3((0, import_date_fns.format)((0, import_date_fns.startOfWeek)(new Date(), {weekStartsOn: 1}), "MMM d"))}
        - ${escape3((0, import_date_fns.format)(new Date((0, import_date_fns.endOfWeek)(new Date(), {weekStartsOn: 1})), "MMM d"))}</h3>
      ${`<button class="${"svelte-1wmwb3s"}">Add Shift</button>`}
      ${``}</div>

    <div class="${"grid grid-cols-5 gap-3 mb-5"}">${validate_component(StatBox, "StatBox").$$render($$result, {
    title: "Miles",
    value: totalMiles > 0 ? totalMiles : 0
  }, {}, {})}
      ${validate_component(StatBox, "StatBox").$$render($$result, {
    title: "MPG",
    value: averageMilesPerGallon > 0 ? averageMilesPerGallon : 0
  }, {}, {})}
      ${validate_component(StatBox, "StatBox").$$render($$result, {
    title: "Gas Cost",
    value: totalGasCost > 0 ? totalGasCost : 0,
    isDollarValue: true
  }, {}, {})}
      ${validate_component(StatBox, "StatBox").$$render($$result, {
    title: "Gross Earned",
    value: totalGrossEarned > 0 ? totalGrossEarned : 0,
    isDollarValue: true
  }, {}, {})}
      ${validate_component(StatBox, "StatBox").$$render($$result, {
    title: "Net per Hour",
    value: averageNetPerHour > 0 ? averageNetPerHour : 0,
    isDollarValue: true
  }, {}, {})}</div>

    <h3 class="${"svelte-1wmwb3s"}">This Week&#39;s Shifts</h3>

    ${each($currentWeekShifts, (shift, i) => `${validate_component(ShiftDetail, "ShiftDetail").$$render($$result, {shift}, {}, {})}`)}</div>
</div>`;
});
var index$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Dashboard,
  load: load$2
});
var css$3 = {
  code: "h3.svelte-1x396nc{--tw-text-opacity:1;color:rgba(255,255,255,var(--tw-text-opacity));font-size:1.875rem;line-height:2.25rem;margin-bottom:1.5rem;text-align:center;text-transform:uppercase}h3.svelte-1x396nc,input.svelte-1x396nc{font-weight:300}input.svelte-1x396nc{background-color:transparent;border-color:#c5c6c7;border-radius:9999px;border-width:1px;color:#fff;font-size:1rem;line-height:1.5rem;padding:.75rem 1.25rem;width:100%}input.svelte-1x396nc:focus{outline:none}button.svelte-1x396nc{background-color:#66fcf1;border:1px solid #66fcf1;border-radius:9999px;color:#1f2833;font-weight:700;padding:.75rem 2rem;width:100%}p.svelte-1x396nc{--tw-text-opacity:1;color:rgba(255,255,255,var(--tw-text-opacity));font-size:.875rem;font-weight:300;line-height:1.25rem;margin-top:1rem;text-align:center}.form_container.svelte-1x396nc{background-color:#1f2833}.form_link.svelte-1x396nc{color:#45a29e}.form_link.svelte-1x396nc:hover{text-decoration:underline}",
  map: '{"version":3,"file":"Register.svelte","sources":["Register.svelte"],"sourcesContent":["<script>\\n  import { createEventDispatcher } from \\"svelte\\";\\n\\n  const dispatch = createEventDispatcher();\\n\\n  // Props\\n  export let email, password, confirmPassword, confirmPasswordInput;\\n</script>\\n\\n<div class=\\"w-full max-w-sm mx-auto mb-20\\">\\n  <div class=\\"form_container p-10 rounded-xl\\">\\n    <h3>Register</h3>\\n    <form\\n      on:submit|preventDefault={() => dispatch(\\"register\\", { email, password })}\\n    >\\n      <div class=\\"mb-3\\">\\n        <input type=\\"email\\" bind:value={email} placeholder=\\"Add your email\\" />\\n      </div>\\n      <div class=\\"mb-3\\">\\n        <input\\n          type=\\"password\\"\\n          bind:value={password}\\n          placeholder=\\"Add a password\\"\\n        />\\n      </div>\\n      <div class=\\"mb-3\\">\\n        <input\\n          type=\\"password\\"\\n          bind:this={confirmPasswordInput}\\n          bind:value={confirmPassword}\\n          placeholder=\\"Confirm your password\\"\\n        />\\n      </div>\\n      <button type=\\"submit\\">Register</button>\\n    </form>\\n    <p>Already have an account? <a href=\\"login\\" class=\\"form_link\\">Login</a></p>\\n  </div>\\n</div>\\n\\n<style>h3{--tw-text-opacity:1;color:rgba(255,255,255,var(--tw-text-opacity));font-size:1.875rem;line-height:2.25rem;margin-bottom:1.5rem;text-align:center;text-transform:uppercase}h3,input{font-weight:300}input{background-color:transparent;border-color:#c5c6c7;border-radius:9999px;border-width:1px;color:#fff;font-size:1rem;line-height:1.5rem;padding:.75rem 1.25rem;width:100%}input:focus{outline:none}button{background-color:#66fcf1;border:1px solid #66fcf1;border-radius:9999px;color:#1f2833;font-weight:700;padding:.75rem 2rem;width:100%}p{--tw-text-opacity:1;color:rgba(255,255,255,var(--tw-text-opacity));font-size:.875rem;font-weight:300;line-height:1.25rem;margin-top:1rem;text-align:center}.form_container{background-color:#1f2833}.form_link{color:#45a29e}.form_link:hover{text-decoration:underline}</style>\\n"],"names":[],"mappings":"AAuCO,iBAAE,CAAC,kBAAkB,CAAC,CAAC,MAAM,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,iBAAiB,CAAC,CAAC,CAAC,UAAU,QAAQ,CAAC,YAAY,OAAO,CAAC,cAAc,MAAM,CAAC,WAAW,MAAM,CAAC,eAAe,SAAS,CAAC,iBAAE,CAAC,oBAAK,CAAC,YAAY,GAAG,CAAC,oBAAK,CAAC,iBAAiB,WAAW,CAAC,aAAa,OAAO,CAAC,cAAc,MAAM,CAAC,aAAa,GAAG,CAAC,MAAM,IAAI,CAAC,UAAU,IAAI,CAAC,YAAY,MAAM,CAAC,QAAQ,MAAM,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,oBAAK,MAAM,CAAC,QAAQ,IAAI,CAAC,qBAAM,CAAC,iBAAiB,OAAO,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,MAAM,CAAC,MAAM,OAAO,CAAC,YAAY,GAAG,CAAC,QAAQ,MAAM,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,gBAAC,CAAC,kBAAkB,CAAC,CAAC,MAAM,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,iBAAiB,CAAC,CAAC,CAAC,UAAU,OAAO,CAAC,YAAY,GAAG,CAAC,YAAY,OAAO,CAAC,WAAW,IAAI,CAAC,WAAW,MAAM,CAAC,8BAAe,CAAC,iBAAiB,OAAO,CAAC,yBAAU,CAAC,MAAM,OAAO,CAAC,yBAAU,MAAM,CAAC,gBAAgB,SAAS,CAAC"}'
};
var Register = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  createEventDispatcher();
  let {email} = $$props, {password} = $$props, {confirmPassword} = $$props, {confirmPasswordInput} = $$props;
  if ($$props.email === void 0 && $$bindings.email && email !== void 0)
    $$bindings.email(email);
  if ($$props.password === void 0 && $$bindings.password && password !== void 0)
    $$bindings.password(password);
  if ($$props.confirmPassword === void 0 && $$bindings.confirmPassword && confirmPassword !== void 0)
    $$bindings.confirmPassword(confirmPassword);
  if ($$props.confirmPasswordInput === void 0 && $$bindings.confirmPasswordInput && confirmPasswordInput !== void 0)
    $$bindings.confirmPasswordInput(confirmPasswordInput);
  $$result.css.add(css$3);
  return `<div class="${"w-full max-w-sm mx-auto mb-20"}"><div class="${"form_container p-10 rounded-xl svelte-1x396nc"}"><h3 class="${"svelte-1x396nc"}">Register</h3>
    <form><div class="${"mb-3"}"><input type="${"email"}" placeholder="${"Add your email"}" class="${"svelte-1x396nc"}"${add_attribute("value", email, 1)}></div>
      <div class="${"mb-3"}"><input type="${"password"}" placeholder="${"Add a password"}" class="${"svelte-1x396nc"}"${add_attribute("value", password, 1)}></div>
      <div class="${"mb-3"}"><input type="${"password"}" placeholder="${"Confirm your password"}" class="${"svelte-1x396nc"}"${add_attribute("this", confirmPasswordInput, 1)}${add_attribute("value", confirmPassword, 1)}></div>
      <button type="${"submit"}" class="${"svelte-1x396nc"}">Register</button></form>
    <p class="${"svelte-1x396nc"}">Already have an account? <a href="${"login"}" class="${"form_link svelte-1x396nc"}">Login</a></p></div>
</div>`;
});
var css$2 = {
  code: ".page.svelte-1gu0xuj{background-color:#0b0c10}",
  map: '{"version":3,"file":"index.svelte","sources":["index.svelte"],"sourcesContent":["<script context=\\"module\\">\\n  export async function load({ session }) {\\n    const { user } = session;\\n    if (user) {\\n      return {\\n        status: 302,\\n        redirect: \\"/dashboard\\",\\n      };\\n    }\\n    return {};\\n  }\\n</script>\\n\\n<script>\\n  import { goto } from \\"$app/navigation\\";\\n  import { session } from \\"$app/stores\\";\\n  import { collection, addDoc, getFirestore } from \\"firebase/firestore\\";\\n  import { getAuth, createUserWithEmailAndPassword } from \\"firebase/auth\\";\\n\\n  // Components\\n  import Register from \\"$lib/components/Register.svelte\\";\\n\\n  // Vars\\n  let email, password, confirmPassword;\\n  let validPassword = null;\\n  let confirmPasswordInput;\\n\\n  let currentUser;\\n  let userId;\\n\\n  // Functions\\n  function validatePassword() {\\n    if (password !== confirmPassword) {\\n      validPassword = false;\\n    } else {\\n      validPassword = true;\\n    }\\n  }\\n\\n  async function handleRegister(event) {\\n    event.preventDefault();\\n    validatePassword();\\n\\n    if (!validPassword) {\\n      confirmPassword = \\"\\";\\n      // setTimeout(() => {\\n      //   confirmPasswordInput.focus();\\n      // }, 200);\\n      // return;\\n    }\\n\\n    password = event.detail.password;\\n    email = event.detail.email;\\n\\n    try {\\n      const auth = getAuth();\\n      await createUserWithEmailAndPassword(auth, email, password).then(\\n        (res) => {\\n          console.log(\\"Res\\", res);\\n          $session.user = res.user.uid;\\n          console.log(\\"Ses: \\", $session.user);\\n        }\\n      );\\n      goto(\\"dashboard\\");\\n    } catch (err) {\\n      let message = err.message || err;\\n      console.log(message);\\n    }\\n\\n    try {\\n      const userData = {\\n        userId: `${$session.user}`,\\n      };\\n      const db = await getFirestore();\\n      const docRef = await addDoc(collection(db, \\"users\\"), { userData });\\n      console.log(docRef.id);\\n    } catch (err) {\\n      console.log(err);\\n    }\\n  }\\n</script>\\n\\n<div class=\\"page w-full h-screen flex justify-center items-center\\">\\n  <Register\\n    {email}\\n    {password}\\n    {confirmPassword}\\n    {confirmPasswordInput}\\n    on:register={handleRegister}\\n  />\\n</div>\\n\\n<style>.page{background-color:#0b0c10}</style>\\n"],"names":[],"mappings":"AA4FO,oBAAK,CAAC,iBAAiB,OAAO,CAAC"}'
};
async function load$1({session: session2}) {
  const {user} = session2;
  if (user) {
    return {status: 302, redirect: "/dashboard"};
  }
  return {};
}
var Register_1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$unsubscribe_session;
  $$unsubscribe_session = subscribe(session, (value) => value);
  let email, password, confirmPassword;
  let confirmPasswordInput;
  $$result.css.add(css$2);
  $$unsubscribe_session();
  return `<div class="${"page w-full h-screen flex justify-center items-center svelte-1gu0xuj"}">${validate_component(Register, "Register").$$render($$result, {
    email,
    password,
    confirmPassword,
    confirmPasswordInput
  }, {}, {})}
</div>`;
});
var index$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Register_1,
  load: load$1
});
var css$1 = {
  code: "h3.svelte-1x396nc{--tw-text-opacity:1;color:rgba(255,255,255,var(--tw-text-opacity));font-size:1.875rem;line-height:2.25rem;margin-bottom:1.5rem;text-align:center;text-transform:uppercase}h3.svelte-1x396nc,input.svelte-1x396nc{font-weight:300}input.svelte-1x396nc{background-color:transparent;border-color:#c5c6c7;border-radius:9999px;border-width:1px;color:#fff;font-size:1rem;line-height:1.5rem;padding:.75rem 1.25rem;width:100%}input.svelte-1x396nc:focus{outline:none}button.svelte-1x396nc{background-color:#66fcf1;border:1px solid #66fcf1;border-radius:9999px;color:#1f2833;font-weight:700;padding:.75rem 2rem;width:100%}p.svelte-1x396nc{--tw-text-opacity:1;color:rgba(255,255,255,var(--tw-text-opacity));font-size:.875rem;font-weight:300;line-height:1.25rem;margin-top:1rem;text-align:center}.form_container.svelte-1x396nc{background-color:#1f2833}.form_link.svelte-1x396nc{color:#45a29e}.form_link.svelte-1x396nc:hover{text-decoration:underline}",
  map: `{"version":3,"file":"Login.svelte","sources":["Login.svelte"],"sourcesContent":["<script>\\n  import { createEventDispatcher } from \\"svelte\\";\\n\\n  const dispatch = createEventDispatcher();\\n\\n  // Props\\n  export let email, password;\\n</script>\\n\\n<div class=\\"w-full max-w-sm mx-auto mb-20\\">\\n  <div class=\\"form_container px-10 py-10 rounded-xl\\">\\n    <h3>Sign In</h3>\\n    <form\\n      on:submit|preventDefault={() => dispatch(\\"login\\", { email, password })}\\n    >\\n      <div class=\\"mb-4\\">\\n        <input type=\\"email\\" bind:value={email} placeholder=\\"Add your email\\" />\\n      </div>\\n      <div class=\\"mb-4\\">\\n        <input\\n          type=\\"password\\"\\n          bind:value={password}\\n          placeholder=\\"Add a password\\"\\n        />\\n      </div>\\n      <button type=\\"submit\\" class=\\"focus:outline-none\\">Sign In</button>\\n    </form>\\n    <p>\\n      Don't have an account? <a href=\\"register\\" class=\\"form_link\\">Register</a>\\n    </p>\\n  </div>\\n</div>\\n\\n<style>h3{--tw-text-opacity:1;color:rgba(255,255,255,var(--tw-text-opacity));font-size:1.875rem;line-height:2.25rem;margin-bottom:1.5rem;text-align:center;text-transform:uppercase}h3,input{font-weight:300}input{background-color:transparent;border-color:#c5c6c7;border-radius:9999px;border-width:1px;color:#fff;font-size:1rem;line-height:1.5rem;padding:.75rem 1.25rem;width:100%}input:focus{outline:none}button{background-color:#66fcf1;border:1px solid #66fcf1;border-radius:9999px;color:#1f2833;font-weight:700;padding:.75rem 2rem;width:100%}p{--tw-text-opacity:1;color:rgba(255,255,255,var(--tw-text-opacity));font-size:.875rem;font-weight:300;line-height:1.25rem;margin-top:1rem;text-align:center}.form_container{background-color:#1f2833}.form_link{color:#45a29e}.form_link:hover{text-decoration:underline}</style>\\n"],"names":[],"mappings":"AAiCO,iBAAE,CAAC,kBAAkB,CAAC,CAAC,MAAM,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,iBAAiB,CAAC,CAAC,CAAC,UAAU,QAAQ,CAAC,YAAY,OAAO,CAAC,cAAc,MAAM,CAAC,WAAW,MAAM,CAAC,eAAe,SAAS,CAAC,iBAAE,CAAC,oBAAK,CAAC,YAAY,GAAG,CAAC,oBAAK,CAAC,iBAAiB,WAAW,CAAC,aAAa,OAAO,CAAC,cAAc,MAAM,CAAC,aAAa,GAAG,CAAC,MAAM,IAAI,CAAC,UAAU,IAAI,CAAC,YAAY,MAAM,CAAC,QAAQ,MAAM,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,oBAAK,MAAM,CAAC,QAAQ,IAAI,CAAC,qBAAM,CAAC,iBAAiB,OAAO,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,MAAM,CAAC,MAAM,OAAO,CAAC,YAAY,GAAG,CAAC,QAAQ,MAAM,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,gBAAC,CAAC,kBAAkB,CAAC,CAAC,MAAM,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,iBAAiB,CAAC,CAAC,CAAC,UAAU,OAAO,CAAC,YAAY,GAAG,CAAC,YAAY,OAAO,CAAC,WAAW,IAAI,CAAC,WAAW,MAAM,CAAC,8BAAe,CAAC,iBAAiB,OAAO,CAAC,yBAAU,CAAC,MAAM,OAAO,CAAC,yBAAU,MAAM,CAAC,gBAAgB,SAAS,CAAC"}`
};
var Login = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  createEventDispatcher();
  let {email} = $$props, {password} = $$props;
  if ($$props.email === void 0 && $$bindings.email && email !== void 0)
    $$bindings.email(email);
  if ($$props.password === void 0 && $$bindings.password && password !== void 0)
    $$bindings.password(password);
  $$result.css.add(css$1);
  return `<div class="${"w-full max-w-sm mx-auto mb-20"}"><div class="${"form_container px-10 py-10 rounded-xl svelte-1x396nc"}"><h3 class="${"svelte-1x396nc"}">Sign In</h3>
    <form><div class="${"mb-4"}"><input type="${"email"}" placeholder="${"Add your email"}" class="${"svelte-1x396nc"}"${add_attribute("value", email, 1)}></div>
      <div class="${"mb-4"}"><input type="${"password"}" placeholder="${"Add a password"}" class="${"svelte-1x396nc"}"${add_attribute("value", password, 1)}></div>
      <button type="${"submit"}" class="${"focus:outline-none svelte-1x396nc"}">Sign In</button></form>
    <p class="${"svelte-1x396nc"}">Don&#39;t have an account? <a href="${"register"}" class="${"form_link svelte-1x396nc"}">Register</a></p></div>
</div>`;
});
var css = {
  code: ".page.svelte-1gu0xuj{background-color:#0b0c10}",
  map: '{"version":3,"file":"index.svelte","sources":["index.svelte"],"sourcesContent":["<script context=\\"module\\">\\n  export async function load({ session }) {\\n    const { user } = session;\\n    if (user) {\\n      return {\\n        status: 302,\\n        redirect: \\"/dashboard\\",\\n      };\\n    }\\n    return {};\\n  }\\n</script>\\n\\n<script>\\n  import { goto } from \\"$app/navigation\\";\\n  import { session } from \\"$app/stores\\";\\n  import { getAuth, signInWithEmailAndPassword } from \\"firebase/auth\\";\\n\\n  // Components\\n  import Login from \\"$lib/components/Login.svelte\\";\\n\\n  // Vars\\n  let email,\\n    password = \\"\\";\\n\\n  // Functions\\n  async function handleLogin(event) {\\n    event.preventDefault();\\n\\n    email = event.detail.email;\\n    password = event.detail.password;\\n\\n    try {\\n      const auth = await getAuth();\\n      await signInWithEmailAndPassword(auth, email, password).then((res) => {\\n        $session.user = res.user.uid;\\n        goto(\\"dashboard\\");\\n      });\\n    } catch (err) {\\n      const errorCode = err.code;\\n      const errorMessage = err.message;\\n    }\\n  }\\n</script>\\n\\n<div class=\\"page w-full h-screen flex justify-center items-center\\">\\n  <Login {email} {password} on:login={handleLogin} />\\n</div>\\n\\n<style>.page{background-color:#0b0c10}</style>\\n"],"names":[],"mappings":"AAiDO,oBAAK,CAAC,iBAAiB,OAAO,CAAC"}'
};
async function load({session: session2}) {
  const {user} = session2;
  if (user) {
    return {status: 302, redirect: "/dashboard"};
  }
  return {};
}
var Login_1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$unsubscribe_session;
  $$unsubscribe_session = subscribe(session, (value) => value);
  let email, password = "";
  $$result.css.add(css);
  $$unsubscribe_session();
  return `<div class="${"page w-full h-screen flex justify-center items-center svelte-1gu0xuj"}">${validate_component(Login, "Login").$$render($$result, {email, password}, {}, {})}
</div>`;
});
var index = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Login_1,
  load
});

// .svelte-kit/vercel/entry.js
var entry_default = async (req, res) => {
  const {pathname, searchParams} = new URL(req.url || "", "http://localhost");
  const rendered = await render({
    method: req.method,
    headers: req.headers,
    path: pathname,
    query: searchParams,
    rawBody: await getRawBody(req)
  });
  if (rendered) {
    const {status, headers, body} = rendered;
    return res.writeHead(status, headers).end(body);
  }
  return res.writeHead(404).end();
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
/*!
 * JavaScript Cookie v2.2.1
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2018 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
